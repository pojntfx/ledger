From 112a54a184e11dfe12a0e5d36e663b340fdf1aa7 Mon Sep 17 00:00:00 2001
From: Felicitas Pojtinger <felicitas@pojtinger.com>
Date: Tue, 14 Oct 2025 23:52:01 -0700
Subject: [PATCH] Merge remote-tracking branch 'upstream/main' into add-method-overrides

Signed-off-by: Felicitas Pojtinger <felicitas@pojtinger.com>
---
diff --git a/gen.go b/gen.go
index 97557c051e7e8f2bd3d227416ff42b04345333d7..40bf95b64316d389cbb40d78b006ebedbc89d3b0 100644
--- a/gen.go
+++ b/gen.go
@@ -6,8 +6,8 @@ 	"path/filepath"
 	"strings"
 	"text/template"
 
-	"github.com/jwijenbergh/puregotk/internal/gir/pass"
-	"github.com/jwijenbergh/puregotk/internal/gir/util"
+	"github.com/jwijenbergh/puregotk/pkg/gir/pass"
+	"github.com/jwijenbergh/puregotk/pkg/gir/util"
 )
 
 //go:generate go run gen.go
diff --git a/internal/core/core.go b/internal/core/core.go
index f6888bc8776e203e23b63de6b1f409e6a06186d6..2782d3264d37d3a4b41ae62f2851d024cd2cedc8 100644
--- a/internal/core/core.go
+++ b/internal/core/core.go
@@ -38,6 +38,7 @@ 	"arm64": {"/usr/lib/aarch64-linux-gnu/", "/usr/lib64/", "/usr/lib/"},
 }
 
 // names is a lookup from library names to shared object filenames
+// This is populated dynamically via SetSharedLibrary and has defaults for common libraries
 var names = map[string][]string{
 	"ADW":        {"libadwaita-1.so"},
 	"CAIRO":      {"libcairo.so"},
@@ -60,7 +61,7 @@ 	"GDK": "GTK",
 }
 
 // pkgConfNames is a lookup from library names to pkg-config library names
-// TODO: Get this from the package name in the gir files with a fallback to gtk's package name
+// This is populated dynamically via SetPackageName and has defaults for common libraries
 var pkgConfNames = map[string]string{
 	"ADW":        "libadwaita-1",
 	"CAIRO":      "cairo",
@@ -73,6 +74,24 @@ 	"GRAPHENE":   "graphene-gobject-1.0",
 	"GTK":        "gtk4",
 	"PANGO":      "pango",
 	"PANGOCAIRO": "pangocairo",
+}
+
+// SetPackageName registers a pkg-config package name for a library.
+// This is used by the code generator to set package names from GIR files.
+// It won't override existing entries to preserve defaults.
+func SetPackageName(libName, pkgName string) {
+	if _, exists := pkgConfNames[libName]; !exists && pkgName != "" {
+		pkgConfNames[libName] = pkgName
+	}
+}
+
+// SetSharedLibrary registers a shared library name for a library.
+// This is used by the code generator to set library names from GIR files.
+// It won't override existing entries to preserve defaults.
+func SetSharedLibrary(libName, sharedLib string) {
+	if _, exists := names[libName]; !exists && sharedLib != "" {
+		names[libName] = []string{sharedLib}
+	}
 }
 
 // findSo tries to find a shared object from a path and a library name
diff --git a/internal/gir/pass/pass.go b/internal/gir/pass/pass.go
index d90bbe3e0a56011e7e7dbbb40459b4f5c63bd5d2..9b76f25f94fe3decd35c8c787cc4476842a01ace 100644
--- a/internal/gir/pass/pass.go
+++ b/internal/gir/pass/pass.go
@@ -63,6 +63,21 @@ 	}
 	for _, inter := range ns.Interfaces {
 		p.Types.Add(ns.Name, inter.Name, types.InterfacesType, inter)
 	}
+	for _, alias := range ns.Aliases {
+		// Check what the alias points to and use the same type
+		aliasTarget := alias.Type.Name
+		if aliasTarget != "" {
+			targetKind := p.Types.Kind(ns.Name, aliasTarget)
+			if targetKind != types.UnknownType {
+				p.Types.Add(ns.Name, alias.Name, targetKind, alias)
+			} else {
+				// If we don't know the target type yet, default to alias type
+				p.Types.Add(ns.Name, alias.Name, types.AliasType, alias)
+			}
+		} else {
+			p.Types.Add(ns.Name, alias.Name, types.AliasType, alias)
+		}
+	}
 }
 
 // First does a "first pass" meaning it collects basic type information for all the repositories
@@ -364,6 +379,14 @@ 		})
 	}
 
 	pkgName := strings.ToLower(ns.Name)
+
+	var pkgConfigName string
+	if len(r.Packages) > 0 {
+		pkgConfigName = r.Packages[0].Name
+	}
+
+	sharedLibrary := ns.SharedLibrary
+
 	for _, fn := range files {
 		methods := 0
 		for _, i := range interfaces[fn] {
@@ -383,17 +406,19 @@ 		// as they should only be loaded when there are classes
 		needsInit := (len(functions[fn]) + methods) > 0
 
 		args := types.TemplateArg{
-			PkgName:    pkgName,
-			PkgEnv:     strings.ToUpper(pkgName),
-			NeedsInit:  needsInit,
-			Aliases:    aliases[fn],
-			Callbacks:  callbacks[fn],
-			Records:    records[fn],
-			Enums:      enums[fn],
-			Constants:  constants[fn],
-			Functions:  functions[fn],
-			Interfaces: interfaces[fn],
-			Classes:    classes[fn],
+			PkgName:       pkgName,
+			PkgEnv:        strings.ToUpper(pkgName),
+			PkgConfigName: pkgConfigName,
+			SharedLibrary: sharedLibrary,
+			NeedsInit:     needsInit,
+			Aliases:       aliases[fn],
+			Callbacks:     callbacks[fn],
+			Records:       records[fn],
+			Enums:         enums[fn],
+			Constants:     constants[fn],
+			Functions:     functions[fn],
+			Interfaces:    interfaces[fn],
+			Classes:       classes[fn],
 		}
 
 		os.MkdirAll(fmt.Sprintf(dir+"/%s", pkgName), 0o755)
diff --git a/internal/gir/types/template.go b/internal/gir/types/template.go
index 7bb793d0464b6b60707dc981ec6721619c5fe3ca..b0f4cd0b4b3193076c853e101edb0f08f40fdb7a 100644
--- a/internal/gir/types/template.go
+++ b/internal/gir/types/template.go
@@ -29,7 +29,7 @@ 	// API are the arguments as suitable for a Go API
 	API argsTemplate
 }
 
-func (f *funcArgsTemplate) AddAPI(t string, n string, k Kind, ns string) {
+func (f *funcArgsTemplate) AddAPI(t string, n string, k Kind, ns string, nullable bool) {
 	c := n
 	stars := strings.Count(t, "*")
 	gobjectNs := "gobject."
@@ -42,7 +42,11 @@ 		glibNs = ""
 	}
 	switch k {
 	case CallbackType:
-		c = fmt.Sprintf("%sNewCallback(%s)", glibNs, n)
+		if nullable {
+			c = fmt.Sprintf("%sNewCallbackNullable(%s)", glibNs, n)
+		} else {
+			c = fmt.Sprintf("%sNewCallback(%s)", glibNs, n)
+		}
 		t = "*" + t
 	case ClassesType:
 		if stars == 0 {
@@ -141,7 +145,7 @@
 	// Get a suitable variable name
 	varName := p.VarName()
 
-	f.AddAPI(goType, varName, kind, ns)
+	f.AddAPI(goType, varName, kind, ns, p.Nullable)
 	f.AddPure(goType, varName, kind)
 }
 
@@ -422,6 +426,10 @@ 	// PkgName is the name of the package, declared at the top-level
 	PkgName string
 	// PkgEnv is the name of the package in the load environment variable
 	PkgEnv string
+	// PkgConfigName is the pkg-config package name from the GIR file
+	PkgConfigName string
+	// SharedLibrary is the shared library name from the GIR file
+	SharedLibrary string
 	// NeedsInit declares whether or not this file needs an init code to register functions with purego
 	NeedsInit bool
 	// Imports defines the package imports that we need
diff --git a/pkg/core/core.go b/pkg/core/core.go
new file mode 100644
index 0000000000000000000000000000000000000000..80619ce44426557ca9bc23c70748cc92485abd27
--- /dev/null
+++ b/pkg/core/core.go
@@ -0,0 +1,11 @@
+package core
+
+import "github.com/jwijenbergh/puregotk/internal/core"
+
+var (
+	PuregoSafeRegister = core.PuregoSafeRegister
+	GetPath            = core.GetPath
+	GoString           = core.GoString
+	SetPackageName     = core.SetPackageName
+	SetSharedLibrary   = core.SetSharedLibrary
+)
diff --git a/pkg/gir/pass/pass.go b/pkg/gir/pass/pass.go
new file mode 100644
index 0000000000000000000000000000000000000000..730e7576bb172daf3d4415508531b554e53c0697
--- /dev/null
+++ b/pkg/gir/pass/pass.go
@@ -0,0 +1,11 @@
+package pass
+
+import "github.com/jwijenbergh/puregotk/internal/gir/pass"
+
+type (
+	Pass = pass.Pass
+)
+
+var (
+	New = pass.New
+)
diff --git a/pkg/gir/util/util.go b/pkg/gir/util/util.go
index 8464d3ddf428488bb342011dcf06b69df5b80f0f..1478795ff5c53eedd2f09a9558380941fac2f00a 100644
--- a/pkg/gir/util/util.go
+++ b/pkg/gir/util/util.go
@@ -3,10 +3,10 @@
 import "github.com/jwijenbergh/puregotk/internal/gir/util"
 
 var (
-	ConvertArgs            = util.ConvertArgs
-	ConvertArgsComma       = util.ConvertArgsComma
-	ConvertCallbackArgs    = util.ConvertCallbackArgs
-	ConvertArgsCommaDeref  = util.ConvertArgsCommaDeref
-	ConvertArgsDeref       = util.ConvertArgsDeref
+	ConvertArgs              = util.ConvertArgs
+	ConvertArgsComma         = util.ConvertArgsComma
+	ConvertCallbackArgs      = util.ConvertCallbackArgs
+	ConvertArgsCommaDeref    = util.ConvertArgsCommaDeref
+	ConvertArgsDeref         = util.ConvertArgsDeref
 	ConvertCallbackArgsNoErr = util.ConvertCallbackArgsNoErr
-)
\ No newline at end of file
+)
diff --git a/templates/glib b/templates/glib
index c37715351160f0b06ad79986484bbbf2f1f473b4..3b4ec03ea5c1823e5bf78eb6e4a0ebfee5ec558e 100644
--- a/templates/glib
+++ b/templates/glib
@@ -2,10 +2,11 @@ package glib
 
 import (
 	"fmt"
+	"reflect"
 	"sync"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var callbacks = struct {
@@ -44,6 +45,16 @@
 // NewCallback is an alias to purego.NewCallback
 func NewCallback(fnPtr interface{}) uintptr {
 	return purego.NewCallbackFnPtr(fnPtr)
+}
+
+// NewCallbackNullable is an alias to purego.NewCallback that returns a null pointer for null functions
+func NewCallbackNullable(fn interface{}) uintptr {
+	val := reflect.ValueOf(fn)
+	if val.IsNil() {
+		return 0
+	}
+
+	return NewCallback(fn)
 }
 
 func (e *Error) Error() string {
diff --git a/templates/go b/templates/go
index bc0617e263eaf40f0eb3caf60d1242e2d5c80961..0748d14d623f5a163c899a5b31016a68dd10b886 100644
--- a/templates/go
+++ b/templates/go
@@ -25,7 +25,7 @@ {{- if $NeedsPurego}}
 	"github.com/jwijenbergh/purego"
 {{- end}}
 {{- if .NeedsInit}}
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 {{- end}}
 )
 {{end}}
@@ -332,6 +332,12 @@
 {{if .NeedsInit}}
 
 func init() {
+    {{if .PkgConfigName -}}
+    core.SetPackageName("{{.PkgEnv}}", "{{.PkgConfigName}}")
+    {{end -}}
+    {{if .SharedLibrary -}}
+    core.SetSharedLibrary("{{.PkgEnv}}", "{{.SharedLibrary}}")
+    {{end -}}
     lib, err := purego.Dlopen(core.GetPath("{{.PkgEnv}}"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
     if err != nil {
             panic(err)
diff --git a/v4/adw/adw-about-dialog.go b/v4/adw/adw-about-dialog.go
index 7e0bf56bcb7e6f9dd6a3335db500f2a0983c3b46..7c18d155dcaecc3e8c24f812947b8653029a2ab2 100644
--- a/v4/adw/adw-about-dialog.go
+++ b/v4/adw/adw-about-dialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1129,6 +1129,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-about-window.go b/v4/adw/adw-about-window.go
index 5bfce4388c248526ce6c62117b454afb0f1a9f0c..2a00fb1cf7f90412f50dc82ba5ee7577e86be913 100644
--- a/v4/adw/adw-about-window.go
+++ b/v4/adw/adw-about-window.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1238,6 +1238,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-accent-color.go b/v4/adw/adw-accent-color.go
index 07a672142ae5cd54db82e1adc7677e50e2367934..7328b3ce0cb7b5df79236c4ece20952530d1962d 100644
--- a/v4/adw/adw-accent-color.go
+++ b/v4/adw/adw-accent-color.go
@@ -3,7 +3,7 @@ package adw
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -75,6 +75,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-action-row.go b/v4/adw/adw-action-row.go
index 6bae8d01e3dc97bad8bed80733dbb720677a5ad2..25c71f00dc2e2ee4c8000355bb956ade4104a485 100644
--- a/v4/adw/adw-action-row.go
+++ b/v4/adw/adw-action-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -540,6 +540,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-alert-dialog.go b/v4/adw/adw-alert-dialog.go
index ccb239beb8b43f3e5f4b59e3841600ccf7c3557e..6433b2569583409f7de9eb096f111d39436c5a7a 100644
--- a/v4/adw/adw-alert-dialog.go
+++ b/v4/adw/adw-alert-dialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -296,7 +296,7 @@ // If the window is an [class@Window] or [class@ApplicationWindow], the dialog
 // will be shown within it. Otherwise, it will be a separate window.
 func (x *AlertDialog) Choose(ParentVar *gtk.Widget, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xAlertDialogChoose(x.GoPointer(), ParentVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xAlertDialogChoose(x.GoPointer(), ParentVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -828,6 +828,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-animation-target.go b/v4/adw/adw-animation-target.go
index 59f1031e12ff0e2ea02328ca49ff366c0bf2ee6e..3c5822723c43deda3ea02624831f564278b56e4c 100644
--- a/v4/adw/adw-animation-target.go
+++ b/v4/adw/adw-animation-target.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -215,6 +215,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-animation-util.go b/v4/adw/adw-animation-util.go
index 403bfdb1f5067719564e8f2b744b0720b8be8c3c..d2c18f673db0a33993f00a4db62984644449fc72 100644
--- a/v4/adw/adw-animation-util.go
+++ b/v4/adw/adw-animation-util.go
@@ -3,7 +3,7 @@ package adw
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
 )
 
@@ -29,6 +29,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-animation.go b/v4/adw/adw-animation.go
index 650bd2c74b8a8e66d7bbba8ae57cd6b33dd066ea..c682441f99b0cad86c7616f18242a9af3cb26f65 100644
--- a/v4/adw/adw-animation.go
+++ b/v4/adw/adw-animation.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -324,6 +324,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "done", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-application-window.go b/v4/adw/adw-application-window.go
index 03967ae773250459b3505bba5e363d573e5d9a5e..f7f6f1299ab6784b4ac7992c0b316c3717ce1b61 100644
--- a/v4/adw/adw-application-window.go
+++ b/v4/adw/adw-application-window.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -767,6 +767,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-application.go b/v4/adw/adw-application.go
index 9fb688802fd26c67947720864658a542ee084723..22b65b68c7c51a3581172df1a456e91409c6208c 100644
--- a/v4/adw/adw-application.go
+++ b/v4/adw/adw-application.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -440,6 +440,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-avatar.go b/v4/adw/adw-avatar.go
index 85cf7f287d644cad17d2fa8727f970d28fd30226..1787e8172f4d7a6c4ce387f3fa99cafe4a905ba0 100644
--- a/v4/adw/adw-avatar.go
+++ b/v4/adw/adw-avatar.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -361,6 +361,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-banner.go b/v4/adw/adw-banner.go
index 7cda234ee8f74299c0eda5f63f11b55c392df67d..9e2fe88864ad3ea54e5eecc03498591193c837a0 100644
--- a/v4/adw/adw-banner.go
+++ b/v4/adw/adw-banner.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -421,6 +421,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-bin.go b/v4/adw/adw-bin.go
index 425dd943eec858438678083af54ef181c557c304..20d11e581b2fc1dfc6afdaefa83cb9dd408f6872 100644
--- a/v4/adw/adw-bin.go
+++ b/v4/adw/adw-bin.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -250,6 +250,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-bottom-sheet.go b/v4/adw/adw-bottom-sheet.go
index e1a51537f464962e1c028f4f88598e780c1a935f..add3f3152fc35047aa9aebf45e361dd7140a445a 100644
--- a/v4/adw/adw-bottom-sheet.go
+++ b/v4/adw/adw-bottom-sheet.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -618,6 +618,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-breakpoint-bin.go b/v4/adw/adw-breakpoint-bin.go
index 5a5d8dd05ecdf03e816fdd5f14a26db17f78eb56..fb1477a91af2f0542533397ec03cef96a55d833a 100644
--- a/v4/adw/adw-breakpoint-bin.go
+++ b/v4/adw/adw-breakpoint-bin.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -390,6 +390,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-breakpoint.go b/v4/adw/adw-breakpoint.go
index a3ca44452e6976462c0791f430283aff77276df4..de6d402bea4b416f5f9ede1b1f21ff73a6f775d2 100644
--- a/v4/adw/adw-breakpoint.go
+++ b/v4/adw/adw-breakpoint.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -486,6 +486,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-button-content.go b/v4/adw/adw-button-content.go
index 58890efa03d74de2cb5d39a5cf5b739e801c468e..a79c57ef67cb8925f99c4674a7e1cf6a24ce83d0 100644
--- a/v4/adw/adw-button-content.go
+++ b/v4/adw/adw-button-content.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -345,6 +345,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-button-row.go b/v4/adw/adw-button-row.go
index 2b8d2738fa04f216c3325cb273c3d41d1c047718..86cd97d8b769c18dc4b3be0604cc80b49a643da8 100644
--- a/v4/adw/adw-button-row.go
+++ b/v4/adw/adw-button-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -400,6 +400,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-carousel-indicator-dots.go b/v4/adw/adw-carousel-indicator-dots.go
index 7a5c4245e3b1f9a8d3939e9cbd239c2b4c599a75..fa136ae28d979a8c79d9dbe229b2da88b155a6aa 100644
--- a/v4/adw/adw-carousel-indicator-dots.go
+++ b/v4/adw/adw-carousel-indicator-dots.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -270,6 +270,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-carousel-indicator-lines.go b/v4/adw/adw-carousel-indicator-lines.go
index 34e3688ce7139d0f4fec509311b44e6dab989a80..54d8ec6b557044d11f0668194a12396a8b102f1e 100644
--- a/v4/adw/adw-carousel-indicator-lines.go
+++ b/v4/adw/adw-carousel-indicator-lines.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -269,6 +269,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-carousel.go b/v4/adw/adw-carousel.go
index 377863505a67ed3f3b94f04b8c06388c3214f816..af312fa3978e4af77d0198d0f758aa0c58ee0d07 100644
--- a/v4/adw/adw-carousel.go
+++ b/v4/adw/adw-carousel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -562,6 +562,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-clamp-layout.go b/v4/adw/adw-clamp-layout.go
index 753aad1fb76df791a934b30cdb08309d5133edd1..4394f9c4b461af3454f6012b9ed59df5a888d305 100644
--- a/v4/adw/adw-clamp-layout.go
+++ b/v4/adw/adw-clamp-layout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
 )
@@ -177,6 +177,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-clamp-scrollable.go b/v4/adw/adw-clamp-scrollable.go
index 5fe4f98dfbd9aa0b5507453ec418f4640828ec85..fe8f0fb456278c727d8bc6ac17c1a77aecbf31f0 100644
--- a/v4/adw/adw-clamp-scrollable.go
+++ b/v4/adw/adw-clamp-scrollable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -420,6 +420,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-clamp.go b/v4/adw/adw-clamp.go
index fa159472fe570ef866b029fdc86f7519f6016ce9..dc0875e427c912006c17f861730558cec31aea6f 100644
--- a/v4/adw/adw-clamp.go
+++ b/v4/adw/adw-clamp.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -352,6 +352,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-combo-row.go b/v4/adw/adw-combo-row.go
index ad12560dd0be7d47503d2b3c48dcf266cbff432e..029ad051a4338955665afdf65b0df6f42cb6116d 100644
--- a/v4/adw/adw-combo-row.go
+++ b/v4/adw/adw-combo-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -596,6 +596,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-dialog.go b/v4/adw/adw-dialog.go
index b7fe74b427966ec2683375901d8ab9c63e5fc2bc..555534a59a53d114ccc0f457810339aa2e4057ce 100644
--- a/v4/adw/adw-dialog.go
+++ b/v4/adw/adw-dialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -630,6 +630,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-easing.go b/v4/adw/adw-easing.go
index c71cb74acfd40c29ce8a3520ada08229f7754d3e..dff4afeb2f842fbc7cedacf6fe4fddf00d41d362 100644
--- a/v4/adw/adw-easing.go
+++ b/v4/adw/adw-easing.go
@@ -3,7 +3,7 @@ package adw
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -112,6 +112,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-entry-row.go b/v4/adw/adw-entry-row.go
index f4ae9d71029398ae8ff558d26f1aa1af1860717c..b9a913962217b7d43aebab21cfe3c77def963487 100644
--- a/v4/adw/adw-entry-row.go
+++ b/v4/adw/adw-entry-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -807,6 +807,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-enum-list-model.go b/v4/adw/adw-enum-list-model.go
index 042f755fd180c2b70b3e2eed98371e8dd0b41ccf..9530aeaab98fb4f3bb958077dc61abcf2ca016d1 100644
--- a/v4/adw/adw-enum-list-model.go
+++ b/v4/adw/adw-enum-list-model.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -245,6 +245,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-expander-row.go b/v4/adw/adw-expander-row.go
index 75ae190690e288505088b0fd2415848293fed9c1..ab8bd9de9978b31802a54bfa62a57fa0b0f7ff5c 100644
--- a/v4/adw/adw-expander-row.go
+++ b/v4/adw/adw-expander-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -519,6 +519,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-flap.go b/v4/adw/adw-flap.go
index c540d11bec9d37969aeb333452eb9868df6369f0..fd66a347fb75ac272c2afe9fadcf9757dc14d4f8 100644
--- a/v4/adw/adw-flap.go
+++ b/v4/adw/adw-flap.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -725,6 +725,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-header-bar.go b/v4/adw/adw-header-bar.go
index fedeef4f63720a6fae42961b3ca087d952fd4bd9..6b801574571ea8a73c217beaf89fd60c499692f8 100644
--- a/v4/adw/adw-header-bar.go
+++ b/v4/adw/adw-header-bar.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -532,6 +532,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-layout-slot.go b/v4/adw/adw-layout-slot.go
index 0a6a347a866b3a3a1c650fa0c8c64ce8ba92ae52..7874f1327e3753a280eefb932415a0bd38832d89 100644
--- a/v4/adw/adw-layout-slot.go
+++ b/v4/adw/adw-layout-slot.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -225,6 +225,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-layout.go b/v4/adw/adw-layout.go
index c9a5605ced97ef3baafd51ad7b9e16f34538d0cd..cfc62b9c0db1023cb951551a973f374fa7bc4906 100644
--- a/v4/adw/adw-layout.go
+++ b/v4/adw/adw-layout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -112,6 +112,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-leaflet.go b/v4/adw/adw-leaflet.go
index 9edda6f549e703b3314a3e4363a2fd01b067f4c7..98b4a50335dcf8cbcab72b7763a5282d23629086 100644
--- a/v4/adw/adw-leaflet.go
+++ b/v4/adw/adw-leaflet.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -864,6 +864,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-length-unit.go b/v4/adw/adw-length-unit.go
index 0e9425c4294765401355f94f9363f252821cbc2f..e32ad233157c5325bdc660287ad269a9e64d1747 100644
--- a/v4/adw/adw-length-unit.go
+++ b/v4/adw/adw-length-unit.go
@@ -3,7 +3,7 @@ package adw
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
 )
@@ -54,6 +54,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-main.go b/v4/adw/adw-main.go
index 8ef88f18200eb27ad3000f15714232903ab75365..605569edb6b98f08936fbc3fcc3f9dac21634b6b 100644
--- a/v4/adw/adw-main.go
+++ b/v4/adw/adw-main.go
@@ -3,7 +3,7 @@ package adw
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xInit func()
@@ -36,6 +36,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-message-dialog.go b/v4/adw/adw-message-dialog.go
index 7b82f1662921ac4d3c855b462392832ba2266b9e..7bb92e9c87a81486c4af672152ec3e9011e28b74 100644
--- a/v4/adw/adw-message-dialog.go
+++ b/v4/adw/adw-message-dialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -269,7 +269,7 @@
 // This function shows @self to the user.
 func (x *MessageDialog) Choose(CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xMessageDialogChoose(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xMessageDialogChoose(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -898,6 +898,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-multi-layout-view.go b/v4/adw/adw-multi-layout-view.go
index de89ef6925ecac741d1dc8e643e762d216b5f994..eb77bc28b6c84dae23bfc02a19a698b9a536f7a2 100644
--- a/v4/adw/adw-multi-layout-view.go
+++ b/v4/adw/adw-multi-layout-view.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -403,6 +403,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-navigation-split-view.go b/v4/adw/adw-navigation-split-view.go
index 579f60d1fc68d4e82809e55d9fa1a936a5fcbf06..016f99b3acfa459766b93ecafcee4e08265351ae 100644
--- a/v4/adw/adw-navigation-split-view.go
+++ b/v4/adw/adw-navigation-split-view.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -548,6 +548,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-navigation-view.go b/v4/adw/adw-navigation-view.go
index 7841dc7aa8aea820b77a6082ae1de0721f7e92d5..1f9cdc5e46bd0a8eb541837c0630b27ec2758477 100644
--- a/v4/adw/adw-navigation-view.go
+++ b/v4/adw/adw-navigation-view.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -1248,6 +1248,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-overlay-split-view.go b/v4/adw/adw-overlay-split-view.go
index c7b2a9a80649d495fe6e2bb00257e1c48eeb93c2..6e6cbeb6db5ce08495abe3ed4613314c927a2293 100644
--- a/v4/adw/adw-overlay-split-view.go
+++ b/v4/adw/adw-overlay-split-view.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -666,6 +666,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-password-entry-row.go b/v4/adw/adw-password-entry-row.go
index 809b88c0949bca2c63ee6b4b782b0fc455c7f5ab..e676d50c908467e6f2bcb931469d801673291cdf 100644
--- a/v4/adw/adw-password-entry-row.go
+++ b/v4/adw/adw-password-entry-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -557,6 +557,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-preferences-dialog.go b/v4/adw/adw-preferences-dialog.go
index 04d36cd6f4c5273253acc917b77d315380a43c3a..f61643bc39ed4c50669096ed2e0fff04d72d6e6a 100644
--- a/v4/adw/adw-preferences-dialog.go
+++ b/v4/adw/adw-preferences-dialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -347,6 +347,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-preferences-group.go b/v4/adw/adw-preferences-group.go
index 2e91fae88d6caa2161cf4944254de5029dc7d6f4..c5ce2e02670a61737ed28d8f461e94179731877a 100644
--- a/v4/adw/adw-preferences-group.go
+++ b/v4/adw/adw-preferences-group.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -356,6 +356,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-preferences-page.go b/v4/adw/adw-preferences-page.go
index cd669b4b0fc78751c9607b1fa03f34a24e74f89a..078f7347a1383f0d0f59e08c02e7b8cdef48cb35 100644
--- a/v4/adw/adw-preferences-page.go
+++ b/v4/adw/adw-preferences-page.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -368,6 +368,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-preferences-row.go b/v4/adw/adw-preferences-row.go
index 3a27c23d41df6def14978c51ab323c1ec4e1233a..55d973a0995612409b7fbe447dcc539267c3a096 100644
--- a/v4/adw/adw-preferences-row.go
+++ b/v4/adw/adw-preferences-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -386,6 +386,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-preferences-window.go b/v4/adw/adw-preferences-window.go
index 4e2497a6967cd9b11212209c1a7851fbe451c479..b100a309ecb055e7dd2b7f9bd748e1954b97fdc7 100644
--- a/v4/adw/adw-preferences-window.go
+++ b/v4/adw/adw-preferences-window.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -504,6 +504,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-spin-row.go b/v4/adw/adw-spin-row.go
index 3e3afbf9b90053426481202251aa5216346e7ab2..6b4572b15909ccfe32d8b01122fb80fbb63c9073 100644
--- a/v4/adw/adw-spin-row.go
+++ b/v4/adw/adw-spin-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -861,6 +861,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-spinner-paintable.go b/v4/adw/adw-spinner-paintable.go
index 25d908cb3a34f2abd2b7a73b0e5e093d7eecc9c0..ed4c34a6764f9e794c93438f89a8889fe318e21e 100644
--- a/v4/adw/adw-spinner-paintable.go
+++ b/v4/adw/adw-spinner-paintable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -280,6 +280,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-spinner.go b/v4/adw/adw-spinner.go
index 6f2b0c5774a7575726dfcf7994067e2b806ba327..5644d49283a1a9f5d035e221edf7a3ca261daab6 100644
--- a/v4/adw/adw-spinner.go
+++ b/v4/adw/adw-spinner.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -246,6 +246,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-split-button.go b/v4/adw/adw-split-button.go
index 837be4e1b9c73ae3d2fba0f300bd0e072b31d441..87edd22fce1efd5f8c1615db842e82fee0510d89 100644
--- a/v4/adw/adw-split-button.go
+++ b/v4/adw/adw-split-button.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -632,6 +632,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-spring-animation.go b/v4/adw/adw-spring-animation.go
index bc11493b03ed1f58b4ff75084b913e649afb9266..61515108573183b3a4e24c039f27e754b04a26d5 100644
--- a/v4/adw/adw-spring-animation.go
+++ b/v4/adw/adw-spring-animation.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -280,6 +280,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-spring-params.go b/v4/adw/adw-spring-params.go
index 8c3c16573ea3105c994c889939f04c789fdc4b9d..c49ae8585dcc832bd74eb08a934cb677d032bb5e 100644
--- a/v4/adw/adw-spring-params.go
+++ b/v4/adw/adw-spring-params.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -146,6 +146,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-squeezer.go b/v4/adw/adw-squeezer.go
index 283649dd83663850968f1552de688c288007c948..4f722862279c43b5970b8ee646b529a0b16375fb 100644
--- a/v4/adw/adw-squeezer.go
+++ b/v4/adw/adw-squeezer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -619,6 +619,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-status-page.go b/v4/adw/adw-status-page.go
index 7582746a22caee2c2b050dc426d71397b955bd22..cf6cc3b76f2a53ac52c3806a1895a0f5f91d62d8 100644
--- a/v4/adw/adw-status-page.go
+++ b/v4/adw/adw-status-page.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -358,6 +358,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-style-manager.go b/v4/adw/adw-style-manager.go
index 33f343f6bea96d120b53cce185c4afc3111390e6..44de9093669df2f1c318daf8119c63ee8a3dd291 100644
--- a/v4/adw/adw-style-manager.go
+++ b/v4/adw/adw-style-manager.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -275,6 +275,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-swipe-tracker.go b/v4/adw/adw-swipe-tracker.go
index 93df5aab0da3fbb7caabc653ebcbf7550154a656..f3daf47230a9c3c186465ff8c6a287d49906ab2e 100644
--- a/v4/adw/adw-swipe-tracker.go
+++ b/v4/adw/adw-swipe-tracker.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -347,6 +347,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-swipeable.go b/v4/adw/adw-swipeable.go
index 37aecf05094c475c5054a23719ff4ded828107bc..611a62eb94375f952cf114ed58c64aaa43c1806f 100644
--- a/v4/adw/adw-swipeable.go
+++ b/v4/adw/adw-swipeable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -115,6 +115,8 @@ var XAdwSwipeableGetSnapPoints func(uintptr, int) uintptr
 var XAdwSwipeableGetSwipeArea func(uintptr, NavigationDirection, bool, *gdk.Rectangle)
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-switch-row.go b/v4/adw/adw-switch-row.go
index a0be7bee8392184ba6f683adab223d0d9956dc92..9e1e8f58d878d055ef9495c5abdee8d7e017e04d 100644
--- a/v4/adw/adw-switch-row.go
+++ b/v4/adw/adw-switch-row.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -346,6 +346,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-tab-bar.go b/v4/adw/adw-tab-bar.go
index bf7dfec1d606c7735854424abd3a5535828d02d1..55d9ca57471a509fe70b2df7b08eee1d77331613 100644
--- a/v4/adw/adw-tab-bar.go
+++ b/v4/adw/adw-tab-bar.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -514,6 +514,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-tab-button.go b/v4/adw/adw-tab-button.go
index f50935b634304cede87157eb1a676ded0cc46b5f..be9553f1e2a9aaa497c8b04692b50f0b8fa43a71 100644
--- a/v4/adw/adw-tab-button.go
+++ b/v4/adw/adw-tab-button.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -395,6 +395,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-tab-overview.go b/v4/adw/adw-tab-overview.go
index f8884f329d889007dba477bb607b561dd2955c3c..990144dacadb75c7478a66204c4368f00d253188 100644
--- a/v4/adw/adw-tab-overview.go
+++ b/v4/adw/adw-tab-overview.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -619,6 +619,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-tab-view.go b/v4/adw/adw-tab-view.go
index bc6ab8e2c0336fc834b1319d16c1e25d6297f83b..ff6704c6e5e5bf0f0b17d9a6b0889092751b5df2 100644
--- a/v4/adw/adw-tab-view.go
+++ b/v4/adw/adw-tab-view.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1642,6 +1642,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-timed-animation.go b/v4/adw/adw-timed-animation.go
index 1fc37750c9b5c9e05d5052a7303eed42974f3fc0..5e5b163ae7d7f772e4c7724fd236c487c3040112 100644
--- a/v4/adw/adw-timed-animation.go
+++ b/v4/adw/adw-timed-animation.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -226,6 +226,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-toast-overlay.go b/v4/adw/adw-toast-overlay.go
index a4c2f972d219135520ca5f8d9dcb924f73e6f4ee..4d958f2757b264db47fa8d1eb1bc6f896656ae16 100644
--- a/v4/adw/adw-toast-overlay.go
+++ b/v4/adw/adw-toast-overlay.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -297,6 +297,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-toast.go b/v4/adw/adw-toast.go
index 6dd19d3d7dd57e0b1c0a3f32966c83dbc8dacd76..0dc9d944c891596f0b6eeb64acd1aa43d2d95fa3 100644
--- a/v4/adw/adw-toast.go
+++ b/v4/adw/adw-toast.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -522,6 +522,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "dismissed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-toolbar-view.go b/v4/adw/adw-toolbar-view.go
index a7666461302e7f1db7c5424bec10174ac5f0c2a0..22d5488c58ca0080cbe490fd323ebdc46c3cb899 100644
--- a/v4/adw/adw-toolbar-view.go
+++ b/v4/adw/adw-toolbar-view.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -649,6 +649,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-version.go b/v4/adw/adw-version.go
index aa23ebe7075fb2e55331b8c3dd91490d27d26ee5..e0177a5483dfb1653b2b9477c0ec014e507cad9a 100644
--- a/v4/adw/adw-version.go
+++ b/v4/adw/adw-version.go
@@ -3,7 +3,7 @@ package adw
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 const (
@@ -67,6 +67,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-view-stack.go b/v4/adw/adw-view-stack.go
index 05be367511e1029ebb0314f87f0d97e416644227..9303007206d6584d2fd8955a865d80594af33791 100644
--- a/v4/adw/adw-view-stack.go
+++ b/v4/adw/adw-view-stack.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1115,6 +1115,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-view-switcher-bar.go b/v4/adw/adw-view-switcher-bar.go
index 7f1d134c64f65999f77883d5b406549cdfa81365..f200571dd9dd65b62bb134fa43575794e763199a 100644
--- a/v4/adw/adw-view-switcher-bar.go
+++ b/v4/adw/adw-view-switcher-bar.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -317,6 +317,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-view-switcher-title.go b/v4/adw/adw-view-switcher-title.go
index d7670793ef06bf3a4f244cdfedd661834d39c271..47307a9e6b5667279127c07fcf831a7c7a91cb5d 100644
--- a/v4/adw/adw-view-switcher-title.go
+++ b/v4/adw/adw-view-switcher-title.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -377,6 +377,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-view-switcher.go b/v4/adw/adw-view-switcher.go
index ce28f5f645de636cf3acdd73c343f7b978d03b33..05bb305ae6607586ae0b89bf8f1f39da8f888890 100644
--- a/v4/adw/adw-view-switcher.go
+++ b/v4/adw/adw-view-switcher.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -343,6 +343,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-window-title.go b/v4/adw/adw-window-title.go
index d579e41e22b04ecd2fb423a1bd68801e228d99f6..32ef1066bbd02fda5ca013c1e212b98c03b1528c 100644
--- a/v4/adw/adw-window-title.go
+++ b/v4/adw/adw-window-title.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gtk"
@@ -266,6 +266,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/adw/adw-window.go b/v4/adw/adw-window.go
index 1563cfcc2d0bef4ba00a7c9030985a35160463b3..2c1d3eeb5be9c7235dcb9c3ec324eef6b943784e 100644
--- a/v4/adw/adw-window.go
+++ b/v4/adw/adw-window.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -492,6 +492,8 @@
 }
 
 func init() {
+	core.SetPackageName("ADW", "libadwaita-1")
+	core.SetSharedLibrary("ADW", "libadwaita-1.so.0")
 	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/cairo/main.go b/v4/cairo/main.go
index 96dce66193cca440112bc02a1ec77850cb697092..dd114687c1a56022b89614f8074e50764cf6bc5c 100644
--- a/v4/cairo/main.go
+++ b/v4/cairo/main.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -759,6 +759,8 @@
 }
 
 func init() {
+	core.SetPackageName("CAIRO", "cairo-gobject")
+	core.SetSharedLibrary("CAIRO", "libcairo-gobject.so.2")
 	lib, err := purego.Dlopen(core.GetPath("CAIRO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkapplaunchcontext.go b/v4/gdk/gdkapplaunchcontext.go
index 6ce52d05fc071245cae516571360c0fc214a270c..d3af451e1b574b9d08f087390a5a51613d46aec0 100644
--- a/v4/gdk/gdkapplaunchcontext.go
+++ b/v4/gdk/gdkapplaunchcontext.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -144,6 +144,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkcairo.go b/v4/gdk/gdkcairo.go
index e21145ac2341e3e35a3eb473b056290cdd08b1c1..68d5fe1bf662d26f6de9f369c9fa5a507a07fdff 100644
--- a/v4/gdk/gdkcairo.go
+++ b/v4/gdk/gdkcairo.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gdkpixbuf"
 )
@@ -87,6 +87,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkcairocontext.go b/v4/gdk/gdkcairocontext.go
index 99a0cb0f291339b78337be6a657d14afcf0e9a0c..7f2f237820303525d51067ebda61a226ab436ee4 100644
--- a/v4/gdk/gdkcairocontext.go
+++ b/v4/gdk/gdkcairocontext.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -58,6 +58,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkclipboard.go b/v4/gdk/gdkclipboard.go
index 821650fe5e7ac027e01a7a23c8aad918de9933a2..c2e9e2d15d47537edb79bf203e980c3f848484ac 100644
--- a/v4/gdk/gdkclipboard.go
+++ b/v4/gdk/gdkclipboard.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -118,7 +118,7 @@ // The clipboard will choose the most suitable mime type from the given list
 // to fulfill the request, preferring the ones listed first.
 func (x *Clipboard) ReadAsync(MimeTypesVar []string, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xClipboardReadAsync(x.GoPointer(), MimeTypesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xClipboardReadAsync(x.GoPointer(), MimeTypesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -157,7 +157,7 @@ // Use that function or [method@Gdk.Clipboard.read_async] directly if you
 // need more control over the operation.
 func (x *Clipboard) ReadTextAsync(CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xClipboardReadTextAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xClipboardReadTextAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -189,7 +189,7 @@ // Use that function or [method@Gdk.Clipboard.read_async] directly if you
 // need more control over the operation.
 func (x *Clipboard) ReadTextureAsync(CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xClipboardReadTextureAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xClipboardReadTextureAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -229,7 +229,7 @@ // the value will be copied directly. Otherwise, GDK will try to use
 // [func@content_deserialize_async] to convert the clipboard's data.
 func (x *Clipboard) ReadValueAsync(TypeVar types.GType, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xClipboardReadValueAsync(x.GoPointer(), TypeVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xClipboardReadValueAsync(x.GoPointer(), TypeVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -341,7 +341,7 @@ // This function is called automatically when a [class@Gtk.Application] is
 // shut down, so you likely don't need to call it.
 func (x *Clipboard) StoreAsync(IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xClipboardStoreAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xClipboardStoreAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -393,6 +393,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkcontentdeserializer.go b/v4/gdk/gdkcontentdeserializer.go
index 9670cabbef1fc7b55ec8ce6cf5437143be6a3737..e9749267ffe8065853ba52d394b4814047e55bab 100644
--- a/v4/gdk/gdkcontentdeserializer.go
+++ b/v4/gdk/gdkcontentdeserializer.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -28,7 +28,7 @@ // When the operation is finished, @callback will be called. You must then
 // call [func@Gdk.content_deserialize_finish] to get the result of the operation.
 func ContentDeserializeAsync(StreamVar *gio.InputStream, MimeTypeVar string, TypeVar types.GType, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xContentDeserializeAsync(StreamVar.GoPointer(), MimeTypeVar, TypeVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xContentDeserializeAsync(StreamVar.GoPointer(), MimeTypeVar, TypeVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -262,6 +262,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkcontentformats.go b/v4/gdk/gdkcontentformats.go
index d1b4885e91023fe5c849454c1d48ac98afa8c3da..cf7fc92e79537a1b6bba513bf9d0f2051ad2d8b2 100644
--- a/v4/gdk/gdkcontentformats.go
+++ b/v4/gdk/gdkcontentformats.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -191,6 +191,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkcontentprovider.go b/v4/gdk/gdkcontentprovider.go
index aa7124600279c7bf3ced9c315f2cb6240913757b..785ce79869f1cf6c4b5f7f7a32de29b06df9425d 100644
--- a/v4/gdk/gdkcontentprovider.go
+++ b/v4/gdk/gdkcontentprovider.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -204,7 +204,7 @@ //
 // The given @stream will not be closed.
 func (x *ContentProvider) WriteMimeTypeAsync(MimeTypeVar string, StreamVar *gio.OutputStream, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xContentProviderWriteMimeTypeAsync(x.GoPointer(), MimeTypeVar, StreamVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xContentProviderWriteMimeTypeAsync(x.GoPointer(), MimeTypeVar, StreamVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -256,6 +256,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "content-changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkcontentserializer.go b/v4/gdk/gdkcontentserializer.go
index 9f13c450f93eb74817d1c30b481373f1e094a661..a5ea104eb2231b10e4f0fff542ccd618133a701f 100644
--- a/v4/gdk/gdkcontentserializer.go
+++ b/v4/gdk/gdkcontentserializer.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -37,7 +37,7 @@ // When the operation is finished, @callback will be called. You must then
 // call [func@Gdk.content_serialize_finish] to get the result of the operation.
 func ContentSerializeAsync(StreamVar *gio.OutputStream, MimeTypeVar string, ValueVar *gobject.Value, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xContentSerializeAsync(StreamVar.GoPointer(), MimeTypeVar, ValueVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xContentSerializeAsync(StreamVar.GoPointer(), MimeTypeVar, ValueVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -263,6 +263,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkcursor.go b/v4/gdk/gdkcursor.go
index ee98a3f96e2af57c6601f7a2007d311175cafab0..c1e69b5856467fcda4d4e7305c4cc6a7747da672 100644
--- a/v4/gdk/gdkcursor.go
+++ b/v4/gdk/gdkcursor.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -200,6 +200,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdevice.go b/v4/gdk/gdkdevice.go
index e785c03ea889373916ffad9239573200e536521d..bf43ea56de909c794ac1f3cb3ab471e29708eae9 100644
--- a/v4/gdk/gdkdevice.go
+++ b/v4/gdk/gdkdevice.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -387,6 +387,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "tool-changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdevicepad.go b/v4/gdk/gdkdevicepad.go
index ac63f8819bbb55d1512fbfa48d44cf849ae463c1..4d97d9643bb488c02f5f04082dd2b3b871643e35 100644
--- a/v4/gdk/gdkdevicepad.go
+++ b/v4/gdk/gdkdevicepad.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -124,6 +124,8 @@ 	DevicePadFeatureStripValue DevicePadFeature = 2
 )
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdevicetool.go b/v4/gdk/gdkdevicetool.go
index 7db2baa4aa55a4d2678e3764df82ea3bf468d7f4..6737d2398ca25b83b3c809343ba47dab1e5ce6ad 100644
--- a/v4/gdk/gdkdevicetool.go
+++ b/v4/gdk/gdkdevicetool.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -116,6 +116,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdisplay.go b/v4/gdk/gdkdisplay.go
index 3f94c48aa456ce455e325e5d760feec5ea10d99b..4780b6ae6ccb94a824d6b7e22d0b25cc8eef45f8 100644
--- a/v4/gdk/gdkdisplay.go
+++ b/v4/gdk/gdkdisplay.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -626,6 +626,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdisplaymanager.go b/v4/gdk/gdkdisplaymanager.go
index 952bd952eb25a2511eb740b4a586ad431ecd8d59..2691c8354c8b1ee2f2ad716c0baf939b4d161cc3 100644
--- a/v4/gdk/gdkdisplaymanager.go
+++ b/v4/gdk/gdkdisplaymanager.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -225,6 +225,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdrag.go b/v4/gdk/gdkdrag.go
index 91f9d61b53f16ed4d1306f6841ba160b06da0dcd..ac6e7bf9e48290bac379e11a2ecbdc5ae8c5bde6 100644
--- a/v4/gdk/gdkdrag.go
+++ b/v4/gdk/gdkdrag.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -321,6 +321,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdragsurface.go b/v4/gdk/gdkdragsurface.go
index e09162223f8099da848226473a1d9e93c387ea66..b634635ca01ac6d711006012e2401c1b788b8801 100644
--- a/v4/gdk/gdkdragsurface.go
+++ b/v4/gdk/gdkdragsurface.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -57,6 +57,8 @@
 var XGdkDragSurfacePresent func(uintptr, int, int) bool
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdrawcontext.go b/v4/gdk/gdkdrawcontext.go
index a88954d90010e4394d63c15eab1295f9007250c6..a690c450dafc24a1bd2b74b37cd06fbaf75d4bae 100644
--- a/v4/gdk/gdkdrawcontext.go
+++ b/v4/gdk/gdkdrawcontext.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -157,6 +157,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkdrop.go b/v4/gdk/gdkdrop.go
index 5350b0d808940592b48202e6d4e0e0eb9425b2bd..c65671ac073d82ee80c9c237bce3edec1b27b049 100644
--- a/v4/gdk/gdkdrop.go
+++ b/v4/gdk/gdkdrop.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -161,7 +161,7 @@ // Asynchronously read the dropped data from a `GdkDrop`
 // in a format that complies with one of the mime types.
 func (x *Drop) ReadAsync(MimeTypesVar []string, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDropReadAsync(x.GoPointer(), MimeTypesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDropReadAsync(x.GoPointer(), MimeTypesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -207,7 +207,7 @@ // `GType`, the value will be copied directly. Otherwise, GDK will
 // try to use [func@Gdk.content_deserialize_async] to convert the data.
 func (x *Drop) ReadValueAsync(TypeVar types.GType, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDropReadValueAsync(x.GoPointer(), TypeVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDropReadValueAsync(x.GoPointer(), TypeVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -260,6 +260,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkevents.go b/v4/gdk/gdkevents.go
index fca7f65f934e3a7a427c1bdc90771a1147703951..8a1fc9953e058caa66e61b2f4c1a4eb7147b21f2 100644
--- a/v4/gdk/gdkevents.go
+++ b/v4/gdk/gdkevents.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -1347,6 +1347,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkframeclock.go b/v4/gdk/gdkframeclock.go
index d9fe2232449fe8b5015dc96369133a1624659f3e..0f6a819fb4ccc6d5e8b8c1e32addf376c4774ddf 100644
--- a/v4/gdk/gdkframeclock.go
+++ b/v4/gdk/gdkframeclock.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -418,6 +418,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "update", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkframetimings.go b/v4/gdk/gdkframetimings.go
index 3400dbc6be619e343dfcce2f1fec1d47c4d1e0d6..0148d67c3d561fcb3541e814546da680eed54dd2 100644
--- a/v4/gdk/gdkframetimings.go
+++ b/v4/gdk/gdkframetimings.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -140,6 +140,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkglcontext.go b/v4/gdk/gdkglcontext.go
index 7e11caadb1a61b2ada3d89e41736a264f2f58770..e526f6ab34fc623e12d070e1b6cf4d2053455d85 100644
--- a/v4/gdk/gdkglcontext.go
+++ b/v4/gdk/gdkglcontext.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -419,6 +419,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkgltexture.go b/v4/gdk/gdkgltexture.go
index 625fd00241d06e68bcdf1e11a68eabf9b18adc96..164a7ec7e87ff076f5545aa5d7063287c2f6d0c6 100644
--- a/v4/gdk/gdkgltexture.go
+++ b/v4/gdk/gdkgltexture.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -290,7 +290,7 @@ // g_loadable_icon_load_finish(). For the synchronous, blocking
 // version of this function, see g_loadable_icon_load().
 func (x *GLTexture) LoadAsync(SizeVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -314,6 +314,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkkeys.go b/v4/gdk/gdkkeys.go
index 908acb78cc62ea7513181c8b0d3b660f514b5e4c..5ff147250d0d019868ad1439b0c1ac9963766919 100644
--- a/v4/gdk/gdkkeys.go
+++ b/v4/gdk/gdkkeys.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xKeyvalConvertCase func(uint, uint, uint)
@@ -103,6 +103,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkmemorytexture.go b/v4/gdk/gdkmemorytexture.go
index d7daa53f2791531dc5971364fa8dd1f0ea240782..2a2c131f1f368821f61e5ca714102eb67cf24a90 100644
--- a/v4/gdk/gdkmemorytexture.go
+++ b/v4/gdk/gdkmemorytexture.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -276,7 +276,7 @@ // g_loadable_icon_load_finish(). For the synchronous, blocking
 // version of this function, see g_loadable_icon_load().
 func (x *MemoryTexture) LoadAsync(SizeVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -300,6 +300,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkmonitor.go b/v4/gdk/gdkmonitor.go
index 1d1d93d6c6594cfb36355b6f8daf8d0f7a84e87b..df0237b4cc08a92ed34c8c568f5b26cd6f6ee822 100644
--- a/v4/gdk/gdkmonitor.go
+++ b/v4/gdk/gdkmonitor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -234,6 +234,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "invalidate", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkpaintable.go b/v4/gdk/gdkpaintable.go
index df83affc8733d3609166b080114a55c853507042..9689e7b8edbf452967ec31dd16a4553a333d9035 100644
--- a/v4/gdk/gdkpaintable.go
+++ b/v4/gdk/gdkpaintable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -308,6 +308,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkpango.go b/v4/gdk/gdkpango.go
index 5e39805aef5dbb8a294389117be1022dd99e8c36..9c7e5743eb6344efa923d0c794e1fae2fa9885e9 100644
--- a/v4/gdk/gdkpango.go
+++ b/v4/gdk/gdkpango.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/pango"
 )
@@ -50,6 +50,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkpixbuf.go b/v4/gdk/gdkpixbuf.go
index b94dcef0a703401180e789ac61fa5bcc8c2c7a61..9649b633bc6bd78f9c6904ac1e104fbfcb35b1a8 100644
--- a/v4/gdk/gdkpixbuf.go
+++ b/v4/gdk/gdkpixbuf.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gdkpixbuf"
 )
@@ -51,6 +51,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkpopup.go b/v4/gdk/gdkpopup.go
index 0ebe975985d030ece8a221ec1fbfab9e93c18331..da8e2158dcc611892412ea91e573852cfca4b93c 100644
--- a/v4/gdk/gdkpopup.go
+++ b/v4/gdk/gdkpopup.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -145,6 +145,8 @@ var XGdkPopupGetSurfaceAnchor func(uintptr) Gravity
 var XGdkPopupPresent func(uintptr, int, int, *PopupLayout) bool
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkpopuplayout.go b/v4/gdk/gdkpopuplayout.go
index dfa9687eb3ebdc78b77c1819fc913c80c32ccd3f..81ba873c66f0f5fbdeafbf1f09b7f8503017d659 100644
--- a/v4/gdk/gdkpopuplayout.go
+++ b/v4/gdk/gdkpopuplayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -277,6 +277,8 @@ 	AnchorResizeValue AnchorHints = 48
 )
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkrgba.go b/v4/gdk/gdkrgba.go
index 85c2f327ad7ca1f346b26c14d954ee28190c82f9..2b02a289cb074c7d48ecc25c4fd9ad0f18f60c33 100644
--- a/v4/gdk/gdkrgba.go
+++ b/v4/gdk/gdkrgba.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -151,6 +151,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdkseat.go b/v4/gdk/gdkseat.go
index db9edcb3faff2051cb704ffa837058084a4d9965..f574302e0f6a3a048f1fc2d7f10dda6ff53fde91 100644
--- a/v4/gdk/gdkseat.go
+++ b/v4/gdk/gdkseat.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -234,6 +234,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "tool-removed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdksurface.go b/v4/gdk/gdksurface.go
index d4ad8512b53d3a01d7b3f6f5c0f4ad0364c4be96..4301d292579c7caef3ca478096601fea13b786eb 100644
--- a/v4/gdk/gdksurface.go
+++ b/v4/gdk/gdksurface.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -599,6 +599,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "render", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdktexture.go b/v4/gdk/gdktexture.go
index a6656b729d42cc6b0b0ef03b32957164c0aba0e5..68ebbf10307859b1d717aa3e88103cafd54af0f6 100644
--- a/v4/gdk/gdktexture.go
+++ b/v4/gdk/gdktexture.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdkpixbuf"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -549,7 +549,7 @@ // g_loadable_icon_load_finish(). For the synchronous, blocking
 // version of this function, see g_loadable_icon_load().
 func (x *Texture) LoadAsync(SizeVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -573,6 +573,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdktoplevel.go b/v4/gdk/gdktoplevel.go
index 4f0d7e0a1ab80e54b947d87c4ad11f1449f46be4..a8838e35354ac33933bf4a85dfa264e3e2e51254 100644
--- a/v4/gdk/gdktoplevel.go
+++ b/v4/gdk/gdktoplevel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -408,6 +408,8 @@ 	SurfaceEdgeSouthEastValue SurfaceEdge = 7
 )
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdktoplevellayout.go b/v4/gdk/gdktoplevellayout.go
index 5df9286f103241edb82a0c5ad66c26e9b2590181..1952b3672ee53e5f3b6df319f9e01400dcf19aff 100644
--- a/v4/gdk/gdktoplevellayout.go
+++ b/v4/gdk/gdktoplevellayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -166,6 +166,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdktoplevelsize.go b/v4/gdk/gdktoplevelsize.go
index c2b05ee42c3a9beee4c5d24277cefbee5edcd7af..4f4712601c7ada4622295055d01787d91699dd0f 100644
--- a/v4/gdk/gdktoplevelsize.go
+++ b/v4/gdk/gdktoplevelsize.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -88,6 +88,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/gdktypes.go b/v4/gdk/gdktypes.go
index 7de87f38a936ced63b9f9a3e23731d3224abacbc..c043626d4e1a7252db91f38f38310184592becb1 100644
--- a/v4/gdk/gdktypes.go
+++ b/v4/gdk/gdktypes.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -357,6 +357,8 @@ 	CURRENT_TIME int = 0
 )
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdk/main.go b/v4/gdk/main.go
index 3bb21f34ba289bf2a2016fd6308bdb4031fe6983..f26c370f2467f70a8ba008b75323d0c8b4e7c86c 100644
--- a/v4/gdk/main.go
+++ b/v4/gdk/main.go
@@ -3,7 +3,7 @@ package gdk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -49,6 +49,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GDK", "gtk4")
+	core.SetSharedLibrary("GDK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdkpixbuf/gdk-pixbuf-animation.go b/v4/gdkpixbuf/gdk-pixbuf-animation.go
index dc9c753f5c2fc7576cf2edcb6c27c0da1c7db108..a2c1b35b1d646d45be4bc94a18b276b06ba9004a 100644
--- a/v4/gdkpixbuf/gdk-pixbuf-animation.go
+++ b/v4/gdkpixbuf/gdk-pixbuf-animation.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -330,7 +330,7 @@ // You can then call gdk_pixbuf_animation_new_from_stream_finish() to get the
 // result of the operation.
 func PixbufAnimationNewFromStreamAsync(StreamVar *gio.InputStream, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xPixbufAnimationNewFromStreamAsync(StreamVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xPixbufAnimationNewFromStreamAsync(StreamVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -455,6 +455,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDKPIXBUF", "gdk-pixbuf-2.0")
+	core.SetSharedLibrary("GDKPIXBUF", "libgdk_pixbuf-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GDKPIXBUF"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdkpixbuf/gdk-pixbuf-io.go b/v4/gdkpixbuf/gdk-pixbuf-io.go
index ca8c8c4fa4cfda4f89f4ea479d0ef901e404fbb5..933a8f19acccce7578537604c0a0e9a13f033b8b 100644
--- a/v4/gdkpixbuf/gdk-pixbuf-io.go
+++ b/v4/gdkpixbuf/gdk-pixbuf-io.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gmodule"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -406,6 +406,8 @@ 	GdkPixbufFormatThreadsafeValue PixbufFormatFlags = 4
 )
 
 func init() {
+	core.SetPackageName("GDKPIXBUF", "gdk-pixbuf-2.0")
+	core.SetSharedLibrary("GDKPIXBUF", "libgdk_pixbuf-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GDKPIXBUF"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdkpixbuf/gdk-pixbuf-loader.go b/v4/gdkpixbuf/gdk-pixbuf-loader.go
index fc39de3764616ec5fc0fd2d8f5e07064d7babc90..cf8cf58390ae2d163fbe0fef0475e55e2e3d9712 100644
--- a/v4/gdkpixbuf/gdk-pixbuf-loader.go
+++ b/v4/gdkpixbuf/gdk-pixbuf-loader.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -419,6 +419,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "size-prepared", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GDKPIXBUF", "gdk-pixbuf-2.0")
+	core.SetSharedLibrary("GDKPIXBUF", "libgdk_pixbuf-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GDKPIXBUF"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdkpixbuf/gdk-pixbuf-simple-anim.go b/v4/gdkpixbuf/gdk-pixbuf-simple-anim.go
index 20861fa778f3ec4a1533c7bf14adabd2c5598b61..1f81797d793508af18ed45da5be5b5331c7c93c9 100644
--- a/v4/gdkpixbuf/gdk-pixbuf-simple-anim.go
+++ b/v4/gdkpixbuf/gdk-pixbuf-simple-anim.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -92,6 +92,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDKPIXBUF", "gdk-pixbuf-2.0")
+	core.SetSharedLibrary("GDKPIXBUF", "libgdk_pixbuf-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GDKPIXBUF"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdkpixbuf/gdk-pixbuf.go b/v4/gdkpixbuf/gdk-pixbuf.go
index b74db965791195e64af505562d51f54b5f95170f..af272d662447819e8bfabbd22e1d10e2452554f6 100644
--- a/v4/gdkpixbuf/gdk-pixbuf.go
+++ b/v4/gdkpixbuf/gdk-pixbuf.go
@@ -3,7 +3,7 @@ package gdkpixbuf
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -222,7 +222,7 @@ // See also: [ctor@GdkPixbuf.Pixbuf.new_from_bytes]
 func NewPixbufFromData(DataVar []byte, ColorspaceVar Colorspace, HasAlphaVar bool, BitsPerSampleVar int, WidthVar int, HeightVar int, RowstrideVar int, DestroyFnVar *PixbufDestroyNotify, DestroyFnDataVar uintptr) *Pixbuf {
 	var cls *Pixbuf
 
-	cret := xNewPixbufFromData(DataVar, ColorspaceVar, HasAlphaVar, BitsPerSampleVar, WidthVar, HeightVar, RowstrideVar, glib.NewCallback(DestroyFnVar), DestroyFnDataVar)
+	cret := xNewPixbufFromData(DataVar, ColorspaceVar, HasAlphaVar, BitsPerSampleVar, WidthVar, HeightVar, RowstrideVar, glib.NewCallbackNullable(DestroyFnVar), DestroyFnDataVar)
 
 	if cret == 0 {
 		return nil
@@ -1204,7 +1204,7 @@ // You can then call gdk_pixbuf_save_to_stream_finish() to get the result of
 // the operation.
 func (x *Pixbuf) SaveToStreamAsync(StreamVar *gio.OutputStream, TypeVar string, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr, varArgs ...interface{}) {
 
-	xPixbufSaveToStreamAsync(x.GoPointer(), StreamVar.GoPointer(), TypeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, varArgs...)
+	xPixbufSaveToStreamAsync(x.GoPointer(), StreamVar.GoPointer(), TypeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, varArgs...)
 
 }
 
@@ -1240,7 +1240,7 @@ // You can then call gdk_pixbuf_save_to_stream_finish() to get the result of
 // the operation.
 func (x *Pixbuf) SaveToStreamvAsync(StreamVar *gio.OutputStream, TypeVar string, OptionKeysVar []string, OptionValuesVar []string, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xPixbufSaveToStreamvAsync(x.GoPointer(), StreamVar.GoPointer(), TypeVar, OptionKeysVar, OptionValuesVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xPixbufSaveToStreamvAsync(x.GoPointer(), StreamVar.GoPointer(), TypeVar, OptionKeysVar, OptionValuesVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1415,7 +1415,7 @@ // g_loadable_icon_load_finish(). For the synchronous, blocking
 // version of this function, see g_loadable_icon_load().
 func (x *Pixbuf) LoadAsync(SizeVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	gio.XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1473,7 +1473,7 @@ // main thread. You can then call gdk_pixbuf_get_file_info_finish() to
 // get the result of the operation.
 func PixbufGetFileInfoAsync(FilenameVar string, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xPixbufGetFileInfoAsync(FilenameVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xPixbufGetFileInfoAsync(FilenameVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1540,7 +1540,7 @@ // You can then call gdk_pixbuf_new_from_stream_finish() to get the result of
 // the operation.
 func PixbufNewFromStreamAsync(StreamVar *gio.InputStream, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xPixbufNewFromStreamAsync(StreamVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xPixbufNewFromStreamAsync(StreamVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1555,7 +1555,7 @@ // When the operation is finished, @callback will be called in the main thread.
 // You can then call gdk_pixbuf_new_from_stream_finish() to get the result of the operation.
 func PixbufNewFromStreamAtScaleAsync(StreamVar *gio.InputStream, WidthVar int, HeightVar int, PreserveAspectRatioVar bool, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xPixbufNewFromStreamAtScaleAsync(StreamVar.GoPointer(), WidthVar, HeightVar, PreserveAspectRatioVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xPixbufNewFromStreamAtScaleAsync(StreamVar.GoPointer(), WidthVar, HeightVar, PreserveAspectRatioVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1575,6 +1575,8 @@
 }
 
 func init() {
+	core.SetPackageName("GDKPIXBUF", "gdk-pixbuf-2.0")
+	core.SetSharedLibrary("GDKPIXBUF", "libgdk_pixbuf-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GDKPIXBUF"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gdkpixbuf/main.go b/v4/gdkpixbuf/main.go
index 9ecb340ddae627743b2a4872d1d3c4af0d462242..b5023cc91d95082679b73e61348ac6becdd79605 100644
--- a/v4/gdkpixbuf/main.go
+++ b/v4/gdkpixbuf/main.go
@@ -3,7 +3,7 @@ package gdkpixbuf
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -86,6 +86,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GDKPIXBUF", "gdk-pixbuf-2.0")
+	core.SetSharedLibrary("GDKPIXBUF", "libgdk_pixbuf-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GDKPIXBUF"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gaction.go b/v4/gio/gaction.go
index c64d0e8ee4f5914cba108410e49a53988159d537..23aae49976ee718d0d5c9d0973af122c8b8c768b 100644
--- a/v4/gio/gaction.go
+++ b/v4/gio/gaction.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -281,6 +281,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gactiongroup.go b/v4/gio/gactiongroup.go
index 5756657803b9388bd6247aa7bb8127121c122c09..555cf440ccdd7e0f1fe944408f4c76b73c75edcb 100644
--- a/v4/gio/gactiongroup.go
+++ b/v4/gio/gactiongroup.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -354,6 +354,8 @@ var XGActionGroupListActions func(uintptr) []string
 var XGActionGroupQueryAction func(uintptr, string, bool, **glib.VariantType, **glib.VariantType, **glib.Variant, **glib.Variant) bool
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gactionmap.go b/v4/gio/gactionmap.go
index 0766bee0e48fef73b275c1db95736765973801bc..333260588c16ebf199ec6d10e903d78ae192f64c 100644
--- a/v4/gio/gactionmap.go
+++ b/v4/gio/gactionmap.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -180,6 +180,8 @@ var XGActionMapLookupAction func(uintptr, string) uintptr
 var XGActionMapRemoveAction func(uintptr, string)
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gappinfo.go b/v4/gio/gappinfo.go
index 21d81909bdee5dcaaeca64418e44a2a9dd0b6f72..252580235c4f0fa124db9d7773110c90486e4c65 100644
--- a/v4/gio/gappinfo.go
+++ b/v4/gio/gappinfo.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -350,7 +350,7 @@ // extended error information for sandboxed applications, see notes for
 // g_app_info_launch_default_for_uri_async().
 func (x *AppInfoBase) LaunchUrisAsync(UrisVar *glib.List, ContextVar *AppLaunchContext, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGAppInfoLaunchUrisAsync(x.GoPointer(), UrisVar, ContextVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGAppInfoLaunchUrisAsync(x.GoPointer(), UrisVar, ContextVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -615,7 +615,7 @@ // applications are really started before termination and if you are interested
 // in receiving error information from their activation.
 func AppInfoLaunchDefaultForUriAsync(UriVar string, ContextVar *AppLaunchContext, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xAppInfoLaunchDefaultForUriAsync(UriVar, ContextVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xAppInfoLaunchDefaultForUriAsync(UriVar, ContextVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -843,6 +843,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "launched", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gapplication.go b/v4/gio/gapplication.go
index cc3e1e8ebecda915afdee7b02026d8205b3d210c..193ed878f9db59003b7ec9cb2b88abd6772abdea 100644
--- a/v4/gio/gapplication.go
+++ b/v4/gio/gapplication.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1504,6 +1504,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gapplicationcommandline.go b/v4/gio/gapplicationcommandline.go
index deb22baad3256c5030af21840090cb7ac76260ff..45cc88320576b7b957e158223d458209c0bee6f5 100644
--- a/v4/gio/gapplicationcommandline.go
+++ b/v4/gio/gapplicationcommandline.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -465,6 +465,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gasyncinitable.go b/v4/gio/gasyncinitable.go
index facde86d5c6f1be165f21e799f01aabaa3735474..3bce369d2b6405eb656cd32d080028374a1fb682 100644
--- a/v4/gio/gasyncinitable.go
+++ b/v4/gio/gasyncinitable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -199,7 +199,7 @@ // threads, just implement the #GAsyncInitable interface without overriding
 // any interface methods.
 func (x *AsyncInitableBase) InitAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -250,11 +250,13 @@ // then call g_async_initable_new_finish() to get the new object and check
 // for any errors.
 func AsyncInitableNewvAsync(ObjectTypeVar types.GType, NParametersVar uint, ParametersVar *gobject.Parameter, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xAsyncInitableNewvAsync(ObjectTypeVar, NParametersVar, ParametersVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xAsyncInitableNewvAsync(ObjectTypeVar, NParametersVar, ParametersVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gasyncresult.go b/v4/gio/gasyncresult.go
index 593ead7978bf2ce220be8ffe10660e1ed8e42bcc..5209275f530d65b546b0067e6608e123978a293e 100644
--- a/v4/gio/gasyncresult.go
+++ b/v4/gio/gasyncresult.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -199,6 +199,8 @@ var XGAsyncResultIsTagged func(uintptr, uintptr) bool
 var XGAsyncResultLegacyPropagateError func(uintptr) bool
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gbufferedinputstream.go b/v4/gio/gbufferedinputstream.go
index 1876a237473b7e34d040959b746da5f4a2ccb17e..34e09ca554695a7eca0bc33ecec3fbda90dc5dc9 100644
--- a/v4/gio/gbufferedinputstream.go
+++ b/v4/gio/gbufferedinputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -140,7 +140,7 @@ // If @count is -1 then the attempted read size is equal to the number
 // of bytes that are required to fill the buffer.
 func (x *BufferedInputStream) FillAsync(CountVar int, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xBufferedInputStreamFillAsync(x.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xBufferedInputStreamFillAsync(x.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -313,6 +313,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gbufferedoutputstream.go b/v4/gio/gbufferedoutputstream.go
index 602955a8ea256123283ffb015e2db505eae2bcae..952a6e7ebfcd674dc7c4727402a02c37ec699f46 100644
--- a/v4/gio/gbufferedoutputstream.go
+++ b/v4/gio/gbufferedoutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -209,6 +209,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gcancellable.go b/v4/gio/gcancellable.go
index df81103b7a5fa1a2cd5dcde3f4e71ef056b67200..4e4b927004ca75ef94825fe6035a7b242d04e05c 100644
--- a/v4/gio/gcancellable.go
+++ b/v4/gio/gcancellable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -118,7 +118,7 @@ // earlier GLib versions which now makes it easier to write cleanup
 // code that unconditionally invokes e.g. g_cancellable_cancel().
 func (x *Cancellable) Connect(CallbackVar *gobject.Callback, DataVar uintptr, DataDestroyFuncVar *glib.DestroyNotify) uint32 {
 
-	cret := xCancellableConnect(x.GoPointer(), glib.NewCallback(CallbackVar), DataVar, glib.NewCallback(DataDestroyFuncVar))
+	cret := xCancellableConnect(x.GoPointer(), glib.NewCallback(CallbackVar), DataVar, glib.NewCallbackNullable(DataDestroyFuncVar))
 	return cret
 }
 
@@ -395,6 +395,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gcharsetconverter.go b/v4/gio/gcharsetconverter.go
index d2dfbc83450c232161feee2190405de23715ee6e..5ee6cf8ab80c1a142ca319d117ab578caef6a366 100644
--- a/v4/gio/gcharsetconverter.go
+++ b/v4/gio/gcharsetconverter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -251,6 +251,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gcontenttype.go b/v4/gio/gcontenttype.go
index 1e75532fe1bc0d075baf70270f02f018aa31f86b..b07458a07940bc483b0584aa4f71b98fbe9d2048 100644
--- a/v4/gio/gcontenttype.go
+++ b/v4/gio/gcontenttype.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -216,6 +216,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gconverter.go b/v4/gio/gconverter.go
index 6cbf17e04af7827bfc0d449b3e32c326355031a8..27beede97f89a9fa510a19608d60e6b83bfc921d 100644
--- a/v4/gio/gconverter.go
+++ b/v4/gio/gconverter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -165,6 +165,8 @@ var XGConverterConvert func(uintptr, []byte, uint, []byte, uint, ConverterFlags, uint, uint, **glib.Error) ConverterResult
 var XGConverterReset func(uintptr)
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gconverterinputstream.go b/v4/gio/gconverterinputstream.go
index b5b22aceff092547a5ad8bf57cf455ea24dd913c..3c241640e0ad03bcc9ba32cee0a4fb48051e6008 100644
--- a/v4/gio/gconverterinputstream.go
+++ b/v4/gio/gconverterinputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -159,6 +159,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gconverteroutputstream.go b/v4/gio/gconverteroutputstream.go
index adafed5d3997faa3175829d090bf698fe804b64f..c4df528273b00a7df5255c2ddee54764a9503a3c 100644
--- a/v4/gio/gconverteroutputstream.go
+++ b/v4/gio/gconverteroutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -190,6 +190,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gcredentials.go b/v4/gio/gcredentials.go
index d17c3f3a226e6bca9794ef48a6fc248b9b7667a8..e2d917fb55af32229a48f46a3e584181be41cf77 100644
--- a/v4/gio/gcredentials.go
+++ b/v4/gio/gcredentials.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -217,6 +217,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdatagrambased.go b/v4/gio/gdatagrambased.go
index dd23ca070a96699770ebd5e0fd7214bc4aec5f30..d8caaee54a84d34e1e009e1bef274ac4bae18168 100644
--- a/v4/gio/gdatagrambased.go
+++ b/v4/gio/gdatagrambased.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -303,6 +303,8 @@ var XGDatagramBasedReceiveMessages func(uintptr, []InputMessage, uint, int, int64, uintptr, **glib.Error) int
 var XGDatagramBasedSendMessages func(uintptr, []OutputMessage, uint, int, int64, uintptr, **glib.Error) int
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdatainputstream.go b/v4/gio/gdatainputstream.go
index abacd173ada647e416b5be113ac24721eb240a3e..cf78ccb2d5922ff36cc7963aa178528aed3e0ea0 100644
--- a/v4/gio/gdatainputstream.go
+++ b/v4/gio/gdatainputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -184,7 +184,7 @@ // can then call g_data_input_stream_read_line_finish() to get
 // the result of the operation.
 func (x *DataInputStream) ReadLineAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDataInputStreamReadLineAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDataInputStreamReadLineAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -340,7 +340,7 @@ // will be marked as deprecated in a future release.  Use
 // g_data_input_stream_read_upto_async() instead.
 func (x *DataInputStream) ReadUntilAsync(StopCharsVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDataInputStreamReadUntilAsync(x.GoPointer(), StopCharsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDataInputStreamReadUntilAsync(x.GoPointer(), StopCharsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -402,7 +402,7 @@ // can then call g_data_input_stream_read_upto_finish() to get
 // the result of the operation.
 func (x *DataInputStream) ReadUptoAsync(StopCharsVar string, StopCharsLenVar int, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDataInputStreamReadUptoAsync(x.GoPointer(), StopCharsVar, StopCharsLenVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDataInputStreamReadUptoAsync(x.GoPointer(), StopCharsVar, StopCharsLenVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -529,6 +529,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdataoutputstream.go b/v4/gio/gdataoutputstream.go
index ef1f3c1bac6f452030b8f82361ac2e872ba229fc..e7aada787c0dd3b9e3d0ffd96b12c7410ba478c7 100644
--- a/v4/gio/gdataoutputstream.go
+++ b/v4/gio/gdataoutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -272,6 +272,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusaddress.go b/v4/gio/gdbusaddress.go
index 8eb78813859f7db0498e2cc0a49baa6524755486..cf74636d273e4051ec67ccf0eea0a952bd0bf98b 100644
--- a/v4/gio/gdbusaddress.go
+++ b/v4/gio/gdbusaddress.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -56,7 +56,7 @@ // This is an asynchronous failable function. See
 // g_dbus_address_get_stream_sync() for the synchronous version.
 func DbusAddressGetStream(AddressVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDbusAddressGetStream(AddressVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDbusAddressGetStream(AddressVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -146,6 +146,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusconnection.go b/v4/gio/gdbusconnection.go
index dbdbb194b091bc06a4c982431cdf6f724716d4ce..4fd927b97446e76cfaae7faae89906aa0887c12c 100644
--- a/v4/gio/gdbusconnection.go
+++ b/v4/gio/gdbusconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -216,7 +216,7 @@ // This is an asynchronous failable function. See g_bus_get_sync() for
 // the synchronous version.
 func BusGet(BusTypeVar BusType, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xBusGet(BusTypeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xBusGet(BusTypeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -291,6 +291,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbuserror.go b/v4/gio/gdbuserror.go
index 6d5293f5a48204f198d7a12006cce47d59a20852..a7a4f79d771ad6b9f03163688b1549131e70f3cc 100644
--- a/v4/gio/gdbuserror.go
+++ b/v4/gio/gdbuserror.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -149,6 +149,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusinterface.go b/v4/gio/gdbusinterface.go
index bad163681cbc5adc05032dd92d4931523e1f7c6e..967cf8897e026e2f21947385ce73662b829f9538 100644
--- a/v4/gio/gdbusinterface.go
+++ b/v4/gio/gdbusinterface.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -111,6 +111,8 @@ var XGDbusInterfaceGetObject func(uintptr) uintptr
 var XGDbusInterfaceSetObject func(uintptr, uintptr)
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusinterfaceskeleton.go b/v4/gio/gdbusinterfaceskeleton.go
index 3e6791427e5f1cd94057bc6970227f90ff0e0d31..4c5a59f2c196e55c582aec71b61aa0a6bf045777 100644
--- a/v4/gio/gdbusinterfaceskeleton.go
+++ b/v4/gio/gdbusinterfaceskeleton.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -311,6 +311,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusintrospection.go b/v4/gio/gdbusintrospection.go
index 20ece2d17933b3a12a431e11106ba8b8f104b5aa..c71b0e4bf27f3a5c2d4705e99755b1a9e06764d2 100644
--- a/v4/gio/gdbusintrospection.go
+++ b/v4/gio/gdbusintrospection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -464,6 +464,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusnameowning.go b/v4/gio/gdbusnameowning.go
index 6129ec052b3fc607ea217e8a98004230c91114f0..b8c2b2ca70eb28807eee6078adb3a52e1fc170ae 100644
--- a/v4/gio/gdbusnameowning.go
+++ b/v4/gio/gdbusnameowning.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 )
@@ -70,7 +70,7 @@ // Simply register objects to be exported in @bus_acquired_handler and
 // unregister the objects (if any) in @name_lost_handler.
 func BusOwnName(BusTypeVar BusType, NameVar string, FlagsVar BusNameOwnerFlags, BusAcquiredHandlerVar *BusAcquiredCallback, NameAcquiredHandlerVar *BusNameAcquiredCallback, NameLostHandlerVar *BusNameLostCallback, UserDataVar uintptr, UserDataFreeFuncVar *glib.DestroyNotify) uint {
 
-	cret := xBusOwnName(BusTypeVar, NameVar, FlagsVar, glib.NewCallback(BusAcquiredHandlerVar), glib.NewCallback(NameAcquiredHandlerVar), glib.NewCallback(NameLostHandlerVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))
+	cret := xBusOwnName(BusTypeVar, NameVar, FlagsVar, glib.NewCallbackNullable(BusAcquiredHandlerVar), glib.NewCallbackNullable(NameAcquiredHandlerVar), glib.NewCallbackNullable(NameLostHandlerVar), UserDataVar, glib.NewCallbackNullable(UserDataFreeFuncVar))
 	return cret
 }
 
@@ -80,7 +80,7 @@ // Like g_bus_own_name() but takes a #GDBusConnection instead of a
 // #GBusType.
 func BusOwnNameOnConnection(ConnectionVar *DBusConnection, NameVar string, FlagsVar BusNameOwnerFlags, NameAcquiredHandlerVar *BusNameAcquiredCallback, NameLostHandlerVar *BusNameLostCallback, UserDataVar uintptr, UserDataFreeFuncVar *glib.DestroyNotify) uint {
 
-	cret := xBusOwnNameOnConnection(ConnectionVar.GoPointer(), NameVar, FlagsVar, glib.NewCallback(NameAcquiredHandlerVar), glib.NewCallback(NameLostHandlerVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))
+	cret := xBusOwnNameOnConnection(ConnectionVar.GoPointer(), NameVar, FlagsVar, glib.NewCallbackNullable(NameAcquiredHandlerVar), glib.NewCallbackNullable(NameLostHandlerVar), UserDataVar, glib.NewCallbackNullable(UserDataFreeFuncVar))
 	return cret
 }
 
@@ -121,6 +121,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusnamewatching.go b/v4/gio/gdbusnamewatching.go
index 3e30cbf6074b8db666168c04d973e4c261549827..1d6ea98da3d195869c8fbf18045e70f528134109 100644
--- a/v4/gio/gdbusnamewatching.go
+++ b/v4/gio/gdbusnamewatching.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 )
@@ -67,7 +67,7 @@ // @name_appeared_handler and destroy them again (if any) in
 // @name_vanished_handler.
 func BusWatchName(BusTypeVar BusType, NameVar string, FlagsVar BusNameWatcherFlags, NameAppearedHandlerVar *BusNameAppearedCallback, NameVanishedHandlerVar *BusNameVanishedCallback, UserDataVar uintptr, UserDataFreeFuncVar *glib.DestroyNotify) uint {
 
-	cret := xBusWatchName(BusTypeVar, NameVar, FlagsVar, glib.NewCallback(NameAppearedHandlerVar), glib.NewCallback(NameVanishedHandlerVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))
+	cret := xBusWatchName(BusTypeVar, NameVar, FlagsVar, glib.NewCallbackNullable(NameAppearedHandlerVar), glib.NewCallbackNullable(NameVanishedHandlerVar), UserDataVar, glib.NewCallbackNullable(UserDataFreeFuncVar))
 	return cret
 }
 
@@ -77,7 +77,7 @@ // Like g_bus_watch_name() but takes a #GDBusConnection instead of a
 // #GBusType.
 func BusWatchNameOnConnection(ConnectionVar *DBusConnection, NameVar string, FlagsVar BusNameWatcherFlags, NameAppearedHandlerVar *BusNameAppearedCallback, NameVanishedHandlerVar *BusNameVanishedCallback, UserDataVar uintptr, UserDataFreeFuncVar *glib.DestroyNotify) uint {
 
-	cret := xBusWatchNameOnConnection(ConnectionVar.GoPointer(), NameVar, FlagsVar, glib.NewCallback(NameAppearedHandlerVar), glib.NewCallback(NameVanishedHandlerVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))
+	cret := xBusWatchNameOnConnection(ConnectionVar.GoPointer(), NameVar, FlagsVar, glib.NewCallbackNullable(NameAppearedHandlerVar), glib.NewCallbackNullable(NameVanishedHandlerVar), UserDataVar, glib.NewCallbackNullable(UserDataFreeFuncVar))
 	return cret
 }
 
@@ -102,6 +102,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusobject.go b/v4/gio/gdbusobject.go
index 4fd10f8dd76ea91656661e67674ad101099a22c2..5e7567018188c5db6597d1cbde8063aa033588a7 100644
--- a/v4/gio/gdbusobject.go
+++ b/v4/gio/gdbusobject.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -89,6 +89,8 @@ var XGDbusObjectGetInterfaces func(uintptr) *glib.List
 var XGDbusObjectGetObjectPath func(uintptr) string
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusobjectmanager.go b/v4/gio/gdbusobjectmanager.go
index 5e9939d462cf1ba390ccc44255d613a7f742e7f8..244656e9967a85da554cba14d81f652e6ca7597f 100644
--- a/v4/gio/gdbusobjectmanager.go
+++ b/v4/gio/gdbusobjectmanager.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -108,6 +108,8 @@ var XGDbusObjectManagerGetObjectPath func(uintptr) string
 var XGDbusObjectManagerGetObjects func(uintptr) *glib.List
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusobjectmanagerclient.go b/v4/gio/gdbusobjectmanagerclient.go
index e6a0745bbefb0f5ce313eac9aff4d859f8dad317..eb322a5a860447166704c18d94225f1d08c70c6d 100644
--- a/v4/gio/gdbusobjectmanagerclient.go
+++ b/v4/gio/gdbusobjectmanagerclient.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -178,7 +178,7 @@ func NewDBusObjectManagerClientForBusSync(BusTypeVar BusType, FlagsVar DBusObjectManagerClientFlags, NameVar string, ObjectPathVar string, GetProxyTypeFuncVar *DBusProxyTypeFunc, GetProxyTypeUserDataVar uintptr, GetProxyTypeDestroyNotifyVar *glib.DestroyNotify, CancellableVar *Cancellable) (*DBusObjectManagerClient, error) {
 	var cls *DBusObjectManagerClient
 	var cerr *glib.Error
 
-	cret := xNewDBusObjectManagerClientForBusSync(BusTypeVar, FlagsVar, NameVar, ObjectPathVar, glib.NewCallback(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallback(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), &cerr)
+	cret := xNewDBusObjectManagerClientForBusSync(BusTypeVar, FlagsVar, NameVar, ObjectPathVar, glib.NewCallbackNullable(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallbackNullable(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), &cerr)
 
 	if cret == 0 {
 		return nil, cerr
@@ -203,7 +203,7 @@ func NewDBusObjectManagerClientSync(ConnectionVar *DBusConnection, FlagsVar DBusObjectManagerClientFlags, NameVar string, ObjectPathVar string, GetProxyTypeFuncVar *DBusProxyTypeFunc, GetProxyTypeUserDataVar uintptr, GetProxyTypeDestroyNotifyVar *glib.DestroyNotify, CancellableVar *Cancellable) (*DBusObjectManagerClient, error) {
 	var cls *DBusObjectManagerClient
 	var cerr *glib.Error
 
-	cret := xNewDBusObjectManagerClientSync(ConnectionVar.GoPointer(), FlagsVar, NameVar, ObjectPathVar, glib.NewCallback(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallback(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), &cerr)
+	cret := xNewDBusObjectManagerClientSync(ConnectionVar.GoPointer(), FlagsVar, NameVar, ObjectPathVar, glib.NewCallbackNullable(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallbackNullable(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), &cerr)
 
 	if cret == 0 {
 		return nil, cerr
@@ -371,7 +371,7 @@ // threads, just implement the #GAsyncInitable interface without overriding
 // any interface methods.
 func (x *DBusObjectManagerClient) InitAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -512,7 +512,7 @@ // then call g_dbus_object_manager_client_new_finish() to get the result. See
 // g_dbus_object_manager_client_new_sync() for the synchronous version.
 func DBusObjectManagerClientNew(ConnectionVar *DBusConnection, FlagsVar DBusObjectManagerClientFlags, NameVar string, ObjectPathVar string, GetProxyTypeFuncVar *DBusProxyTypeFunc, GetProxyTypeUserDataVar uintptr, GetProxyTypeDestroyNotifyVar *glib.DestroyNotify, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusObjectManagerClientNew(ConnectionVar.GoPointer(), FlagsVar, NameVar, ObjectPathVar, glib.NewCallback(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallback(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusObjectManagerClientNew(ConnectionVar.GoPointer(), FlagsVar, NameVar, ObjectPathVar, glib.NewCallbackNullable(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallbackNullable(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -529,11 +529,13 @@ // then call g_dbus_object_manager_client_new_for_bus_finish() to get the result. See
 // g_dbus_object_manager_client_new_for_bus_sync() for the synchronous version.
 func DBusObjectManagerClientNewForBus(BusTypeVar BusType, FlagsVar DBusObjectManagerClientFlags, NameVar string, ObjectPathVar string, GetProxyTypeFuncVar *DBusProxyTypeFunc, GetProxyTypeUserDataVar uintptr, GetProxyTypeDestroyNotifyVar *glib.DestroyNotify, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusObjectManagerClientNewForBus(BusTypeVar, FlagsVar, NameVar, ObjectPathVar, glib.NewCallback(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallback(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusObjectManagerClientNewForBus(BusTypeVar, FlagsVar, NameVar, ObjectPathVar, glib.NewCallbackNullable(GetProxyTypeFuncVar), GetProxyTypeUserDataVar, glib.NewCallbackNullable(GetProxyTypeDestroyNotifyVar), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusobjectmanagerserver.go b/v4/gio/gdbusobjectmanagerserver.go
index 1da808e3067610ad3209610ddf2b07ce1376ce12..e1d0dab5a5fa0d3393ac44ab1a021f3772a927e4 100644
--- a/v4/gio/gdbusobjectmanagerserver.go
+++ b/v4/gio/gdbusobjectmanagerserver.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -226,6 +226,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusobjectproxy.go b/v4/gio/gdbusobjectproxy.go
index 6bf866b75b9322033d70cc7f5f8b3d8b7b462c80..81b7ee820c9fc932ee8c9d36b6effb5ac18397ec 100644
--- a/v4/gio/gdbusobjectproxy.go
+++ b/v4/gio/gdbusobjectproxy.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -128,6 +128,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusobjectskeleton.go b/v4/gio/gdbusobjectskeleton.go
index 83702fcf5e2947e2bdb8a113fcfc0ed13b6e8cee..bf8c670ea928dbc6dd5600c2516652f2618e6d31 100644
--- a/v4/gio/gdbusobjectskeleton.go
+++ b/v4/gio/gdbusobjectskeleton.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -194,6 +194,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusproxy.go b/v4/gio/gdbusproxy.go
index bae37b659943173fde7aef9863130076c7a7dca6..2e99240df3aaa3f32ece0db002ef2d55bfdf2051 100644
--- a/v4/gio/gdbusproxy.go
+++ b/v4/gio/gdbusproxy.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -248,7 +248,7 @@ // If @callback is %NULL then the D-Bus method call message will be sent with
 // the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
 func (x *DBusProxy) Call(MethodNameVar string, ParametersVar *glib.Variant, FlagsVar DBusCallFlags, TimeoutMsecVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusProxyCall(x.GoPointer(), MethodNameVar, ParametersVar, FlagsVar, TimeoutMsecVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusProxyCall(x.GoPointer(), MethodNameVar, ParametersVar, FlagsVar, TimeoutMsecVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -322,7 +322,7 @@ //
 // This method is only available on UNIX.
 func (x *DBusProxy) CallWithUnixFdList(MethodNameVar string, ParametersVar *glib.Variant, FlagsVar DBusCallFlags, TimeoutMsecVar int, FdListVar *UnixFDList, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusProxyCallWithUnixFdList(x.GoPointer(), MethodNameVar, ParametersVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusProxyCallWithUnixFdList(x.GoPointer(), MethodNameVar, ParametersVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -643,7 +643,7 @@ // threads, just implement the #GAsyncInitable interface without overriding
 // any interface methods.
 func (x *DBusProxy) InitAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -810,7 +810,7 @@ //
 // #GDBusProxy is used in this [example][gdbus-wellknown-proxy].
 func DBusProxyNew(ConnectionVar *DBusConnection, FlagsVar DBusProxyFlags, InfoVar *DBusInterfaceInfo, NameVar string, ObjectPathVar string, InterfaceNameVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusProxyNew(ConnectionVar.GoPointer(), FlagsVar, InfoVar, NameVar, ObjectPathVar, InterfaceNameVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusProxyNew(ConnectionVar.GoPointer(), FlagsVar, InfoVar, NameVar, ObjectPathVar, InterfaceNameVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -821,11 +821,13 @@ //
 // #GDBusProxy is used in this [example][gdbus-wellknown-proxy].
 func DBusProxyNewForBus(BusTypeVar BusType, FlagsVar DBusProxyFlags, InfoVar *DBusInterfaceInfo, NameVar string, ObjectPathVar string, InterfaceNameVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusProxyNewForBus(BusTypeVar, FlagsVar, InfoVar, NameVar, ObjectPathVar, InterfaceNameVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusProxyNewForBus(BusTypeVar, FlagsVar, InfoVar, NameVar, ObjectPathVar, InterfaceNameVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdbusutils.go b/v4/gio/gdbusutils.go
index 60a0fc704d3697509ebec9d9e4e32ed3a2100546..bb4566c2c70d582726165ef2047304b71337906c 100644
--- a/v4/gio/gdbusutils.go
+++ b/v4/gio/gdbusutils.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 )
@@ -193,6 +193,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdebugcontroller.go b/v4/gio/gdebugcontroller.go
index 7109300eb4e0f819233e5f0a3ad8ecf1e5575c17..ef626a283da95c2f8da0098d94a673982f4de5fb 100644
--- a/v4/gio/gdebugcontroller.go
+++ b/v4/gio/gdebugcontroller.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -88,6 +88,8 @@ 	DEBUG_CONTROLLER_EXTENSION_POINT_NAME string = "gio-debug-controller"
 )
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdebugcontrollerdbus.go b/v4/gio/gdebugcontrollerdbus.go
index f440d699a20eb53358a09352c3645ca55be78e60..9209d41ba1170f1f3d86aef07dc79329d76102ea 100644
--- a/v4/gio/gdebugcontrollerdbus.go
+++ b/v4/gio/gdebugcontrollerdbus.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -315,6 +315,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdesktopappinfo.go b/v4/gio/gdesktopappinfo.go
index ea19299666cc0205ef2bcc22267d3f6d0ec3a04d..2ffbcbe4d2287c4e0a1fb645a2d1ab114856a987 100644
--- a/v4/gio/gdesktopappinfo.go
+++ b/v4/gio/gdesktopappinfo.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -377,7 +377,7 @@ // @pid_callback and @pid_callback_data are ignored.
 func (x *DesktopAppInfo) LaunchUrisAsManager(UrisVar *glib.List, LaunchContextVar *AppLaunchContext, SpawnFlagsVar glib.SpawnFlags, UserSetupVar *glib.SpawnChildSetupFunc, UserSetupDataVar uintptr, PidCallbackVar *DesktopAppLaunchCallback, PidCallbackDataVar uintptr) (bool, error) {
 	var cerr *glib.Error
 
-	cret := xDesktopAppInfoLaunchUrisAsManager(x.GoPointer(), UrisVar, LaunchContextVar.GoPointer(), SpawnFlagsVar, glib.NewCallback(UserSetupVar), UserSetupDataVar, glib.NewCallback(PidCallbackVar), PidCallbackDataVar, &cerr)
+	cret := xDesktopAppInfoLaunchUrisAsManager(x.GoPointer(), UrisVar, LaunchContextVar.GoPointer(), SpawnFlagsVar, glib.NewCallbackNullable(UserSetupVar), UserSetupDataVar, glib.NewCallbackNullable(PidCallbackVar), PidCallbackDataVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -396,7 +396,7 @@ // activation) then @stdin_fd, @stdout_fd and @stderr_fd are ignored.
 func (x *DesktopAppInfo) LaunchUrisAsManagerWithFds(UrisVar *glib.List, LaunchContextVar *AppLaunchContext, SpawnFlagsVar glib.SpawnFlags, UserSetupVar *glib.SpawnChildSetupFunc, UserSetupDataVar uintptr, PidCallbackVar *DesktopAppLaunchCallback, PidCallbackDataVar uintptr, StdinFdVar int, StdoutFdVar int, StderrFdVar int) (bool, error) {
 	var cerr *glib.Error
 
-	cret := xDesktopAppInfoLaunchUrisAsManagerWithFds(x.GoPointer(), UrisVar, LaunchContextVar.GoPointer(), SpawnFlagsVar, glib.NewCallback(UserSetupVar), UserSetupDataVar, glib.NewCallback(PidCallbackVar), PidCallbackDataVar, StdinFdVar, StdoutFdVar, StderrFdVar, &cerr)
+	cret := xDesktopAppInfoLaunchUrisAsManagerWithFds(x.GoPointer(), UrisVar, LaunchContextVar.GoPointer(), SpawnFlagsVar, glib.NewCallbackNullable(UserSetupVar), UserSetupDataVar, glib.NewCallbackNullable(PidCallbackVar), PidCallbackDataVar, StdinFdVar, StdoutFdVar, StderrFdVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -636,7 +636,7 @@ // extended error information for sandboxed applications, see notes for
 // g_app_info_launch_default_for_uri_async().
 func (x *DesktopAppInfo) LaunchUrisAsync(UrisVar *glib.List, ContextVar *AppLaunchContext, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGAppInfoLaunchUrisAsync(x.GoPointer(), UrisVar, ContextVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGAppInfoLaunchUrisAsync(x.GoPointer(), UrisVar, ContextVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -776,6 +776,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdrive.go b/v4/gio/gdrive.go
index 270d0db8a67bb4b06c0439a2ec2e2033206274e9..bae1c8ab79b1292b9276127980d799e1f16f7f17 100644
--- a/v4/gio/gdrive.go
+++ b/v4/gio/gdrive.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -144,7 +144,7 @@ // You can then call g_drive_eject_finish() to obtain the
 // result of the operation.
 func (x *DriveBase) Eject(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDriveEject(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDriveEject(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -165,7 +165,7 @@ // finished by calling g_drive_eject_with_operation_finish() with the @drive
 // and #GAsyncResult data returned in the @callback.
 func (x *DriveBase) EjectWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDriveEjectWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDriveEjectWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -304,7 +304,7 @@ // You can then call g_drive_poll_for_media_finish() to obtain the
 // result of the operation.
 func (x *DriveBase) PollForMedia(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDrivePollForMedia(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDrivePollForMedia(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -327,7 +327,7 @@ // You can then call g_drive_start_finish() to obtain the
 // result of the operation.
 func (x *DriveBase) Start(FlagsVar DriveStartFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDriveStart(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDriveStart(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -350,7 +350,7 @@ // You can then call g_drive_stop_finish() to obtain the
 // result of the operation.
 func (x *DriveBase) Stop(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDriveStop(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDriveStop(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -401,6 +401,8 @@ 	DRIVE_IDENTIFIER_KIND_UNIX_DEVICE string = "unix-device"
 )
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdtlsclientconnection.go b/v4/gio/gdtlsclientconnection.go
index 0a2872da16363eac32ca68403eba2d6f4cd7317b..e109f41fdbf3043c9e34fc914d8c325b901cbf07 100644
--- a/v4/gio/gdtlsclientconnection.go
+++ b/v4/gio/gdtlsclientconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -139,6 +139,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdtlsconnection.go b/v4/gio/gdtlsconnection.go
index 803f668a65f129d683c8f90abd45133216c0a038..4f9ebee23cd762594fc0a0a93910427c2e6dbb04 100644
--- a/v4/gio/gdtlsconnection.go
+++ b/v4/gio/gdtlsconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -129,7 +129,7 @@ // Asynchronously close the DTLS connection. See g_dtls_connection_close() for
 // more information.
 func (x *DtlsConnectionBase) CloseAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDtlsConnectionCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDtlsConnectionCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -348,7 +348,7 @@ // Asynchronously performs a TLS handshake on @conn. See
 // g_dtls_connection_handshake() for more information.
 func (x *DtlsConnectionBase) HandshakeAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDtlsConnectionHandshakeAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDtlsConnectionHandshakeAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -506,7 +506,7 @@ // Asynchronously shut down part or all of the DTLS connection. See
 // g_dtls_connection_shutdown() for more information.
 func (x *DtlsConnectionBase) ShutdownAsync(ShutdownReadVar bool, ShutdownWriteVar bool, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGDtlsConnectionShutdownAsync(x.GoPointer(), ShutdownReadVar, ShutdownWriteVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGDtlsConnectionShutdownAsync(x.GoPointer(), ShutdownReadVar, ShutdownWriteVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -552,6 +552,8 @@ var XGDtlsConnectionShutdownAsync func(uintptr, bool, bool, int, uintptr, uintptr, uintptr)
 var XGDtlsConnectionShutdownFinish func(uintptr, uintptr, **glib.Error) bool
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gdtlsserverconnection.go b/v4/gio/gdtlsserverconnection.go
index fb98d9eef11d9da218e441698461886dc9042e51..063f26b403ed0d777e101f0895c71e0e862a375d 100644
--- a/v4/gio/gdtlsserverconnection.go
+++ b/v4/gio/gdtlsserverconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -72,6 +72,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gemblem.go b/v4/gio/gemblem.go
index 83536a6b75f1bbbb9eded310dc7771572e484978..46b417fde51e5c5389bd2bb3c4fff65cd03ab783 100644
--- a/v4/gio/gemblem.go
+++ b/v4/gio/gemblem.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -152,6 +152,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gemblemedicon.go b/v4/gio/gemblemedicon.go
index 185a51ebd32f78ed8fb7954af8e7e5053120722d..0a0c941da71c575c04f235672af498d80eef972a 100644
--- a/v4/gio/gemblemedicon.go
+++ b/v4/gio/gemblemedicon.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -164,6 +164,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfile.go b/v4/gio/gfile.go
index 2be45c32ea93843d21501f29b78874628c644bfe..1e484f6b449129fd8439a6ab09ffa1c825fd8e46 100644
--- a/v4/gio/gfile.go
+++ b/v4/gio/gfile.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -304,7 +304,7 @@ // You can then call g_file_append_to_finish() to get the result
 // of the operation.
 func (x *FileBase) AppendToAsync(FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileAppendToAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileAppendToAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -391,7 +391,7 @@ // file), see g_file_dup().
 func (x *FileBase) Copy(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) (bool, error) {
 	var cerr *glib.Error
 
-	cret := XGFileCopy(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(ProgressCallbackVar), ProgressCallbackDataVar, &cerr)
+	cret := XGFileCopy(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -411,7 +411,7 @@ // When the operation is finished, @callback will be called. You can then call
 // g_file_copy_finish() to get the result of the operation.
 func (x *FileBase) CopyAsync(DestinationVar File, FlagsVar FileCopyFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileCopyAsync(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(ProgressCallbackVar), ProgressCallbackDataVar, glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileCopyAsync(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar, glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -494,7 +494,7 @@ // You can then call g_file_create_finish() to get the result
 // of the operation.
 func (x *FileBase) CreateAsync(FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileCreateAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileCreateAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -570,7 +570,7 @@ // You can then call g_file_create_readwrite_finish() to get
 // the result of the operation.
 func (x *FileBase) CreateReadwriteAsync(FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileCreateReadwriteAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileCreateReadwriteAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -633,7 +633,7 @@ // only be deleted if it is empty.  This has the same semantics as
 // g_unlink().
 func (x *FileBase) DeleteAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileDeleteAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileDeleteAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -682,7 +682,7 @@ // triggering the cancellable object from another thread. If the operation
 // was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
 func (x *FileBase) EjectMountable(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileEjectMountable(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileEjectMountable(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -709,7 +709,7 @@ // triggering the cancellable object from another thread. If the operation
 // was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
 func (x *FileBase) EjectMountableWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileEjectMountableWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileEjectMountableWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -781,7 +781,7 @@ // then call g_file_enumerate_children_finish() to get the result of
 // the operation.
 func (x *FileBase) EnumerateChildrenAsync(AttributesVar string, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileEnumerateChildrenAsync(x.GoPointer(), AttributesVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileEnumerateChildrenAsync(x.GoPointer(), AttributesVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -855,7 +855,7 @@ // You can then call g_file_find_enclosing_mount_finish() to
 // get the result of the operation.
 func (x *FileBase) FindEnclosingMountAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileFindEnclosingMountAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileFindEnclosingMountAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1127,7 +1127,7 @@ //
 // See g_file_load_bytes() for more information.
 func (x *FileBase) LoadBytesAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileLoadBytesAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileLoadBytesAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1185,7 +1185,7 @@ // triggering the cancellable object from another thread. If the operation
 // was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
 func (x *FileBase) LoadContentsAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileLoadContentsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileLoadContentsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1218,7 +1218,7 @@ // triggering the cancellable object from another thread. If the operation
 // was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
 func (x *FileBase) LoadPartialContentsAsync(CancellableVar *Cancellable, ReadMoreCallbackVar *FileReadMoreCallback, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileLoadPartialContentsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(ReadMoreCallbackVar), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileLoadPartialContentsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(ReadMoreCallbackVar), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1266,7 +1266,7 @@
 // Asynchronously creates a directory.
 func (x *FileBase) MakeDirectoryAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileMakeDirectoryAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileMakeDirectoryAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1345,7 +1345,7 @@ // callback will be invoked.
 func (x *FileBase) MeasureDiskUsage(FlagsVar FileMeasureFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileMeasureProgressCallback, ProgressDataVar uintptr, DiskUsageVar uint64, NumDirsVar uint64, NumFilesVar uint64) (bool, error) {
 	var cerr *glib.Error
 
-	cret := XGFileMeasureDiskUsage(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(ProgressCallbackVar), ProgressDataVar, DiskUsageVar, NumDirsVar, NumFilesVar, &cerr)
+	cret := XGFileMeasureDiskUsage(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressDataVar, DiskUsageVar, NumDirsVar, NumFilesVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -1359,7 +1359,7 @@ // This is the asynchronous version of g_file_measure_disk_usage().  See
 // there for more information.
 func (x *FileBase) MeasureDiskUsageAsync(FlagsVar FileMeasureFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileMeasureProgressCallback, ProgressDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileMeasureDiskUsageAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(ProgressCallbackVar), ProgressDataVar, glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileMeasureDiskUsageAsync(x.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressDataVar, glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1475,7 +1475,7 @@ // triggering the cancellable object from another thread. If the operation
 // was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
 func (x *FileBase) MountEnclosingVolume(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileMountEnclosingVolume(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileMountEnclosingVolume(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1504,7 +1504,7 @@ // You can then call g_file_mount_mountable_finish() to get
 // the result of the operation.
 func (x *FileBase) MountMountable(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileMountMountable(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileMountMountable(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1566,7 +1566,7 @@ // move operation isn't available).
 func (x *FileBase) Move(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) (bool, error) {
 	var cerr *glib.Error
 
-	cret := XGFileMove(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(ProgressCallbackVar), ProgressCallbackDataVar, &cerr)
+	cret := XGFileMove(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -1585,7 +1585,7 @@ // When the operation is finished, @callback will be called. You can then call
 // g_file_move_finish() to get the result of the operation.
 func (x *FileBase) MoveAsync(DestinationVar File, FlagsVar FileCopyFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileMoveAsync(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(ProgressCallbackVar), ProgressCallbackDataVar, glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileMoveAsync(x.GoPointer(), DestinationVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar, glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1646,7 +1646,7 @@ // You can then call g_file_open_readwrite_finish() to get
 // the result of the operation.
 func (x *FileBase) OpenReadwriteAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileOpenReadwriteAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileOpenReadwriteAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1694,7 +1694,7 @@ // You can then call g_file_mount_mountable_finish() to get
 // the result of the operation.
 func (x *FileBase) PollMountable(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFilePollMountable(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFilePollMountable(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1740,7 +1740,7 @@
 // Async version of g_file_query_default_handler().
 func (x *FileBase) QueryDefaultHandlerAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileQueryDefaultHandlerAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileQueryDefaultHandlerAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1858,7 +1858,7 @@ // then call g_file_query_info_finish() to get the result of the
 // operation.
 func (x *FileBase) QueryFilesystemInfoAsync(AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileQueryFilesystemInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileQueryFilesystemInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1941,7 +1941,7 @@ // When the operation is finished, @callback will be called. You can
 // then call g_file_query_info_finish() to get the result of the operation.
 func (x *FileBase) QueryInfoAsync(AttributesVar string, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileQueryInfoAsync(x.GoPointer(), AttributesVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileQueryInfoAsync(x.GoPointer(), AttributesVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2043,7 +2043,7 @@ // You can then call g_file_read_finish() to get the result
 // of the operation.
 func (x *FileBase) ReadAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileReadAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileReadAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2137,7 +2137,7 @@ // You can then call g_file_replace_finish() to get the result
 // of the operation.
 func (x *FileBase) ReplaceAsync(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileReplaceAsync(x.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileReplaceAsync(x.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2189,7 +2189,7 @@ // for a #GBytes version that will automatically hold a reference to the
 // contents (without copying) for the duration of the call.
 func (x *FileBase) ReplaceContentsAsync(ContentsVar string, LengthVar uint, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileReplaceContentsAsync(x.GoPointer(), ContentsVar, LengthVar, EtagVar, MakeBackupVar, FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileReplaceContentsAsync(x.GoPointer(), ContentsVar, LengthVar, EtagVar, MakeBackupVar, FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2203,7 +2203,7 @@ // @user_user data, and the operation can be finalized with
 // g_file_replace_contents_finish().
 func (x *FileBase) ReplaceContentsBytesAsync(ContentsVar *glib.Bytes, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileReplaceContentsBytesAsync(x.GoPointer(), ContentsVar, EtagVar, MakeBackupVar, FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileReplaceContentsBytesAsync(x.GoPointer(), ContentsVar, EtagVar, MakeBackupVar, FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2281,7 +2281,7 @@ // You can then call g_file_replace_readwrite_finish() to get
 // the result of the operation.
 func (x *FileBase) ReplaceReadwriteAsync(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileReplaceReadwriteAsync(x.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileReplaceReadwriteAsync(x.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2456,7 +2456,7 @@ // You can then call g_file_set_attributes_finish() to get
 // the result of the operation.
 func (x *FileBase) SetAttributesAsync(InfoVar *FileInfo, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileSetAttributesAsync(x.GoPointer(), InfoVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileSetAttributesAsync(x.GoPointer(), InfoVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2538,7 +2538,7 @@ // You can then call g_file_set_display_name_finish() to get
 // the result of the operation.
 func (x *FileBase) SetDisplayNameAsync(DisplayNameVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileSetDisplayNameAsync(x.GoPointer(), DisplayNameVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileSetDisplayNameAsync(x.GoPointer(), DisplayNameVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2575,7 +2575,7 @@ // You can then call g_file_mount_mountable_finish() to get
 // the result of the operation.
 func (x *FileBase) StartMountable(FlagsVar DriveStartFlags, StartOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileStartMountable(x.GoPointer(), FlagsVar, StartOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileStartMountable(x.GoPointer(), FlagsVar, StartOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2605,7 +2605,7 @@ // You can then call g_file_stop_mountable_finish() to get
 // the result of the operation.
 func (x *FileBase) StopMountable(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileStopMountable(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileStopMountable(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2658,7 +2658,7 @@
 // Asynchronously sends @file to the Trash location, if possible.
 func (x *FileBase) TrashAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileTrashAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileTrashAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2686,7 +2686,7 @@ // You can then call g_file_unmount_mountable_finish() to get
 // the result of the operation.
 func (x *FileBase) UnmountMountable(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileUnmountMountable(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileUnmountMountable(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2716,7 +2716,7 @@ // You can then call g_file_unmount_mountable_finish() to get
 // the result of the operation.
 func (x *FileBase) UnmountMountableWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGFileUnmountMountableWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGFileUnmountMountableWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -3006,6 +3006,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfileattribute.go b/v4/gio/gfileattribute.go
index ea3ff7269729fb5799d4505fef61c5e7665fb882..d296b68d9a8173d27fec8804e00e52dd23050be0 100644
--- a/v4/gio/gfileattribute.go
+++ b/v4/gio/gfileattribute.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -102,6 +102,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfiledescriptorbased.go b/v4/gio/gfiledescriptorbased.go
index 33d33478cc796cb8cdb9abe449c481698ade7026..141f562891438d3c6c6225b720bd361918277020 100644
--- a/v4/gio/gfiledescriptorbased.go
+++ b/v4/gio/gfiledescriptorbased.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -64,6 +64,8 @@
 var XGFileDescriptorBasedGetFd func(uintptr) int
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfileenumerator.go b/v4/gio/gfileenumerator.go
index 031106c4791889ee1b5c025cf0023810ae05613a..adb93d23745d7f59c45ae8a2ff2d75f8e0f4bf90 100644
--- a/v4/gio/gfileenumerator.go
+++ b/v4/gio/gfileenumerator.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -101,7 +101,7 @@ // was cancelled, the error %G_IO_ERROR_CANCELLED will be returned in
 // g_file_enumerator_close_finish().
 func (x *FileEnumerator) CloseAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xFileEnumeratorCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xFileEnumeratorCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -301,7 +301,7 @@ // be executed before an outstanding request with lower priority. Default
 // priority is %G_PRIORITY_DEFAULT.
 func (x *FileEnumerator) NextFilesAsync(NumFilesVar int, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xFileEnumeratorNextFilesAsync(x.GoPointer(), NumFilesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xFileEnumeratorNextFilesAsync(x.GoPointer(), NumFilesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -340,6 +340,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfileicon.go b/v4/gio/gfileicon.go
index db1dcc2e4378c3b0295b6054fe4fd43fe70045ea..cab29c72cf3c94ef049013bfa94599c621ebc2ff 100644
--- a/v4/gio/gfileicon.go
+++ b/v4/gio/gfileicon.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -147,7 +147,7 @@ // g_loadable_icon_load_finish(). For the synchronous, blocking
 // version of this function, see g_loadable_icon_load().
 func (x *FileIcon) LoadAsync(SizeVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -171,6 +171,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfileinfo.go b/v4/gio/gfileinfo.go
index ecf488fa457c9139c6bf792cdefcb13fc3409813..99c05a4dd17e4e6ac3db0266796a1a0e575aa923 100644
--- a/v4/gio/gfileinfo.go
+++ b/v4/gio/gfileinfo.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1362,6 +1362,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfileinputstream.go b/v4/gio/gfileinputstream.go
index 5aac48e48a1292545b03aa7ac9fce1c170f24531..d4059cbb63a40c50c0c3c9e7fa3800008a46e702 100644
--- a/v4/gio/gfileinputstream.go
+++ b/v4/gio/gfileinputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -94,7 +94,7 @@ // triggering the cancellable object from another thread. If the operation
 // was cancelled, the error %G_IO_ERROR_CANCELLED will be set
 func (x *FileInputStream) QueryInfoAsync(AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xFileInputStreamQueryInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xFileInputStreamQueryInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -198,6 +198,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfileiostream.go b/v4/gio/gfileiostream.go
index e902f4d2daf6ff11d3ebad8db71eb92efaf8821b..1a2b8026db1a7e958138b351b0d18b7f464c67d3 100644
--- a/v4/gio/gfileiostream.go
+++ b/v4/gio/gfileiostream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -123,7 +123,7 @@ // For the synchronous version of this function, see
 // g_file_io_stream_query_info().
 func (x *FileIOStream) QueryInfoAsync(AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xFileIOStreamQueryInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xFileIOStreamQueryInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -228,6 +228,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfilemonitor.go b/v4/gio/gfilemonitor.go
index ea68a7d87466bd800343b3a7aa9dd65dd48f735b..916715d4dfda15ec77d63bafd4abe27ba39faf45 100644
--- a/v4/gio/gfilemonitor.go
+++ b/v4/gio/gfilemonitor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -162,6 +162,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfilenamecompleter.go b/v4/gio/gfilenamecompleter.go
index 19cd1733e7914d79f31b8c6d14521149f3b0394c..6399174ffddd412cd827eefffc594ba9c216dfca 100644
--- a/v4/gio/gfilenamecompleter.go
+++ b/v4/gio/gfilenamecompleter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -117,6 +117,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "got-completion-data", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfileoutputstream.go b/v4/gio/gfileoutputstream.go
index 9e57ec5eb6313df8f9b50e6c4d5a2f9556f30781..7bb4974e83242cad09bebd2fd70af03cef0617e5 100644
--- a/v4/gio/gfileoutputstream.go
+++ b/v4/gio/gfileoutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -117,7 +117,7 @@ // For the synchronous version of this function, see
 // g_file_output_stream_query_info().
 func (x *FileOutputStream) QueryInfoAsync(AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xFileOutputStreamQueryInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xFileOutputStreamQueryInfoAsync(x.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -222,6 +222,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfilterinputstream.go b/v4/gio/gfilterinputstream.go
index 91460d7e896702d07a3e1fd9cf80e3ac6ab19412..4caefb079d655227668e7abe04c4912f33974649 100644
--- a/v4/gio/gfilterinputstream.go
+++ b/v4/gio/gfilterinputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -89,6 +89,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gfilteroutputstream.go b/v4/gio/gfilteroutputstream.go
index ef80ee9976243ca12c487b8837537533fa92851f..bb09bb5ed8fee40d0b897081cf67e8159149248b 100644
--- a/v4/gio/gfilteroutputstream.go
+++ b/v4/gio/gfilteroutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -89,6 +89,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gicon.go b/v4/gio/gicon.go
index 76b2a42065058bc177c75bb9ef6f1ff89ca163f2..b511ec95ec6880b4cea59c06a619b2d13764382b 100644
--- a/v4/gio/gicon.go
+++ b/v4/gio/gicon.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -177,6 +177,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/ginetaddress.go b/v4/gio/ginetaddress.go
index de4ab45e70b086d18e9d8e48d5ba5ddd01dd1e9a..850a303bb914ac26e3284a5759686fe386d5a066 100644
--- a/v4/gio/ginetaddress.go
+++ b/v4/gio/ginetaddress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -275,6 +275,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/ginetaddressmask.go b/v4/gio/ginetaddressmask.go
index 801bef93a709b4be2a47add7c2ac9f335eb26268..b5ba7dfa3c4f5744e6d283e3f87a4de3ec255e23 100644
--- a/v4/gio/ginetaddressmask.go
+++ b/v4/gio/ginetaddressmask.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -219,6 +219,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/ginetsocketaddress.go b/v4/gio/ginetsocketaddress.go
index d845cf247417d89148ebbe87fe8abc537f6c64e3..20ef2d1987f39426a656fdc0448b1d5a7f333b9b 100644
--- a/v4/gio/ginetsocketaddress.go
+++ b/v4/gio/ginetsocketaddress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -187,6 +187,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/ginitable.go b/v4/gio/ginitable.go
index 51c86e533b2195b8a5c59f15f46de3b986406fd0..172c7550687566e560a4ad5a6fda27e70fa0bce7 100644
--- a/v4/gio/ginitable.go
+++ b/v4/gio/ginitable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -150,6 +150,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/ginputstream.go b/v4/gio/ginputstream.go
index 7a757bf604b1e3bda829bb711627a28f1fab3749..efcc473b446ac7bba736298d9aafb453dc974076 100644
--- a/v4/gio/ginputstream.go
+++ b/v4/gio/ginputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -116,7 +116,7 @@ // asynchronicity, so they are optional for inheriting classes. However, if you
 // override one you must override all.
 func (x *InputStream) CloseAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xInputStreamCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xInputStreamCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -232,7 +232,7 @@ // value) will be executed before an outstanding request with lower
 // priority. Default priority is %G_PRIORITY_DEFAULT.
 func (x *InputStream) ReadAllAsync(BufferVar []byte, CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xInputStreamReadAllAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xInputStreamReadAllAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -285,7 +285,7 @@ // asynchronicity, so they are optional for inheriting classes. However, if you
 // override one you must override all.
 func (x *InputStream) ReadAsync(BufferVar []byte, CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xInputStreamReadAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xInputStreamReadAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -349,7 +349,7 @@ // value) will be executed before an outstanding request with lower
 // priority. Default priority is %G_PRIORITY_DEFAULT.
 func (x *InputStream) ReadBytesAsync(CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xInputStreamReadBytesAsync(x.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xInputStreamReadBytesAsync(x.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -451,7 +451,7 @@ // implement asynchronicity, so they are optional for inheriting classes.
 // However, if you override one, you must override all.
 func (x *InputStream) SkipAsync(CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xInputStreamSkipAsync(x.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xInputStreamSkipAsync(x.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -481,6 +481,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gio-2.0.go b/v4/gio/gio-2.0.go
index 8f2b33419e6af8f5375f57c4349e99485b82d35d..5cc6b552d2373671d0605ef582320711f86695bd 100644
--- a/v4/gio/gio-2.0.go
+++ b/v4/gio/gio-2.0.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -267,7 +267,7 @@ // g_loadable_icon_load_finish(). For the synchronous, blocking
 // version of this function, see g_loadable_icon_load().
 func (x *BytesIcon) LoadAsync(SizeVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1044,7 +1044,7 @@ // If @callback is %NULL then the D-Bus method call message will be sent with
 // the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
 func (x *DBusConnection) Call(BusNameVar string, ObjectPathVar string, InterfaceNameVar string, MethodNameVar string, ParametersVar *glib.Variant, ReplyTypeVar *glib.VariantType, FlagsVar DBusCallFlags, TimeoutMsecVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusConnectionCall(x.GoPointer(), BusNameVar, ObjectPathVar, InterfaceNameVar, MethodNameVar, ParametersVar, ReplyTypeVar, FlagsVar, TimeoutMsecVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusConnectionCall(x.GoPointer(), BusNameVar, ObjectPathVar, InterfaceNameVar, MethodNameVar, ParametersVar, ReplyTypeVar, FlagsVar, TimeoutMsecVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1132,7 +1132,7 @@ //
 // This method is only available on UNIX.
 func (x *DBusConnection) CallWithUnixFdList(BusNameVar string, ObjectPathVar string, InterfaceNameVar string, MethodNameVar string, ParametersVar *glib.Variant, ReplyTypeVar *glib.VariantType, FlagsVar DBusCallFlags, TimeoutMsecVar int, FdListVar *UnixFDList, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusConnectionCallWithUnixFdList(x.GoPointer(), BusNameVar, ObjectPathVar, InterfaceNameVar, MethodNameVar, ParametersVar, ReplyTypeVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusConnectionCallWithUnixFdList(x.GoPointer(), BusNameVar, ObjectPathVar, InterfaceNameVar, MethodNameVar, ParametersVar, ReplyTypeVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1207,7 +1207,7 @@ // operation. See g_dbus_connection_close_sync() for the synchronous
 // version.
 func (x *DBusConnection) Close(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusConnectionClose(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusConnectionClose(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1339,7 +1339,7 @@ // operation. See g_dbus_connection_flush_sync() for the synchronous
 // version.
 func (x *DBusConnection) Flush(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusConnectionFlush(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusConnectionFlush(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1688,7 +1688,7 @@ // for an example of how to use this low-level API to send and receive
 // UNIX file descriptors.
 func (x *DBusConnection) SendMessageWithReply(MessageVar *DBusMessage, FlagsVar DBusSendMessageFlags, TimeoutMsecVar int, OutSerialVar uint32, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusConnectionSendMessageWithReply(x.GoPointer(), MessageVar.GoPointer(), FlagsVar, TimeoutMsecVar, OutSerialVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusConnectionSendMessageWithReply(x.GoPointer(), MessageVar.GoPointer(), FlagsVar, TimeoutMsecVar, OutSerialVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -1843,7 +1843,7 @@ //
 // This function can never fail.
 func (x *DBusConnection) SignalSubscribe(SenderVar string, InterfaceNameVar string, MemberVar string, ObjectPathVar string, Arg0Var string, FlagsVar DBusSignalFlags, CallbackVar *DBusSignalCallback, UserDataVar uintptr, UserDataFreeFuncVar *glib.DestroyNotify) uint {
 
-	cret := xDBusConnectionSignalSubscribe(x.GoPointer(), SenderVar, InterfaceNameVar, MemberVar, ObjectPathVar, Arg0Var, FlagsVar, glib.NewCallback(CallbackVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))
+	cret := xDBusConnectionSignalSubscribe(x.GoPointer(), SenderVar, InterfaceNameVar, MemberVar, ObjectPathVar, Arg0Var, FlagsVar, glib.NewCallback(CallbackVar), UserDataVar, glib.NewCallbackNullable(UserDataFreeFuncVar))
 	return cret
 }
 
@@ -2009,7 +2009,7 @@ // threads, just implement the #GAsyncInitable interface without overriding
 // any interface methods.
 func (x *DBusConnection) InitAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGAsyncInitableInitAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2119,7 +2119,7 @@ // g_dbus_connection_new_sync() for the synchronous
 // version.
 func DBusConnectionNew(StreamVar *IOStream, GuidVar string, FlagsVar DBusConnectionFlags, ObserverVar *DBusAuthObserver, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusConnectionNew(StreamVar.GoPointer(), GuidVar, FlagsVar, ObserverVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusConnectionNew(StreamVar.GoPointer(), GuidVar, FlagsVar, ObserverVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -2149,7 +2149,7 @@ // g_dbus_connection_new_for_address_sync() for the synchronous
 // version.
 func DBusConnectionNewForAddress(AddressVar string, FlagsVar DBusConnectionFlags, ObserverVar *DBusAuthObserver, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xDBusConnectionNewForAddress(AddressVar, FlagsVar, ObserverVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xDBusConnectionNewForAddress(AddressVar, FlagsVar, ObserverVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -5163,7 +5163,7 @@ // Asynchronous version of g_subprocess_communicate().  Complete
 // invocation with g_subprocess_communicate_finish().
 func (x *Subprocess) CommunicateAsync(StdinBufVar *glib.Bytes, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSubprocessCommunicateAsync(x.GoPointer(), StdinBufVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSubprocessCommunicateAsync(x.GoPointer(), StdinBufVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -5205,7 +5205,7 @@ // Asynchronous version of g_subprocess_communicate_utf8().  Complete
 // invocation with g_subprocess_communicate_utf8_finish().
 func (x *Subprocess) CommunicateUtf8Async(StdinBufVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSubprocessCommunicateUtf8Async(x.GoPointer(), StdinBufVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSubprocessCommunicateUtf8Async(x.GoPointer(), StdinBufVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -5451,7 +5451,7 @@ //
 // This is the asynchronous version of g_subprocess_wait().
 func (x *Subprocess) WaitAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSubprocessWaitAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSubprocessWaitAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -5476,7 +5476,7 @@ //
 // This is the asynchronous version of g_subprocess_wait_check().
 func (x *Subprocess) WaitCheckAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSubprocessWaitCheckAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSubprocessWaitCheckAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -6166,6 +6166,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gioerror.go b/v4/gio/gioerror.go
index ac0d5126898277b98b38aa40b3e72cbf2cdae4ea..f0a6e8e61f8fff845a7b83494745af8d99880f15 100644
--- a/v4/gio/gioerror.go
+++ b/v4/gio/gioerror.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xIoErrorFromErrno func(int) IOErrorEnum
@@ -22,6 +22,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/giomodule.go b/v4/gio/giomodule.go
index 9de21e04934a88548c4d7c27251677403fdefb9f..f39c6d332c2baec443e58a2d0b32d11677facbd3 100644
--- a/v4/gio/giomodule.go
+++ b/v4/gio/giomodule.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -312,6 +312,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gioscheduler.go b/v4/gio/gioscheduler.go
index 7fa161a3819f566b67f9c780d1dd05308931efa4..70d697e292287ba70ae64d3c7b880c9d432ae78f 100644
--- a/v4/gio/gioscheduler.go
+++ b/v4/gio/gioscheduler.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -31,11 +31,13 @@ // by calling g_cancellable_cancel() or by calling
 // g_io_scheduler_cancel_all_jobs().
 func IoSchedulerPushJob(JobFuncVar *IOSchedulerJobFunc, UserDataVar uintptr, NotifyVar *glib.DestroyNotify, IoPriorityVar int, CancellableVar *Cancellable) {
 
-	xIoSchedulerPushJob(glib.NewCallback(JobFuncVar), UserDataVar, glib.NewCallback(NotifyVar), IoPriorityVar, CancellableVar.GoPointer())
+	xIoSchedulerPushJob(glib.NewCallback(JobFuncVar), UserDataVar, glib.NewCallbackNullable(NotifyVar), IoPriorityVar, CancellableVar.GoPointer())
 
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/giostream.go b/v4/gio/giostream.go
index 93d56ac9fb01dc40ab2a4066c1ced3abf8d191fd..5f18d5ee7f7b4e54f7e687ecf1f8134476085927 100644
--- a/v4/gio/giostream.go
+++ b/v4/gio/giostream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -161,7 +161,7 @@ // to implement asynchronicity, so they are optional for inheriting
 // classes. However, if you override one you must override all.
 func (x *IOStream) CloseAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xIOStreamCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xIOStreamCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -260,7 +260,7 @@ // You can then call g_io_stream_splice_finish() to get the
 // result of the operation.
 func (x *IOStream) SpliceAsync(Stream2Var *IOStream, FlagsVar IOStreamSpliceFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xIOStreamSpliceAsync(x.GoPointer(), Stream2Var.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xIOStreamSpliceAsync(x.GoPointer(), Stream2Var.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -290,6 +290,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/giotypes.go b/v4/gio/giotypes.go
index dc48c7b001c664f4ab478bfdf52a50a0de8e3027..4a1f4a9abdc3f69b2859480424b016e0c9d2bd85 100644
--- a/v4/gio/giotypes.go
+++ b/v4/gio/giotypes.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -349,7 +349,7 @@ // that the job was started from, waiting for the result (and thus
 // blocking the I/O job).
 func (x *IOSchedulerJob) SendToMainloop(FuncVar *glib.SourceFunc, UserDataVar uintptr, NotifyVar *glib.DestroyNotify) bool {
 
-	cret := xIOSchedulerJobSendToMainloop(x.GoPointer(), glib.NewCallback(FuncVar), UserDataVar, glib.NewCallback(NotifyVar))
+	cret := xIOSchedulerJobSendToMainloop(x.GoPointer(), glib.NewCallback(FuncVar), UserDataVar, glib.NewCallbackNullable(NotifyVar))
 	return cret
 }
 
@@ -366,7 +366,7 @@ // @func is called, either by passing %NULL as @notify to
 // g_io_scheduler_push_job() or by using refcounting for @user_data.
 func (x *IOSchedulerJob) SendToMainloopAsync(FuncVar *glib.SourceFunc, UserDataVar uintptr, NotifyVar *glib.DestroyNotify) {
 
-	xIOSchedulerJobSendToMainloopAsync(x.GoPointer(), glib.NewCallback(FuncVar), UserDataVar, glib.NewCallback(NotifyVar))
+	xIOSchedulerJobSendToMainloopAsync(x.GoPointer(), glib.NewCallback(FuncVar), UserDataVar, glib.NewCallbackNullable(NotifyVar))
 
 }
 
@@ -890,6 +890,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/glistmodel.go b/v4/gio/glistmodel.go
index 3f73c2bfd0cb1f8a81d0570ce1bce0367b911de8..c452bbee2cfbfc4ba23cd66bd4a9b23a75fb4fd4 100644
--- a/v4/gio/glistmodel.go
+++ b/v4/gio/glistmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -198,6 +198,8 @@ var XGListModelGetObject func(uintptr, uint) uintptr
 var XGListModelItemsChanged func(uintptr, uint, uint, uint)
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gliststore.go b/v4/gio/gliststore.go
index 2f82a5b9be0298822cba91d7c1aeb1bc148caf83..81e019805e5eaea3094c48626d2e5e891791f38f 100644
--- a/v4/gio/gliststore.go
+++ b/v4/gio/gliststore.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -287,6 +287,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gloadableicon.go b/v4/gio/gloadableicon.go
index 65bd77e209cd79b552b6c7dd47d0c123dcb4ae7d..1c8f6ba587bbddf19d405de904d72cf383cbc88d 100644
--- a/v4/gio/gloadableicon.go
+++ b/v4/gio/gloadableicon.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -78,7 +78,7 @@ // g_loadable_icon_load_finish(). For the synchronous, blocking
 // version of this function, see g_loadable_icon_load().
 func (x *LoadableIconBase) LoadAsync(SizeVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGLoadableIconLoadAsync(x.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -106,6 +106,8 @@ var XGLoadableIconLoadAsync func(uintptr, int, uintptr, uintptr, uintptr)
 var XGLoadableIconLoadFinish func(uintptr, uintptr, string, **glib.Error) uintptr
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gmemoryinputstream.go b/v4/gio/gmemoryinputstream.go
index ec0e8c484728006f1e04e7dbe3edb196d783a234..388a20047871208d2a81fa2c833f93c11b5d9948 100644
--- a/v4/gio/gmemoryinputstream.go
+++ b/v4/gio/gmemoryinputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -88,7 +88,7 @@ // Creates a new #GMemoryInputStream with data in memory of a given size.
 func NewMemoryInputStreamFromData(DataVar []byte, LenVar int, DestroyVar *glib.DestroyNotify) *MemoryInputStream {
 	var cls *MemoryInputStream
 
-	cret := xNewMemoryInputStreamFromData(DataVar, LenVar, glib.NewCallback(DestroyVar))
+	cret := xNewMemoryInputStreamFromData(DataVar, LenVar, glib.NewCallbackNullable(DestroyVar))
 
 	if cret == 0 {
 		return nil
@@ -112,7 +112,7 @@
 // Appends @data to data that can be read from the input stream
 func (x *MemoryInputStream) AddData(DataVar []byte, LenVar int, DestroyVar *glib.DestroyNotify) {
 
-	xMemoryInputStreamAddData(x.GoPointer(), DataVar, LenVar, glib.NewCallback(DestroyVar))
+	xMemoryInputStreamAddData(x.GoPointer(), DataVar, LenVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -258,6 +258,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gmemorymonitor.go b/v4/gio/gmemorymonitor.go
index 34e0a4af91ffa6d6116c90396e3da54ca916da91..9c6d2ee026a51424d0388e83718d29f493a6d687 100644
--- a/v4/gio/gmemorymonitor.go
+++ b/v4/gio/gmemorymonitor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -119,6 +119,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gmemoryoutputstream.go b/v4/gio/gmemoryoutputstream.go
index d3893972cc06bd179f1f430c9ca6f544598d77bc..2fad2f0a026a2f5553f9bbbfd54d1caf8785d831 100644
--- a/v4/gio/gmemoryoutputstream.go
+++ b/v4/gio/gmemoryoutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -102,7 +102,7 @@ // ]|
 func NewMemoryOutputStream(DataVar uintptr, SizeVar uint, ReallocFunctionVar *ReallocFunc, DestroyFunctionVar *glib.DestroyNotify) *MemoryOutputStream {
 	var cls *MemoryOutputStream
 
-	cret := xNewMemoryOutputStream(DataVar, SizeVar, glib.NewCallback(ReallocFunctionVar), glib.NewCallback(DestroyFunctionVar))
+	cret := xNewMemoryOutputStream(DataVar, SizeVar, glib.NewCallbackNullable(ReallocFunctionVar), glib.NewCallbackNullable(DestroyFunctionVar))
 
 	if cret == 0 {
 		return nil
@@ -371,6 +371,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gmenumodel.go b/v4/gio/gmenumodel.go
index 3c48e0e01cbaa2f9c0f7ece60553fdd6cd2f805a..f5ddb1ab4569814437b0590eb9e0e3fa016a6b1c 100644
--- a/v4/gio/gmenumodel.go
+++ b/v4/gio/gmenumodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -617,6 +617,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "items-changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gmount.go b/v4/gio/gmount.go
index fde30bce599263e7f7434fd6720cfb50ebb2d85d..6c6321c615830bc1c813420abad546892970911f 100644
--- a/v4/gio/gmount.go
+++ b/v4/gio/gmount.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -113,7 +113,7 @@ // finished by calling g_mount_eject_finish() with the @mount
 // and #GAsyncResult data returned in the @callback.
 func (x *MountBase) Eject(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGMountEject(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGMountEject(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -135,7 +135,7 @@ // finished by calling g_mount_eject_with_operation_finish() with the @mount
 // and #GAsyncResult data returned in the @callback.
 func (x *MountBase) EjectWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGMountEjectWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGMountEjectWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -278,7 +278,7 @@ // is finished by calling g_mount_guess_content_type_finish() with the
 // @mount and #GAsyncResult data returned in the @callback.
 func (x *MountBase) GuessContentType(ForceRescanVar bool, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGMountGuessContentType(x.GoPointer(), ForceRescanVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGMountGuessContentType(x.GoPointer(), ForceRescanVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -358,7 +358,7 @@ // and then remounting not all backends might need to actually be
 // unmounted.
 func (x *MountBase) Remount(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGMountRemount(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGMountRemount(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -390,7 +390,7 @@ // finished by calling g_mount_unmount_finish() with the @mount
 // and #GAsyncResult data returned in the @callback.
 func (x *MountBase) Unmount(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGMountUnmount(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGMountUnmount(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -412,7 +412,7 @@ // finished by calling g_mount_unmount_with_operation_finish() with the @mount
 // and #GAsyncResult data returned in the @callback.
 func (x *MountBase) UnmountWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGMountUnmountWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGMountUnmountWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -468,6 +468,8 @@ var XGMountUnmountWithOperationFinish func(uintptr, uintptr, **glib.Error) bool
 var XGMountUnshadow func(uintptr)
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gmountoperation.go b/v4/gio/gmountoperation.go
index fd4e953e264318161d49209713806884614b706d..8477f277ac35e67503f92dc796e6d5392d842cac 100644
--- a/v4/gio/gmountoperation.go
+++ b/v4/gio/gmountoperation.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -428,6 +428,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "show-unmount-progress", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gnativesocketaddress.go b/v4/gio/gnativesocketaddress.go
index ff3642f7d8f1b80b2b01da240c236ac555cd9c79..eb3504041dffe439efdab3fdc6987b7c39742b01 100644
--- a/v4/gio/gnativesocketaddress.go
+++ b/v4/gio/gnativesocketaddress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -120,6 +120,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gnetworkaddress.go b/v4/gio/gnetworkaddress.go
index e0592ef734e31f9b793e61c2a320376fb04ea572..6c1b78a6f8e2552f9b1a00070e7a551ff15f5977 100644
--- a/v4/gio/gnetworkaddress.go
+++ b/v4/gio/gnetworkaddress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -260,6 +260,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gnetworking.go b/v4/gio/gnetworking.go
index 93201c3c561e30a58a0917d429915ceb4aea26c6..3b8a4da1f2890f8272fe71dceaf3fcd0aaf63191 100644
--- a/v4/gio/gnetworking.go
+++ b/v4/gio/gnetworking.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xNetworkingInit func()
@@ -19,6 +19,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gnetworkmonitor.go b/v4/gio/gnetworkmonitor.go
index 8903a6eee9175eecba7b7222a41e76fdb3c8d7a2..76975ea48f0a8e16b00d096f3e6829d1e19d6ad5 100644
--- a/v4/gio/gnetworkmonitor.go
+++ b/v4/gio/gnetworkmonitor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -100,7 +100,7 @@ // You can then call g_network_monitor_can_reach_finish()
 // to get the result of the operation.
 func (x *NetworkMonitorBase) CanReachAsync(ConnectableVar SocketConnectable, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGNetworkMonitorCanReachAsync(x.GoPointer(), ConnectableVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGNetworkMonitorCanReachAsync(x.GoPointer(), ConnectableVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -191,6 +191,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gnetworkservice.go b/v4/gio/gnetworkservice.go
index d3fbdda01f02b5b398430a1e008fc1ca7b4e35fa..317b0eb8bef88608f17e034e1ed1908b37122124 100644
--- a/v4/gio/gnetworkservice.go
+++ b/v4/gio/gnetworkservice.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -179,6 +179,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/goutputstream.go b/v4/gio/goutputstream.go
index 7ddf0f2f6a12deada4fa2cabfda725ce163e5e5e..f8d8ea4a8f626b609bc464de9d40bf4086ffb4e5 100644
--- a/v4/gio/goutputstream.go
+++ b/v4/gio/goutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -122,7 +122,7 @@ // to implement asynchronicity, so they are optional for inheriting
 // classes. However, if you override one you must override all.
 func (x *OutputStream) CloseAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -173,7 +173,7 @@ // called. You can then call g_output_stream_flush_finish() to get the
 // result of the operation.
 func (x *OutputStream) FlushAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamFlushAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamFlushAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -282,7 +282,7 @@ // For the synchronous, blocking version of this function, see
 // g_output_stream_splice().
 func (x *OutputStream) SpliceAsync(SourceVar *InputStream, FlagsVar OutputStreamSpliceFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamSpliceAsync(x.GoPointer(), SourceVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamSpliceAsync(x.GoPointer(), SourceVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -404,7 +404,7 @@ // Note that no copy of @buffer will be made, so it must stay valid
 // until @callback is called.
 func (x *OutputStream) WriteAllAsync(BufferVar []byte, CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamWriteAllAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamWriteAllAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -470,7 +470,7 @@ // for a #GBytes version that will automatically hold a reference to
 // the contents (without copying) for the duration of the call.
 func (x *OutputStream) WriteAsync(BufferVar []byte, CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamWriteAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamWriteAsync(x.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -515,7 +515,7 @@ // For the synchronous, blocking version of this function, see
 // g_output_stream_write_bytes().
 func (x *OutputStream) WriteBytesAsync(BytesVar *glib.Bytes, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamWriteBytesAsync(x.GoPointer(), BytesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamWriteBytesAsync(x.GoPointer(), BytesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -638,7 +638,7 @@ // until @callback is called. The content of the individual elements
 // of @vectors might be changed by this function.
 func (x *OutputStream) WritevAllAsync(VectorsVar []OutputVector, NVectorsVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamWritevAllAsync(x.GoPointer(), VectorsVar, NVectorsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamWritevAllAsync(x.GoPointer(), VectorsVar, NVectorsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -699,7 +699,7 @@ // Note that no copy of @vectors will be made, so it must stay valid
 // until @callback is called.
 func (x *OutputStream) WritevAsync(VectorsVar []OutputVector, NVectorsVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xOutputStreamWritevAsync(x.GoPointer(), VectorsVar, NVectorsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xOutputStreamWritevAsync(x.GoPointer(), VectorsVar, NVectorsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -729,6 +729,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gpermission.go b/v4/gio/gpermission.go
index 1cba2dae07c348eb95a96e9e9ef490ae722aa603..d374dd941b887f446e9146445926565b58385d39 100644
--- a/v4/gio/gpermission.go
+++ b/v4/gio/gpermission.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -99,7 +99,7 @@ // This is the first half of the asynchronous version of
 // g_permission_acquire().
 func (x *Permission) AcquireAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xPermissionAcquireAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xPermissionAcquireAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -203,7 +203,7 @@ // This is the first half of the asynchronous version of
 // g_permission_release().
 func (x *Permission) ReleaseAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xPermissionReleaseAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xPermissionReleaseAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -237,6 +237,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gpollableinputstream.go b/v4/gio/gpollableinputstream.go
index 6be92533d9ec802aec1dc969ef046494f38c7513..145f6ee4d707cff111e3703056d5b8a2aa39f94a 100644
--- a/v4/gio/gpollableinputstream.go
+++ b/v4/gio/gpollableinputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -134,6 +134,8 @@ var XGPollableInputStreamIsReadable func(uintptr) bool
 var XGPollableInputStreamReadNonblocking func(uintptr, []byte, uint, uintptr, **glib.Error) int
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gpollableoutputstream.go b/v4/gio/gpollableoutputstream.go
index b7198752c3454c7ab15361bd979393e9b3275433..c52a68e0bb7ea71e7571fcc30a9b5f74831a913b 100644
--- a/v4/gio/gpollableoutputstream.go
+++ b/v4/gio/gpollableoutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -173,6 +173,8 @@ var XGPollableOutputStreamWriteNonblocking func(uintptr, []byte, uint, uintptr, **glib.Error) int
 var XGPollableOutputStreamWritevNonblocking func(uintptr, []OutputVector, uint, uint, uintptr, **glib.Error) PollableReturn
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gpollableutils.go b/v4/gio/gpollableutils.go
index d8d3822b17de1fdf68551004c7556304a636a929..ce3cc37b5717ae86ae020eda36db54fe26826138 100644
--- a/v4/gio/gpollableutils.go
+++ b/v4/gio/gpollableutils.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 )
@@ -110,6 +110,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gpowerprofilemonitor.go b/v4/gio/gpowerprofilemonitor.go
index 8d137f991e3042c546e87bd802a3ce8f3194eccf..4f4e15c1d7c8908d922e3d301f1165a961e6e1c0 100644
--- a/v4/gio/gpowerprofilemonitor.go
+++ b/v4/gio/gpowerprofilemonitor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -106,6 +106,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gproxy.go b/v4/gio/gproxy.go
index cd80f9c1dea96408dfb1de9b7af8275a82c212a5..9affdabcafd0aa2b4c082d8718477020e77c50b2 100644
--- a/v4/gio/gproxy.go
+++ b/v4/gio/gproxy.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -83,7 +83,7 @@
 // Asynchronous version of g_proxy_connect().
 func (x *ProxyBase) ConnectAsync(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGProxyConnectAsync(x.GoPointer(), ConnectionVar.GoPointer(), ProxyAddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGProxyConnectAsync(x.GoPointer(), ConnectionVar.GoPointer(), ProxyAddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -148,6 +148,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gproxyaddress.go b/v4/gio/gproxyaddress.go
index bdc36f579eeae0e588adfc8e517a12efa4b5f097..cbe63627a3c37106a624185d2f4ac4744ef91a81 100644
--- a/v4/gio/gproxyaddress.go
+++ b/v4/gio/gproxyaddress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -194,6 +194,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gproxyresolver.go b/v4/gio/gproxyresolver.go
index 1ead1a3c6563ddb93094d228bea09bcd533f7393..e2f6ae6985c140e9775968a7cf56e3b925b0568f 100644
--- a/v4/gio/gproxyresolver.go
+++ b/v4/gio/gproxyresolver.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -99,7 +99,7 @@ // Asynchronous lookup of proxy. See g_proxy_resolver_lookup() for more
 // details.
 func (x *ProxyResolverBase) LookupAsync(UriVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGProxyResolverLookupAsync(x.GoPointer(), UriVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGProxyResolverLookupAsync(x.GoPointer(), UriVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -146,6 +146,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gremoteactiongroup.go b/v4/gio/gremoteactiongroup.go
index 89c43ab5ef1819d78b559df26db38f07b429e0e1..c08bbe7d4a344fffd3a67d0588c3488a5cc66862 100644
--- a/v4/gio/gremoteactiongroup.go
+++ b/v4/gio/gremoteactiongroup.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -105,6 +105,8 @@ var XGRemoteActionGroupActivateActionFull func(uintptr, string, *glib.Variant, *glib.Variant)
 var XGRemoteActionGroupChangeActionStateFull func(uintptr, string, *glib.Variant, *glib.Variant)
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gresolver.go b/v4/gio/gresolver.go
index b9437dc84bb14e0f8c22307c65032abfcf58b6cc..7a10ffeacef63d441283fa1d9e887c476f3fffe8 100644
--- a/v4/gio/gresolver.go
+++ b/v4/gio/gresolver.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -102,7 +102,7 @@ // associated hostname, and eventually calls @callback, which must
 // call g_resolver_lookup_by_address_finish() to get the final result.
 func (x *Resolver) LookupByAddressAsync(AddressVar *InetAddress, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xResolverLookupByAddressAsync(x.GoPointer(), AddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xResolverLookupByAddressAsync(x.GoPointer(), AddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -169,7 +169,7 @@ // must call g_resolver_lookup_by_name_finish() to get the result.
 // See g_resolver_lookup_by_name() for more details.
 func (x *Resolver) LookupByNameAsync(HostnameVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xResolverLookupByNameAsync(x.GoPointer(), HostnameVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xResolverLookupByNameAsync(x.GoPointer(), HostnameVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -216,7 +216,7 @@ // must call g_resolver_lookup_by_name_with_flags_finish() to get the result.
 // See g_resolver_lookup_by_name() for more details.
 func (x *Resolver) LookupByNameWithFlagsAsync(HostnameVar string, FlagsVar ResolverNameLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xResolverLookupByNameWithFlagsAsync(x.GoPointer(), HostnameVar, FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xResolverLookupByNameWithFlagsAsync(x.GoPointer(), HostnameVar, FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -270,7 +270,7 @@ // g_resolver_lookup_records_finish() to get the final result. See
 // g_resolver_lookup_records() for more details.
 func (x *Resolver) LookupRecordsAsync(RrnameVar string, RecordTypeVar ResolverRecordType, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xResolverLookupRecordsAsync(x.GoPointer(), RrnameVar, RecordTypeVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xResolverLookupRecordsAsync(x.GoPointer(), RrnameVar, RecordTypeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -338,7 +338,7 @@ // get the final result. See g_resolver_lookup_service() for more
 // details.
 func (x *Resolver) LookupServiceAsync(ServiceVar string, ProtocolVar string, DomainVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xResolverLookupServiceAsync(x.GoPointer(), ServiceVar, ProtocolVar, DomainVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xResolverLookupServiceAsync(x.GoPointer(), ServiceVar, ProtocolVar, DomainVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -453,6 +453,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gresource.go b/v4/gio/gresource.go
index b05ab9dace0b7350b642c6a463fa339089f337c6..4d59f3b94b3cc5c1e03b528d61326b9224ae0094 100644
--- a/v4/gio/gresource.go
+++ b/v4/gio/gresource.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -202,6 +202,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gseekable.go b/v4/gio/gseekable.go
index ae1ca9b0c6016371b7eef911ce007cdef0952c2e..54d84541feb8c15e3481fd47f767a31cdd079a6a 100644
--- a/v4/gio/gseekable.go
+++ b/v4/gio/gseekable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -141,6 +141,8 @@ var XGSeekableTell func(uintptr) int64
 var XGSeekableTruncate func(uintptr, int64, uintptr, **glib.Error) bool
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsettings.go b/v4/gio/gsettings.go
index f39009acd72987b433e50d3ba4c792bf5efc50fc..8d8e44a39ad9a649a02e9198b55652a3e04979de 100644
--- a/v4/gio/gsettings.go
+++ b/v4/gio/gsettings.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1421,6 +1421,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsettingsbackend.go b/v4/gio/gsettingsbackend.go
index ffe181882a21d76c400768cdb9c05c91e6efe4ee..962e4e13c4e886db899146b1354673734bf669e5 100644
--- a/v4/gio/gsettingsbackend.go
+++ b/v4/gio/gsettingsbackend.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -356,6 +356,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsettingsschema.go b/v4/gio/gsettingsschema.go
index fdd4aefac83f91189321cea467c97fe78bf3da91..7c6ce55fb2653bc95af2c193f4cff5414267b5cd 100644
--- a/v4/gio/gsettingsschema.go
+++ b/v4/gio/gsettingsschema.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -513,6 +513,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsimpleactiongroup.go b/v4/gio/gsimpleactiongroup.go
index 748362024870fd54af98e1139faf2e36777a44a9..f524cbc0fd49a295ca292ca9275ed60ccd413675 100644
--- a/v4/gio/gsimpleactiongroup.go
+++ b/v4/gio/gsimpleactiongroup.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -450,6 +450,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsimpleasyncresult.go b/v4/gio/gsimpleasyncresult.go
index 51fc6412d13eb6b33f120ff768717915fb4c0006..ec5ef2bd95f6b2ac1837f47da253c44779363a68 100644
--- a/v4/gio/gsimpleasyncresult.go
+++ b/v4/gio/gsimpleasyncresult.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -27,7 +27,7 @@ // directly setting the contents of the #GAsyncResult with the given error
 // information.
 func SimpleAsyncReportErrorInIdle(ObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, UserDataVar uintptr, DomainVar glib.Quark, CodeVar int, FormatVar string, varArgs ...interface{}) {
 
-	xSimpleAsyncReportErrorInIdle(ObjectVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, DomainVar, CodeVar, FormatVar, varArgs...)
+	xSimpleAsyncReportErrorInIdle(ObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, DomainVar, CodeVar, FormatVar, varArgs...)
 
 }
 
@@ -38,7 +38,7 @@ // g_simple_async_report_error_in_idle(), but takes a #GError rather
 // than building a new one.
 func SimpleAsyncReportGerrorInIdle(ObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, UserDataVar uintptr, ErrorVar *glib.Error) {
 
-	xSimpleAsyncReportGerrorInIdle(ObjectVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, ErrorVar)
+	xSimpleAsyncReportGerrorInIdle(ObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, ErrorVar)
 
 }
 
@@ -49,7 +49,7 @@ // g_simple_async_report_gerror_in_idle(), but takes over the caller's
 // ownership of @error, so the caller does not have to free it any more.
 func SimpleAsyncReportTakeGerrorInIdle(ObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, UserDataVar uintptr, ErrorVar *glib.Error) {
 
-	xSimpleAsyncReportTakeGerrorInIdle(ObjectVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, ErrorVar)
+	xSimpleAsyncReportTakeGerrorInIdle(ObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, ErrorVar)
 
 }
 
@@ -256,7 +256,7 @@ // this function returns.
 func NewSimpleAsyncResult(SourceObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, UserDataVar uintptr, SourceTagVar uintptr) *SimpleAsyncResult {
 	var cls *SimpleAsyncResult
 
-	cret := xNewSimpleAsyncResult(SourceObjectVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, SourceTagVar)
+	cret := xNewSimpleAsyncResult(SourceObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, SourceTagVar)
 
 	if cret == 0 {
 		return nil
@@ -272,7 +272,7 @@ // Creates a new #GSimpleAsyncResult with a set error.
 func NewSimpleAsyncResultError(SourceObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, UserDataVar uintptr, DomainVar glib.Quark, CodeVar int, FormatVar string, varArgs ...interface{}) *SimpleAsyncResult {
 	var cls *SimpleAsyncResult
 
-	cret := xNewSimpleAsyncResultError(SourceObjectVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, DomainVar, CodeVar, FormatVar, varArgs...)
+	cret := xNewSimpleAsyncResultError(SourceObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, DomainVar, CodeVar, FormatVar, varArgs...)
 
 	if cret == 0 {
 		return nil
@@ -288,7 +288,7 @@ // Creates a #GSimpleAsyncResult from an error condition.
 func NewSimpleAsyncResultFromError(SourceObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, UserDataVar uintptr, ErrorVar *glib.Error) *SimpleAsyncResult {
 	var cls *SimpleAsyncResult
 
-	cret := xNewSimpleAsyncResultFromError(SourceObjectVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, ErrorVar)
+	cret := xNewSimpleAsyncResultFromError(SourceObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, ErrorVar)
 
 	if cret == 0 {
 		return nil
@@ -305,7 +305,7 @@ // caller's ownership of @error, so the caller does not need to free it anymore.
 func NewSimpleAsyncResultTakeError(SourceObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, UserDataVar uintptr, ErrorVar *glib.Error) *SimpleAsyncResult {
 	var cls *SimpleAsyncResult
 
-	cret := xNewSimpleAsyncResultTakeError(SourceObjectVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar, ErrorVar)
+	cret := xNewSimpleAsyncResultTakeError(SourceObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar, ErrorVar)
 
 	if cret == 0 {
 		return nil
@@ -598,6 +598,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsimpleproxyresolver.go b/v4/gio/gsimpleproxyresolver.go
index 5c1217daa0c4aaebd08a6dcf53eb40a7d70c6319..556e81ee39080d717a551bc1e69d24c54763e0cd 100644
--- a/v4/gio/gsimpleproxyresolver.go
+++ b/v4/gio/gsimpleproxyresolver.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -147,7 +147,7 @@ // Asynchronous lookup of proxy. See g_proxy_resolver_lookup() for more
 // details.
 func (x *SimpleProxyResolver) LookupAsync(UriVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGProxyResolverLookupAsync(x.GoPointer(), UriVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGProxyResolverLookupAsync(x.GoPointer(), UriVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -185,6 +185,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocket.go b/v4/gio/gsocket.go
index fd6cd055c43f5c754ec139799d5ec4a1b96ccd96..327f7b1bc0a5cbbb62575e125dc4d4e72d722061 100644
--- a/v4/gio/gsocket.go
+++ b/v4/gio/gsocket.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1473,6 +1473,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketaddress.go b/v4/gio/gsocketaddress.go
index 3f5ef41fc0dece394f7b0ed0befb626ea1baa511..0b6be9bd38edc72f7fb013e29c6cd981c0cd7fcf 100644
--- a/v4/gio/gsocketaddress.go
+++ b/v4/gio/gsocketaddress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -156,6 +156,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketaddressenumerator.go b/v4/gio/gsocketaddressenumerator.go
index ad6a38226cc9a1ab4393ac94d3569acd17a03cb6..4a6eb0a1dff17312218f74f2c725d328c6afced4 100644
--- a/v4/gio/gsocketaddressenumerator.go
+++ b/v4/gio/gsocketaddressenumerator.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -95,7 +95,7 @@ //
 // It is an error to call this multiple times before the previous callback has finished.
 func (x *SocketAddressEnumerator) NextAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketAddressEnumeratorNextAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketAddressEnumeratorNextAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -135,6 +135,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketclient.go b/v4/gio/gsocketclient.go
index 3be0abb97be4e51202a4c14912e0670313ac3790..bf1d6c212afe4529cf182cd72d026caf4b6f6d4d 100644
--- a/v4/gio/gsocketclient.go
+++ b/v4/gio/gsocketclient.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -158,7 +158,7 @@ // called. You can then call g_socket_client_connect_finish() to get
 // the result of the operation.
 func (x *SocketClient) ConnectAsync(ConnectableVar SocketConnectable, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketClientConnectAsync(x.GoPointer(), ConnectableVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketClientConnectAsync(x.GoPointer(), ConnectableVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -242,7 +242,7 @@ // called. You can then call g_socket_client_connect_to_host_finish() to get
 // the result of the operation.
 func (x *SocketClient) ConnectToHostAsync(HostAndPortVar string, DefaultPortVar uint16, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketClientConnectToHostAsync(x.GoPointer(), HostAndPortVar, DefaultPortVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketClientConnectToHostAsync(x.GoPointer(), HostAndPortVar, DefaultPortVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -307,7 +307,7 @@ // This is the asynchronous version of
 // g_socket_client_connect_to_service().
 func (x *SocketClient) ConnectToServiceAsync(DomainVar string, ServiceVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketClientConnectToServiceAsync(x.GoPointer(), DomainVar, ServiceVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketClientConnectToServiceAsync(x.GoPointer(), DomainVar, ServiceVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -382,7 +382,7 @@ // called. You can then call g_socket_client_connect_to_uri_finish() to get
 // the result of the operation.
 func (x *SocketClient) ConnectToUriAsync(UriVar string, DefaultPortVar uint16, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketClientConnectToUriAsync(x.GoPointer(), UriVar, DefaultPortVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketClientConnectToUriAsync(x.GoPointer(), UriVar, DefaultPortVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -744,6 +744,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "event", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketconnectable.go b/v4/gio/gsocketconnectable.go
index bbd459f0b3ba8882fb56352b860fbe9cbc31e79e..773ea8be58729e7a879e9693687eeab9f0d2e7b8 100644
--- a/v4/gio/gsocketconnectable.go
+++ b/v4/gio/gsocketconnectable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -163,6 +163,8 @@ var XGSocketConnectableProxyEnumerate func(uintptr) uintptr
 var XGSocketConnectableToString func(uintptr) string
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketconnection.go b/v4/gio/gsocketconnection.go
index 665c2017176beb08a20864d10272cd9b788c165f..70cbfa62c8bd72c08c9e9522a00bb4ecd80cb149 100644
--- a/v4/gio/gsocketconnection.go
+++ b/v4/gio/gsocketconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -86,7 +86,7 @@ //
 // Use g_socket_connection_connect_finish() to retrieve the result.
 func (x *SocketConnection) ConnectAsync(AddressVar *SocketAddress, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketConnectionConnectAsync(x.GoPointer(), AddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketConnectionConnectAsync(x.GoPointer(), AddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -218,6 +218,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketcontrolmessage.go b/v4/gio/gsocketcontrolmessage.go
index 271a78dbe5cc1e957070a44a7cef3eb6d7aab766..b1b4654553c13e302da6e9fd379284a5fed1c5ed 100644
--- a/v4/gio/gsocketcontrolmessage.go
+++ b/v4/gio/gsocketcontrolmessage.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -144,6 +144,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketlistener.go b/v4/gio/gsocketlistener.go
index 376d289b0590456cbf2581498de3a3fb5f1fc7a1..0c0465b031e102aef15a18c2da733d6e229e003f 100644
--- a/v4/gio/gsocketlistener.go
+++ b/v4/gio/gsocketlistener.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -119,7 +119,7 @@ // called. You can then call g_socket_listener_accept_finish()
 // to get the result of the operation.
 func (x *SocketListener) AcceptAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketListenerAcceptAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketListenerAcceptAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -187,7 +187,7 @@ // called. You can then call g_socket_listener_accept_socket_finish()
 // to get the result of the operation.
 func (x *SocketListener) AcceptSocketAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xSocketListenerAcceptSocketAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xSocketListenerAcceptSocketAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -379,6 +379,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "event", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsocketservice.go b/v4/gio/gsocketservice.go
index 02f2793edb2ef2609c8a5d6a41beac11e7b40c1c..369463f1735b0a152197c06cbb03ec608d041b03 100644
--- a/v4/gio/gsocketservice.go
+++ b/v4/gio/gsocketservice.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -183,6 +183,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "incoming", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gsrvtarget.go b/v4/gio/gsrvtarget.go
index e3c6e843924a6e8f6043a24eec4287f6e9458a01..7bdc5404f90926ab9befd14d2a86f88d0ce3197e 100644
--- a/v4/gio/gsrvtarget.go
+++ b/v4/gio/gsrvtarget.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -17,6 +17,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtask.go b/v4/gio/gtask.go
index cc3b54717d4200de813841a417ff4b5b19ef9f9e..43474147524e1c21fda8cd68da1edc1863fdb737 100644
--- a/v4/gio/gtask.go
+++ b/v4/gio/gtask.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -581,7 +581,7 @@ // g_task_set_check_cancellable() to change it.
 func NewTask(SourceObjectVar *gobject.Object, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, CallbackDataVar uintptr) *Task {
 	var cls *Task
 
-	cret := xNewTask(SourceObjectVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), CallbackDataVar)
+	cret := xNewTask(SourceObjectVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), CallbackDataVar)
 
 	if cret == 0 {
 		return nil
@@ -907,7 +907,7 @@ // valid after calling this, unless you are still holding another
 // reference on it.
 func (x *Task) ReturnPointer(ResultVar uintptr, ResultDestroyVar *glib.DestroyNotify) {
 
-	xTaskReturnPointer(x.GoPointer(), ResultVar, glib.NewCallback(ResultDestroyVar))
+	xTaskReturnPointer(x.GoPointer(), ResultVar, glib.NewCallbackNullable(ResultDestroyVar))
 
 }
 
@@ -1087,7 +1087,7 @@
 // Sets @task's task data (freeing the existing task data, if any).
 func (x *Task) SetTaskData(TaskDataVar uintptr, TaskDataDestroyVar *glib.DestroyNotify) {
 
-	xTaskSetTaskData(x.GoPointer(), TaskDataVar, glib.NewCallback(TaskDataDestroyVar))
+	xTaskSetTaskData(x.GoPointer(), TaskDataVar, glib.NewCallbackNullable(TaskDataDestroyVar))
 
 }
 
@@ -1161,7 +1161,7 @@ //
 // See also g_task_report_new_error().
 func TaskReportError(SourceObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, CallbackDataVar uintptr, SourceTagVar uintptr, ErrorVar *glib.Error) {
 
-	xTaskReportError(SourceObjectVar.GoPointer(), glib.NewCallback(CallbackVar), CallbackDataVar, SourceTagVar, ErrorVar)
+	xTaskReportError(SourceObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), CallbackDataVar, SourceTagVar, ErrorVar)
 
 }
 
@@ -1178,11 +1178,13 @@ //
 // See also g_task_report_error().
 func TaskReportNewError(SourceObjectVar *gobject.Object, CallbackVar *AsyncReadyCallback, CallbackDataVar uintptr, SourceTagVar uintptr, DomainVar glib.Quark, CodeVar int, FormatVar string, varArgs ...interface{}) {
 
-	xTaskReportNewError(SourceObjectVar.GoPointer(), glib.NewCallback(CallbackVar), CallbackDataVar, SourceTagVar, DomainVar, CodeVar, FormatVar, varArgs...)
+	xTaskReportNewError(SourceObjectVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), CallbackDataVar, SourceTagVar, DomainVar, CodeVar, FormatVar, varArgs...)
 
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtcpconnection.go b/v4/gio/gtcpconnection.go
index a962f029402a117794c69b1b892b7d63c3f20c29..8efc45c2b63aad177f14c9274a0bacf05e16193c 100644
--- a/v4/gio/gtcpconnection.go
+++ b/v4/gio/gtcpconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -85,6 +85,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtcpwrapperconnection.go b/v4/gio/gtcpwrapperconnection.go
index 7fc9795dc477750df2ada68e60eba376712c85bd..dc2cc2d099fbbebb3642a8bdfa7a6fac84c51688 100644
--- a/v4/gio/gtcpwrapperconnection.go
+++ b/v4/gio/gtcpwrapperconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -95,6 +95,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gthemedicon.go b/v4/gio/gthemedicon.go
index 8e8f3908b52b82c062374ae2178847d5a1111d79..9fff80cf37865a946498bb1c225dbe90b6519d30 100644
--- a/v4/gio/gthemedicon.go
+++ b/v4/gio/gthemedicon.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -191,6 +191,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gthreadedsocketservice.go b/v4/gio/gthreadedsocketservice.go
index aea1647f74eb0eaf80e8da0f1e70badb6c7a4e96..e6679a11f13880801b9ace0fc19e97f2e60a91a9 100644
--- a/v4/gio/gthreadedsocketservice.go
+++ b/v4/gio/gthreadedsocketservice.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -113,6 +113,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "run", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlsbackend.go b/v4/gio/gtlsbackend.go
index 1fc3e7fead9e7b4764e19c488115dad6250198de..521d83aa857931ec7bc20de2334f99577565b0a9 100644
--- a/v4/gio/gtlsbackend.go
+++ b/v4/gio/gtlsbackend.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -180,6 +180,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlscertificate.go b/v4/gio/gtlscertificate.go
index dfecd8fcfda58edcfe80323cbdb132a68d1b48b6..75bc0e559253aa45cece9616e3d750926b16dd6e 100644
--- a/v4/gio/gtlscertificate.go
+++ b/v4/gio/gtlscertificate.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -415,6 +415,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlsclientconnection.go b/v4/gio/gtlsclientconnection.go
index 2ef6651116a543b2b28b2611c6301baa97534284..550e65f8092d76115a021654ac24c9b1f1d026e8 100644
--- a/v4/gio/gtlsclientconnection.go
+++ b/v4/gio/gtlsclientconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -216,6 +216,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlsconnection.go b/v4/gio/gtlsconnection.go
index c3ad7527259e731101d4c638807e58fc7b911a9d..2603be9fc70553488ed6e4938d5f4f62178fa4b5 100644
--- a/v4/gio/gtlsconnection.go
+++ b/v4/gio/gtlsconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -302,7 +302,7 @@ // Asynchronously performs a TLS handshake on @conn. See
 // g_tls_connection_handshake() for more information.
 func (x *TlsConnection) HandshakeAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xTlsConnectionHandshakeAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xTlsConnectionHandshakeAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -533,6 +533,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "accept-certificate", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlsdatabase.go b/v4/gio/gtlsdatabase.go
index a88da1bca462f1d0f51500e6ce4e4496ad7dfc4d..82fc52c615b45231bee24b78bbe8019cadfe0e67 100644
--- a/v4/gio/gtlsdatabase.go
+++ b/v4/gio/gtlsdatabase.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -123,7 +123,7 @@ // Asynchronously look up a certificate by its handle in the database. See
 // g_tls_database_lookup_certificate_for_handle() for more information.
 func (x *TlsDatabase) LookupCertificateForHandleAsync(HandleVar string, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xTlsDatabaseLookupCertificateForHandleAsync(x.GoPointer(), HandleVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xTlsDatabaseLookupCertificateForHandleAsync(x.GoPointer(), HandleVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -198,7 +198,7 @@ // Asynchronously look up the issuer of @certificate in the database. See
 // g_tls_database_lookup_certificate_issuer() for more information.
 func (x *TlsDatabase) LookupCertificateIssuerAsync(CertificateVar *TlsCertificate, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xTlsDatabaseLookupCertificateIssuerAsync(x.GoPointer(), CertificateVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xTlsDatabaseLookupCertificateIssuerAsync(x.GoPointer(), CertificateVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -251,7 +251,7 @@ // of of this asynchronous operation. The byte array should not be modified during
 // this time.
 func (x *TlsDatabase) LookupCertificatesIssuedByAsync(IssuerRawDnVar []byte, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xTlsDatabaseLookupCertificatesIssuedByAsync(x.GoPointer(), IssuerRawDnVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xTlsDatabaseLookupCertificatesIssuedByAsync(x.GoPointer(), IssuerRawDnVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -350,7 +350,7 @@ // looking up and adding any missing certificates to the chain. See
 // g_tls_database_verify_chain() for more information.
 func (x *TlsDatabase) VerifyChainAsync(ChainVar *TlsCertificate, PurposeVar string, IdentityVar SocketConnectable, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseVerifyFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xTlsDatabaseVerifyChainAsync(x.GoPointer(), ChainVar.GoPointer(), PurposeVar, IdentityVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xTlsDatabaseVerifyChainAsync(x.GoPointer(), ChainVar.GoPointer(), PurposeVar, IdentityVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -390,6 +390,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlsfiledatabase.go b/v4/gio/gtlsfiledatabase.go
index 6ff159fce156892a7665adb14f365993c1240c7b..5013f6f3261fc6f0b4799a93119a9f0f03bf2b3d 100644
--- a/v4/gio/gtlsfiledatabase.go
+++ b/v4/gio/gtlsfiledatabase.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -78,6 +78,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlsinteraction.go b/v4/gio/gtlsinteraction.go
index 0bf9c583dd2d3f112cc638e621b4ee96935de889..406279411a74b3817b18dce1abf34e7c0f39caf6 100644
--- a/v4/gio/gtlsinteraction.go
+++ b/v4/gio/gtlsinteraction.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -127,7 +127,7 @@ //
 // Certain implementations may not support immediate cancellation.
 func (x *TlsInteraction) AskPasswordAsync(PasswordVar *TlsPassword, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xTlsInteractionAskPasswordAsync(x.GoPointer(), PasswordVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xTlsInteractionAskPasswordAsync(x.GoPointer(), PasswordVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -259,7 +259,7 @@ // when the operation completes. Alternatively the user may abort this certificate
 // request, which will usually abort the TLS connection.
 func (x *TlsInteraction) RequestCertificateAsync(ConnectionVar *TlsConnection, FlagsVar TlsCertificateRequestFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xTlsInteractionRequestCertificateAsync(x.GoPointer(), ConnectionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xTlsInteractionRequestCertificateAsync(x.GoPointer(), ConnectionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -298,6 +298,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlspassword.go b/v4/gio/gtlspassword.go
index 05f353653629e33b4043fc3704f85b550a77824d..fab6c641af3eeb869e711d496cf2c2cfc7a629e5 100644
--- a/v4/gio/gtlspassword.go
+++ b/v4/gio/gtlspassword.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -154,7 +154,7 @@ // calculated automatically. (Note that the terminating nul is not
 // considered part of the password in this case.)
 func (x *TlsPassword) SetValueFull(ValueVar []byte, LengthVar int, DestroyVar *glib.DestroyNotify) {
 
-	xTlsPasswordSetValueFull(x.GoPointer(), ValueVar, LengthVar, glib.NewCallback(DestroyVar))
+	xTlsPasswordSetValueFull(x.GoPointer(), ValueVar, LengthVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -181,6 +181,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gtlsserverconnection.go b/v4/gio/gtlsserverconnection.go
index afed9038df01ef227c8bc76579ffbd49349336d4..27e4c6cb223442bb28f596be140a69a3d686bc91 100644
--- a/v4/gio/gtlsserverconnection.go
+++ b/v4/gio/gtlsserverconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -77,6 +77,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixconnection.go b/v4/gio/gunixconnection.go
index a013697c283e457cdd9e54f5cd02b5821a5ff399..99b88a713f35284677c588c12eb86f4d468ede8e 100644
--- a/v4/gio/gunixconnection.go
+++ b/v4/gio/gunixconnection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -106,7 +106,7 @@ // When the operation is finished, @callback will be called. You can then call
 // g_unix_connection_receive_credentials_finish() to get the result of the operation.
 func (x *UnixConnection) ReceiveCredentialsAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xUnixConnectionReceiveCredentialsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xUnixConnectionReceiveCredentialsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -195,7 +195,7 @@ // When the operation is finished, @callback will be called. You can then call
 // g_unix_connection_send_credentials_finish() to get the result of the operation.
 func (x *UnixConnection) SendCredentialsAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	xUnixConnectionSendCredentialsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xUnixConnectionSendCredentialsAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -246,6 +246,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixcredentialsmessage.go b/v4/gio/gunixcredentialsmessage.go
index cd9ed78aeb03dbb017df7b6617acd037aa38aabb..7a68621e531cd3e736003dfaa81abe05f858d7ba 100644
--- a/v4/gio/gunixcredentialsmessage.go
+++ b/v4/gio/gunixcredentialsmessage.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -135,6 +135,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixfdlist.go b/v4/gio/gunixfdlist.go
index e85730f827f760ea92e5bdfd865627c45c7e4b93..c2d7877a03b3855d8e21748726ffd4a7f27321b4 100644
--- a/v4/gio/gunixfdlist.go
+++ b/v4/gio/gunixfdlist.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -214,6 +214,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixfdmessage.go b/v4/gio/gunixfdmessage.go
index e477e3fa49d94222afb708ac870206320b549179..7b6564c47b18884bf6d2326210dac6fa933be427 100644
--- a/v4/gio/gunixfdmessage.go
+++ b/v4/gio/gunixfdmessage.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -169,6 +169,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixinputstream.go b/v4/gio/gunixinputstream.go
index 09808e86b1622c5bbdda6993ee96424f753c3526..a6fcd46c801e81a2a3ded4e8d593a2830609f886 100644
--- a/v4/gio/gunixinputstream.go
+++ b/v4/gio/gunixinputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -177,6 +177,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixmounts.go b/v4/gio/gunixmounts.go
index 656801ccbaf597973b0b1a7a6799a6bb59a1c423..24482f810717af7d989b501908bef8ddf2beb0de 100644
--- a/v4/gio/gunixmounts.go
+++ b/v4/gio/gunixmounts.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -615,6 +615,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixoutputstream.go b/v4/gio/gunixoutputstream.go
index 25e8ac22476598f54337fd854f69a87ca9af9c60..72032c39d76d97f922d59ebf7790da11c75c6be3 100644
--- a/v4/gio/gunixoutputstream.go
+++ b/v4/gio/gunixoutputstream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -208,6 +208,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gunixsocketaddress.go b/v4/gio/gunixsocketaddress.go
index 2c7111f636cf31f3c6d39f934029eee8878fb8d5..27b9a4284bd22a8556bacb1d438570484d34a224 100644
--- a/v4/gio/gunixsocketaddress.go
+++ b/v4/gio/gunixsocketaddress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -255,6 +255,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gvfs.go b/v4/gio/gvfs.go
index 680c87702984f73222c1bc6bf14d65667958d32f..2106c72323d69fd237ebef92b341f7cc2de5cd47 100644
--- a/v4/gio/gvfs.go
+++ b/v4/gio/gvfs.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -149,7 +149,7 @@ // It's an error to call this function twice with the same scheme. To unregister
 // a custom URI scheme, use g_vfs_unregister_uri_scheme().
 func (x *Vfs) RegisterUriScheme(SchemeVar string, UriFuncVar *VfsFileLookupFunc, UriDataVar uintptr, UriDestroyVar *glib.DestroyNotify, ParseNameFuncVar *VfsFileLookupFunc, ParseNameDataVar uintptr, ParseNameDestroyVar *glib.DestroyNotify) bool {
 
-	cret := xVfsRegisterUriScheme(x.GoPointer(), SchemeVar, glib.NewCallback(UriFuncVar), UriDataVar, glib.NewCallback(UriDestroyVar), glib.NewCallback(ParseNameFuncVar), ParseNameDataVar, glib.NewCallback(ParseNameDestroyVar))
+	cret := xVfsRegisterUriScheme(x.GoPointer(), SchemeVar, glib.NewCallbackNullable(UriFuncVar), UriDataVar, glib.NewCallbackNullable(UriDestroyVar), glib.NewCallbackNullable(ParseNameFuncVar), ParseNameDataVar, glib.NewCallbackNullable(ParseNameDestroyVar))
 	return cret
 }
 
@@ -209,6 +209,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gvolume.go b/v4/gio/gvolume.go
index 01e9199830b07ca7230a44abd394c33610796335..14cdfe8fa74aa29dc043a8eb3bef0632457e4395 100644
--- a/v4/gio/gvolume.go
+++ b/v4/gio/gvolume.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -126,7 +126,7 @@ // finished by calling g_volume_eject_finish() with the @volume
 // and #GAsyncResult returned in the @callback.
 func (x *VolumeBase) Eject(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGVolumeEject(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGVolumeEject(x.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -148,7 +148,7 @@ // finished by calling g_volume_eject_with_operation_finish() with the @volume
 // and #GAsyncResult data returned in the @callback.
 func (x *VolumeBase) EjectWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGVolumeEjectWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGVolumeEjectWithOperation(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -310,7 +310,7 @@ // finished by calling g_volume_mount_finish() with the @volume
 // and #GAsyncResult returned in the @callback.
 func (x *VolumeBase) Mount(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
 
-	XGVolumeMount(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	XGVolumeMount(x.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -383,6 +383,8 @@ 	VOLUME_IDENTIFIER_KIND_UUID string = "uuid"
 )
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gvolumemonitor.go b/v4/gio/gvolumemonitor.go
index 6f36bcf9e7685f0b09e869f91c6c7d0f615a43bd..b0c9d14d5d131df5c2db83551cd197d938ad8b84 100644
--- a/v4/gio/gvolumemonitor.go
+++ b/v4/gio/gvolumemonitor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -437,6 +437,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gzlibcompressor.go b/v4/gio/gzlibcompressor.go
index e3b1968eb8cf5f74cea2775027ac0218458b7377..ce675b51f279c653c8a38a709fea29a4266cc06b 100644
--- a/v4/gio/gzlibcompressor.go
+++ b/v4/gio/gzlibcompressor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -203,6 +203,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/gzlibdecompressor.go b/v4/gio/gzlibdecompressor.go
index 63428384813bea7f0ea62a867687b8b39346ecdf..8b5040d0b5962d1cc1d66f0502a9205c131d52f7 100644
--- a/v4/gio/gzlibdecompressor.go
+++ b/v4/gio/gzlibdecompressor.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -191,6 +191,8 @@
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gio/main.go b/v4/gio/main.go
index 2c5628c58e0d65ec6ab7a32da89cad1e1c170c82..b54970150d014c438e1eeff2d0cdf2041d190c4b 100644
--- a/v4/gio/main.go
+++ b/v4/gio/main.go
@@ -3,7 +3,7 @@ package gio
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -16,6 +16,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GIO", "gio-2.0")
+	core.SetSharedLibrary("GIO", "libgio-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/garray.go b/v4/glib/garray.go
index 1d651b70c489bac8abcb90bc06ddaa00c9d2295b..c57fb6a63c2a217c9a83a7016d1442d8f31464b4 100644
--- a/v4/glib/garray.go
+++ b/v4/glib/garray.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -435,11 +435,13 @@ // and @needle as its second parameter. If @equal_func is %NULL, pointer
 // equality is used.
 func PtrArrayFindWithEqualFunc(HaystackVar []uintptr, NeedleVar uintptr, EqualFuncVar *EqualFunc, IndexVar uint) bool {
 
-	cret := xPtrArrayFindWithEqualFunc(HaystackVar, NeedleVar, NewCallback(EqualFuncVar), IndexVar)
+	cret := xPtrArrayFindWithEqualFunc(HaystackVar, NeedleVar, NewCallbackNullable(EqualFuncVar), IndexVar)
 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gasyncqueue.go b/v4/glib/gasyncqueue.go
index 6397aa5bed25ac4b36b4dde06538ca453e0d4636..8e591eed0ac422e96c48dc03c73dd64c5f03926e 100644
--- a/v4/glib/gasyncqueue.go
+++ b/v4/glib/gasyncqueue.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // An opaque data structure which represents an asynchronous queue.
@@ -388,6 +388,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gatomic.go b/v4/glib/gatomic.go
index 87c34006e12731bd141e4f7d9a681e894eafb4ef..86afd09aed2384d68602067b427a887c399d3940 100644
--- a/v4/glib/gatomic.go
+++ b/v4/glib/gatomic.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xAtomicIntAdd func(int, int) int
@@ -296,6 +296,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gbacktrace.go b/v4/glib/gbacktrace.go
index bb9f00dd3c93ac129311a1116805b12798942b4d..6d06002ab1f2f8c234661a6fa3502a419552a25b 100644
--- a/v4/glib/gbacktrace.go
+++ b/v4/glib/gbacktrace.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xOnErrorQuery func(string)
@@ -86,6 +86,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gbase64.go b/v4/glib/gbase64.go
index 01d51a9e0bbbf5b1fede8e7f3da2d02ab0418d29..5650703a102423363bc0a3f89dce00761c201566 100644
--- a/v4/glib/gbase64.go
+++ b/v4/glib/gbase64.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xBase64Decode func(string, uint) uintptr
@@ -96,6 +96,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gbitlock.go b/v4/glib/gbitlock.go
index 05448d2e9cee42e347c475f01e703b3d44d30fbf..4a7b749cab9d2662a0b993ab1f028674d424e396 100644
--- a/v4/glib/gbitlock.go
+++ b/v4/glib/gbitlock.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xBitLock func(int, int)
@@ -114,6 +114,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gbookmarkfile.go b/v4/glib/gbookmarkfile.go
index d75d4bf9aa1a5e2543713554a2c30ea0190a2a55..a3adc17a3becbfc8db3fbf5b9cb84a5af6983a3c 100644
--- a/v4/glib/gbookmarkfile.go
+++ b/v4/glib/gbookmarkfile.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // An opaque data structure representing a set of bookmarks.
@@ -839,6 +839,8 @@ 	GBookmarkFileErrorFileNotFoundValue BookmarkFileError = 7
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gcharset.go b/v4/glib/gcharset.go
index f35e6c885eac5208af2f5c95bdc549fb374d1074..6f412b4264c2f7308e6360fcedc1033670c7aa21 100644
--- a/v4/glib/gcharset.go
+++ b/v4/glib/gcharset.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xGetCharset func(string) bool
@@ -129,6 +129,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gchecksum.go b/v4/glib/gchecksum.go
index 614922866213b205782cfa43ab88c8da089ea46d..0edf293c2a0473afe89703f631b1026a8569bf6b 100644
--- a/v4/glib/gchecksum.go
+++ b/v4/glib/gchecksum.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -184,6 +184,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gconvert.go b/v4/glib/gconvert.go
index 29ee353eb837ca8e39e0f47e7033ee5d07967e6c..5af7a3d8fb6ce90ea5ff6ddc8dd14e02147f8cb0 100644
--- a/v4/glib/gconvert.go
+++ b/v4/glib/gconvert.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The GIConv struct wraps an iconv() conversion descriptor. It contains
@@ -423,6 +423,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gdataset.go b/v4/glib/gdataset.go
index a93f8d8c4df16a4559aba19326eedc0f4a247461..1b359585416ab358077a3af67b6840e77e9e5f08 100644
--- a/v4/glib/gdataset.go
+++ b/v4/glib/gdataset.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Specifies the type of function passed to g_dataset_foreach(). It is
@@ -104,7 +104,7 @@ // This function can be useful to avoid races when multiple
 // threads are using the same datalist and the same key.
 func DatalistIdDupData(DatalistVar **Data, KeyIdVar Quark, DupFuncVar *DuplicateFunc, UserDataVar uintptr) uintptr {
 
-	cret := xDatalistIdDupData(DatalistVar, KeyIdVar, NewCallback(DupFuncVar), UserDataVar)
+	cret := xDatalistIdDupData(DatalistVar, KeyIdVar, NewCallbackNullable(DupFuncVar), UserDataVar)
 	return cret
 }
 
@@ -144,7 +144,7 @@ // or may not include using @old_destroy as sometimes replacement
 // should not destroy the object in the normal way.
 func DatalistIdReplaceData(DatalistVar **Data, KeyIdVar Quark, OldvalVar uintptr, NewvalVar uintptr, DestroyVar *DestroyNotify, OldDestroyVar *DestroyNotify) bool {
 
-	cret := xDatalistIdReplaceData(DatalistVar, KeyIdVar, OldvalVar, NewvalVar, NewCallback(DestroyVar), NewCallback(OldDestroyVar))
+	cret := xDatalistIdReplaceData(DatalistVar, KeyIdVar, OldvalVar, NewvalVar, NewCallbackNullable(DestroyVar), NewCallback(OldDestroyVar))
 	return cret
 }
 
@@ -156,7 +156,7 @@ // Any previous data with the same key is removed, and its destroy
 // function is called.
 func DatalistIdSetDataFull(DatalistVar **Data, KeyIdVar Quark, DataVar uintptr, DestroyFuncVar *DestroyNotify) {
 
-	xDatalistIdSetDataFull(DatalistVar, KeyIdVar, DataVar, NewCallback(DestroyFuncVar))
+	xDatalistIdSetDataFull(DatalistVar, KeyIdVar, DataVar, NewCallbackNullable(DestroyFuncVar))
 
 }
 
@@ -251,6 +251,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gdate.go b/v4/glib/gdate.go
index 28be2ecfa4f665e057884171a0f3ca97141d9c95..1d12e4b5d261efa573d1dfe82ff335300dbb450e 100644
--- a/v4/glib/gdate.go
+++ b/v4/glib/gdate.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -733,6 +733,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gdatetime.go b/v4/glib/gdatetime.go
index 97ac5f0a4477d40ddadc95fcd11372ffa682695a..3c39a5cdb5e14da88528eb30c2ff463e8c1d4bf9 100644
--- a/v4/glib/gdatetime.go
+++ b/v4/glib/gdatetime.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -841,6 +841,8 @@ 	TIME_SPAN_SECOND int64 = 1000000
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gdir.go b/v4/glib/gdir.go
index a3beaabf8a68bb74ab98212c0442a95a456ab51e..225ef040634b0649d8425184d821a52737202674 100644
--- a/v4/glib/gdir.go
+++ b/v4/glib/gdir.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // An opaque structure representing an opened directory.
@@ -59,6 +59,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/genviron.go b/v4/glib/genviron.go
index 114ae7683ce02bfc887f44eb16fc81c1fcacfd81..63e339a90b93506188c533f64f9be22320cd663c 100644
--- a/v4/glib/genviron.go
+++ b/v4/glib/genviron.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xEnvironGetenv func([]string, string) string
@@ -138,6 +138,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gerror.go b/v4/glib/gerror.go
index 0313a8b45531f072929ce78198d85f7859c55446..7f51f39aaf40edb51328d88f5c7a2deb3ae7c8d7 100644
--- a/v4/glib/gerror.go
+++ b/v4/glib/gerror.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -217,6 +217,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gfileutils.go b/v4/glib/gfileutils.go
index f7d00987db7c8b6c551dfe98f2dc94e13d267235..c603237295e1a26d5cdf77882fa7215d04b2ad1b 100644
--- a/v4/glib/gfileutils.go
+++ b/v4/glib/gfileutils.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Flags to pass to g_file_set_contents_full() to affect its safety and
@@ -713,6 +713,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/ggettext.go b/v4/glib/ggettext.go
index 1fa9d10dbb3e3efbcc0d487f774c24baa3ececee..3eeede8612263e5d563dc2f1086b433064056da4 100644
--- a/v4/glib/ggettext.go
+++ b/v4/glib/ggettext.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xDcgettext func(string, string, int) string
@@ -121,6 +121,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/ghash.go b/v4/glib/ghash.go
index 643f97ea534a204a77b371de7558791f79f6dc17..515c6432e9294d1b9c706ec6d930d1729ecce281 100644
--- a/v4/glib/ghash.go
+++ b/v4/glib/ghash.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -531,6 +531,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/ghmac.go b/v4/glib/ghmac.go
index 934f71c97aef6fa44949fbec458f9d649257a68a..22c103a0bf0b7732f950ec7eaaca3629ca82f5a7 100644
--- a/v4/glib/ghmac.go
+++ b/v4/glib/ghmac.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // An opaque structure representing a HMAC operation.
@@ -133,6 +133,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/ghook.go b/v4/glib/ghook.go
index ae7131a7e27c35bdf58f39e22bedb5611e0073f3..3f802ea2a2ff85be3f88907bc4309b839d5923e7 100644
--- a/v4/glib/ghook.go
+++ b/v4/glib/ghook.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Defines the type of a hook function that can be invoked
@@ -230,6 +230,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/ghostutils.go b/v4/glib/ghostutils.go
index b5f880e9c817c3cd0c0305a1e438adcbf6fc0cb6..23a55a1c47451389c6d6c793fc5944ddad44faab 100644
--- a/v4/glib/ghostutils.go
+++ b/v4/glib/ghostutils.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xHostnameIsAsciiEncoded func(string) bool
@@ -76,6 +76,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/giochannel.go b/v4/glib/giochannel.go
index c0c1dfa442114742eb994c42590721142ca154d2..c7736d371f2678bb5a94a5fd47505b1cc0b27969 100644
--- a/v4/glib/giochannel.go
+++ b/v4/glib/giochannel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -733,6 +733,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gkeyfile.go b/v4/glib/gkeyfile.go
index 160abf251723f20f7949e0c1b05e72e2e62c9a5a..18a5328b64872070fa94a72249e7f3b8ad98937d 100644
--- a/v4/glib/gkeyfile.go
+++ b/v4/glib/gkeyfile.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -927,6 +927,8 @@ 	GKeyFileErrorInvalidValueValue KeyFileError = 5
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/glib-2.0.go b/v4/glib/glib-2.0.go
index a2477375cdc465faa4d70614dbb7ad7f49a03a24..fe24c16c47e2a028883a8426d5acd3e2b65ffb0e 100644
--- a/v4/glib/glib-2.0.go
+++ b/v4/glib/glib-2.0.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -44,6 +44,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/glib-types.go b/v4/glib/glib-types.go
index d8e5daf21d3430046f54f2ec5d9b3a7d09f7c8a7..ec82416a9fb26207fef27309b618284f2189cc8d 100644
--- a/v4/glib/glib-types.go
+++ b/v4/glib/glib-types.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -26,6 +26,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/glib-unix.go b/v4/glib/glib-unix.go
index b5fbc8f09de814901686df8842f587668d86c704..b4856eca1843843da4109622ff4996aae85dc407 100644
--- a/v4/glib/glib-unix.go
+++ b/v4/glib/glib-unix.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The type of functions to be called when a UNIX fd watch source
@@ -172,6 +172,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/glist.go b/v4/glib/glist.go
index 72891c295cdb606b0de55832b5d76151c64ba678..52681b9722ece59833eac9809e527d13a393b294 100644
--- a/v4/glib/glist.go
+++ b/v4/glib/glist.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The #GList struct is used for each element in a doubly-linked list.
@@ -31,11 +31,13 @@ //
 // @list_ptr must be a valid pointer. If @list_ptr points to a null #GList, this does nothing.
 func ClearList(ListPtrVar **List, DestroyVar *DestroyNotify) {
 
-	xClearList(ListPtrVar, NewCallback(DestroyVar))
+	xClearList(ListPtrVar, NewCallbackNullable(DestroyVar))
 
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gmain.go b/v4/glib/gmain.go
index f03a282b00ebccabd39518052c46de035969b8fc..232772d257b5cc2ad849b0ee7e022e4dbf56e120 100644
--- a/v4/glib/gmain.go
+++ b/v4/glib/gmain.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -224,7 +224,7 @@ // @notify should not assume that it is called from any particular
 // thread or with any particular context acquired.
 func (x *MainContext) InvokeFull(PriorityVar int, FunctionVar *SourceFunc, DataVar uintptr, NotifyVar *DestroyNotify) {
 
-	xMainContextInvokeFull(x.GoPointer(), PriorityVar, NewCallback(FunctionVar), DataVar, NewCallback(NotifyVar))
+	xMainContextInvokeFull(x.GoPointer(), PriorityVar, NewCallback(FunctionVar), DataVar, NewCallbackNullable(NotifyVar))
 
 }
 
@@ -1014,7 +1014,7 @@ // Note that g_source_destroy() for a currently attached source has the effect
 // of also unsetting the callback.
 func (x *Source) SetCallback(FuncVar *SourceFunc, DataVar uintptr, NotifyVar *DestroyNotify) {
 
-	xSourceSetCallback(x.GoPointer(), NewCallback(FuncVar), DataVar, NewCallback(NotifyVar))
+	xSourceSetCallback(x.GoPointer(), NewCallback(FuncVar), DataVar, NewCallbackNullable(NotifyVar))
 
 }
 
@@ -1335,7 +1335,7 @@ // using g_source_attach(). You can do these steps manually if you
 // need greater control.
 func ChildWatchAddFull(PriorityVar int, PidVar Pid, FunctionVar *ChildWatchFunc, DataVar uintptr, NotifyVar *DestroyNotify) uint {
 
-	cret := xChildWatchAddFull(PriorityVar, PidVar, NewCallback(FunctionVar), DataVar, NewCallback(NotifyVar))
+	cret := xChildWatchAddFull(PriorityVar, PidVar, NewCallback(FunctionVar), DataVar, NewCallbackNullable(NotifyVar))
 	return cret
 }
 
@@ -1483,7 +1483,7 @@ // context. You can do these steps manually if you need greater control or to
 // use a custom main context.
 func IdleAddFull(PriorityVar int, FunctionVar *SourceFunc, DataVar uintptr, NotifyVar *DestroyNotify) uint {
 
-	cret := xIdleAddFull(PriorityVar, NewCallback(FunctionVar), DataVar, NewCallback(NotifyVar))
+	cret := xIdleAddFull(PriorityVar, NewCallback(FunctionVar), DataVar, NewCallbackNullable(NotifyVar))
 	return cret
 }
 
@@ -1824,7 +1824,7 @@ // The interval given is in terms of monotonic time, not wall clock time.
 // See g_get_monotonic_time().
 func TimeoutAddFull(PriorityVar int, IntervalVar uint, FunctionVar *SourceFunc, DataVar uintptr, NotifyVar *DestroyNotify) uint {
 
-	cret := xTimeoutAddFull(PriorityVar, IntervalVar, NewCallback(FunctionVar), DataVar, NewCallback(NotifyVar))
+	cret := xTimeoutAddFull(PriorityVar, IntervalVar, NewCallback(FunctionVar), DataVar, NewCallbackNullable(NotifyVar))
 	return cret
 }
 
@@ -1902,7 +1902,7 @@ // The interval given is in terms of monotonic time, not wall clock
 // time.  See g_get_monotonic_time().
 func TimeoutAddSecondsFull(PriorityVar int, IntervalVar uint, FunctionVar *SourceFunc, DataVar uintptr, NotifyVar *DestroyNotify) uint {
 
-	cret := xTimeoutAddSecondsFull(PriorityVar, IntervalVar, NewCallback(FunctionVar), DataVar, NewCallback(NotifyVar))
+	cret := xTimeoutAddSecondsFull(PriorityVar, IntervalVar, NewCallback(FunctionVar), DataVar, NewCallbackNullable(NotifyVar))
 	return cret
 }
 
@@ -1942,6 +1942,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gmappedfile.go b/v4/glib/gmappedfile.go
index 233b075e6b08e77b2f0578305b7eaa0fa2133c94..553a07dc189cf1354063a477596484dcd7c5a583 100644
--- a/v4/glib/gmappedfile.go
+++ b/v4/glib/gmappedfile.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -149,6 +149,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gmarkup.go b/v4/glib/gmarkup.go
index df68d865810e01dff2834261f6fe5d0a6e263dd2..45841f54c5e6389973d642269772c007800bea38 100644
--- a/v4/glib/gmarkup.go
+++ b/v4/glib/gmarkup.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -534,6 +534,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gmem.go b/v4/glib/gmem.go
index d8151d74edad703d4afc835b79b7e8ff0df6db6b..d7b21c06fd5267752c843ec8aea6846fe88a0bcf 100644
--- a/v4/glib/gmem.go
+++ b/v4/glib/gmem.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // A set of functions used to perform memory allocation. The same #GMemVTable must
@@ -253,6 +253,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gmessages.go b/v4/glib/gmessages.go
index b4eb4b4b9df28ba59e543ef7c47d0a250278e62a..da91668df116f14260cbaec617bd2cab526a1373 100644
--- a/v4/glib/gmessages.go
+++ b/v4/glib/gmessages.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Specifies the prototype of log handler functions.
@@ -386,7 +386,7 @@ //
 // There can only be one writer function. It is an error to set more than one.
 func LogSetWriterFunc(FuncVar *LogWriterFunc, UserDataVar uintptr, UserDataFreeVar *DestroyNotify) {
 
-	xLogSetWriterFunc(NewCallback(FuncVar), UserDataVar, NewCallback(UserDataFreeVar))
+	xLogSetWriterFunc(NewCallbackNullable(FuncVar), UserDataVar, NewCallback(UserDataFreeVar))
 
 }
 
@@ -819,6 +819,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gnode.go b/v4/glib/gnode.go
index eb8bd33ffd733a3c4809e5ea559790efcb23acfc..4328153824489085715438dd666499d43b2e5634 100644
--- a/v4/glib/gnode.go
+++ b/v4/glib/gnode.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Specifies the type of function passed to g_node_children_foreach().
@@ -346,6 +346,8 @@ 	GLevelOrderValue TraverseType = 3
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/goption.go b/v4/glib/goption.go
index dad399f70b7a91bacc55ea9a20052a2d97602690..06ef401a5d1059a9e436c7b5ade3f4220d37cf5e 100644
--- a/v4/glib/goption.go
+++ b/v4/glib/goption.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -314,7 +314,7 @@ // If you are using gettext(), you only need to set the translation
 // domain, see g_option_context_set_translation_domain().
 func (x *OptionContext) SetTranslateFunc(FuncVar *TranslateFunc, DataVar uintptr, DestroyNotifyVar *DestroyNotify) {
 
-	xOptionContextSetTranslateFunc(x.GoPointer(), NewCallback(FuncVar), DataVar, NewCallback(DestroyNotifyVar))
+	xOptionContextSetTranslateFunc(x.GoPointer(), NewCallbackNullable(FuncVar), DataVar, NewCallbackNullable(DestroyNotifyVar))
 
 }
 
@@ -379,7 +379,7 @@
 // Creates a new #GOptionGroup.
 func NewOptionGroup(NameVar string, DescriptionVar string, HelpDescriptionVar string, UserDataVar uintptr, DestroyVar *DestroyNotify) *OptionGroup {
 
-	cret := xNewOptionGroup(NameVar, DescriptionVar, HelpDescriptionVar, UserDataVar, NewCallback(DestroyVar))
+	cret := xNewOptionGroup(NameVar, DescriptionVar, HelpDescriptionVar, UserDataVar, NewCallbackNullable(DestroyVar))
 	return cret
 }
 
@@ -435,7 +435,7 @@ // @post_parse_func can be specified when constructing the group
 // with g_option_group_new().
 func (x *OptionGroup) SetParseHooks(PreParseFuncVar *OptionParseFunc, PostParseFuncVar *OptionParseFunc) {
 
-	xOptionGroupSetParseHooks(x.GoPointer(), NewCallback(PreParseFuncVar), NewCallback(PostParseFuncVar))
+	xOptionGroupSetParseHooks(x.GoPointer(), NewCallbackNullable(PreParseFuncVar), NewCallbackNullable(PostParseFuncVar))
 
 }
 
@@ -449,7 +449,7 @@ // If you are using gettext(), you only need to set the translation
 // domain, see g_option_group_set_translation_domain().
 func (x *OptionGroup) SetTranslateFunc(FuncVar *TranslateFunc, DataVar uintptr, DestroyNotifyVar *DestroyNotify) {
 
-	xOptionGroupSetTranslateFunc(x.GoPointer(), NewCallback(FuncVar), DataVar, NewCallback(DestroyNotifyVar))
+	xOptionGroupSetTranslateFunc(x.GoPointer(), NewCallbackNullable(FuncVar), DataVar, NewCallbackNullable(DestroyNotifyVar))
 
 }
 
@@ -578,6 +578,8 @@ 	GOptionErrorFailedValue OptionError = 2
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gpattern.go b/v4/glib/gpattern.go
index 1025c6b915773a4acefdd31e4b7d70c84b6aaacf..81cdc538ced30b62656e1f23802093309b60cbde 100644
--- a/v4/glib/gpattern.go
+++ b/v4/glib/gpattern.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -148,6 +148,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gpoll.go b/v4/glib/gpoll.go
index 534988a50ef908dc2ce25b19a727280ba4bb0c2f..1d0cb0a0d391f05da038111d5350b6d1f28b2c91 100644
--- a/v4/glib/gpoll.go
+++ b/v4/glib/gpoll.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -62,6 +62,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gprimes.go b/v4/glib/gprimes.go
index 2d2bdb705dad13ff4a6506230a8eae078e7e9c79..a1c50c75d1d3bc3e8f2b9c6658bb5368b7809fb3 100644
--- a/v4/glib/gprimes.go
+++ b/v4/glib/gprimes.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xSpacedPrimesClosest func(uint) uint
@@ -21,6 +21,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gprintf.go b/v4/glib/gprintf.go
index b67cf9070685a6b6fa4f800129b31ca128342925..7f66d6b2faab11b9e1cb6a129288b3a99d77d67f 100644
--- a/v4/glib/gprintf.go
+++ b/v4/glib/gprintf.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xFprintf func(uintptr, string, ...interface{}) int
@@ -107,6 +107,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gqsort.go b/v4/glib/gqsort.go
index 3a9cc7106f64e5b0e9f6107973602eb2e37924c2..29c05dfee4e11e33bcc851a7653d77d3c4bb6f5f 100644
--- a/v4/glib/gqsort.go
+++ b/v4/glib/gqsort.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xQsortWithData func(uintptr, int, uint, uintptr, uintptr)
@@ -19,6 +19,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gquark.go b/v4/glib/gquark.go
index 18cdb743728821794034c06a5fdffd051d25ed40..84c0508ce51ecec99d517bbc1ac720ea52350d26 100644
--- a/v4/glib/gquark.go
+++ b/v4/glib/gquark.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // A GQuark is a non-zero integer which uniquely identifies a
@@ -106,6 +106,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gqueue.go b/v4/glib/gqueue.go
index dbf5435e18f35269f727758b5b441868304d3346..1dada909f227419e7fcfa81b56c1c5e97414bb94 100644
--- a/v4/glib/gqueue.go
+++ b/v4/glib/gqueue.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Contains the public fields of a
@@ -41,7 +41,7 @@ // Convenience method, which frees all the memory used by a #GQueue,
 // and calls the provided @free_func on each item in the #GQueue.
 func (x *Queue) ClearFull(FreeFuncVar *DestroyNotify) {
 
-	xQueueClearFull(x.GoPointer(), NewCallback(FreeFuncVar))
+	xQueueClearFull(x.GoPointer(), NewCallbackNullable(FreeFuncVar))
 
 }
 
@@ -443,6 +443,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/grand.go b/v4/glib/grand.go
index df5e46ffaef903da8eb1ce0063b387bc90bd0689..acd7d27ca5a19a85b5d131b4e67084e74d7c3c47 100644
--- a/v4/glib/grand.go
+++ b/v4/glib/grand.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The GRand struct is an opaque data structure. It should only be
@@ -151,6 +151,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/grcbox.go b/v4/glib/grcbox.go
index 29e0625ec92557c96665a32efd711acd6155e034..cee77fb3f0da8985e0b714c153a6e9a2ec49973a 100644
--- a/v4/glib/grcbox.go
+++ b/v4/glib/grcbox.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xAtomicRcBoxAcquire func(uintptr) uintptr
@@ -183,6 +183,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/grefcount.go b/v4/glib/grefcount.go
index 639abf7a7a860ca500b486e0ceacce78cc2babf4..cc4000e81443e36b6e7ee801bfc1dafde779dcc5 100644
--- a/v4/glib/grefcount.go
+++ b/v4/glib/grefcount.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xAtomicRefCountCompare func(int, int) bool
@@ -87,6 +87,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/grefstring.go b/v4/glib/grefstring.go
index dbe94dd403ad0aa76e9442bbd9f6f205f4741131..81711f730d18a744bbe1c1d0ba7d45448c8972cd 100644
--- a/v4/glib/grefstring.go
+++ b/v4/glib/grefstring.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // A typedef for a reference-counted string. A pointer to a #GRefString can be
@@ -81,6 +81,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gregex.go b/v4/glib/gregex.go
index f731b48c925396d565b576f41ffedd439d06c2fe..9660e387f2eabfdd847eb8600cbb85fbb6be25c2 100644
--- a/v4/glib/gregex.go
+++ b/v4/glib/gregex.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -1301,6 +1301,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gscanner.go b/v4/glib/gscanner.go
index d967e8cef2f197cf508fc603f3ae9794e68d7ae2..fcad9ea4f868572b3cf8738e5b4ba9b3cc809925 100644
--- a/v4/glib/gscanner.go
+++ b/v4/glib/gscanner.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Specifies the type of the message handler function.
@@ -453,6 +453,8 @@ 	GTokenCommentMultiValue TokenType = 269
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gsequence.go b/v4/glib/gsequence.go
index 848771a6f7b0bd6128958e95dbc69dfd23c91176..3ed4534981f218ba361dc61c5826a85e93b7c7e8 100644
--- a/v4/glib/gsequence.go
+++ b/v4/glib/gsequence.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // A #GSequenceIterCompareFunc is a function used to compare iterators.
@@ -462,6 +462,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gshell.go b/v4/glib/gshell.go
index 05f5c9f1c724415ae176579ba4a3f102e8f63b44..1d40a37575b902c6b517773028c36232dc57c5fc 100644
--- a/v4/glib/gshell.go
+++ b/v4/glib/gshell.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Error codes returned by shell functions.
@@ -109,6 +109,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gslice.go b/v4/glib/gslice.go
index f2471d801bf82a207288de894afaeef1912411de..1dd0d9138ae4889ef015a8ee0d0f6086b5c43e16 100644
--- a/v4/glib/gslice.go
+++ b/v4/glib/gslice.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 type SliceConfig int
@@ -126,6 +126,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gslist.go b/v4/glib/gslist.go
index 692c39abf4657caf22a011da4c02179a03bfa1c0..b73c95146df845c3165928aa084589a715f6c27d 100644
--- a/v4/glib/gslist.go
+++ b/v4/glib/gslist.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The #GSList struct is used for each element in the singly-linked
@@ -30,11 +30,13 @@ //
 // @slist_ptr must be a valid pointer. If @slist_ptr points to a null #GSList, this does nothing.
 func ClearSlist(SlistPtrVar **SList, DestroyVar *DestroyNotify) {
 
-	xClearSlist(SlistPtrVar, NewCallback(DestroyVar))
+	xClearSlist(SlistPtrVar, NewCallbackNullable(DestroyVar))
 
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gspawn.go b/v4/glib/gspawn.go
index e9ba2337c9b87a05e21a8817eaea799166978928..e77d6932807fd27656caf1c8b78e9addda34e390 100644
--- a/v4/glib/gspawn.go
+++ b/v4/glib/gspawn.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Specifies the type of the setup function passed to g_spawn_async(),
@@ -149,7 +149,7 @@ // are different concepts on Windows.
 func SpawnAsync(WorkingDirectoryVar string, ArgvVar []string, EnvpVar []string, FlagsVar SpawnFlags, ChildSetupVar *SpawnChildSetupFunc, UserDataVar uintptr, ChildPidVar *Pid) (bool, error) {
 	var cerr *Error
 
-	cret := xSpawnAsync(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallback(ChildSetupVar), UserDataVar, ChildPidVar, &cerr)
+	cret := xSpawnAsync(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallbackNullable(ChildSetupVar), UserDataVar, ChildPidVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -166,7 +166,7 @@ // so no FD assignments are used.
 func SpawnAsyncWithFds(WorkingDirectoryVar string, ArgvVar []string, EnvpVar []string, FlagsVar SpawnFlags, ChildSetupVar *SpawnChildSetupFunc, UserDataVar uintptr, ChildPidVar *Pid, StdinFdVar int, StdoutFdVar int, StderrFdVar int) (bool, error) {
 	var cerr *Error
 
-	cret := xSpawnAsyncWithFds(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallback(ChildSetupVar), UserDataVar, ChildPidVar, StdinFdVar, StdoutFdVar, StderrFdVar, &cerr)
+	cret := xSpawnAsyncWithFds(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallbackNullable(ChildSetupVar), UserDataVar, ChildPidVar, StdinFdVar, StdoutFdVar, StderrFdVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -181,7 +181,7 @@ // so no FD assignments are used.
 func SpawnAsyncWithPipes(WorkingDirectoryVar string, ArgvVar []string, EnvpVar []string, FlagsVar SpawnFlags, ChildSetupVar *SpawnChildSetupFunc, UserDataVar uintptr, ChildPidVar *Pid, StandardInputVar int, StandardOutputVar int, StandardErrorVar int) (bool, error) {
 	var cerr *Error
 
-	cret := xSpawnAsyncWithPipes(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallback(ChildSetupVar), UserDataVar, ChildPidVar, StandardInputVar, StandardOutputVar, StandardErrorVar, &cerr)
+	cret := xSpawnAsyncWithPipes(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallbackNullable(ChildSetupVar), UserDataVar, ChildPidVar, StandardInputVar, StandardOutputVar, StandardErrorVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -382,7 +382,7 @@ // #GAppLaunchContext, or set the `DISPLAY` environment variable.
 func SpawnAsyncWithPipesAndFds(WorkingDirectoryVar string, ArgvVar []string, EnvpVar []string, FlagsVar SpawnFlags, ChildSetupVar *SpawnChildSetupFunc, UserDataVar uintptr, StdinFdVar int, StdoutFdVar int, StderrFdVar int, SourceFdsVar []int, TargetFdsVar []int, NFdsVar uint, ChildPidOutVar *Pid, StdinPipeOutVar int, StdoutPipeOutVar int, StderrPipeOutVar int) (bool, error) {
 	var cerr *Error
 
-	cret := xSpawnAsyncWithPipesAndFds(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallback(ChildSetupVar), UserDataVar, StdinFdVar, StdoutFdVar, StderrFdVar, SourceFdsVar, TargetFdsVar, NFdsVar, ChildPidOutVar, StdinPipeOutVar, StdoutPipeOutVar, StderrPipeOutVar, &cerr)
+	cret := xSpawnAsyncWithPipesAndFds(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallbackNullable(ChildSetupVar), UserDataVar, StdinFdVar, StdoutFdVar, StderrFdVar, SourceFdsVar, TargetFdsVar, NFdsVar, ChildPidOutVar, StdinPipeOutVar, StdoutPipeOutVar, StderrPipeOutVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -568,7 +568,7 @@ // how these functions work on Windows.
 func SpawnSync(WorkingDirectoryVar string, ArgvVar []string, EnvpVar []string, FlagsVar SpawnFlags, ChildSetupVar *SpawnChildSetupFunc, UserDataVar uintptr, StandardOutputVar []byte, StandardErrorVar []byte, WaitStatusVar int) (bool, error) {
 	var cerr *Error
 
-	cret := xSpawnSync(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallback(ChildSetupVar), UserDataVar, StandardOutputVar, StandardErrorVar, WaitStatusVar, &cerr)
+	cret := xSpawnSync(WorkingDirectoryVar, ArgvVar, EnvpVar, FlagsVar, NewCallbackNullable(ChildSetupVar), UserDataVar, StandardOutputVar, StandardErrorVar, WaitStatusVar, &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -577,6 +577,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gstdio.go b/v4/glib/gstdio.go
index 4b10a92139e44a19773b0e58b11f74c588a19d92..d883a0f0a702dee13a0de9c2ec2ae0853d70a4cb 100644
--- a/v4/glib/gstdio.go
+++ b/v4/glib/gstdio.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // A type corresponding to the appropriate struct type for the stat()
@@ -103,6 +103,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gstrfuncs.go b/v4/glib/gstrfuncs.go
index 0ecc4f295082a5d3132456c71b825bedd2f83c50..4c464130ba7e0c968fbb9d15f853e1b87d87e0da 100644
--- a/v4/glib/gstrfuncs.go
+++ b/v4/glib/gstrfuncs.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // A typedef alias for gchar**. This is mostly useful when used together with
@@ -1049,6 +1049,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gstring.go b/v4/glib/gstring.go
index c682b9cd3e25f48427d813c7f98fd47aef83011b..d75114faed00b9c8e32b5d8fabc09f3bd9e54c5a 100644
--- a/v4/glib/gstring.go
+++ b/v4/glib/gstring.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -429,6 +429,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gstringchunk.go b/v4/glib/gstringchunk.go
index fb9ef377642f531bf643b054d2fd3b67cc6e6a3d..56622940d3de6b8604ff15ebd855564a87401166 100644
--- a/v4/glib/gstringchunk.go
+++ b/v4/glib/gstringchunk.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // An opaque data structure representing String Chunks.
@@ -99,6 +99,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gstrvbuilder.go b/v4/glib/gstrvbuilder.go
index db464fee9628a911c1057dc4a7e91320ae7a5af6..377b42df77dd3416ffa83d24c43937f4e6c114f9 100644
--- a/v4/glib/gstrvbuilder.go
+++ b/v4/glib/gstrvbuilder.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // #GStrvBuilder is a method of easily building dynamically sized
@@ -97,6 +97,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gtestutils.go b/v4/glib/gtestutils.go
index e37a65efd016f5afa2dc0dcb98b3685136b372ed..a960921197387a8a4db9db6c291b54a57d4cfa02 100644
--- a/v4/glib/gtestutils.go
+++ b/v4/glib/gtestutils.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The type used for test case functions that take an extra pointer
@@ -1232,6 +1232,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gthread.go b/v4/glib/gthread.go
index 54eb2f6385c6ddb419796b6af54bb102a504e174..5857df1c1d59a00bb65f225792249e40c6415585 100644
--- a/v4/glib/gthread.go
+++ b/v4/glib/gthread.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -979,6 +979,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gthreadpool.go b/v4/glib/gthreadpool.go
index 97567feed03d93ff82364c4f88532e9b43675a97..e4936f015e83678a6eaf3b7e0894357885112c72 100644
--- a/v4/glib/gthreadpool.go
+++ b/v4/glib/gthreadpool.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The #GThreadPool struct represents a thread pool. It has three
@@ -236,6 +236,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gtimer.go b/v4/glib/gtimer.go
index 9749a3b72c1e95310c84359412b0ab01290a2985..48b8ad20a09af4cf49ab15cee633985c29ba5fd1 100644
--- a/v4/glib/gtimer.go
+++ b/v4/glib/gtimer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Opaque datatype that records a start time.
@@ -140,6 +140,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gtimezone.go b/v4/glib/gtimezone.go
index b5ef570c4e8df6ef2e17018c32a9d5f27503283f..bc2a3a531d8ddfea9583f0a35bdbd95068e09794 100644
--- a/v4/glib/gtimezone.go
+++ b/v4/glib/gtimezone.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -300,6 +300,8 @@ 	GTimeTypeUniversalValue TimeType = 2
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gtrashstack.go b/v4/glib/gtrashstack.go
index 6cb27c50d3c12e85485db6fcf94bf65e278d3bd9..b3d4fd18e4cf214e04e5ec66d708c17fc190c48c 100644
--- a/v4/glib/gtrashstack.go
+++ b/v4/glib/gtrashstack.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Each piece of memory that is pushed onto the stack
@@ -62,6 +62,8 @@
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gtree.go b/v4/glib/gtree.go
index 0b91ddedefbc0de04f36ad78e7e6635ffad23e8b..d0dcea829128465507d187ddb11df5e46bf2aaf8 100644
--- a/v4/glib/gtree.go
+++ b/v4/glib/gtree.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -435,6 +435,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gtypes.go b/v4/glib/gtypes.go
index 38b61c1ea74712c7f850ac3ba82879d0bd8249e5..379c27274a19b29b6ee93160f0bc568efc62151a 100644
--- a/v4/glib/gtypes.go
+++ b/v4/glib/gtypes.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Specifies the type of a comparison function used to compare two
@@ -228,6 +228,8 @@ 	SQRT2 float64 = 1.414214
 )
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gunicode.go b/v4/glib/gunicode.go
index 78b0e2c57debce1dddcaddcb9b09fbb74842443c..bdf66d82305cc6a81ac7f855e4ef6dd0e88254f2 100644
--- a/v4/glib/gunicode.go
+++ b/v4/glib/gunicode.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 const (
@@ -1530,6 +1530,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/guri.go b/v4/glib/guri.go
index c65ef30cbcde0b306235871de906f503e160c637..d3b75235e58e2afb03eac9ed65716b4abcd3164c 100644
--- a/v4/glib/guri.go
+++ b/v4/glib/guri.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -905,6 +905,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gutils.go b/v4/glib/gutils.go
index 863d43184dbeaaf15a9f858e34f8e605ca785be5..310ae58887c3f7d128ecc9b56810d58e9ebca31e 100644
--- a/v4/glib/gutils.go
+++ b/v4/glib/gutils.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Declares a type of function which takes no arguments
@@ -714,6 +714,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/guuid.go b/v4/glib/guuid.go
index 212d7867f57705dec4da090fcf2cc915afa0168e..b57040ca24260148f42132af1c503229d68c84d8 100644
--- a/v4/glib/guuid.go
+++ b/v4/glib/guuid.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xUuidStringIsValid func(string) bool
@@ -34,6 +34,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gvariant.go b/v4/glib/gvariant.go
index 5c4503e510b35075e3cdb884a2b1fa03669a53a6..424979f3e75adcd4a75f82a7c987178af8ea9487 100644
--- a/v4/glib/gvariant.go
+++ b/v4/glib/gvariant.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -2793,6 +2793,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gvarianttype.go b/v4/glib/gvarianttype.go
index 3ab81985046e4703e562c2dc533d94bc64d7bb51..e7633e0f21926af6615a7226a5eb9256d6dd4a36 100644
--- a/v4/glib/gvarianttype.go
+++ b/v4/glib/gvarianttype.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -619,6 +619,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/gversion.go b/v4/glib/gversion.go
index cb3f3269f2ba7522e5205517416d1cd9e95eb52e..d542a470fc016a16b520ccf47d3897f29237bca5 100644
--- a/v4/glib/gversion.go
+++ b/v4/glib/gversion.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xCheckVersion func(uint, uint, uint) string
@@ -30,6 +30,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/main.go b/v4/glib/main.go
index 925338f4fad2d5696b15d0f60ca3cdc5a4fa336c..fb25ab9fba09dbe837f4c3c846d039c39e71ae15 100644
--- a/v4/glib/main.go
+++ b/v4/glib/main.go
@@ -3,7 +3,7 @@ package glib
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xBookmarkFileErrorQuark func() Quark
@@ -135,6 +135,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GLIB", "glib-2.0")
+	core.SetSharedLibrary("GLIB", "libglib-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/glib/more.go b/v4/glib/more.go
index c37715351160f0b06ad79986484bbbf2f1f473b4..3b4ec03ea5c1823e5bf78eb6e4a0ebfee5ec558e 100644
--- a/v4/glib/more.go
+++ b/v4/glib/more.go
@@ -2,10 +2,11 @@ package glib
 
 import (
 	"fmt"
+	"reflect"
 	"sync"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var callbacks = struct {
@@ -44,6 +45,16 @@
 // NewCallback is an alias to purego.NewCallback
 func NewCallback(fnPtr interface{}) uintptr {
 	return purego.NewCallbackFnPtr(fnPtr)
+}
+
+// NewCallbackNullable is an alias to purego.NewCallback that returns a null pointer for null functions
+func NewCallbackNullable(fn interface{}) uintptr {
+	val := reflect.ValueOf(fn)
+	if val.IsNil() {
+		return 0
+	}
+
+	return NewCallback(fn)
 }
 
 func (e *Error) Error() string {
diff --git a/v4/gmodule/gmodule.go b/v4/gmodule/gmodule.go
index 0e39ec24d9e59fee86c93303c5123b6291af0e8d..2f300c08eaf101ab6b1e1526a326d0f41da89d9d 100644
--- a/v4/gmodule/gmodule.go
+++ b/v4/gmodule/gmodule.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Specifies the type of the module initialization function.
@@ -143,6 +143,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GMODULE", "gmodule-2.0")
+	core.SetSharedLibrary("GMODULE", "libgmodule-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GMODULE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gmodule/main.go b/v4/gmodule/main.go
index a6f4f06323c4792aa929fd28af7865d052c9d4e7..9dd66a90e5fa4361b2e076e1c17d38d4969cff86 100644
--- a/v4/gmodule/main.go
+++ b/v4/gmodule/main.go
@@ -3,7 +3,7 @@ package gmodule
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -16,6 +16,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GMODULE", "gmodule-2.0")
+	core.SetSharedLibrary("GMODULE", "libgmodule-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GMODULE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gboxed.go b/v4/gobject/gboxed.go
index 46894d75acc84e87bbb82a80f073fef8ab3c1fea..83183294dbe8e6839922ac38538a38df17062909 100644
--- a/v4/gobject/gboxed.go
+++ b/v4/gobject/gboxed.go
@@ -3,7 +3,7 @@ package gobject
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -52,6 +52,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gclosure.go b/v4/gobject/gclosure.go
index dd10d4217c84f2a51cbac7ccd50f79b045c18e42..21ef30aa7556fa1be83e6aad4b0d7ae198d929a2 100644
--- a/v4/gobject/gclosure.go
+++ b/v4/gobject/gclosure.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -201,7 +201,7 @@ // the closure being both invalidated and finalized, then the invalidate
 // notifiers will be run before the finalize notifiers.
 func (x *Closure) AddFinalizeNotifier(NotifyDataVar uintptr, NotifyFuncVar *ClosureNotify) {
 
-	xClosureAddFinalizeNotifier(x.GoPointer(), NotifyDataVar, glib.NewCallback(NotifyFuncVar))
+	xClosureAddFinalizeNotifier(x.GoPointer(), NotifyDataVar, glib.NewCallbackNullable(NotifyFuncVar))
 
 }
 
@@ -214,7 +214,7 @@ // Invalidation notifiers are invoked before finalization notifiers,
 // in an unspecified order.
 func (x *Closure) AddInvalidateNotifier(NotifyDataVar uintptr, NotifyFuncVar *ClosureNotify) {
 
-	xClosureAddInvalidateNotifier(x.GoPointer(), NotifyDataVar, glib.NewCallback(NotifyFuncVar))
+	xClosureAddInvalidateNotifier(x.GoPointer(), NotifyDataVar, glib.NewCallbackNullable(NotifyFuncVar))
 
 }
 
@@ -228,7 +228,7 @@ // duration of the callback. See g_object_watch_closure() for an
 // example of marshal guards.
 func (x *Closure) AddMarshalGuards(PreMarshalDataVar uintptr, PreMarshalNotifyVar *ClosureNotify, PostMarshalDataVar uintptr, PostMarshalNotifyVar *ClosureNotify) {
 
-	xClosureAddMarshalGuards(x.GoPointer(), PreMarshalDataVar, glib.NewCallback(PreMarshalNotifyVar), PostMarshalDataVar, glib.NewCallback(PostMarshalNotifyVar))
+	xClosureAddMarshalGuards(x.GoPointer(), PreMarshalDataVar, glib.NewCallbackNullable(PreMarshalNotifyVar), PostMarshalDataVar, glib.NewCallbackNullable(PostMarshalNotifyVar))
 
 }
 
@@ -335,7 +335,7 @@ // the right callback and passes it to the marshaller as the
 // @marshal_data argument.
 func (x *Closure) SetMetaMarshal(MarshalDataVar uintptr, MetaMarshalVar *ClosureMarshal) {
 
-	xClosureSetMetaMarshal(x.GoPointer(), MarshalDataVar, glib.NewCallback(MetaMarshalVar))
+	xClosureSetMetaMarshal(x.GoPointer(), MarshalDataVar, glib.NewCallbackNullable(MetaMarshalVar))
 
 }
 
@@ -442,7 +442,7 @@ //
 // @destroy_data will be called as a finalize notifier on the #GClosure.
 func CclosureNew(CallbackFuncVar *Callback, UserDataVar uintptr, DestroyDataVar *ClosureNotify) *Closure {
 
-	cret := xCclosureNew(glib.NewCallback(CallbackFuncVar), UserDataVar, glib.NewCallback(DestroyDataVar))
+	cret := xCclosureNew(glib.NewCallbackNullable(CallbackFuncVar), UserDataVar, glib.NewCallback(DestroyDataVar))
 	return cret
 }
 
@@ -454,7 +454,7 @@ //
 // @destroy_data will be called as a finalize notifier on the #GClosure.
 func CclosureNewSwap(CallbackFuncVar *Callback, UserDataVar uintptr, DestroyDataVar *ClosureNotify) *Closure {
 
-	cret := xCclosureNewSwap(glib.NewCallback(CallbackFuncVar), UserDataVar, glib.NewCallback(DestroyDataVar))
+	cret := xCclosureNewSwap(glib.NewCallbackNullable(CallbackFuncVar), UserDataVar, glib.NewCallback(DestroyDataVar))
 	return cret
 }
 
@@ -470,6 +470,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/genums.go b/v4/gobject/genums.go
index 884fbdd1498f251c12fceaca57b0598519a9a17d..1334aca8fcbf0ff61f5ef01a06638180f24bc260 100644
--- a/v4/gobject/genums.go
+++ b/v4/gobject/genums.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -228,6 +228,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gmarshal.go b/v4/gobject/gmarshal.go
index 79c8e772c53a30ab0217e38b601bb90c11271d3c..acf93d6bf835d2a71366cff147418c592cbef111 100644
--- a/v4/gobject/gmarshal.go
+++ b/v4/gobject/gmarshal.go
@@ -3,7 +3,7 @@ package gobject
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xCclosureMarshalBOOLEANBOXEDBOXED func(*Closure, *Value, uint, *Value, uintptr, uintptr)
@@ -230,6 +230,8 @@
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gobject-2.0.go b/v4/gobject/gobject-2.0.go
index 1e847bd3366a5949453a759d1079d619bfebbab4..cb9f85aaba77863b77fb738941496288927db405 100644
--- a/v4/gobject/gobject-2.0.go
+++ b/v4/gobject/gobject-2.0.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -443,7 +443,7 @@ //
 // See g_object_bind_property_full() for more information.
 func (x *BindingGroup) BindFull(SourcePropertyVar string, TargetVar *Object, TargetPropertyVar string, FlagsVar BindingFlags, TransformToVar *BindingTransformFunc, TransformFromVar *BindingTransformFunc, UserDataVar uintptr, UserDataDestroyVar *glib.DestroyNotify) {
 
-	xBindingGroupBindFull(x.GoPointer(), SourcePropertyVar, TargetVar.GoPointer(), TargetPropertyVar, FlagsVar, glib.NewCallback(TransformToVar), glib.NewCallback(TransformFromVar), UserDataVar, glib.NewCallback(UserDataDestroyVar))
+	xBindingGroupBindFull(x.GoPointer(), SourcePropertyVar, TargetVar.GoPointer(), TargetPropertyVar, FlagsVar, glib.NewCallbackNullable(TransformToVar), glib.NewCallbackNullable(TransformFromVar), UserDataVar, glib.NewCallback(UserDataDestroyVar))
 
 }
 
@@ -738,6 +738,8 @@ 	return SignalConnect(x.GoPointer(), "unbind", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gobject.go b/v4/gobject/gobject.go
index 7ec0148c4e7df87877a8bf1eb18f671200ca1f77..8f81a70bba17d3857410cc1423a252b00fe8ca3f 100644
--- a/v4/gobject/gobject.go
+++ b/v4/gobject/gobject.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -707,7 +707,7 @@ // g_object_bind_property_with_closures() instead.
 func (x *Object) BindPropertyFull(SourcePropertyVar string, TargetVar *Object, TargetPropertyVar string, FlagsVar BindingFlags, TransformToVar *BindingTransformFunc, TransformFromVar *BindingTransformFunc, UserDataVar uintptr, NotifyVar *glib.DestroyNotify) *Binding {
 	var cls *Binding
 
-	cret := xObjectBindPropertyFull(x.GoPointer(), SourcePropertyVar, TargetVar.GoPointer(), TargetPropertyVar, FlagsVar, glib.NewCallback(TransformToVar), glib.NewCallback(TransformFromVar), UserDataVar, glib.NewCallback(NotifyVar))
+	cret := xObjectBindPropertyFull(x.GoPointer(), SourcePropertyVar, TargetVar.GoPointer(), TargetPropertyVar, FlagsVar, glib.NewCallbackNullable(TransformToVar), glib.NewCallbackNullable(TransformFromVar), UserDataVar, glib.NewCallbackNullable(NotifyVar))
 
 	if cret == 0 {
 		return nil
@@ -814,7 +814,7 @@ // threads are using object data on the same key on the same
 // object.
 func (x *Object) DupData(KeyVar string, DupFuncVar *glib.DuplicateFunc, UserDataVar uintptr) uintptr {
 
-	cret := xObjectDupData(x.GoPointer(), KeyVar, glib.NewCallback(DupFuncVar), UserDataVar)
+	cret := xObjectDupData(x.GoPointer(), KeyVar, glib.NewCallbackNullable(DupFuncVar), UserDataVar)
 	return cret
 }
 
@@ -836,7 +836,7 @@ // threads are using object data on the same key on the same
 // object.
 func (x *Object) DupQdata(QuarkVar glib.Quark, DupFuncVar *glib.DuplicateFunc, UserDataVar uintptr) uintptr {
 
-	cret := xObjectDupQdata(x.GoPointer(), QuarkVar, glib.NewCallback(DupFuncVar), UserDataVar)
+	cret := xObjectDupQdata(x.GoPointer(), QuarkVar, glib.NewCallbackNullable(DupFuncVar), UserDataVar)
 	return cret
 }
 
@@ -1142,7 +1142,7 @@ // See g_object_set_data() for guidance on using a small, bounded set of values
 // for @key.
 func (x *Object) ReplaceData(KeyVar string, OldvalVar uintptr, NewvalVar uintptr, DestroyVar *glib.DestroyNotify, OldDestroyVar *glib.DestroyNotify) bool {
 
-	cret := xObjectReplaceData(x.GoPointer(), KeyVar, OldvalVar, NewvalVar, glib.NewCallback(DestroyVar), glib.NewCallback(OldDestroyVar))
+	cret := xObjectReplaceData(x.GoPointer(), KeyVar, OldvalVar, NewvalVar, glib.NewCallbackNullable(DestroyVar), glib.NewCallback(OldDestroyVar))
 	return cret
 }
 
@@ -1163,7 +1163,7 @@ // or may not include using @old_destroy as sometimes replacement
 // should not destroy the object in the normal way.
 func (x *Object) ReplaceQdata(QuarkVar glib.Quark, OldvalVar uintptr, NewvalVar uintptr, DestroyVar *glib.DestroyNotify, OldDestroyVar *glib.DestroyNotify) bool {
 
-	cret := xObjectReplaceQdata(x.GoPointer(), QuarkVar, OldvalVar, NewvalVar, glib.NewCallback(DestroyVar), glib.NewCallback(OldDestroyVar))
+	cret := xObjectReplaceQdata(x.GoPointer(), QuarkVar, OldvalVar, NewvalVar, glib.NewCallbackNullable(DestroyVar), glib.NewCallback(OldDestroyVar))
 	return cret
 }
 
@@ -1224,7 +1224,7 @@ //
 // Note that the @destroy callback is not called if @data is %NULL.
 func (x *Object) SetDataFull(KeyVar string, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xObjectSetDataFull(x.GoPointer(), KeyVar, DataVar, glib.NewCallback(DestroyVar))
+	xObjectSetDataFull(x.GoPointer(), KeyVar, DataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -1262,7 +1262,7 @@ // the data is being overwritten by a call to g_object_set_qdata()
 // with the same @quark.
 func (x *Object) SetQdataFull(QuarkVar glib.Quark, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xObjectSetQdataFull(x.GoPointer(), QuarkVar, DataVar, glib.NewCallback(DestroyVar))
+	xObjectSetQdataFull(x.GoPointer(), QuarkVar, DataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -1594,6 +1594,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gparam.go b/v4/gobject/gparam.go
index 2ba3f30a7fe7c358e2bd09b6e86f7904c54ef525..a4f8dde071785a827a81509ee78978ecac9f69db 100644
--- a/v4/gobject/gparam.go
+++ b/v4/gobject/gparam.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -432,7 +432,7 @@ // finalized, or the data is being overwritten by a call to
 // g_param_spec_set_qdata() with the same @quark.
 func (x *ParamSpec) SetQdataFull(QuarkVar glib.Quark, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xParamSpecSetQdataFull(x.GoPointer(), QuarkVar, DataVar, glib.NewCallback(DestroyVar))
+	xParamSpecSetQdataFull(x.GoPointer(), QuarkVar, DataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -525,6 +525,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gparamspecs.go b/v4/gobject/gparamspecs.go
index a5a057b15f31b136e673efac0f017adf8f4ace65..367224732355a69a09973ec568190b793523cc72 100644
--- a/v4/gobject/gparamspecs.go
+++ b/v4/gobject/gparamspecs.go
@@ -3,7 +3,7 @@ package gobject
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -1106,6 +1106,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gsignal.go b/v4/gobject/gsignal.go
index 7427d1a9e447e94ccc0217a86f9957966c7e70e5..2dd68ef9092b6695e760d9797b59548893e2c0dc 100644
--- a/v4/gobject/gsignal.go
+++ b/v4/gobject/gsignal.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -222,7 +222,7 @@ // of that signal, independent of the instance. This is possible only
 // for signals which don't have %G_SIGNAL_NO_HOOKS flag set.
 func SignalAddEmissionHook(SignalIdVar uint, DetailVar glib.Quark, HookFuncVar *SignalEmissionHook, HookDataVar uintptr, DataDestroyVar *glib.DestroyNotify) uint32 {
 
-	cret := xSignalAddEmissionHook(SignalIdVar, DetailVar, glib.NewCallback(HookFuncVar), HookDataVar, glib.NewCallback(DataDestroyVar))
+	cret := xSignalAddEmissionHook(SignalIdVar, DetailVar, glib.NewCallback(HookFuncVar), HookDataVar, glib.NewCallbackNullable(DataDestroyVar))
 	return cret
 }
 
@@ -277,7 +277,7 @@ // used. Specify @connect_flags if you need `..._after()` or
 // `..._swapped()` variants of this function.
 func SignalConnectData(InstanceVar *Object, DetailedSignalVar string, CHandlerVar *Callback, DataVar uintptr, DestroyDataVar *ClosureNotify, ConnectFlagsVar ConnectFlags) uint32 {
 
-	cret := xSignalConnectData(InstanceVar.GoPointer(), DetailedSignalVar, glib.NewCallback(CHandlerVar), DataVar, glib.NewCallback(DestroyDataVar), ConnectFlagsVar)
+	cret := xSignalConnectData(InstanceVar.GoPointer(), DetailedSignalVar, glib.NewCallback(CHandlerVar), DataVar, glib.NewCallbackNullable(DestroyDataVar), ConnectFlagsVar)
 	return cret
 }
 
@@ -552,7 +552,7 @@ 	cret := xSignalName(SignalIdVar)
 	return cret
 }
 
-var xSignalNew func(string, types.GType, SignalFlags, uint, uintptr, uintptr, SignalCMarshaller, types.GType, uint, ...interface{}) uint
+var xSignalNew func(string, types.GType, SignalFlags, uint, uintptr, uintptr, uintptr, types.GType, uint, ...interface{}) uint
 
 // Creates a new signal. (This is usually done in the class initializer.)
 //
@@ -578,13 +578,13 @@ //
 // If @c_marshaller is non-%NULL, you need to also specify a va_marshaller
 // using g_signal_set_va_marshaller() or the generic va_marshaller will
 // be used.
-func SignalNew(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassOffsetVar uint, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, varArgs ...interface{}) uint {
+func SignalNew(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassOffsetVar uint, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar *SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, varArgs ...interface{}) uint {
 
-	cret := xSignalNew(SignalNameVar, ItypeVar, SignalFlagsVar, ClassOffsetVar, glib.NewCallback(AccumulatorVar), AccuDataVar, CMarshallerVar, ReturnTypeVar, NParamsVar, varArgs...)
+	cret := xSignalNew(SignalNameVar, ItypeVar, SignalFlagsVar, ClassOffsetVar, glib.NewCallbackNullable(AccumulatorVar), AccuDataVar, glib.NewCallbackNullable(CMarshallerVar), ReturnTypeVar, NParamsVar, varArgs...)
 	return cret
 }
 
-var xSignalNewClassHandler func(string, types.GType, SignalFlags, uintptr, uintptr, uintptr, SignalCMarshaller, types.GType, uint, ...interface{}) uint
+var xSignalNewClassHandler func(string, types.GType, SignalFlags, uintptr, uintptr, uintptr, uintptr, types.GType, uint, ...interface{}) uint
 
 // Creates a new signal. (This is usually done in the class initializer.)
 //
@@ -602,13 +602,13 @@ // See g_signal_new() for information about signal names.
 //
 // If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
 // the marshaller for this signal.
-func SignalNewClassHandler(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassHandlerVar *Callback, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, varArgs ...interface{}) uint {
+func SignalNewClassHandler(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassHandlerVar *Callback, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar *SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, varArgs ...interface{}) uint {
 
-	cret := xSignalNewClassHandler(SignalNameVar, ItypeVar, SignalFlagsVar, glib.NewCallback(ClassHandlerVar), glib.NewCallback(AccumulatorVar), AccuDataVar, CMarshallerVar, ReturnTypeVar, NParamsVar, varArgs...)
+	cret := xSignalNewClassHandler(SignalNameVar, ItypeVar, SignalFlagsVar, glib.NewCallbackNullable(ClassHandlerVar), glib.NewCallbackNullable(AccumulatorVar), AccuDataVar, glib.NewCallbackNullable(CMarshallerVar), ReturnTypeVar, NParamsVar, varArgs...)
 	return cret
 }
 
-var xSignalNewValist func(string, types.GType, SignalFlags, *Closure, uintptr, uintptr, SignalCMarshaller, types.GType, uint, []interface{}) uint
+var xSignalNewValist func(string, types.GType, SignalFlags, *Closure, uintptr, uintptr, uintptr, types.GType, uint, []interface{}) uint
 
 // Creates a new signal. (This is usually done in the class initializer.)
 //
@@ -616,13 +616,13 @@ // See g_signal_new() for details on allowed signal names.
 //
 // If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
 // the marshaller for this signal.
-func SignalNewValist(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassClosureVar *Closure, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, ArgsVar []interface{}) uint {
+func SignalNewValist(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassClosureVar *Closure, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar *SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, ArgsVar []interface{}) uint {
 
-	cret := xSignalNewValist(SignalNameVar, ItypeVar, SignalFlagsVar, ClassClosureVar, glib.NewCallback(AccumulatorVar), AccuDataVar, CMarshallerVar, ReturnTypeVar, NParamsVar, ArgsVar)
+	cret := xSignalNewValist(SignalNameVar, ItypeVar, SignalFlagsVar, ClassClosureVar, glib.NewCallbackNullable(AccumulatorVar), AccuDataVar, glib.NewCallbackNullable(CMarshallerVar), ReturnTypeVar, NParamsVar, ArgsVar)
 	return cret
 }
 
-var xSignalNewv func(string, types.GType, SignalFlags, *Closure, uintptr, uintptr, SignalCMarshaller, types.GType, uint, []types.GType) uint
+var xSignalNewv func(string, types.GType, SignalFlags, *Closure, uintptr, uintptr, uintptr, types.GType, uint, []types.GType) uint
 
 // Creates a new signal. (This is usually done in the class initializer.)
 //
@@ -630,9 +630,9 @@ // See g_signal_new() for details on allowed signal names.
 //
 // If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
 // the marshaller for this signal.
-func SignalNewv(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassClosureVar *Closure, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, ParamTypesVar []types.GType) uint {
+func SignalNewv(SignalNameVar string, ItypeVar types.GType, SignalFlagsVar SignalFlags, ClassClosureVar *Closure, AccumulatorVar *SignalAccumulator, AccuDataVar uintptr, CMarshallerVar *SignalCMarshaller, ReturnTypeVar types.GType, NParamsVar uint, ParamTypesVar []types.GType) uint {
 
-	cret := xSignalNewv(SignalNameVar, ItypeVar, SignalFlagsVar, ClassClosureVar, glib.NewCallback(AccumulatorVar), AccuDataVar, CMarshallerVar, ReturnTypeVar, NParamsVar, ParamTypesVar)
+	cret := xSignalNewv(SignalNameVar, ItypeVar, SignalFlagsVar, ClassClosureVar, glib.NewCallbackNullable(AccumulatorVar), AccuDataVar, glib.NewCallbackNullable(CMarshallerVar), ReturnTypeVar, NParamsVar, ParamTypesVar)
 	return cret
 }
 
@@ -700,15 +700,15 @@ 	xSignalRemoveEmissionHook(SignalIdVar, HookIdVar)
 
 }
 
-var xSignalSetVaMarshaller func(uint, types.GType, SignalCVaMarshaller)
+var xSignalSetVaMarshaller func(uint, types.GType, uintptr)
 
 // Change the #GSignalCVaMarshaller used for a given signal.  This is a
 // specialised form of the marshaller that can often be used for the
 // common case of a single connected signal handler and avoids the
 // overhead of #GValue.  Its use is optional.
-func SignalSetVaMarshaller(SignalIdVar uint, InstanceTypeVar types.GType, VaMarshallerVar SignalCVaMarshaller) {
+func SignalSetVaMarshaller(SignalIdVar uint, InstanceTypeVar types.GType, VaMarshallerVar *SignalCVaMarshaller) {
 
-	xSignalSetVaMarshaller(SignalIdVar, InstanceTypeVar, VaMarshallerVar)
+	xSignalSetVaMarshaller(SignalIdVar, InstanceTypeVar, glib.NewCallback(VaMarshallerVar))
 
 }
 
@@ -740,6 +740,8 @@
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gsourceclosure.go b/v4/gobject/gsourceclosure.go
index 25cd242e8d17a5b1bbb124898ee8a60a6479fb6b..6a6c55592eb50defe19c2d284389fc6fa5755c40 100644
--- a/v4/gobject/gsourceclosure.go
+++ b/v4/gobject/gsourceclosure.go
@@ -3,7 +3,7 @@ package gobject
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -39,6 +39,8 @@
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gtype.go b/v4/gobject/gtype.go
index 0c0a2e8334e65416cf354787091052f9fdc42372..e4a348d917bbaa7e96f3392e23fc537f40ca1314 100644
--- a/v4/gobject/gtype.go
+++ b/v4/gobject/gtype.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -1278,6 +1278,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gtypemodule.go b/v4/gobject/gtypemodule.go
index f3c024b516ba698eda116a517906c5367b32f5c5..a301e3176d872f86fdcafe429a7912460788ff14 100644
--- a/v4/gobject/gtypemodule.go
+++ b/v4/gobject/gtypemodule.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -207,6 +207,8 @@
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gvalue.go b/v4/gobject/gvalue.go
index 5e1da23cb3ec227905fbd2a73827b00cdde9fca5..f3c700b7b630b6bf9100dead1f4795b53f4bb832 100644
--- a/v4/gobject/gvalue.go
+++ b/v4/gobject/gvalue.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -804,6 +804,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gvaluearray.go b/v4/gobject/gvaluearray.go
index e30241becf698f71582c8d0930abbe92504947cb..45e799ce2bf047b4053ab4cbfcc2f8098b6cb6a6 100644
--- a/v4/gobject/gvaluearray.go
+++ b/v4/gobject/gvaluearray.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -137,6 +137,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gobject/gvaluetypes.go b/v4/gobject/gvaluetypes.go
index 020c421b5a957b9d488c82412cf997b267faa725..448468d1f5b4314764e64f8b67d646752787124b 100644
--- a/v4/gobject/gvaluetypes.go
+++ b/v4/gobject/gvaluetypes.go
@@ -3,7 +3,7 @@ package gobject
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -38,6 +38,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GOBJECT", "gobject-2.0")
+	core.SetSharedLibrary("GOBJECT", "libgobject-2.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-box.go b/v4/graphene/graphene-box.go
index ae9bda1fa51e8836bc48aedb21025ae7e413239f..f61f6877f1c3d7c1edc209b4b755d2f1716b6080 100644
--- a/v4/graphene/graphene-box.go
+++ b/v4/graphene/graphene-box.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -340,6 +340,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-euler.go b/v4/graphene/graphene-euler.go
index c481dc12786a04e8eb0f9e524a51cc214a1642a9..0b74780a89bc0f989957638f27889771ee7fb647 100644
--- a/v4/graphene/graphene-euler.go
+++ b/v4/graphene/graphene-euler.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -355,6 +355,8 @@ 	EulerOrderRzyzValue EulerOrder = 29
 )
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-frustum.go b/v4/graphene/graphene-frustum.go
index 09c8da4b1624c3430ff7a916bfe196e868210423..719b84499f18f2d86f03e96154855a697e07912b 100644
--- a/v4/graphene/graphene-frustum.go
+++ b/v4/graphene/graphene-frustum.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -128,6 +128,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-matrix.go b/v4/graphene/graphene-matrix.go
index c7877b73f8afedb6fe205006024b01b7081ccbfe..35dd05059d08e53ef3205cf580720d69eeb4143f 100644
--- a/v4/graphene/graphene-matrix.go
+++ b/v4/graphene/graphene-matrix.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -797,6 +797,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-plane.go b/v4/graphene/graphene-plane.go
index 6023ff39a3d859c9ac46d1cb0449a066006122d7..ea696aa6d3a45d846c4e15d36e4b3b70859d149b 100644
--- a/v4/graphene/graphene-plane.go
+++ b/v4/graphene/graphene-plane.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -180,6 +180,8 @@
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-point.go b/v4/graphene/graphene-point.go
index 3b57cf3f8398f6956b4ba2285db9384d4581807f..24212ff01b2ff87aacc214d515e9049e6e43951a 100644
--- a/v4/graphene/graphene-point.go
+++ b/v4/graphene/graphene-point.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -160,6 +160,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-point3d.go b/v4/graphene/graphene-point3d.go
index 2c569842cb4304bd99bd3745a0679d7ecf876063..fb94c782ece6e045f7d8f843ee06dd63a3cc8724 100644
--- a/v4/graphene/graphene-point3d.go
+++ b/v4/graphene/graphene-point3d.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -197,6 +197,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-quad.go b/v4/graphene/graphene-quad.go
index 21595b48c6941a2218c54a1dd29892412f863623..52609bf49c495a889f48986a3b5e1041f2e37cc3 100644
--- a/v4/graphene/graphene-quad.go
+++ b/v4/graphene/graphene-quad.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -106,6 +106,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-quaternion.go b/v4/graphene/graphene-quaternion.go
index 47ebe21aa81e41e7f0a0a6720b89d91b53cef03f..6e49b64c7ba7f2c17031f905ab621887bce6ecbe 100644
--- a/v4/graphene/graphene-quaternion.go
+++ b/v4/graphene/graphene-quaternion.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -276,6 +276,8 @@
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-ray.go b/v4/graphene/graphene-ray.go
index 3fc21207316cd5cd5e8f9baf8c8449ab12d470fd..a510e5e04b24e9c1716062f17f47c83904998e0a 100644
--- a/v4/graphene/graphene-ray.go
+++ b/v4/graphene/graphene-ray.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -236,6 +236,8 @@ 	RayIntersectionKindLeaveValue RayIntersectionKind = 2
 )
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-rect.go b/v4/graphene/graphene-rect.go
index 20f092cb77b4c8815696106e67bf62cf1ec8de57..0ebd50ae9356425a412f951e0aab521bd76ae592 100644
--- a/v4/graphene/graphene-rect.go
+++ b/v4/graphene/graphene-rect.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -431,6 +431,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-size.go b/v4/graphene/graphene-size.go
index ad3e6f5127467aafe8126ca7f70c39056ae5ec1f..8a58b7b3e24f102ac3da2b0c40a0c4865a1f617d 100644
--- a/v4/graphene/graphene-size.go
+++ b/v4/graphene/graphene-size.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -107,6 +107,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-sphere.go b/v4/graphene/graphene-sphere.go
index 9464236c6cb52e5811ece964675c56899bbf13b0..3836cf2662eb345112fc9a66485dcda555ddb3cb 100644
--- a/v4/graphene/graphene-sphere.go
+++ b/v4/graphene/graphene-sphere.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -161,6 +161,8 @@
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-triangle.go b/v4/graphene/graphene-triangle.go
index c5057a7e6db4045ed019a72c347eaeed2a8eb982..8a67a3a7256a772a17e496e67582d34524b7c348 100644
--- a/v4/graphene/graphene-triangle.go
+++ b/v4/graphene/graphene-triangle.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -210,6 +210,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-vec2.go b/v4/graphene/graphene-vec2.go
index 68a43e3f9a458406b07421d818c90febc26f6339..3b7fc0c7b61854de7b1aba03417bc7f9a9e264ae 100644
--- a/v4/graphene/graphene-vec2.go
+++ b/v4/graphene/graphene-vec2.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -280,6 +280,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-vec3.go b/v4/graphene/graphene-vec3.go
index 2f44541eb148296796caf29324e2e3adb2d7b1f0..78d1c6647a22bcc331cca19fca7885a01ce1fe9c 100644
--- a/v4/graphene/graphene-vec3.go
+++ b/v4/graphene/graphene-vec3.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -361,6 +361,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/graphene/graphene-vec4.go b/v4/graphene/graphene-vec4.go
index 1a43562caa51797bd5b9e5a237baa8008c71f000..cb7d9f76a958602a3544a73a79391374e14f60ac 100644
--- a/v4/graphene/graphene-vec4.go
+++ b/v4/graphene/graphene-vec4.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -362,6 +362,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GRAPHENE", "graphene-gobject-1.0")
+	core.SetSharedLibrary("GRAPHENE", "libgraphene-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskbroadwayrenderer.go b/v4/gsk/gskbroadwayrenderer.go
index b234b5988f1dcafff0f185555cc2bc9fe331af09..747eef8f149f8a86af7f9c95873be48eb2599b18 100644
--- a/v4/gsk/gskbroadwayrenderer.go
+++ b/v4/gsk/gskbroadwayrenderer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -69,6 +69,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskcairorenderer.go b/v4/gsk/gskcairorenderer.go
index f85c402c21a94da97a985f39991ca3b3fa9f7d4c..960df8cb27049896031f448ee99eca902b688591 100644
--- a/v4/gsk/gskcairorenderer.go
+++ b/v4/gsk/gskcairorenderer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -73,6 +73,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskglrenderer.go b/v4/gsk/gskglrenderer.go
index b926f2e132d71ad05300e989832d531349e2545c..afbffbdce8d2bc40dfc1f49e610c8f66a8769326 100644
--- a/v4/gsk/gskglrenderer.go
+++ b/v4/gsk/gskglrenderer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -62,6 +62,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskglshader.go b/v4/gsk/gskglshader.go
index 042136d778a80e4b78bd181b82f62fa642602551..c6a16b1c261b5b3a7ee93e8e3218fccf1e5f1e1e 100644
--- a/v4/gsk/gskglshader.go
+++ b/v4/gsk/gskglshader.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -579,6 +579,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskrenderer.go b/v4/gsk/gskrenderer.go
index 373f830ada199f2dd70eafdb93e49c00cbcb759e..28763e58a7ac6c8e6d1e6c4bc91e3cd339593064 100644
--- a/v4/gsk/gskrenderer.go
+++ b/v4/gsk/gskrenderer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -185,6 +185,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskrendernode.go b/v4/gsk/gskrendernode.go
index 360301beff5a89df06ba36e112512a3e9e637f11..27f3b60d2c73ab6f716b211b34fafe24550af4e6 100644
--- a/v4/gsk/gskrendernode.go
+++ b/v4/gsk/gskrendernode.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -272,7 +272,7 @@ // For a discussion of the supported format, see that function.
 func RenderNodeDeserialize(BytesVar *glib.Bytes, ErrorFuncVar *ParseErrorFunc, UserDataVar uintptr) *RenderNode {
 	var cls *RenderNode
 
-	cret := xRenderNodeDeserialize(BytesVar, glib.NewCallback(ErrorFuncVar), UserDataVar)
+	cret := xRenderNodeDeserialize(BytesVar, glib.NewCallbackNullable(ErrorFuncVar), UserDataVar)
 
 	if cret == 0 {
 		return nil
@@ -283,6 +283,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskrendernodeimpl.go b/v4/gsk/gskrendernodeimpl.go
index c66660b5e30fc595daaad86158815d5cb6e1b70d..481d2ee2401189dde9bfe7723450bfeb46cae8f2 100644
--- a/v4/gsk/gskrendernodeimpl.go
+++ b/v4/gsk/gskrendernodeimpl.go
@@ -3,7 +3,7 @@ package gsk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -1988,6 +1988,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gskroundedrect.go b/v4/gsk/gskroundedrect.go
index 5a8a1cf701ded3617c07a50a06d598aeec9c116e..801d1b189e110e58d5c8025b989583647a51e25d 100644
--- a/v4/gsk/gskroundedrect.go
+++ b/v4/gsk/gskroundedrect.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/graphene"
 )
 
@@ -150,6 +150,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gsktransform.go b/v4/gsk/gsktransform.go
index 21d6cb64f1ae174a9487f35902434c193e46ec3f..23717357cbf5551cfc71f26e10ca0e53b587fef9 100644
--- a/v4/gsk/gsktransform.go
+++ b/v4/gsk/gsktransform.go
@@ -3,7 +3,7 @@ package gsk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xTransformParse func(string, **Transform) bool
@@ -23,6 +23,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/gsktypes.go b/v4/gsk/gsktypes.go
index 9748443f9b4b155962005e3735dcfad718d483ff..bc3bb40d87f4193bafec0cc68c590abc7e77564a 100644
--- a/v4/gsk/gsktypes.go
+++ b/v4/gsk/gsktypes.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/graphene"
@@ -346,6 +346,8 @@
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gsk/main.go b/v4/gsk/main.go
index 468cd46bd0585a0fdb7d79dd43f31129985c7903..c77b8e26e50b81a4c744cd39935b72a31c29fb56 100644
--- a/v4/gsk/main.go
+++ b/v4/gsk/main.go
@@ -3,7 +3,7 @@ package gsk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -60,6 +60,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GSK", "gtk4")
+	core.SetSharedLibrary("GSK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkaboutdialog.go b/v4/gtk/gtkaboutdialog.go
index a4aa458fb6314d23aca13433c64ae1e7c58868c3..fda99240c7df0c64e0ab9d0cd99c801044acdd1f 100644
--- a/v4/gtk/gtkaboutdialog.go
+++ b/v4/gtk/gtkaboutdialog.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -797,6 +797,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkaccelgroup.go b/v4/gtk/gtkaccelgroup.go
index e172d13858bf43df7faa3a024f6a8042bdeb0022..d0cfea17593a2301b81861551a710b5c2a85d941 100644
--- a/v4/gtk/gtkaccelgroup.go
+++ b/v4/gtk/gtkaccelgroup.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 )
 
@@ -145,6 +145,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkaccessible.go b/v4/gtk/gtkaccessible.go
index 2fb8c463001f3ccd24a0348eb67b88e05c67b2d1..b6ad84f9fbd2203be689d8e5e7c9265af0e93c39 100644
--- a/v4/gtk/gtkaccessible.go
+++ b/v4/gtk/gtkaccessible.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -240,6 +240,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkactionable.go b/v4/gtk/gtkactionable.go
index a611916c146770cb699e6ddf61eb7532a6cd2686..c8b7d2616da6827627ae62b936657db43dd4dce0 100644
--- a/v4/gtk/gtkactionable.go
+++ b/v4/gtk/gtkactionable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -158,6 +158,8 @@ var XGtkActionableSetActionTargetValue func(uintptr, *glib.Variant)
 var XGtkActionableSetDetailedActionName func(uintptr, string)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkactionbar.go b/v4/gtk/gtkactionbar.go
index 22e9da43ca9a075a015b44f9ed4a380178eb1e7e..20b5c15e9eb70881f1fabc83059ed779d29a873a 100644
--- a/v4/gtk/gtkactionbar.go
+++ b/v4/gtk/gtkactionbar.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -313,6 +313,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkadjustment.go b/v4/gtk/gtkadjustment.go
index d4973ecdc0ca43dd8e4fee0d6fff26f2dc79f6d3..1442ed82abc70ee471d50293f199f1d1bdca7298 100644
--- a/v4/gtk/gtkadjustment.go
+++ b/v4/gtk/gtkadjustment.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -310,6 +310,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "value-changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkappchooser.go b/v4/gtk/gtkappchooser.go
index 331713e766b5b939d9a748e436129f8fb8f69317..e47d7edbc72e44d571a6d0e4c2b23692fa3bb554 100644
--- a/v4/gtk/gtkappchooser.go
+++ b/v4/gtk/gtkappchooser.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -90,6 +90,8 @@ var XGtkAppChooserGetContentType func(uintptr) string
 var XGtkAppChooserRefresh func(uintptr)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkappchooserbutton.go b/v4/gtk/gtkappchooserbutton.go
index 5c8228ea049cdb4116b475a29ad5311a48fc5325..933d47a569bb9802474282ea4c5acfb13df90663 100644
--- a/v4/gtk/gtkappchooserbutton.go
+++ b/v4/gtk/gtkappchooserbutton.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -442,6 +442,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkappchooserdialog.go b/v4/gtk/gtkappchooserdialog.go
index 33b1d8f063f3aa88a7bcef91a67a090d683f82ca..58b279ca569f417d7793b1a499872a238ea9a1b8 100644
--- a/v4/gtk/gtkappchooserdialog.go
+++ b/v4/gtk/gtkappchooserdialog.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -405,6 +405,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkappchooserwidget.go b/v4/gtk/gtkappchooserwidget.go
index fd574388312539e47d27f34820ada5edd22481e9..206b5ce3cc23002bf94b05f16d64a38550772a2d 100644
--- a/v4/gtk/gtkappchooserwidget.go
+++ b/v4/gtk/gtkappchooserwidget.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -417,6 +417,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkapplication.go b/v4/gtk/gtkapplication.go
index 7985d9957be047ea6313b7a2fb68b460bab247ef..8ef1c40cdd2621a058a1ca1243098d798ffdc330 100644
--- a/v4/gtk/gtkapplication.go
+++ b/v4/gtk/gtkapplication.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -833,6 +833,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkapplicationwindow.go b/v4/gtk/gtkapplicationwindow.go
index 054f200dbb6e7299799bf22a217b1417daf3e8cf..b15c341e0572c8ca92f53c0c29f1aed733ff2a72 100644
--- a/v4/gtk/gtkapplicationwindow.go
+++ b/v4/gtk/gtkapplicationwindow.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -776,6 +776,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkaspectframe.go b/v4/gtk/gtkaspectframe.go
index eab89d992a46f9d6b06c314fd7c202aaad5b2d2e..ed22f2b87cae495c859e5ebd5dbaf7034864fca7 100644
--- a/v4/gtk/gtkaspectframe.go
+++ b/v4/gtk/gtkaspectframe.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -309,6 +309,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkassistant.go b/v4/gtk/gtkassistant.go
index 590647664b2739748c09686c11634571f8b08b50..1cc36f388fe4d9532c7525ce6d7ff8e2e5f32bfd 100644
--- a/v4/gtk/gtkassistant.go
+++ b/v4/gtk/gtkassistant.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -355,7 +355,7 @@ // use the default forward function, which just goes to the
 // next visible page.
 func (x *Assistant) SetForwardPageFunc(PageFuncVar *AssistantPageFunc, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xAssistantSetForwardPageFunc(x.GoPointer(), glib.NewCallback(PageFuncVar), DataVar, glib.NewCallback(DestroyVar))
+	xAssistantSetForwardPageFunc(x.GoPointer(), glib.NewCallbackNullable(PageFuncVar), DataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -834,6 +834,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkatcontext.go b/v4/gtk/gtkatcontext.go
index a72a89ba086ad151c74627f4d54140aa81428086..c16b863556dd05cd152a8e3cf527592146d6cb14 100644
--- a/v4/gtk/gtkatcontext.go
+++ b/v4/gtk/gtkatcontext.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -122,6 +122,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "state-change", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbinlayout.go b/v4/gtk/gtkbinlayout.go
index 768b2ee8bd41ed7b2ed5b1d590f6014e9fbedd86..1264bc53ac21a3e75ff58c3e549c78c375418afe 100644
--- a/v4/gtk/gtkbinlayout.go
+++ b/v4/gtk/gtkbinlayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -71,6 +71,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbitset.go b/v4/gtk/gtkbitset.go
index 71113546010fb996e1b8fe09c9cc744dcbb4f3ab..76cfcec35d38cd4f85666f541e857ac4577bf932 100644
--- a/v4/gtk/gtkbitset.go
+++ b/v4/gtk/gtkbitset.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -114,6 +114,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbookmarklist.go b/v4/gtk/gtkbookmarklist.go
index 70d541aedd825e707ffc0f7d9e30d8bdf21bd448..5bf0c7b918eb8c2e0ba0ddfea855e08217ef46ab 100644
--- a/v4/gtk/gtkbookmarklist.go
+++ b/v4/gtk/gtkbookmarklist.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -229,6 +229,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkboolfilter.go b/v4/gtk/gtkboolfilter.go
index 896a5c099d5ac9d7dff492c04de7e091533ff437..bb53cb8a9a91cf07ff3097edc559c2eaf20e7ca0 100644
--- a/v4/gtk/gtkboolfilter.go
+++ b/v4/gtk/gtkboolfilter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -115,6 +115,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkborder.go b/v4/gtk/gtkborder.go
index 4a7fd60e6166c9845722906360b3f6547cf60ac7..54ed85e9af07d76ed248486799fab44e35bae66b 100644
--- a/v4/gtk/gtkborder.go
+++ b/v4/gtk/gtkborder.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -63,6 +63,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbox.go b/v4/gtk/gtkbox.go
index 88a64ea70630d7b919a7f404f4869fe2afead062..63a16974cc9437552aba8162ecca2245d333fa30 100644
--- a/v4/gtk/gtkbox.go
+++ b/v4/gtk/gtkbox.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -374,6 +374,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkboxlayout.go b/v4/gtk/gtkboxlayout.go
index 4424af65bdf942caa45c960272506007a5340668..991e649203d4dff443ec150827d81a6ecac1785e 100644
--- a/v4/gtk/gtkboxlayout.go
+++ b/v4/gtk/gtkboxlayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -153,6 +153,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbuildable.go b/v4/gtk/gtkbuildable.go
index 15ee9748aec352b6f12514ac213cfb116feaf381..c42232ed11e0918fb417a374e7e6eb3a209af060 100644
--- a/v4/gtk/gtkbuildable.go
+++ b/v4/gtk/gtkbuildable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -198,6 +198,8 @@
 var XGtkBuildableGetBuildableId func(uintptr) string
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbuilder.go b/v4/gtk/gtkbuilder.go
index d43d9aa9d848753d17c87311e821fb8389ddfec4..30933884e27d9ee1e864aed6865af5b0ec8ee85f 100644
--- a/v4/gtk/gtkbuilder.go
+++ b/v4/gtk/gtkbuilder.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -751,6 +751,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbuilderlistitemfactory.go b/v4/gtk/gtkbuilderlistitemfactory.go
index 74652311ee5129f8e708d6c706bd8b741f314275..4678a912215b055f88e2fb08c7a5a9403fcac50a 100644
--- a/v4/gtk/gtkbuilderlistitemfactory.go
+++ b/v4/gtk/gtkbuilderlistitemfactory.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -143,6 +143,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbuilderscope.go b/v4/gtk/gtkbuilderscope.go
index b104e5b430bcb5534b38ec554af80331d17f6b63..3823693a007c3177d7e8a273157f766590a9480c 100644
--- a/v4/gtk/gtkbuilderscope.go
+++ b/v4/gtk/gtkbuilderscope.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -198,6 +198,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkbutton.go b/v4/gtk/gtkbutton.go
index cdbf1f692a8fda7c5933289ff334bfb4bf5dfac2..c0a2f29f5115f3694b0223f656198eabda229731 100644
--- a/v4/gtk/gtkbutton.go
+++ b/v4/gtk/gtkbutton.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -562,6 +562,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcalendar.go b/v4/gtk/gtkcalendar.go
index 1d7cfe7dc69855a4d3b2bc31bc1d74b14451b97d..4db8c176c2924cb037d233e4596c9ba0440bef71 100644
--- a/v4/gtk/gtkcalendar.go
+++ b/v4/gtk/gtkcalendar.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -475,6 +475,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellarea.go b/v4/gtk/gtkcellarea.go
index 6b6c3c0779bc1494b73a685658ee103135de016a..1f488bd3a8389df86a9832686c3029cf03001441 100644
--- a/v4/gtk/gtkcellarea.go
+++ b/v4/gtk/gtkcellarea.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1190,11 +1190,13 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *CellArea) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellareabox.go b/v4/gtk/gtkcellareabox.go
index ad53ebd4cab6a8d1f0b054b00282dcdeb7045698..e224c1e464fec0aa9e73a242b702aca528a15065 100644
--- a/v4/gtk/gtkcellareabox.go
+++ b/v4/gtk/gtkcellareabox.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -210,7 +210,7 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *CellAreaBox) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -229,6 +229,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellareacontext.go b/v4/gtk/gtkcellareacontext.go
index 9d470ec42a1861d0b090794eb9fda124faf6e053..ebc90f4626ce436d8761d9a81a048fdd09c925c0 100644
--- a/v4/gtk/gtkcellareacontext.go
+++ b/v4/gtk/gtkcellareacontext.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -240,6 +240,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcelleditable.go b/v4/gtk/gtkcelleditable.go
index 1efd36fea57a675489d640acfd45c1c4c7a1ede9..f2c374d732f249e7a99d2a0639b131f1dbf8865f 100644
--- a/v4/gtk/gtkcelleditable.go
+++ b/v4/gtk/gtkcelleditable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -90,6 +90,8 @@ var XGtkCellEditableRemoveWidget func(uintptr)
 var XGtkCellEditableStartEditing func(uintptr, uintptr)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcelllayout.go b/v4/gtk/gtkcelllayout.go
index ac21bab7dec5e1c6e57b32a45c8ec20abae23815..7d94f72fd88f131c5e0b10b255c91a7c943e60f1 100644
--- a/v4/gtk/gtkcelllayout.go
+++ b/v4/gtk/gtkcelllayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -287,7 +287,7 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *CellLayoutBase) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -303,6 +303,8 @@ var XGtkCellLayoutSetAttributes func(uintptr, uintptr, ...interface{})
 var XGtkCellLayoutSetCellDataFunc func(uintptr, uintptr, uintptr, uintptr, uintptr)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrenderer.go b/v4/gtk/gtkcellrenderer.go
index 2db6f293cbc3d31b420b760bc45b32de87c09f8a..ed368c69cb4131c2fcfedc94eee97478d0fcf5c1 100644
--- a/v4/gtk/gtkcellrenderer.go
+++ b/v4/gtk/gtkcellrenderer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -504,6 +504,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "editing-started", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrendereraccel.go b/v4/gtk/gtkcellrendereraccel.go
index 3d7cb29e5127779c6c7b79db0aed4ac95c06c20c..1ec2d48bcf916217fa9651f4c1c23822769e7aaf 100644
--- a/v4/gtk/gtkcellrendereraccel.go
+++ b/v4/gtk/gtkcellrendereraccel.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -119,6 +119,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "accel-edited", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrenderercombo.go b/v4/gtk/gtkcellrenderercombo.go
index 18a3bda8c7b8a2ba74ed13ce533767fcaf15d351..e2e9dcd443889e19f83b7a993a6afab877f4b34d 100644
--- a/v4/gtk/gtkcellrenderercombo.go
+++ b/v4/gtk/gtkcellrenderercombo.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -104,6 +104,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrendererpixbuf.go b/v4/gtk/gtkcellrendererpixbuf.go
index 86a5a3f416913b6915f9b6af883951f3844e8d26..d34ccd71e7e0ea73648fcea27690fc23c5257e91 100644
--- a/v4/gtk/gtkcellrendererpixbuf.go
+++ b/v4/gtk/gtkcellrendererpixbuf.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -73,6 +73,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrendererprogress.go b/v4/gtk/gtkcellrendererprogress.go
index 806974885d58be20502aca0b7f45874f370a5e9b..71c923276043e2a4be4f2d7069ba4df4b3240ab4 100644
--- a/v4/gtk/gtkcellrendererprogress.go
+++ b/v4/gtk/gtkcellrendererprogress.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -71,6 +71,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrendererspin.go b/v4/gtk/gtkcellrendererspin.go
index bff94213e14e54f6551349e059ee35f3dc02f66c..3a1c67e98fd605120b3b6e56fdaca7e761faa1b7 100644
--- a/v4/gtk/gtkcellrendererspin.go
+++ b/v4/gtk/gtkcellrendererspin.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -68,6 +68,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrendererspinner.go b/v4/gtk/gtkcellrendererspinner.go
index 19a629a38ab0e5c0d69c1d24747aba8f41ac8a3e..95b82fa0e72f61b8acd839f0aaadd6528c67df4b 100644
--- a/v4/gtk/gtkcellrendererspinner.go
+++ b/v4/gtk/gtkcellrendererspinner.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -66,6 +66,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrenderertext.go b/v4/gtk/gtkcellrenderertext.go
index 882eacb28b8f6d9e83940766df68209433897321..d60dca036791cf929f6626d2c9a46554e90f70fd 100644
--- a/v4/gtk/gtkcellrenderertext.go
+++ b/v4/gtk/gtkcellrenderertext.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -121,6 +121,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "edited", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellrenderertoggle.go b/v4/gtk/gtkcellrenderertoggle.go
index b5bca1bbfb7a6b0b3a85304cb12e62f1f21baef3..51b7d1ec5b5992237d29b8c9d782b458f74f5cc8 100644
--- a/v4/gtk/gtkcellrenderertoggle.go
+++ b/v4/gtk/gtkcellrenderertoggle.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -154,6 +154,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "toggled", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcellview.go b/v4/gtk/gtkcellview.go
index 6b0f66fc44a8f58ce489dd896f42308358f62e34..a5a7bb064baaf33034b08b329a71e212063211ef 100644
--- a/v4/gtk/gtkcellview.go
+++ b/v4/gtk/gtkcellview.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -501,7 +501,7 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *CellView) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -520,6 +520,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcenterbox.go b/v4/gtk/gtkcenterbox.go
index e248391a6e76c96e6fc671f34fa75a547b1ecdad..db178e95baee735bcf770064386871a2ff13caa8 100644
--- a/v4/gtk/gtkcenterbox.go
+++ b/v4/gtk/gtkcenterbox.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -361,6 +361,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcenterlayout.go b/v4/gtk/gtkcenterlayout.go
index 78e082fc1b033aa49912b94d16db619530006eba..e95a8d5f7edbccda4c3dba688bbaff94a531bffc 100644
--- a/v4/gtk/gtkcenterlayout.go
+++ b/v4/gtk/gtkcenterlayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -192,6 +192,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcheckbutton.go b/v4/gtk/gtkcheckbutton.go
index 913fb80ebc98718d26e7c5fb35812a9363223abf..853f0add3e5d986eaeb13fcdc0a2bedafa541172 100644
--- a/v4/gtk/gtkcheckbutton.go
+++ b/v4/gtk/gtkcheckbutton.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -566,6 +566,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcolorbutton.go b/v4/gtk/gtkcolorbutton.go
index ee795cc1bc65224b09965d3bc227f2374a495fed..8023d88de7ec595c62ac10211836214d57fc6404 100644
--- a/v4/gtk/gtkcolorbutton.go
+++ b/v4/gtk/gtkcolorbutton.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -380,6 +380,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcolorchooser.go b/v4/gtk/gtkcolorchooser.go
index dedbbeb2e9f1a56efbc2009e56bdf30a9f5f3fdb..918f4c574ae5a0e3686941f5adbc141f0eaa95a0 100644
--- a/v4/gtk/gtkcolorchooser.go
+++ b/v4/gtk/gtkcolorchooser.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -120,6 +120,8 @@ var XGtkColorChooserSetRgba func(uintptr, *gdk.RGBA)
 var XGtkColorChooserSetUseAlpha func(uintptr, bool)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcolorchooserdialog.go b/v4/gtk/gtkcolorchooserdialog.go
index 337eef7d2faa987f3cd0c558ad28ff2e4518600b..62089c740b26129846b33ef598479f19be6fb1c0 100644
--- a/v4/gtk/gtkcolorchooserdialog.go
+++ b/v4/gtk/gtkcolorchooserdialog.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -368,6 +368,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcolorchooserwidget.go b/v4/gtk/gtkcolorchooserwidget.go
index 459045a47e6b733eb855bf2c4da0d2a4fbb1cfe4..b5a20bdf43889d49fa05ac1f4667d24f4ff898b3 100644
--- a/v4/gtk/gtkcolorchooserwidget.go
+++ b/v4/gtk/gtkcolorchooserwidget.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -272,6 +272,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcolorutils.go b/v4/gtk/gtkcolorutils.go
index ca35cc4dadb4942063859c26fa97d9e06c6e4de5..39fd3caa163bc71b359b8551e7fb8c66e9464948 100644
--- a/v4/gtk/gtkcolorutils.go
+++ b/v4/gtk/gtkcolorutils.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xHsvToRgb func(float32, float32, float32, float32, float32, float32)
@@ -31,6 +31,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcolumnview.go b/v4/gtk/gtkcolumnview.go
index 378be2b175ccda2a9e189c4f25e657d649d986a2..59965172e84d68e128a7dd7baaa63964e8813962 100644
--- a/v4/gtk/gtkcolumnview.go
+++ b/v4/gtk/gtkcolumnview.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -621,6 +621,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcolumnviewcolumn.go b/v4/gtk/gtkcolumnviewcolumn.go
index 5d7653debbf174f02c73aaeb6195920794dc2afb..efa605cfaedc3d2221b0424a3cc13cd5025319fe 100644
--- a/v4/gtk/gtkcolumnviewcolumn.go
+++ b/v4/gtk/gtkcolumnviewcolumn.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -299,6 +299,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcombobox.go b/v4/gtk/gtkcombobox.go
index c2c4e916e8bd67b744f1beefb46f0df593f602f8..272cfeb3828321a447c77555ac816e25bc8ca9f3 100644
--- a/v4/gtk/gtkcombobox.go
+++ b/v4/gtk/gtkcombobox.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -477,7 +477,7 @@ // If the row separator function is %NULL, no separators are drawn.
 // This is the default value.
 func (x *ComboBox) SetRowSeparatorFunc(FuncVar *TreeViewRowSeparatorFunc, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xComboBoxSetRowSeparatorFunc(x.GoPointer(), glib.NewCallback(FuncVar), DataVar, glib.NewCallback(DestroyVar))
+	xComboBoxSetRowSeparatorFunc(x.GoPointer(), glib.NewCallbackNullable(FuncVar), DataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -943,11 +943,13 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *ComboBox) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcomboboxtext.go b/v4/gtk/gtkcomboboxtext.go
index a91690721c5792455cd76d4003cc8a84b53d59c0..483c11768c2a43af0436495721c591e6207e3166 100644
--- a/v4/gtk/gtkcomboboxtext.go
+++ b/v4/gtk/gtkcomboboxtext.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -523,11 +523,13 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *ComboBoxText) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkconstraint.go b/v4/gtk/gtkconstraint.go
index 3e5de4ad4b6b2f2a401461e042e42bff0c60080f..1bcc0b3d312c8d17dfd389c97554c194c68a34df 100644
--- a/v4/gtk/gtkconstraint.go
+++ b/v4/gtk/gtkconstraint.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -266,6 +266,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkconstraintguide.go b/v4/gtk/gtkconstraintguide.go
index 1506d900e4fe3af1061d4d5609b0abbf2ca18ee5..c0e95fc6eb4d9d643af49e854fde2964ca711792 100644
--- a/v4/gtk/gtkconstraintguide.go
+++ b/v4/gtk/gtkconstraintguide.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -179,6 +179,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkconstraintlayout.go b/v4/gtk/gtkconstraintlayout.go
index de2b1f9c7a052834da9321b2b859e5e43ad34d05..86a4b7b3b0ce1ba3818479565e2bf47ef803fe95 100644
--- a/v4/gtk/gtkconstraintlayout.go
+++ b/v4/gtk/gtkconstraintlayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -511,6 +511,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcsserror.go b/v4/gtk/gtkcsserror.go
index ced7f9420cbe251dce8ebe25d76de8c565e8493c..1da2af37110b14109d030b079f10de1af580c626 100644
--- a/v4/gtk/gtkcsserror.go
+++ b/v4/gtk/gtkcsserror.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -16,6 +16,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcssprovider.go b/v4/gtk/gtkcssprovider.go
index cfc9670cd3333f7c41f07a7dbeee31bd6279b7a7..fab48e287da9cb352415246885b1707d01ee30b9 100644
--- a/v4/gtk/gtkcssprovider.go
+++ b/v4/gtk/gtkcssprovider.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -207,6 +207,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "parsing-error", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcsssection.go b/v4/gtk/gtkcsssection.go
index b81aba3cd174d5ce5af3e22f9f08eb4ae6e8bc19..a15bb10f47150f42afe45896eebc2a32da27ac44 100644
--- a/v4/gtk/gtkcsssection.go
+++ b/v4/gtk/gtkcsssection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -138,6 +138,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcustomfilter.go b/v4/gtk/gtkcustomfilter.go
index 2d8b58f57e8e4467759b3e64c019806d8ada2b93..da78cbe531f6a94f7298c227d319099e5a8aa33c 100644
--- a/v4/gtk/gtkcustomfilter.go
+++ b/v4/gtk/gtkcustomfilter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -56,7 +56,7 @@ // gtk_filter_changed() needs to be called.
 func NewCustomFilter(MatchFuncVar *CustomFilterFunc, UserDataVar uintptr, UserDestroyVar *glib.DestroyNotify) *CustomFilter {
 	var cls *CustomFilter
 
-	cret := xNewCustomFilter(glib.NewCallback(MatchFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
+	cret := xNewCustomFilter(glib.NewCallbackNullable(MatchFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
 
 	if cret == 0 {
 		return nil
@@ -79,7 +79,7 @@ // If a previous function was set, its @user_destroy will be
 // called now.
 func (x *CustomFilter) SetFilterFunc(MatchFuncVar *CustomFilterFunc, UserDataVar uintptr, UserDestroyVar *glib.DestroyNotify) {
 
-	xCustomFilterSetFilterFunc(x.GoPointer(), glib.NewCallback(MatchFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
+	xCustomFilterSetFilterFunc(x.GoPointer(), glib.NewCallbackNullable(MatchFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
 
 }
 
@@ -95,6 +95,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcustomlayout.go b/v4/gtk/gtkcustomlayout.go
index 15d68ebef556ccd92b497a0f1b1540ca78820b31..864c472d7306ea135ce0e2ded99b37bd0dd43943 100644
--- a/v4/gtk/gtkcustomlayout.go
+++ b/v4/gtk/gtkcustomlayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -62,7 +62,7 @@ // from layout containers to layout manager delegates.
 func NewCustomLayout(RequestModeVar *CustomRequestModeFunc, MeasureVar *CustomMeasureFunc, AllocateVar *CustomAllocateFunc) *CustomLayout {
 	var cls *CustomLayout
 
-	cret := xNewCustomLayout(glib.NewCallback(RequestModeVar), glib.NewCallback(MeasureVar), glib.NewCallback(AllocateVar))
+	cret := xNewCustomLayout(glib.NewCallbackNullable(RequestModeVar), glib.NewCallback(MeasureVar), glib.NewCallback(AllocateVar))
 
 	if cret == 0 {
 		return nil
@@ -84,6 +84,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkcustomsorter.go b/v4/gtk/gtkcustomsorter.go
index 9b5e7976672cd57f6a4cf855f3f565747471fa36..cf584bc6da9001769bebbf08df517dc0ff84bcd2 100644
--- a/v4/gtk/gtkcustomsorter.go
+++ b/v4/gtk/gtkcustomsorter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -48,7 +48,7 @@ // If @sort_func is %NULL, all items are considered equal.
 func NewCustomSorter(SortFuncVar *glib.CompareDataFunc, UserDataVar uintptr, UserDestroyVar *glib.DestroyNotify) *CustomSorter {
 	var cls *CustomSorter
 
-	cret := xNewCustomSorter(glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
+	cret := xNewCustomSorter(glib.NewCallbackNullable(SortFuncVar), UserDataVar, glib.NewCallbackNullable(UserDestroyVar))
 
 	if cret == 0 {
 		return nil
@@ -71,7 +71,7 @@ // If a previous function was set, its @user_destroy will be
 // called now.
 func (x *CustomSorter) SetSortFunc(SortFuncVar *glib.CompareDataFunc, UserDataVar uintptr, UserDestroyVar *glib.DestroyNotify) {
 
-	xCustomSorterSetSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
+	xCustomSorterSetSortFunc(x.GoPointer(), glib.NewCallbackNullable(SortFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
 
 }
 
@@ -87,6 +87,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdebug.go b/v4/gtk/gtkdebug.go
index 5dd346fce9cac74e7109dbf76da4c64bcb4a2bea..b1ab5f4c2f44d04c6b92a711823cfa1ff7fc5af5 100644
--- a/v4/gtk/gtkdebug.go
+++ b/v4/gtk/gtkdebug.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -86,6 +86,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdialog.go b/v4/gtk/gtkdialog.go
index 12488f0f6f69ffe368b1592422c9669fd12b4c7d..00dd800599221cb018531ac1aa846cc83c2e2100 100644
--- a/v4/gtk/gtkdialog.go
+++ b/v4/gtk/gtkdialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -761,6 +761,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdirectorylist.go b/v4/gtk/gtkdirectorylist.go
index 4889447e4c85cb66c1fe090d8c222747c1924db4..a155a40bb021fd269af71a6f17f11c767c624f2f 100644
--- a/v4/gtk/gtkdirectorylist.go
+++ b/v4/gtk/gtkdirectorylist.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -316,6 +316,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdragicon.go b/v4/gtk/gtkdragicon.go
index 5bf3f66481b65bb4e86edae488f65fa2b6305851..d46ee780781b7b5f5fc3e0f3fe60cb8aa4c237c7 100644
--- a/v4/gtk/gtkdragicon.go
+++ b/v4/gtk/gtkdragicon.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -396,6 +396,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdragsource.go b/v4/gtk/gtkdragsource.go
index ec80ed27d21be6a267ad124e3fe9568b28e2974d..b7325ec5e2d04b85fa7842cba538440de9337bb8 100644
--- a/v4/gtk/gtkdragsource.go
+++ b/v4/gtk/gtkdragsource.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -351,6 +351,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "prepare", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdrawingarea.go b/v4/gtk/gtkdrawingarea.go
index d12e3109798603eb536e01bcaf378d6804e5b9fc..2ab81463054e545525c06790ec29932b2cc27782 100644
--- a/v4/gtk/gtkdrawingarea.go
+++ b/v4/gtk/gtkdrawingarea.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -217,7 +217,7 @@ // If what you are drawing does change, call [method@Gtk.Widget.queue_draw]
 // on the drawing area. This will cause a redraw and will call @draw_func again.
 func (x *DrawingArea) SetDrawFunc(DrawFuncVar *DrawingAreaDrawFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xDrawingAreaSetDrawFunc(x.GoPointer(), glib.NewCallback(DrawFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	xDrawingAreaSetDrawFunc(x.GoPointer(), glib.NewCallbackNullable(DrawFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -400,6 +400,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdropcontrollermotion.go b/v4/gtk/gtkdropcontrollermotion.go
index 9d48b88e39cd4a2c8a50a416f0d0f5d50981d194..58a40ec2dc85e8daff2dbc96f1003c227e0cd68e 100644
--- a/v4/gtk/gtkdropcontrollermotion.go
+++ b/v4/gtk/gtkdropcontrollermotion.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -172,6 +172,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "motion", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdropdown.go b/v4/gtk/gtkdropdown.go
index 521c84f7a6ca279e177e0b6a90c86e5719892730..702020364e20344ae1582b054b71d055be144fe6 100644
--- a/v4/gtk/gtkdropdown.go
+++ b/v4/gtk/gtkdropdown.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -487,6 +487,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdroptarget.go b/v4/gtk/gtkdroptarget.go
index acc8e8d2b329df61671903811b48b63e1dbe71b0..1194ffc91396696d2ce0d36b6e89c2105a7b7404 100644
--- a/v4/gtk/gtkdroptarget.go
+++ b/v4/gtk/gtkdroptarget.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -402,6 +402,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "motion", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkdroptargetasync.go b/v4/gtk/gtkdroptargetasync.go
index 0f41eef9eee480bd90b1a0649827395e7d50907d..946bb05d0f4b5c96c274df888d1d7216e055bbc4 100644
--- a/v4/gtk/gtkdroptargetasync.go
+++ b/v4/gtk/gtkdroptargetasync.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -282,6 +282,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "drop", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeditable.go b/v4/gtk/gtkeditable.go
index 2637a020f3cfd32f9db84023d26beb91cf95705e..16c7b9b9adeafeb5add364a1285e11d5d3b43513 100644
--- a/v4/gtk/gtkeditable.go
+++ b/v4/gtk/gtkeditable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -562,6 +562,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeditablelabel.go b/v4/gtk/gtkeditablelabel.go
index 568709c77655e02ee5a629ccef9aa4d3d01b60da..ab087cc92cc2a24e9da7b5ecb0fd2900e171cd1d 100644
--- a/v4/gtk/gtkeditablelabel.go
+++ b/v4/gtk/gtkeditablelabel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -513,6 +513,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkemojichooser.go b/v4/gtk/gtkemojichooser.go
index 95e3c8bf1d34cc1302efe3ab51f42c46035f92a1..4c26cf02c60feaf2054fb8041b373b36c2527ab0 100644
--- a/v4/gtk/gtkemojichooser.go
+++ b/v4/gtk/gtkemojichooser.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -318,6 +318,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkentry.go b/v4/gtk/gtkentry.go
index 70abfcf0762112c45bbeb811d895396e630469b4..1ce8170054a641fa4864a264c9d3f20438973681 100644
--- a/v4/gtk/gtkentry.go
+++ b/v4/gtk/gtkentry.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -1395,6 +1395,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkentrybuffer.go b/v4/gtk/gtkentrybuffer.go
index 22664fd83aab815ff96bc3b9930262f42523ba1d..5ce95608a365a7845dd9e062d162a72838f9d125 100644
--- a/v4/gtk/gtkentrybuffer.go
+++ b/v4/gtk/gtkentrybuffer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -243,6 +243,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "inserted-text", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkentrycompletion.go b/v4/gtk/gtkentrycompletion.go
index 84f0d4dc800ea75aff0b392046af98c84518ef40..ed5bc3edf992491011ec15c6dc6ec2ab688bf992 100644
--- a/v4/gtk/gtkentrycompletion.go
+++ b/v4/gtk/gtkentrycompletion.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -601,11 +601,13 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *EntryCompletion) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkenums.go b/v4/gtk/gtkenums.go
index 87f40b41ac550481d9f869843ef9b4cc7f871074..c6c01d8593463bd9504acc15884177b2d2cfbb46 100644
--- a/v4/gtk/gtkenums.go
+++ b/v4/gtk/gtkenums.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -1864,6 +1864,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeventcontroller.go b/v4/gtk/gtkeventcontroller.go
index f4de42f95f888f28b0bad29ad704e61c55178c29..d2b4e2cece5857346c5faa649c0778c760d51517 100644
--- a/v4/gtk/gtkeventcontroller.go
+++ b/v4/gtk/gtkeventcontroller.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -219,6 +219,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeventcontrollerfocus.go b/v4/gtk/gtkeventcontrollerfocus.go
index a5d372daa586430dffcb6d8256a377b3da4a624f..c79dffef7be47a675c27c084257a3141c4543588 100644
--- a/v4/gtk/gtkeventcontrollerfocus.go
+++ b/v4/gtk/gtkeventcontrollerfocus.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -148,6 +148,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "leave", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeventcontrollerkey.go b/v4/gtk/gtkeventcontrollerkey.go
index a854174b5962502c9012160614b78adb9db9d44b..346cff298a599ffd57f119a8270d39c4c3aae7ca 100644
--- a/v4/gtk/gtkeventcontrollerkey.go
+++ b/v4/gtk/gtkeventcontrollerkey.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -202,6 +202,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "modifiers", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeventcontrollerlegacy.go b/v4/gtk/gtkeventcontrollerlegacy.go
index 478d1ed67ff9e50d17c66427592f90bd44c5105d..463a95c16500a5bbfd47a1396ade8fba31d3d1ab 100644
--- a/v4/gtk/gtkeventcontrollerlegacy.go
+++ b/v4/gtk/gtkeventcontrollerlegacy.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -89,6 +89,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "event", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeventcontrollermotion.go b/v4/gtk/gtkeventcontrollermotion.go
index 26f690171f4a7275cf130555a5f3478ac15a24ef..de792e55bedf88225d1ebf8c4c5d9cc3f897b104 100644
--- a/v4/gtk/gtkeventcontrollermotion.go
+++ b/v4/gtk/gtkeventcontrollermotion.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -151,6 +151,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "motion", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkeventcontrollerscroll.go b/v4/gtk/gtkeventcontrollerscroll.go
index d53e907b4443e9cd9a09e1d4a594e215d12516ec..b99e74136d8cce71f1981e8cb6d475bbf661f121 100644
--- a/v4/gtk/gtkeventcontrollerscroll.go
+++ b/v4/gtk/gtkeventcontrollerscroll.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -248,6 +248,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "scroll-end", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkexpander.go b/v4/gtk/gtkexpander.go
index 82a509178f9263c01c53bb8264126ebd722a7143..223c2914adf8a41c2d4fc86ce5c88ab7ce03056f 100644
--- a/v4/gtk/gtkexpander.go
+++ b/v4/gtk/gtkexpander.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -502,6 +502,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkexpression.go b/v4/gtk/gtkexpression.go
index c1b690a32ba4e1fcf0d3cfb6951c9b39f8188aaa..a29e7125f8ba4771d1c099239d381ae43d55dfab 100644
--- a/v4/gtk/gtkexpression.go
+++ b/v4/gtk/gtkexpression.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -181,7 +181,7 @@ // `callback_func`, `user_data` and `user_destroy`.
 func NewCClosureExpression(ValueTypeVar types.GType, MarshalVar *gobject.ClosureMarshal, NParamsVar uint, ParamsVar uintptr, CallbackFuncVar *gobject.Callback, UserDataVar uintptr, UserDestroyVar *gobject.ClosureNotify) *CClosureExpression {
 	var cls *CClosureExpression
 
-	cret := xNewCClosureExpression(ValueTypeVar, glib.NewCallback(MarshalVar), NParamsVar, ParamsVar, glib.NewCallback(CallbackFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
+	cret := xNewCClosureExpression(ValueTypeVar, glib.NewCallbackNullable(MarshalVar), NParamsVar, ParamsVar, glib.NewCallback(CallbackFuncVar), UserDataVar, glib.NewCallbackNullable(UserDestroyVar))
 
 	if cret == 0 {
 		return nil
@@ -805,6 +805,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfilechooser.go b/v4/gtk/gtkfilechooser.go
index 5b734f03c27e9f9d944d74b4f385a91dfe6fccf8..c4185af4f176835fa34d8fd958e9f260341ceafd 100644
--- a/v4/gtk/gtkfilechooser.go
+++ b/v4/gtk/gtkfilechooser.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -539,6 +539,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfilechooserdialog.go b/v4/gtk/gtkfilechooserdialog.go
index 979d1f2f60478006e589925f06ba26505b886c97..040bca736df75daba55cc2605b2a7f27ea9102d3 100644
--- a/v4/gtk/gtkfilechooserdialog.go
+++ b/v4/gtk/gtkfilechooserdialog.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -837,6 +837,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfilechoosernative.go b/v4/gtk/gtkfilechoosernative.go
index 0f31c7fd5fc37b121ba0cf621a6c15e074d27d8a..e127426ab70987bdb01d51a7aa4cad4458ef7ca9 100644
--- a/v4/gtk/gtkfilechoosernative.go
+++ b/v4/gtk/gtkfilechoosernative.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -622,6 +622,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfilechooserwidget.go b/v4/gtk/gtkfilechooserwidget.go
index 8c8f5bbeb8b40872ee3b79add1811053c20a2228..9b84f76995550e65571ca2aef5ad0bfe84e7c566 100644
--- a/v4/gtk/gtkfilechooserwidget.go
+++ b/v4/gtk/gtkfilechooserwidget.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -902,6 +902,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfilefilter.go b/v4/gtk/gtkfilefilter.go
index 49645f3ae9c3714dcc7faf39343284409dcb1377..3b53f56310f290782a49c2930ec24668bce84145 100644
--- a/v4/gtk/gtkfilefilter.go
+++ b/v4/gtk/gtkfilefilter.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -238,6 +238,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfilter.go b/v4/gtk/gtkfilter.go
index 9c08384aec665017d7fd0bf8792d9fcccd102224..e98d54228b9b16d599468d01906baf494dc55fcb 100644
--- a/v4/gtk/gtkfilter.go
+++ b/v4/gtk/gtkfilter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -198,6 +198,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfilterlistmodel.go b/v4/gtk/gtkfilterlistmodel.go
index 1f306bc1d37645183b458733761004258abfa8c7..310f1128cd6d6f09cfd8a89447c980f9b6144d20 100644
--- a/v4/gtk/gtkfilterlistmodel.go
+++ b/v4/gtk/gtkfilterlistmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -283,6 +283,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfixed.go b/v4/gtk/gtkfixed.go
index 588c8e6582ea7f27c701990d1246c65f60e305ae..546b588337b2aa09649a4046bc56aed497fe9dfe 100644
--- a/v4/gtk/gtkfixed.go
+++ b/v4/gtk/gtkfixed.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gsk"
@@ -312,6 +312,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfixedlayout.go b/v4/gtk/gtkfixedlayout.go
index dfdff6da2d5ac0083153b3305994c0e68fc206b7..915fce20b8a2cd1fcc26cf6fd525a52763c40a8f 100644
--- a/v4/gtk/gtkfixedlayout.go
+++ b/v4/gtk/gtkfixedlayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/gsk"
 )
@@ -152,6 +152,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkflattenlistmodel.go b/v4/gtk/gtkflattenlistmodel.go
index 571593130cb5028338a0827b71338573a8019128..ee5e65b045de1e6d6beacff6c9485fbfb0309d0a 100644
--- a/v4/gtk/gtkflattenlistmodel.go
+++ b/v4/gtk/gtkflattenlistmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -205,6 +205,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkflowbox.go b/v4/gtk/gtkflowbox.go
index 0c36740fe8818e348119a9a20549676f68fc02f1..347793a11d86223df187c4b4a4fd1dc22de8b34f 100644
--- a/v4/gtk/gtkflowbox.go
+++ b/v4/gtk/gtkflowbox.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -402,7 +402,7 @@ // Note that using a filter function is incompatible with using a model
 // (see [method@Gtk.FlowBox.bind_model]).
 func (x *FlowBox) SetFilterFunc(FilterFuncVar *FlowBoxFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xFlowBoxSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	xFlowBoxSetFilterFunc(x.GoPointer(), glib.NewCallbackNullable(FilterFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -492,7 +492,7 @@ // Note that using a sort function is incompatible with using a model
 // (see [method@Gtk.FlowBox.bind_model]).
 func (x *FlowBox) SetSortFunc(SortFuncVar *FlowBoxSortFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xFlowBoxSetSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	xFlowBoxSetSortFunc(x.GoPointer(), glib.NewCallbackNullable(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -1169,6 +1169,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfontbutton.go b/v4/gtk/gtkfontbutton.go
index 5d7538aa1280c05e07016e0893e50a94e8670a17..a8bd83b36f3849df4846081907c930798ec93dd5 100644
--- a/v4/gtk/gtkfontbutton.go
+++ b/v4/gtk/gtkfontbutton.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -493,7 +493,7 @@ // Adds a filter function that decides which fonts to display
 // in the font chooser.
 func (x *FontButton) SetFilterFunc(FilterVar *FontFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallbackNullable(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -573,6 +573,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfontchooser.go b/v4/gtk/gtkfontchooser.go
index 043f7faa47b42fc3afa5526ac7c7d0bae132acc8..1595fb2ef458aea06007a82fd0916f3351afccd4 100644
--- a/v4/gtk/gtkfontchooser.go
+++ b/v4/gtk/gtkfontchooser.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -216,7 +216,7 @@ // Adds a filter function that decides which fonts to display
 // in the font chooser.
 func (x *FontChooserBase) SetFilterFunc(FilterVar *FontFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallbackNullable(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -343,6 +343,8 @@ 	FontChooserLevelFeaturesValue FontChooserLevel = 8
 )
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfontchooserdialog.go b/v4/gtk/gtkfontchooserdialog.go
index 73b8ea8b56888328239942dfac7cfe6d29e2c716..76b6e719c2a1ba56e1942671b455bcd0fe769aed 100644
--- a/v4/gtk/gtkfontchooserdialog.go
+++ b/v4/gtk/gtkfontchooserdialog.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -347,7 +347,7 @@ // Adds a filter function that decides which fonts to display
 // in the font chooser.
 func (x *FontChooserDialog) SetFilterFunc(FilterVar *FontFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallbackNullable(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -534,6 +534,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkfontchooserwidget.go b/v4/gtk/gtkfontchooserwidget.go
index 2e1e5624f00464151eab90cd33137e740f6f2d68..96b9747061687a4449d808fa1c2b688c5ed0d42b 100644
--- a/v4/gtk/gtkfontchooserwidget.go
+++ b/v4/gtk/gtkfontchooserwidget.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -348,7 +348,7 @@ // Adds a filter function that decides which fonts to display
 // in the font chooser.
 func (x *FontChooserWidget) SetFilterFunc(FilterVar *FontFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallbackNullable(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -428,6 +428,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkframe.go b/v4/gtk/gtkframe.go
index dbca285df518ff31fc4a21dd3220f283d25fb5dc..14bbd3e1474fdba5a0119282e912cb550aa73265 100644
--- a/v4/gtk/gtkframe.go
+++ b/v4/gtk/gtkframe.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -354,6 +354,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesture.go b/v4/gtk/gtkgesture.go
index 9664256eeac0009969e8957e8c116f8297b6e202..92fd20a8d89a8a8f15103ab94c2c92110326d80d 100644
--- a/v4/gtk/gtkgesture.go
+++ b/v4/gtk/gtkgesture.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -536,6 +536,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "update", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgestureclick.go b/v4/gtk/gtkgestureclick.go
index 3d1e55fec3e3b42f66f89f3d423b08956aaac239..e7aa3e6316007c41f288d78dfe410f55ece14376 100644
--- a/v4/gtk/gtkgestureclick.go
+++ b/v4/gtk/gtkgestureclick.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -162,6 +162,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "unpaired-release", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesturedrag.go b/v4/gtk/gtkgesturedrag.go
index 2aabd87f8434428f00f149fecdc37a351f8d2205..52602811832d9ad2a9f9549fefe45dab8379882d 100644
--- a/v4/gtk/gtkgesturedrag.go
+++ b/v4/gtk/gtkgesturedrag.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -159,6 +159,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "drag-update", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesturelongpress.go b/v4/gtk/gtkgesturelongpress.go
index e08c295cbb9752b3f2316eaf9e1c4df87339c3bd..a97a63583b4236f836f1fc1d492b8ab081eb22db 100644
--- a/v4/gtk/gtkgesturelongpress.go
+++ b/v4/gtk/gtkgesturelongpress.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -142,6 +142,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "pressed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesturepan.go b/v4/gtk/gtkgesturepan.go
index ab0a6c1a5a6914465d4405126ea0fca750932e6b..5fa82fcf9ac312c6bc7d19ec15e0536afc5c745e 100644
--- a/v4/gtk/gtkgesturepan.go
+++ b/v4/gtk/gtkgesturepan.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -116,6 +116,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "pan", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesturerotate.go b/v4/gtk/gtkgesturerotate.go
index 1d464e73f485485240073412cb1ba169b6fdeba0..80c0ddbbc01a932801a576a0733e5c01706bbc6f 100644
--- a/v4/gtk/gtkgesturerotate.go
+++ b/v4/gtk/gtkgesturerotate.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -102,6 +102,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "angle-changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesturesingle.go b/v4/gtk/gtkgesturesingle.go
index ba0327dd59f001c67bae4946223b8fd64ae3848d..2d9c4b16592b27a537c159e0933c4affc0c470c6 100644
--- a/v4/gtk/gtkgesturesingle.go
+++ b/v4/gtk/gtkgesturesingle.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -153,6 +153,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesturestylus.go b/v4/gtk/gtkgesturestylus.go
index 074b8bb36bf32759ff5a7bce52a9c6cde5a9a8c4..5d744ad1d9508a2d5cf193cad89c3baa87b6443b 100644
--- a/v4/gtk/gtkgesturestylus.go
+++ b/v4/gtk/gtkgesturestylus.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -220,6 +220,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "up", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgestureswipe.go b/v4/gtk/gtkgestureswipe.go
index 7891d905036f907841ee66f4d48cb23272586ba9..b26208b20a32dea6cd6d0ab844f14ce18dd218b8 100644
--- a/v4/gtk/gtkgestureswipe.go
+++ b/v4/gtk/gtkgestureswipe.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -111,6 +111,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "swipe", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgesturezoom.go b/v4/gtk/gtkgesturezoom.go
index 20b4daa16f434afe804c32c7c43637ef228c628e..69df01b3d314899872379ee1f2c5d6a6059a3747 100644
--- a/v4/gtk/gtkgesturezoom.go
+++ b/v4/gtk/gtkgesturezoom.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -104,6 +104,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "scale-changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkglarea.go b/v4/gtk/gtkglarea.go
index ccc2778fc5b7a89eb43beaf1b91526d9eb60a1b5..9828cdd85dc34c9b0e80c0b6632fd882a49ba143 100644
--- a/v4/gtk/gtkglarea.go
+++ b/v4/gtk/gtkglarea.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -608,6 +608,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgrid.go b/v4/gtk/gtkgrid.go
index 443867c686f31679d4d3a2251bff273e53f5ef7f..8ce8194147f918c2a53b94be5b318efd26782c89 100644
--- a/v4/gtk/gtkgrid.go
+++ b/v4/gtk/gtkgrid.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -563,6 +563,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgridlayout.go b/v4/gtk/gtkgridlayout.go
index 5b51e961414132ebe26484d24882eccb580be37d..65d2d7ebb7fb195010d8e32ef3352797d90a2db3 100644
--- a/v4/gtk/gtkgridlayout.go
+++ b/v4/gtk/gtkgridlayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -306,6 +306,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkgridview.go b/v4/gtk/gtkgridview.go
index add741dded561128304d2c54c864d2abc6287448..09ceab38a164e4d8579975a20eaf465608862cbe 100644
--- a/v4/gtk/gtkgridview.go
+++ b/v4/gtk/gtkgridview.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -520,6 +520,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkheaderbar.go b/v4/gtk/gtkheaderbar.go
index 4fa552088c2771ae1528a73e7d16583c52f2bf8b..54547596ab26a782f8e85364035855a0ba2ac593 100644
--- a/v4/gtk/gtkheaderbar.go
+++ b/v4/gtk/gtkheaderbar.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -397,6 +397,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkicontheme.go b/v4/gtk/gtkicontheme.go
index c81546fadce07c46f1cf3a21bf5b4dbdf579d586..b71be0b5672fc7ed5adf69cf430813238be61c8f 100644
--- a/v4/gtk/gtkicontheme.go
+++ b/v4/gtk/gtkicontheme.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -659,6 +659,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkiconview.go b/v4/gtk/gtkiconview.go
index cd0a305a5cc64f156f2bf80fa22045fef5d46399..9e90fd87ae850e62b6120dde1ea3951d5ba292db 100644
--- a/v4/gtk/gtkiconview.go
+++ b/v4/gtk/gtkiconview.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1286,7 +1286,7 @@ //
 // @func may be %NULL to remove a previously set function.
 func (x *IconView) SetCellDataFunc(CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	XGtkCellLayoutSetCellDataFunc(x.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -1381,6 +1381,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkimage.go b/v4/gtk/gtkimage.go
index 127c946b85021b89c7b04e9496d0969edfe0c2ed..1a72e4ed2ec0669d0f0d799d4ff34e4da71e7705 100644
--- a/v4/gtk/gtkimage.go
+++ b/v4/gtk/gtkimage.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gdkpixbuf"
 	"github.com/jwijenbergh/puregotk/v4/gio"
@@ -607,6 +607,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkimcontext.go b/v4/gtk/gtkimcontext.go
index 699eb32d1ddfdf52f7b6503c64e65631432dabdc..ff18b415719f0502e52a1da6f0657b6ba31b9b83 100644
--- a/v4/gtk/gtkimcontext.go
+++ b/v4/gtk/gtkimcontext.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -429,6 +429,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "retrieve-surrounding", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkimcontextsimple.go b/v4/gtk/gtkimcontextsimple.go
index 229118319370d5a4aab9e321dc8711d7e6779410..bcd8a5048b93a580e461dd30f8e8a6bbb38e7011 100644
--- a/v4/gtk/gtkimcontextsimple.go
+++ b/v4/gtk/gtkimcontextsimple.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -139,6 +139,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkimmulticontext.go b/v4/gtk/gtkimmulticontext.go
index 8a4b6ce13ddff7646def9028988a491feaedc685..f977c49fde2678f7bde470ad6ba63f84c936148b 100644
--- a/v4/gtk/gtkimmulticontext.go
+++ b/v4/gtk/gtkimmulticontext.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -103,6 +103,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkinfobar.go b/v4/gtk/gtkinfobar.go
index 2fae568f5b1c298c2b64bfb69d63c49717b830ac..41b8269ae47d33b36cf6f382a1500b7438cdda2a 100644
--- a/v4/gtk/gtkinfobar.go
+++ b/v4/gtk/gtkinfobar.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -531,6 +531,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkinscription.go b/v4/gtk/gtkinscription.go
index 69ab5c26e277b5b3a6bd81186c818c8468e13934..d082fa27e2bbf56700d991d6b93006b504670bbf 100644
--- a/v4/gtk/gtkinscription.go
+++ b/v4/gtk/gtkinscription.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/pango"
@@ -463,6 +463,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklabel.go b/v4/gtk/gtklabel.go
index 0b20a08e971bbd881907b1ac9396dba4cda854c1..df4805118c614b4642fafa19cf5c4f50d7c6f6eb 100644
--- a/v4/gtk/gtklabel.go
+++ b/v4/gtk/gtklabel.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1184,6 +1184,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklayoutchild.go b/v4/gtk/gtklayoutchild.go
index 6dc3c68ffd76aecfff5f4c87eed734f9babcff85..b3ffb07e056e9778c29b6a6d1d672113aa1258eb 100644
--- a/v4/gtk/gtklayoutchild.go
+++ b/v4/gtk/gtklayoutchild.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -93,6 +93,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklayoutmanager.go b/v4/gtk/gtklayoutmanager.go
index 2816716c9c9ca14c5ff3be00c31c722c961ea7e2..eca8280b123880121be35691b92f097691971226 100644
--- a/v4/gtk/gtklayoutmanager.go
+++ b/v4/gtk/gtklayoutmanager.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -193,6 +193,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklevelbar.go b/v4/gtk/gtklevelbar.go
index b82c198c396e219bd90ce0b897d4bbd778469f20..8de2888a2fb4559fac430ffd951793f94c72a100 100644
--- a/v4/gtk/gtklevelbar.go
+++ b/v4/gtk/gtklevelbar.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -501,6 +501,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklinkbutton.go b/v4/gtk/gtklinkbutton.go
index 1fb7f83e38eb4ae8b6985edc8473e8e1b6297cbf..14a8c96780907ab2e4012d85ec80d0227cd717d5 100644
--- a/v4/gtk/gtklinkbutton.go
+++ b/v4/gtk/gtklinkbutton.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -397,6 +397,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklistbox.go b/v4/gtk/gtklistbox.go
index 2213d056b2784cc4c1ff33015f763ba0d8c82b3b..77c5f50f6c434ed3acd0e950dd88509d05f55f17 100644
--- a/v4/gtk/gtklistbox.go
+++ b/v4/gtk/gtklistbox.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -165,7 +165,7 @@ // functionality in `GtkListBox`. When using a model, filtering and sorting
 // should be implemented by the model.
 func (x *ListBox) BindModel(ModelVar gio.ListModel, CreateWidgetFuncVar *ListBoxCreateWidgetFunc, UserDataVar uintptr, UserDataFreeFuncVar *glib.DestroyNotify) {
 
-	xListBoxBindModel(x.GoPointer(), ModelVar.GoPointer(), glib.NewCallback(CreateWidgetFuncVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))
+	xListBoxBindModel(x.GoPointer(), ModelVar.GoPointer(), glib.NewCallbackNullable(CreateWidgetFuncVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))
 
 }
 
@@ -460,7 +460,7 @@ // Note that using a filter function is incompatible with using a model
 // (see [method@Gtk.ListBox.bind_model]).
 func (x *ListBox) SetFilterFunc(FilterFuncVar *ListBoxFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xListBoxSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	xListBoxSetFilterFunc(x.GoPointer(), glib.NewCallbackNullable(FilterFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -493,7 +493,7 @@ // row becomes a different row). It is also called for all rows when
 // [method@Gtk.ListBox.invalidate_headers] is called.
 func (x *ListBox) SetHeaderFunc(UpdateHeaderVar *ListBoxUpdateHeaderFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xListBoxSetHeaderFunc(x.GoPointer(), glib.NewCallback(UpdateHeaderVar), UserDataVar, glib.NewCallback(DestroyVar))
+	xListBoxSetHeaderFunc(x.GoPointer(), glib.NewCallbackNullable(UpdateHeaderVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -542,7 +542,7 @@ // Note that using a sort function is incompatible with using a model
 // (see [method@Gtk.ListBox.bind_model]).
 func (x *ListBox) SetSortFunc(SortFuncVar *ListBoxSortFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xListBoxSetSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	xListBoxSetSortFunc(x.GoPointer(), glib.NewCallbackNullable(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -1330,6 +1330,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklistitem.go b/v4/gtk/gtklistitem.go
index c7bdc93974c6eaf37f12533d05430a3bbac7ca6c..704a7a82c73893b5933f9b4caa0f55636a6fba07 100644
--- a/v4/gtk/gtklistitem.go
+++ b/v4/gtk/gtklistitem.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -193,6 +193,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkliststore.go b/v4/gtk/gtkliststore.go
index 5a01d25fe85af03d278e4ed9661f49b115416acc..eec3421a9ac1a23173b80902aee20d653b959f7f 100644
--- a/v4/gtk/gtkliststore.go
+++ b/v4/gtk/gtkliststore.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -916,7 +916,7 @@ // default state. In this case, when the current sort column id of @sortable
 // is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
 func (x *ListStore) SetDefaultSortFunc(SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -940,7 +940,7 @@ // current sort column id of @sortable is the same as @sort_column_id, then
 // the model will sort using this function.
 func (x *ListStore) SetSortFunc(SortColumnIdVar int, SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -952,6 +952,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklistview.go b/v4/gtk/gtklistview.go
index 2d1adac7cd80381714fc4c90f6982aea641c6f8b..b837fb9a08f756046575a9ca4f3720eb48b8d0f3 100644
--- a/v4/gtk/gtklistview.go
+++ b/v4/gtk/gtklistview.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -563,6 +563,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtklockbutton.go b/v4/gtk/gtklockbutton.go
index 3e727a57d31737923b376698e3e28444b9687547..4d0cd2647248cac4039024169007132bcc25deb5 100644
--- a/v4/gtk/gtklockbutton.go
+++ b/v4/gtk/gtklockbutton.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -344,6 +344,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmain.go b/v4/gtk/gtkmain.go
index 452ba2a2ed729d521e842cc09f0394eadef69ce4..45eb349489800c3711ca88917e7507eebfe90b09 100644
--- a/v4/gtk/gtkmain.go
+++ b/v4/gtk/gtkmain.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/pango"
 )
 
@@ -143,6 +143,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmaplistmodel.go b/v4/gtk/gtkmaplistmodel.go
index 1dc151aeac1b497a94be7bb0351babc616d9ca6b..fe8ec2e614bffdc0706ef8804fc315642fb82f10 100644
--- a/v4/gtk/gtkmaplistmodel.go
+++ b/v4/gtk/gtkmaplistmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -84,7 +84,7 @@ // Creates a new `GtkMapListModel` for the given arguments.
 func NewMapListModel(ModelVar gio.ListModel, MapFuncVar *MapListModelMapFunc, UserDataVar uintptr, UserDestroyVar *glib.DestroyNotify) *MapListModel {
 	var cls *MapListModel
 
-	cret := xNewMapListModel(ModelVar.GoPointer(), glib.NewCallback(MapFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
+	cret := xNewMapListModel(ModelVar.GoPointer(), glib.NewCallbackNullable(MapFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
 
 	if cret == 0 {
 		return nil
@@ -135,7 +135,7 @@ // of @self. It assumes that the caller knows what they are doing and the map
 // function returns items of the appropriate type.
 func (x *MapListModel) SetMapFunc(MapFuncVar *MapListModelMapFunc, UserDataVar uintptr, UserDestroyVar *glib.DestroyNotify) {
 
-	xMapListModelSetMapFunc(x.GoPointer(), glib.NewCallback(MapFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
+	xMapListModelSetMapFunc(x.GoPointer(), glib.NewCallbackNullable(MapFuncVar), UserDataVar, glib.NewCallback(UserDestroyVar))
 
 }
 
@@ -255,6 +255,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmediacontrols.go b/v4/gtk/gtkmediacontrols.go
index 8152c0bc27d1cb2df1496b25ad7108f484985543..d66ec42c9a16fad73048144ba6dca903c1458e5f 100644
--- a/v4/gtk/gtkmediacontrols.go
+++ b/v4/gtk/gtkmediacontrols.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -240,6 +240,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmediafile.go b/v4/gtk/gtkmediafile.go
index a4d68df8be91bf9b7003ae25b5181424cadee364..47fbb057f74675901d9743ccf834bbf605967fc1 100644
--- a/v4/gtk/gtkmediafile.go
+++ b/v4/gtk/gtkmediafile.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -394,6 +394,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmediastream.go b/v4/gtk/gtkmediastream.go
index 1ff5efcc45fb62282048464297c6eb433172ead5..6c0d1587c3f27ee8129de31140ddb8f40c941d9a 100644
--- a/v4/gtk/gtkmediastream.go
+++ b/v4/gtk/gtkmediastream.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -663,6 +663,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmenubutton.go b/v4/gtk/gtkmenubutton.go
index 18b95484c75c7cb180d635d084890a959316fca5..328cc73b545b75edde16a8e2313d27e30174944e 100644
--- a/v4/gtk/gtkmenubutton.go
+++ b/v4/gtk/gtkmenubutton.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -299,7 +299,7 @@ // Using this function will not reset the menu widget attached to
 // @menu_button. Instead, this can be done manually in @func.
 func (x *MenuButton) SetCreatePopupFunc(FuncVar *MenuButtonCreatePopupFunc, UserDataVar uintptr, DestroyNotifyVar *glib.DestroyNotify) {
 
-	xMenuButtonSetCreatePopupFunc(x.GoPointer(), glib.NewCallback(FuncVar), UserDataVar, glib.NewCallback(DestroyNotifyVar))
+	xMenuButtonSetCreatePopupFunc(x.GoPointer(), glib.NewCallbackNullable(FuncVar), UserDataVar, glib.NewCallbackNullable(DestroyNotifyVar))
 
 }
 
@@ -591,6 +591,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmessagedialog.go b/v4/gtk/gtkmessagedialog.go
index e93232123928cdb06bf61c5a8606c10450ae6bad..8601bd7680fc0bc4899dca074df11c7f190ce573 100644
--- a/v4/gtk/gtkmessagedialog.go
+++ b/v4/gtk/gtkmessagedialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -531,6 +531,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmountoperation.go b/v4/gtk/gtkmountoperation.go
index 7d7f93fd1ce24da528ae5be1e64025768c78c99f..6652b5da829b1ee2ea2aa16eb2401e78ec759f0f 100644
--- a/v4/gtk/gtkmountoperation.go
+++ b/v4/gtk/gtkmountoperation.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -152,6 +152,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmultifilter.go b/v4/gtk/gtkmultifilter.go
index 0c253c7a070e62fa05a9db22c4f47b06aa3caee7..613de79cbcb97e36d3f1981134ff833e8f0b7acb 100644
--- a/v4/gtk/gtkmultifilter.go
+++ b/v4/gtk/gtkmultifilter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -494,6 +494,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmultiselection.go b/v4/gtk/gtkmultiselection.go
index 04dcbba67da8bcd7ea30b73dea823c60f7408afb..42c4b903e2579333b75e64a926a9a352614b5f88 100644
--- a/v4/gtk/gtkmultiselection.go
+++ b/v4/gtk/gtkmultiselection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -312,6 +312,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkmultisorter.go b/v4/gtk/gtkmultisorter.go
index 3428ee90e709f64735b3fe3476900e70106d66af..78e141af1cba833e0760a46bd1728de5a3659808 100644
--- a/v4/gtk/gtkmultisorter.go
+++ b/v4/gtk/gtkmultisorter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -201,6 +201,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtknative.go b/v4/gtk/gtknative.go
index 917a9fabc21eab0269d1de28620abed7242d9c80..ea0829d91eebc87b9e522e97793af5e430d26c7d 100644
--- a/v4/gtk/gtknative.go
+++ b/v4/gtk/gtknative.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -149,6 +149,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtknativedialog.go b/v4/gtk/gtknativedialog.go
index 40de261a9a1afc15b2ea30f9c19b05e44418f4e9..095ec00ef4405c5a261f3ed3e0a46fad76e8eea9 100644
--- a/v4/gtk/gtknativedialog.go
+++ b/v4/gtk/gtknativedialog.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -225,6 +225,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "response", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtknoselection.go b/v4/gtk/gtknoselection.go
index 3705f7126bb1fd8f1c099e893f83ed47e247868f..e55f3fe0f6ae9ae57e716242dc6392d9ee5ae57b 100644
--- a/v4/gtk/gtknoselection.go
+++ b/v4/gtk/gtknoselection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -315,6 +315,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtknotebook.go b/v4/gtk/gtknotebook.go
index 86a52e96f1a8d549a912cab0bbb84f26d35bb1c4..79dd0ef3dee7b1c58bd9f68f6439ec8171f059c9 100644
--- a/v4/gtk/gtknotebook.go
+++ b/v4/gtk/gtknotebook.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1106,6 +1106,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtknumericsorter.go b/v4/gtk/gtknumericsorter.go
index eec1462c503b814b67ebbb5e3e4affac304c6a80..812bfbed660abd271e4024d2f53dbe177a0802b5 100644
--- a/v4/gtk/gtknumericsorter.go
+++ b/v4/gtk/gtknumericsorter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -122,6 +122,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkorientable.go b/v4/gtk/gtkorientable.go
index 2018407d367019a16f8ffb7d1420b37c50ddfbbd..b043506d71b62e33ce73bd141f3e6ff80ad2b853 100644
--- a/v4/gtk/gtkorientable.go
+++ b/v4/gtk/gtkorientable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -71,6 +71,8 @@ var XGtkOrientableGetOrientation func(uintptr) Orientation
 var XGtkOrientableSetOrientation func(uintptr, Orientation)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkoverlay.go b/v4/gtk/gtkoverlay.go
index 4e6a73879bfbc82d48d63819fa29442cbda97267..1e2404e3698ee9558d83d51ad7e5e35da8a859f5 100644
--- a/v4/gtk/gtkoverlay.go
+++ b/v4/gtk/gtkoverlay.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -356,6 +356,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkoverlaylayout.go b/v4/gtk/gtkoverlaylayout.go
index e1dea23a4a886c5ad0ce33fd51ec24a6a4940950..2784d1560103c5145614405dfa7eaf66e8de841d 100644
--- a/v4/gtk/gtkoverlaylayout.go
+++ b/v4/gtk/gtkoverlaylayout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -145,6 +145,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpadcontroller.go b/v4/gtk/gtkpadcontroller.go
index 7e6bb1766c81ec897cc3206096dd976dccb078ac..70da54622c76b7e46863da288d0632673787794a 100644
--- a/v4/gtk/gtkpadcontroller.go
+++ b/v4/gtk/gtkpadcontroller.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -192,6 +192,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpagesetup.go b/v4/gtk/gtkpagesetup.go
index 5140efe3142679a10e281a694627c95770838d58..f29a0febba6c6e4ede6dc29d62f2eb7cc181af1d 100644
--- a/v4/gtk/gtkpagesetup.go
+++ b/v4/gtk/gtkpagesetup.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -418,6 +418,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpagesetupunixdialog.go b/v4/gtk/gtkpagesetupunixdialog.go
index bb3c825170bc88755a81489665ebd4c379699236..2d43a32f00464e6d31d9bdea8033e10a8fda7dac 100644
--- a/v4/gtk/gtkpagesetupunixdialog.go
+++ b/v4/gtk/gtkpagesetupunixdialog.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -367,6 +367,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpaned.go b/v4/gtk/gtkpaned.go
index 8040925ad9a0c36ff54a0252042488f1ff0eb24c..169f0fd633efe09ee67753dc2fa4289064d608b7 100644
--- a/v4/gtk/gtkpaned.go
+++ b/v4/gtk/gtkpaned.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -594,6 +594,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpapersize.go b/v4/gtk/gtkpapersize.go
index d9e7eb09c390e708f4b6468bb814026f3df12bf0..e5e254031c70cd4166734ae1650e07bb31197b1b 100644
--- a/v4/gtk/gtkpapersize.go
+++ b/v4/gtk/gtkpapersize.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -308,6 +308,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpasswordentry.go b/v4/gtk/gtkpasswordentry.go
index 117f154319b514793d136ccd3f44a102b72dde34..197e3340d74d8baf366abcaef8c93b60b6f4a381 100644
--- a/v4/gtk/gtkpasswordentry.go
+++ b/v4/gtk/gtkpasswordentry.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -556,6 +556,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpasswordentrybuffer.go b/v4/gtk/gtkpasswordentrybuffer.go
index a98cdffda98be2ce8e9a5a3b23e0648659d2d9cc..9ae9d502c7bf1a72f91f9e4e99dbbdd483663992 100644
--- a/v4/gtk/gtkpasswordentrybuffer.go
+++ b/v4/gtk/gtkpasswordentrybuffer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -68,6 +68,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpicture.go b/v4/gtk/gtkpicture.go
index b7c2f709c5229366fa69471f3ea69728ea712615..dc09056e4672948a025d5da42234d584fc19cac0 100644
--- a/v4/gtk/gtkpicture.go
+++ b/v4/gtk/gtkpicture.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gdkpixbuf"
 	"github.com/jwijenbergh/puregotk/v4/gio"
@@ -561,6 +561,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpopover.go b/v4/gtk/gtkpopover.go
index a54cd664aa5347508b481c9301080f89b7f7839a..0e710139f213662ca42c5e6862427097c505443f 100644
--- a/v4/gtk/gtkpopover.go
+++ b/v4/gtk/gtkpopover.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -623,6 +623,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpopovermenu.go b/v4/gtk/gtkpopovermenu.go
index f4223bca0c3ba104ab12bac1c23f4717f1dad234..e5ecfe31d0727ca6894238913c6c6e8fc56ce68f 100644
--- a/v4/gtk/gtkpopovermenu.go
+++ b/v4/gtk/gtkpopovermenu.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -470,6 +470,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkpopovermenubar.go b/v4/gtk/gtkpopovermenubar.go
index 5a8512cdb21bf13281022993253c07131a7b43d2..4a01bd0db881ad119af49ae51c2619798ff0026b 100644
--- a/v4/gtk/gtkpopovermenubar.go
+++ b/v4/gtk/gtkpopovermenubar.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -277,6 +277,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprintcontext.go b/v4/gtk/gtkprintcontext.go
index 0f8c46e41a149ac21af5eeed4ad4c9e2a00c5b7c..10946c3d0d743683bec813727b220e0da5b9ee34 100644
--- a/v4/gtk/gtkprintcontext.go
+++ b/v4/gtk/gtkprintcontext.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -252,6 +252,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprinter.go b/v4/gtk/gtkprinter.go
index f71991ce399e1f07ce858ac00c7932e2030f09a2..55bc1867c71c5bc8b3cc8bf166391e4f0736e602 100644
--- a/v4/gtk/gtkprinter.go
+++ b/v4/gtk/gtkprinter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -399,6 +399,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "details-acquired", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprintjob.go b/v4/gtk/gtkprintjob.go
index 7e8384991d1b45d3fdd1117f44060421dcb47268..408bcc12a3ab9c689b4185f021fac16e6325e90b 100644
--- a/v4/gtk/gtkprintjob.go
+++ b/v4/gtk/gtkprintjob.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -423,6 +423,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "status-changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprintoperation.go b/v4/gtk/gtkprintoperation.go
index 2d55562f28619cb779d3ea8514aaeb4c15e91841..eec2495a822b8165196e4c4f6b9b7bad1b241662 100644
--- a/v4/gtk/gtkprintoperation.go
+++ b/v4/gtk/gtkprintoperation.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1152,6 +1152,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprintoperationpreview.go b/v4/gtk/gtkprintoperationpreview.go
index c32115b62019a61dc19cb25eb66e1b19f0009861..a4e2f83b9e2d268f925a655b51377eb90d2fdafe 100644
--- a/v4/gtk/gtkprintoperationpreview.go
+++ b/v4/gtk/gtkprintoperationpreview.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -94,6 +94,8 @@ var XGtkPrintOperationPreviewIsSelected func(uintptr, int) bool
 var XGtkPrintOperationPreviewRenderPage func(uintptr, int)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprintsettings.go b/v4/gtk/gtkprintsettings.go
index 440ad2e2cdc04c7cb6e0228fb738555cc5ef9b48..079039dbefabb28476ca0470c5849a9f7b9ca7b8 100644
--- a/v4/gtk/gtkprintsettings.go
+++ b/v4/gtk/gtkprintsettings.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -939,6 +939,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprintunixdialog.go b/v4/gtk/gtkprintunixdialog.go
index 5765f037964cc7f16e1ae46d348cb3992921b374..7e50d21dc1a909c96c3c09d71d1abe69643bc3ec 100644
--- a/v4/gtk/gtkprintunixdialog.go
+++ b/v4/gtk/gtkprintunixdialog.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -556,6 +556,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkprogressbar.go b/v4/gtk/gtkprogressbar.go
index 7cae1e01b20c4ddd5f0d726bf2d42dab472a6fb4..ee166d7ccb843c0b332794697abcdd4b9cebb5bc 100644
--- a/v4/gtk/gtkprogressbar.go
+++ b/v4/gtk/gtkprogressbar.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 	"github.com/jwijenbergh/puregotk/v4/pango"
@@ -421,6 +421,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkrange.go b/v4/gtk/gtkrange.go
index e87af6d7550866eb53838fa6134872e2bbe7d5ca..c8594a7c9b87b50bc67de9198787e435e58b94af 100644
--- a/v4/gtk/gtkrange.go
+++ b/v4/gtk/gtkrange.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -592,6 +592,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkrecentmanager.go b/v4/gtk/gtkrecentmanager.go
index e64da13a236be61f37dfd9e336fd4911393227fc..5c64a1ca105d781dfb76b3e196da3500a203c048 100644
--- a/v4/gtk/gtkrecentmanager.go
+++ b/v4/gtk/gtkrecentmanager.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -656,6 +656,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkrender.go b/v4/gtk/gtkrender.go
index 4d1835512a260befe3a8d6303f9ac741fa2f20b9..b590ff4b0c3d9a756808238b21324005e9310e79 100644
--- a/v4/gtk/gtkrender.go
+++ b/v4/gtk/gtkrender.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/pango"
@@ -167,6 +167,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkrevealer.go b/v4/gtk/gtkrevealer.go
index 1a1df1b59c0f863f1d3908543572a3445805b9c3..644c464c82786da24981b9a8e4b19c248ec25fa5 100644
--- a/v4/gtk/gtkrevealer.go
+++ b/v4/gtk/gtkrevealer.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -356,6 +356,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkroot.go b/v4/gtk/gtkroot.go
index 52d66133bf17e56d2a1b26c1c55c61367fa4579b..45b87629e98c33e811680490de8817f042ce86c8 100644
--- a/v4/gtk/gtkroot.go
+++ b/v4/gtk/gtkroot.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -116,6 +116,8 @@ var XGtkRootGetFocus func(uintptr) uintptr
 var XGtkRootSetFocus func(uintptr, uintptr)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkscale.go b/v4/gtk/gtkscale.go
index 9745171ff3d4aba2d2480780ea0fe53c383238b1..696ebfc703890060cef9220c03ab25cbd4080b31 100644
--- a/v4/gtk/gtkscale.go
+++ b/v4/gtk/gtkscale.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -310,7 +310,7 @@ // its own, rounded according to the value of the
 // [property@GtkScale:digits] property.
 func (x *Scale) SetFormatValueFunc(FuncVar *ScaleFormatValueFunc, UserDataVar uintptr, DestroyNotifyVar *glib.DestroyNotify) {
 
-	xScaleSetFormatValueFunc(x.GoPointer(), glib.NewCallback(FuncVar), UserDataVar, glib.NewCallback(DestroyNotifyVar))
+	xScaleSetFormatValueFunc(x.GoPointer(), glib.NewCallbackNullable(FuncVar), UserDataVar, glib.NewCallbackNullable(DestroyNotifyVar))
 
 }
 
@@ -505,6 +505,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkscalebutton.go b/v4/gtk/gtkscalebutton.go
index 9f4a3de451a3355f601e3bd49dfe105f81f3b15e..70ae3f98fec5cb2e7e237de30d0dbbc724bfad8f 100644
--- a/v4/gtk/gtkscalebutton.go
+++ b/v4/gtk/gtkscalebutton.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -423,6 +423,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkscrollable.go b/v4/gtk/gtkscrollable.go
index 3bd7093c5308e9134faf5377570d37c99b11dc34..95b99c831bc4413de6d691458ffbb4071b5567d3 100644
--- a/v4/gtk/gtkscrollable.go
+++ b/v4/gtk/gtkscrollable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -185,6 +185,8 @@ var XGtkScrollableSetVadjustment func(uintptr, uintptr)
 var XGtkScrollableSetVscrollPolicy func(uintptr, ScrollablePolicy)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkscrollbar.go b/v4/gtk/gtkscrollbar.go
index 0d86599c07443f75c6e3acfaf535cc0f630c3e3f..b5163eaf065e9811a5feb4a1e19564ace8af8844 100644
--- a/v4/gtk/gtkscrollbar.go
+++ b/v4/gtk/gtkscrollbar.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -280,6 +280,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkscrolledwindow.go b/v4/gtk/gtkscrolledwindow.go
index 509a73374f1a9e91b7a00c2b2282d8436b5b8730..e2748df15745b1049f09f10db50316443b8ca4ac 100644
--- a/v4/gtk/gtkscrolledwindow.go
+++ b/v4/gtk/gtkscrolledwindow.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -825,6 +825,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksearchbar.go b/v4/gtk/gtksearchbar.go
index dd6c0884ac93f6b62468914f8b463a665769915a..065090a3f0542cad4a5ad09c7b83d98e6ac37578 100644
--- a/v4/gtk/gtksearchbar.go
+++ b/v4/gtk/gtksearchbar.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -362,6 +362,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksearchentry.go b/v4/gtk/gtksearchentry.go
index a02e58a6d0a8cdf5fc7ba1baaa0a9a192d3600a3..5364e84d4d27078f8c81330d69edd4f002309130 100644
--- a/v4/gtk/gtksearchentry.go
+++ b/v4/gtk/gtksearchentry.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -694,6 +694,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkselectionfiltermodel.go b/v4/gtk/gtkselectionfiltermodel.go
index f2d7afd66ee9c4e4bcb1dd478dc2a2eb6ab4d1dc..ed9633a9c6bc90f1e9486c9e16375be7109a6d76 100644
--- a/v4/gtk/gtkselectionfiltermodel.go
+++ b/v4/gtk/gtkselectionfiltermodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -191,6 +191,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkselectionmodel.go b/v4/gtk/gtkselectionmodel.go
index 4f5d223c51b50f2b583a4f716c84aa3c42ef516c..26d643d69e43b76ce87903789ea2bb18be9515d4 100644
--- a/v4/gtk/gtkselectionmodel.go
+++ b/v4/gtk/gtkselectionmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -244,6 +244,8 @@ var XGtkSelectionModelUnselectItem func(uintptr, uint) bool
 var XGtkSelectionModelUnselectRange func(uintptr, uint, uint) bool
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkseparator.go b/v4/gtk/gtkseparator.go
index b5f10e9419b43d0663dfb3dc11ca9a049a3012d8..af98a0eeeab261144ea606439830ba18883f1b67 100644
--- a/v4/gtk/gtkseparator.go
+++ b/v4/gtk/gtkseparator.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -226,6 +226,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksettings.go b/v4/gtk/gtksettings.go
index e50498b41f7216ec519e7b7f7751e46b651c210e..5591720bcd324c99493d1d16e841625e7d7f996d 100644
--- a/v4/gtk/gtksettings.go
+++ b/v4/gtk/gtksettings.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -113,6 +113,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkshortcut.go b/v4/gtk/gtkshortcut.go
index d42883b0db06cd031feff5d61e7246ed83e70f00..aa5d8a6fb3740a22e2645ba280c8c11f050cf0f0 100644
--- a/v4/gtk/gtkshortcut.go
+++ b/v4/gtk/gtkshortcut.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -169,6 +169,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkshortcutaction.go b/v4/gtk/gtkshortcutaction.go
index dae19bbeff138828da5792002cb8952ce432774d..64ed7d3a32e4d25c847c083d1ded3e9040632abb 100644
--- a/v4/gtk/gtkshortcutaction.go
+++ b/v4/gtk/gtkshortcutaction.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -162,7 +162,7 @@ // activated.
 func NewCallbackAction(CallbackVar *ShortcutFunc, DataVar uintptr, DestroyVar *glib.DestroyNotify) *CallbackAction {
 	var cls *CallbackAction
 
-	cret := xNewCallbackAction(glib.NewCallback(CallbackVar), DataVar, glib.NewCallback(DestroyVar))
+	cret := xNewCallbackAction(glib.NewCallbackNullable(CallbackVar), DataVar, glib.NewCallback(DestroyVar))
 
 	if cret == 0 {
 		return nil
@@ -520,6 +520,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkshortcutcontroller.go b/v4/gtk/gtkshortcutcontroller.go
index cf05d577b81a4e126584a780453b704cd5e96518..75bb09cc46e68cf6a5afadac0ac571eaf45b3ca4 100644
--- a/v4/gtk/gtkshortcutcontroller.go
+++ b/v4/gtk/gtkshortcutcontroller.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -311,6 +311,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkshortcutlabel.go b/v4/gtk/gtkshortcutlabel.go
index 1111f87ceb33306ce0d66751a359595c11e3c16a..dc412a6717653887523739400597f9a9a66e42ce 100644
--- a/v4/gtk/gtkshortcutlabel.go
+++ b/v4/gtk/gtkshortcutlabel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -246,6 +246,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkshortcuttrigger.go b/v4/gtk/gtkshortcuttrigger.go
index c17227387f03463a5fe8a48c8ecc65e88ca88c47..91a2dd9bb730679c84f168d1be6f75fc981a9993 100644
--- a/v4/gtk/gtkshortcuttrigger.go
+++ b/v4/gtk/gtkshortcuttrigger.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -505,6 +505,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkshow.go b/v4/gtk/gtkshow.go
index a096a463fff3cee63967c35e2943156b3c3e4f9d..9cea456adaf5378e140b8ac8cc3b19ea2a6e20c0 100644
--- a/v4/gtk/gtkshow.go
+++ b/v4/gtk/gtkshow.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
@@ -30,7 +30,7 @@ // This is the recommended call to be used as it passes information
 // necessary for sandbox helpers to parent their dialogs properly.
 func ShowUriFull(ParentVar *Window, UriVar string, TimestampVar uint32, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
 
-	xShowUriFull(ParentVar.GoPointer(), UriVar, TimestampVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)
+	xShowUriFull(ParentVar.GoPointer(), UriVar, TimestampVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
@@ -50,6 +50,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksignallistitemfactory.go b/v4/gtk/gtksignallistitemfactory.go
index 115ff452ff5161b19a0781f45be15d3b28a6d117..031351f5ee5cbc3256dddf72ce59f79a33d31716 100644
--- a/v4/gtk/gtksignallistitemfactory.go
+++ b/v4/gtk/gtksignallistitemfactory.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -210,6 +210,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "unbind", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksingleselection.go b/v4/gtk/gtksingleselection.go
index e43b83299d1a01f5a0031c3985e0ab5361aefba7..23c5ec6db46e00e002e60edd8da88669cd5115b5 100644
--- a/v4/gtk/gtksingleselection.go
+++ b/v4/gtk/gtksingleselection.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -410,6 +410,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksizegroup.go b/v4/gtk/gtksizegroup.go
index 912dc5fd77a59a663d6d2dc5761fd099876ec6f9..78f04fb032e3e80a2b230beda24744d73cd1a415 100644
--- a/v4/gtk/gtksizegroup.go
+++ b/v4/gtk/gtksizegroup.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -190,6 +190,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksizerequest.go b/v4/gtk/gtksizerequest.go
index 48c30a1e51e3614108fdf32eb11ae5a156c2ec0a..06c8c0fc2f91b30dd6cf405a4b4e923c101e2e5b 100644
--- a/v4/gtk/gtksizerequest.go
+++ b/v4/gtk/gtksizerequest.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // Represents a request of a screen object in a given orientation. These
@@ -41,6 +41,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkslicelistmodel.go b/v4/gtk/gtkslicelistmodel.go
index 67ad1f532ada6b6979bb42f1ab3089d7bdec524e..7882da2fe32f473510ac381ac2e28338b9b96a08 100644
--- a/v4/gtk/gtkslicelistmodel.go
+++ b/v4/gtk/gtkslicelistmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -236,6 +236,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksnapshot.go b/v4/gtk/gtksnapshot.go
index c4c7531a4e9895acb46cbf86fa8175e42b68a902..e31afb48cb8dd9b69d21e250769c926f5673af3c 100644
--- a/v4/gtk/gtksnapshot.go
+++ b/v4/gtk/gtksnapshot.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -651,6 +651,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksorter.go b/v4/gtk/gtksorter.go
index 9062b8a4f6aba0358d781871f96e1e725c90b1b3..05c4b166e58103081feea2f9cf86341aeb368127 100644
--- a/v4/gtk/gtksorter.go
+++ b/v4/gtk/gtksorter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -203,6 +203,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksortlistmodel.go b/v4/gtk/gtksortlistmodel.go
index 75214d206aefabb8f65a871e00a49bd3169e0db0..423dfe29e9dedb7f887447e2277f634dbe37062a 100644
--- a/v4/gtk/gtksortlistmodel.go
+++ b/v4/gtk/gtksortlistmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -290,6 +290,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkspinbutton.go b/v4/gtk/gtkspinbutton.go
index 917543f49b96fc1b848221f1dfd86daa4db5c5e3..de4af0967779babaf28863810537ee795ef8e13a 100644
--- a/v4/gtk/gtkspinbutton.go
+++ b/v4/gtk/gtkspinbutton.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1087,6 +1087,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkspinner.go b/v4/gtk/gtkspinner.go
index 9b62ef8187fd545307e686e5950a7e8be2314217..cc9a553322c775729644faa6dc78d66732a3d088 100644
--- a/v4/gtk/gtkspinner.go
+++ b/v4/gtk/gtkspinner.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -247,6 +247,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstack.go b/v4/gtk/gtkstack.go
index c101192afa13e7a709d3fdc84e099b157680b3e9..3a23d5ec247a6edfe8c2d85301e81b4468bf1ee8 100644
--- a/v4/gtk/gtkstack.go
+++ b/v4/gtk/gtkstack.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -919,6 +919,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstacksidebar.go b/v4/gtk/gtkstacksidebar.go
index e7a83c22db27bf6c89e0fc6bf8c2f3947eaabda7..a28759e4e5a5d1f86a915cc7c4712825e72c503e 100644
--- a/v4/gtk/gtkstacksidebar.go
+++ b/v4/gtk/gtkstacksidebar.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -240,6 +240,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstackswitcher.go b/v4/gtk/gtkstackswitcher.go
index b46ac8d0e40d27dfd496aca6f2fa4646d2ba07b5..068f28b30b721d4f5b073319fa241596d14bc29f 100644
--- a/v4/gtk/gtkstackswitcher.go
+++ b/v4/gtk/gtkstackswitcher.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -269,6 +269,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstatusbar.go b/v4/gtk/gtkstatusbar.go
index eeddc0095af5106705ca5683a79bdc18d066e816..3cb42956cf349e9e3306e4e600fcb2510fbfa43f 100644
--- a/v4/gtk/gtkstatusbar.go
+++ b/v4/gtk/gtkstatusbar.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -330,6 +330,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstringfilter.go b/v4/gtk/gtkstringfilter.go
index 6cd42062806b8a3afc58b9d21958a8c2f32b7ad7..e768947576beb02bfcaf581c0f5c95cf9e35e0e7 100644
--- a/v4/gtk/gtkstringfilter.go
+++ b/v4/gtk/gtkstringfilter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -187,6 +187,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstringlist.go b/v4/gtk/gtkstringlist.go
index 39d9268378d4f7a1187fadda0068dae6802566ee..8c910e664f6f9685bfba923b906e2d6013737415 100644
--- a/v4/gtk/gtkstringlist.go
+++ b/v4/gtk/gtkstringlist.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -336,6 +336,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstringsorter.go b/v4/gtk/gtkstringsorter.go
index 6b9f342d5ef55cb1e997e4b8f3a72f0c7874cdfe..114a6741f4bafc15ec348d27a02ee0fdb39bdfd4 100644
--- a/v4/gtk/gtkstringsorter.go
+++ b/v4/gtk/gtkstringsorter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -123,6 +123,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkstylecontext.go b/v4/gtk/gtkstylecontext.go
index 448de30a3b1c914461112ea739ee0e8f19e527b3..062c8b5aac76c490ec0e49bb4fe2ca2d75efdfb1 100644
--- a/v4/gtk/gtkstylecontext.go
+++ b/v4/gtk/gtkstylecontext.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -375,6 +375,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkswitch.go b/v4/gtk/gtkswitch.go
index 6ae5e7cb89e0ae40579acaecf6ad612a56f74cd3..c040c48c866f4fe6d34949fabc220f4212bbd814 100644
--- a/v4/gtk/gtkswitch.go
+++ b/v4/gtk/gtkswitch.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -407,6 +407,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtksymbolicpaintable.go b/v4/gtk/gtksymbolicpaintable.go
index 350d3a07b9f4d9170fcd4df526e006199455d9f2..3d6bfd97df1583257a5a25f1c9921628bd966ddb 100644
--- a/v4/gtk/gtksymbolicpaintable.go
+++ b/v4/gtk/gtksymbolicpaintable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -75,6 +75,8 @@
 var XGtkSymbolicPaintableSnapshotSymbolic func(uintptr, uintptr, float64, float64, []gdk.RGBA, uint)
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktestatcontext.go b/v4/gtk/gtktestatcontext.go
index 140f59ad98c75bc912d0aad48f475adedc25ffa7..e4c72bb8826a83706ba56f2164876e33305a83a8 100644
--- a/v4/gtk/gtktestatcontext.go
+++ b/v4/gtk/gtktestatcontext.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xTestAccessibleAssertionMessageRole func(string, string, int, string, string, uintptr, AccessibleRole, AccessibleRole)
@@ -82,6 +82,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktestutils.go b/v4/gtk/gtktestutils.go
index 2048eb3df2c5b317cf6371ff7cf2995cb51aad51..f6e0f0e8806474834378858f10d4414aafc0c024 100644
--- a/v4/gtk/gtktestutils.go
+++ b/v4/gtk/gtktestutils.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xTestInit func(int, []string, ...interface{})
@@ -62,6 +62,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktext.go b/v4/gtk/gtktext.go
index 5adb401f584c7c27036f73ab0d883662ce668180..951da426afc84fde77d4ddfa2caacaf7a2fefd3c 100644
--- a/v4/gtk/gtktext.go
+++ b/v4/gtk/gtktext.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1230,6 +1230,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktextbuffer.go b/v4/gtk/gtktextbuffer.go
index 698ae8176a4ee575df0bf9c3fd5ed9c771dc2e52..fdecdf479910592b11e27cb9135752799752f040 100644
--- a/v4/gtk/gtktextbuffer.go
+++ b/v4/gtk/gtktextbuffer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1553,6 +1553,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "undo", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktextchild.go b/v4/gtk/gtktextchild.go
index 61baeefe680005e9876b9c020b5fcc486b7fe273..9763e0f9870b69e7bfc6e5d9962cf491361ee83a 100644
--- a/v4/gtk/gtktextchild.go
+++ b/v4/gtk/gtktextchild.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -120,6 +120,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktextiter.go b/v4/gtk/gtktextiter.go
index 4a94f1f4ec64c27e94347e0c06fa6118575ed7b0..b4cf98197caa07885fc06e25474cf6543910c23f 100644
--- a/v4/gtk/gtktextiter.go
+++ b/v4/gtk/gtktextiter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -1359,6 +1359,8 @@ 	TextSearchCaseInsensitiveValue TextSearchFlags = 4
 )
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktextmark.go b/v4/gtk/gtktextmark.go
index 0c39c56f0ca1bd0db7f5938a760767cb51dade75..336d041a2bd11becb8070ccf1c02c99b1066c031 100644
--- a/v4/gtk/gtktextmark.go
+++ b/v4/gtk/gtktextmark.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -180,6 +180,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktexttag.go b/v4/gtk/gtktexttag.go
index 07754fb4907223a3319465ff12e30a01705dd344..6f0901d3d2fab8a600f729c5f15d566c2e0a28c4 100644
--- a/v4/gtk/gtktexttag.go
+++ b/v4/gtk/gtktexttag.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -137,6 +137,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktexttagtable.go b/v4/gtk/gtktexttagtable.go
index 9dc55ece192196348c6fac866ebdf8d01c253efc..8a0296072042b1f5c42ec6aaaff0a3aaa24e4573 100644
--- a/v4/gtk/gtktexttagtable.go
+++ b/v4/gtk/gtktexttagtable.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -223,6 +223,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktextview.go b/v4/gtk/gtktextview.go
index cf50f56538974f0d5c8b131314ff5412909a493d..6f98945f6ab9de618831cfe42b96f57d97ae7f49 100644
--- a/v4/gtk/gtktextview.go
+++ b/v4/gtk/gtktextview.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -1803,6 +1803,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktogglebutton.go b/v4/gtk/gtktogglebutton.go
index a4e05f43836436728df6d24d0f32a33eef116a8c..69dfd20fe2ab02af6b23ba44eb56a937811facdf 100644
--- a/v4/gtk/gtktogglebutton.go
+++ b/v4/gtk/gtktogglebutton.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -486,6 +486,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktooltip.go b/v4/gtk/gtktooltip.go
index 37f76a34dc3146bd9ed3b8ee1b00a5b01e22eeff..ac988ac94ec10ca20ce77721f4d06f3b02a00648 100644
--- a/v4/gtk/gtktooltip.go
+++ b/v4/gtk/gtktooltip.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -151,6 +151,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreednd.go b/v4/gtk/gtktreednd.go
index 020e6d0a358c359104c2ad5fc17d1deb4ae06eb5..2a4752c400b73e954f59c379eb02383dc7c8fa5b 100644
--- a/v4/gtk/gtktreednd.go
+++ b/v4/gtk/gtktreednd.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -186,6 +186,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreeexpander.go b/v4/gtk/gtktreeexpander.go
index 150d886a1947b617bd57bbb7245b81eaa2b672dd..32c3166285a469118b74125a60f94b97262bda39 100644
--- a/v4/gtk/gtktreeexpander.go
+++ b/v4/gtk/gtktreeexpander.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -340,6 +340,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreelistmodel.go b/v4/gtk/gtktreelistmodel.go
index d64d033935fc97defbdd643a1722a63f731779d3..babe6553035085e00bc668d82b74bf69a3c11574 100644
--- a/v4/gtk/gtktreelistmodel.go
+++ b/v4/gtk/gtktreelistmodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -479,6 +479,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreelistrowsorter.go b/v4/gtk/gtktreelistrowsorter.go
index a98200ff0d2303b567a6a1a33803e559610378b4..9bb43910c253846b39653c6f16000e02c76120d6 100644
--- a/v4/gtk/gtktreelistrowsorter.go
+++ b/v4/gtk/gtktreelistrowsorter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -111,6 +111,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreemodel.go b/v4/gtk/gtktreemodel.go
index 008316d5170fde08bbc2a1b798f9386c526be79d..3f838dac95fee1f3fbf47628b2a82502d5b0140d 100644
--- a/v4/gtk/gtktreemodel.go
+++ b/v4/gtk/gtktreemodel.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1098,6 +1098,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreemodelfilter.go b/v4/gtk/gtktreemodelfilter.go
index 3917465bd7a971bcf46d2ddeeee87c1ec8deff70..6f23af734d997907c876d1a013a17f0cf63cc110 100644
--- a/v4/gtk/gtktreemodelfilter.go
+++ b/v4/gtk/gtktreemodelfilter.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -227,7 +227,7 @@ // Note that gtk_tree_model_filter_set_modify_func()
 // can only be called once for a given filter model.
 func (x *TreeModelFilter) SetModifyFunc(NColumnsVar int, TypesVar []types.GType, FuncVar *TreeModelFilterModifyFunc, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xTreeModelFilterSetModifyFunc(x.GoPointer(), NColumnsVar, TypesVar, glib.NewCallback(FuncVar), DataVar, glib.NewCallback(DestroyVar))
+	xTreeModelFilterSetModifyFunc(x.GoPointer(), NColumnsVar, TypesVar, glib.NewCallback(FuncVar), DataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -289,7 +289,7 @@ // gtk_tree_model_filter_set_visible_column() can only be called
 // once for a given filter model.
 func (x *TreeModelFilter) SetVisibleFunc(FuncVar *TreeModelFilterVisibleFunc, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xTreeModelFilterSetVisibleFunc(x.GoPointer(), glib.NewCallback(FuncVar), DataVar, glib.NewCallback(DestroyVar))
+	xTreeModelFilterSetVisibleFunc(x.GoPointer(), glib.NewCallback(FuncVar), DataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -666,6 +666,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreemodelsort.go b/v4/gtk/gtktreemodelsort.go
index a74670b96b1f38e0424f595e443fd46c5e6052ee..b0be9a3a8910093fd4570f3bfc81dffcaaa16bea 100644
--- a/v4/gtk/gtktreemodelsort.go
+++ b/v4/gtk/gtktreemodelsort.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -667,7 +667,7 @@ // default state. In this case, when the current sort column id of @sortable
 // is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
 func (x *TreeModelSort) SetDefaultSortFunc(SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -691,7 +691,7 @@ // current sort column id of @sortable is the same as @sort_column_id, then
 // the model will sort using this function.
 func (x *TreeModelSort) SetSortFunc(SortColumnIdVar int, SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -703,6 +703,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreeselection.go b/v4/gtk/gtktreeselection.go
index 66e2964b67848cf86efb3977e05bc2733c8930be..c6d0ef99f88514e99aa5be11bdb8c19adfcce32b 100644
--- a/v4/gtk/gtktreeselection.go
+++ b/v4/gtk/gtktreeselection.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -237,7 +237,7 @@ // should return %TRUE if the state of the node may be toggled, and %FALSE
 // if the state of the node should be left unchanged.
 func (x *TreeSelection) SetSelectFunction(FuncVar *TreeSelectionFunc, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xTreeSelectionSetSelectFunction(x.GoPointer(), glib.NewCallback(FuncVar), DataVar, glib.NewCallback(DestroyVar))
+	xTreeSelectionSetSelectFunction(x.GoPointer(), glib.NewCallbackNullable(FuncVar), DataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -313,6 +313,8 @@ 	return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreesortable.go b/v4/gtk/gtktreesortable.go
index 13a480ca7200bf348a6815a4ab762651bfef66d3..6918529220a7c9e24f68d8da6d4fbad8cbe82513 100644
--- a/v4/gtk/gtktreesortable.go
+++ b/v4/gtk/gtktreesortable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -102,7 +102,7 @@ // default state. In this case, when the current sort column id of @sortable
 // is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
 func (x *TreeSortableBase) SetDefaultSortFunc(SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -126,7 +126,7 @@ // current sort column id of @sortable is the same as @sort_column_id, then
 // the model will sort using this function.
 func (x *TreeSortableBase) SetSortFunc(SortColumnIdVar int, SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -156,6 +156,8 @@ 	TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID int = -2
 )
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreestore.go b/v4/gtk/gtktreestore.go
index 04d3b2fab5fb6c2bd95c1f83753734e4d86a5023..329d64693aca51b5fa3556980336c16b5d7ab60d 100644
--- a/v4/gtk/gtktreestore.go
+++ b/v4/gtk/gtktreestore.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -827,7 +827,7 @@ // default state. In this case, when the current sort column id of @sortable
 // is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
 func (x *TreeStore) SetDefaultSortFunc(SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetDefaultSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -851,7 +851,7 @@ // current sort column id of @sortable is the same as @sort_column_id, then
 // the model will sort using this function.
 func (x *TreeStore) SetSortFunc(SortColumnIdVar int, SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	XGtkTreeSortableSetSortFunc(x.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -863,6 +863,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreeview.go b/v4/gtk/gtktreeview.go
index 917a17678e5bfe17af858d435172d089f2f402db..9326d81e3b59d1160c96f4553893b89993517041 100644
--- a/v4/gtk/gtktreeview.go
+++ b/v4/gtk/gtktreeview.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -958,7 +958,7 @@ // @tree_view reverts to the default behavior of allowing all columns to be
 // dropped everywhere.
 func (x *TreeView) SetColumnDragFunction(FuncVar *TreeViewColumnDropFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xTreeViewSetColumnDragFunction(x.GoPointer(), glib.NewCallback(FuncVar), UserDataVar, glib.NewCallback(DestroyVar))
+	xTreeViewSetColumnDragFunction(x.GoPointer(), glib.NewCallbackNullable(FuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -1166,7 +1166,7 @@ // whether a row should be drawn as a separator. If the row separator
 // function is %NULL, no separators are drawn. This is the default value.
 func (x *TreeView) SetRowSeparatorFunc(FuncVar *TreeViewRowSeparatorFunc, DataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xTreeViewSetRowSeparatorFunc(x.GoPointer(), glib.NewCallback(FuncVar), DataVar, glib.NewCallback(DestroyVar))
+	xTreeViewSetRowSeparatorFunc(x.GoPointer(), glib.NewCallbackNullable(FuncVar), DataVar, glib.NewCallbackNullable(DestroyVar))
 
 }
 
@@ -1218,7 +1218,7 @@ // that somewhat like strcmp() returning 0 for equality
 // `GtkTreeView`SearchEqualFunc returns %FALSE on matches.
 func (x *TreeView) SetSearchEqualFunc(SearchEqualFuncVar *TreeViewSearchEqualFunc, SearchUserDataVar uintptr, SearchDestroyVar *glib.DestroyNotify) {
 
-	xTreeViewSetSearchEqualFunc(x.GoPointer(), glib.NewCallback(SearchEqualFuncVar), SearchUserDataVar, glib.NewCallback(SearchDestroyVar))
+	xTreeViewSetSearchEqualFunc(x.GoPointer(), glib.NewCallback(SearchEqualFuncVar), SearchUserDataVar, glib.NewCallbackNullable(SearchDestroyVar))
 
 }
 
@@ -1868,6 +1868,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktreeviewcolumn.go b/v4/gtk/gtktreeviewcolumn.go
index bf4fb9cd3ada24afb1e4ca2beba19d423fd14901..f33774e2ce374f0b375d15ee3fdf7146a2962723 100644
--- a/v4/gtk/gtktreeviewcolumn.go
+++ b/v4/gtk/gtktreeviewcolumn.go
@@ -5,7 +5,7 @@ import (
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -522,7 +522,7 @@ // cell renderer as appropriate.  @func may be %NULL to remove an
 // older one.
 func (x *TreeViewColumn) SetCellDataFunc(CellRendererVar *CellRenderer, FuncVar *TreeCellDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
 
-	xTreeViewColumnSetCellDataFunc(x.GoPointer(), CellRendererVar.GoPointer(), glib.NewCallback(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	xTreeViewColumnSetCellDataFunc(x.GoPointer(), CellRendererVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
 
 }
 
@@ -781,6 +781,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtktypes.go b/v4/gtk/gtktypes.go
index f7f06cd93e61541422b1507fe2da9a6a4075d458..55524c2c84f2fe37add1cd2738de4bebbd8fc922 100644
--- a/v4/gtk/gtktypes.go
+++ b/v4/gtk/gtktypes.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -384,6 +384,8 @@ 	INVALID_LIST_POSITION uint = 4294967295
 )
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkversion.go b/v4/gtk/gtkversion.go
index 71f23c55c4c5aeb901d0b4623f28eb5f18168b53..968401a67d5e2241d7ed9133e70245a3c23e6f79 100644
--- a/v4/gtk/gtkversion.go
+++ b/v4/gtk/gtkversion.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 const (
@@ -131,6 +131,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkvideo.go b/v4/gtk/gtkvideo.go
index 14281bbff60275fd212341b0dd97bc9896f8c135..9e2b25b6e82fa40c4bd846d824eb20c7edfdb54f 100644
--- a/v4/gtk/gtkvideo.go
+++ b/v4/gtk/gtkvideo.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -417,6 +417,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkviewport.go b/v4/gtk/gtkviewport.go
index 76f90d4b1a3fed1595607b936f87db9d6549a0dd..8054657aa73d1ac37867868dc887144089a38c07 100644
--- a/v4/gtk/gtkviewport.go
+++ b/v4/gtk/gtkviewport.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -351,6 +351,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkvolumebutton.go b/v4/gtk/gtkvolumebutton.go
index b5fea7d801e53ec47b56771bb8a6b7fd6170dade..a0449eb02e66b964333a12fc8e43a598c3ca4ff1 100644
--- a/v4/gtk/gtkvolumebutton.go
+++ b/v4/gtk/gtkvolumebutton.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -218,6 +218,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkwidget.go b/v4/gtk/gtkwidget.go
index 83316f719108fb2d4361de9141083bdeeba9ea27..1f9561aa0e900fe93d5d15f78749caebad21ddec 100644
--- a/v4/gtk/gtkwidget.go
+++ b/v4/gtk/gtkwidget.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
@@ -3949,6 +3949,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkwidgetpaintable.go b/v4/gtk/gtkwidgetpaintable.go
index 3c1b38c254063e3431936e1298c44f87236c36be..e8a1f4944fd7adf7bd396f0616173e70c36769cc 100644
--- a/v4/gtk/gtkwidgetpaintable.go
+++ b/v4/gtk/gtkwidgetpaintable.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -256,6 +256,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkwindow.go b/v4/gtk/gtkwindow.go
index 34fa947d4909b3368ef04274cdf9edff6485798e..41c21d62ac9c7436959cd1f4624df5eac6c6e197 100644
--- a/v4/gtk/gtkwindow.go
+++ b/v4/gtk/gtkwindow.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gdk"
 	"github.com/jwijenbergh/puregotk/v4/gio"
 	"github.com/jwijenbergh/puregotk/v4/glib"
@@ -1387,6 +1387,8 @@
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkwindowcontrols.go b/v4/gtk/gtkwindowcontrols.go
index eaf424d2843963fce26903574a6273bc0102a4bf..d914bff714956d711829945bc98ef964f68d6de2 100644
--- a/v4/gtk/gtkwindowcontrols.go
+++ b/v4/gtk/gtkwindowcontrols.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -322,6 +322,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkwindowgroup.go b/v4/gtk/gtkwindowgroup.go
index 999125fe2c56e9068a68547ec5b67776743878a5..021a9b7f39bb78a307ee823b666ea13a1315333f 100644
--- a/v4/gtk/gtkwindowgroup.go
+++ b/v4/gtk/gtkwindowgroup.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -112,6 +112,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/gtkwindowhandle.go b/v4/gtk/gtkwindowhandle.go
index 29d87d5cda0ef4ddc8ba65f4cc79308cc65c33cc..75f084761571767fc6fcafb2b58d4b094703e2af 100644
--- a/v4/gtk/gtkwindowhandle.go
+++ b/v4/gtk/gtkwindowhandle.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -247,6 +247,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/gtk/main.go b/v4/gtk/main.go
index 8d19ee59abb4789ef0408727ab5f598f577f235a..bc9f50c28d8b6a543315168e2305d79feda0730c 100644
--- a/v4/gtk/main.go
+++ b/v4/gtk/main.go
@@ -3,7 +3,7 @@ package gtk
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -48,6 +48,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("GTK", "gtk4")
+	core.SetSharedLibrary("GTK", "libgtk-4.so.1")
 	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/main.go b/v4/pango/main.go
index a6dc4843019cbf63d72f81f8d1b97c79920fd380..fc694297a9394a5661cecf8e2f158ce8a430ad5e 100644
--- a/v4/pango/main.go
+++ b/v4/pango/main.go
@@ -3,7 +3,7 @@ package pango
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -16,6 +16,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-attributes.go b/v4/pango/pango-attributes.go
index 95a9edabd1746618e2ac036492547f84e54e5538..a359fa82f11151608c6b89061a71d297dbf26f69 100644
--- a/v4/pango/pango-attributes.go
+++ b/v4/pango/pango-attributes.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -1198,7 +1198,7 @@ // is also provided; this pointer can be accessed when later
 // rendering the glyph.
 func AttrShapeNewWithData(InkRectVar *Rectangle, LogicalRectVar *Rectangle, DataVar uintptr, CopyFuncVar *AttrDataCopyFunc, DestroyFuncVar *glib.DestroyNotify) *Attribute {
 
-	cret := xAttrShapeNewWithData(InkRectVar, LogicalRectVar, DataVar, glib.NewCallback(CopyFuncVar), glib.NewCallback(DestroyFuncVar))
+	cret := xAttrShapeNewWithData(InkRectVar, LogicalRectVar, DataVar, glib.NewCallbackNullable(CopyFuncVar), glib.NewCallbackNullable(DestroyFuncVar))
 	return cret
 }
 
@@ -1360,6 +1360,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-bidi-type.go b/v4/pango/pango-bidi-type.go
index 694d4a93d887c3a70b58614584d350354e76a8bc..8fce1be6f56af1241d96f7e42bcebdef1c95d028 100644
--- a/v4/pango/pango-bidi-type.go
+++ b/v4/pango/pango-bidi-type.go
@@ -3,7 +3,7 @@ package pango
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -122,6 +122,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-break.go b/v4/pango/pango-break.go
index 86ebb51eb709226d827bfcfa2ebd34903defe021..07356b625bf4ce88b479cc256081f6a12fa628d7 100644
--- a/v4/pango/pango-break.go
+++ b/v4/pango/pango-break.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 // The `PangoLogAttr` structure stores information about the attributes of a
@@ -127,6 +127,8 @@
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-color.go b/v4/pango/pango-color.go
index 8e26e23f72e7b0844fa689adb52d2de0db2f5c6f..f47987a2ef7655fa594577a12d4267d19cdfe39f 100644
--- a/v4/pango/pango-color.go
+++ b/v4/pango/pango-color.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -109,6 +109,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-context.go b/v4/pango/pango-context.go
index 9df2233021288bf22a14ba0002a190d2995eb478..9ab3db1f940940ba8505ec3d52c5072425a82b8d 100644
--- a/v4/pango/pango-context.go
+++ b/v4/pango/pango-context.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -391,6 +391,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-coverage.go b/v4/pango/pango-coverage.go
index c733461cfc073f1ed3ba0136de2ea02d7aeaa6fd..9e5ad70d3389a65af0fb337090b6579d28b605ec 100644
--- a/v4/pango/pango-coverage.go
+++ b/v4/pango/pango-coverage.go
@@ -3,7 +3,7 @@ package pango
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -191,6 +191,8 @@ 	return cls
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-font.go b/v4/pango/pango-font.go
index fdb82cd146f6038cc603d5473bd84ba05fbc949e..b3fca83f263e06c364b17c8a395f493406fb8051 100644
--- a/v4/pango/pango-font.go
+++ b/v4/pango/pango-font.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1376,6 +1376,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-fontmap.go b/v4/pango/pango-fontmap.go
index a371d79728227f739e0c19a607403cfb7f1243cf..d5e8a73cf4824e23c3fe258743437d8b0b541c5d 100644
--- a/v4/pango/pango-fontmap.go
+++ b/v4/pango/pango-fontmap.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -176,6 +176,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-fontset.go b/v4/pango/pango-fontset.go
index 6338e131b35187410c62dbff5c97492e23c05b43..4c3b9484f0bdc90e59e4d29f19c5b79020f27e45 100644
--- a/v4/pango/pango-fontset.go
+++ b/v4/pango/pango-fontset.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -176,6 +176,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-glyph-item.go b/v4/pango/pango-glyph-item.go
index 5007e51ff02fbb56b23302e15c42159fec3542e1..df676326702b907bc9370c585011b398cb7c895a 100644
--- a/v4/pango/pango-glyph-item.go
+++ b/v4/pango/pango-glyph-item.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -265,6 +265,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-glyph.go b/v4/pango/pango-glyph.go
index c359af9d410b588e6354608748821cf7487d8ab8..43067fc864fc3ef78f825a9fbf24cfdc1d74640b 100644
--- a/v4/pango/pango-glyph.go
+++ b/v4/pango/pango-glyph.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -371,6 +371,8 @@
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-gravity.go b/v4/pango/pango-gravity.go
index 58d7cbc9898b0a4994bf14fc69f43e86ae94b9fa..607debd8f028c85f205b99114a2b85e32968d9aa 100644
--- a/v4/pango/pango-gravity.go
+++ b/v4/pango/pango-gravity.go
@@ -3,7 +3,7 @@ package pango
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -133,6 +133,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-item.go b/v4/pango/pango-item.go
index 786069dd1e410ab0b9c97dc9cd2228b402e17946..69cb37bfa4e2c17b5d5705232251126a9e2d45a0 100644
--- a/v4/pango/pango-item.go
+++ b/v4/pango/pango-item.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -193,6 +193,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-language.go b/v4/pango/pango-language.go
index 1c04d03e2bd7c2050335d77322668564e988439c..b6e0601df16ef46231ec2a241a8aa5714a632e87 100644
--- a/v4/pango/pango-language.go
+++ b/v4/pango/pango-language.go
@@ -3,7 +3,7 @@ package pango
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 )
 
 var xLanguageFromString func(string) *Language
@@ -85,6 +85,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-layout.go b/v4/pango/pango-layout.go
index 11a0f9d75f26ce68f4b1787d7a0d69f43b80925f..a846d6e9f1c2bcd8516535693dc2b54d1665fa23 100644
--- a/v4/pango/pango-layout.go
+++ b/v4/pango/pango-layout.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
@@ -1709,6 +1709,8 @@
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-markup.go b/v4/pango/pango-markup.go
index 7671d18f5596eaff8f3a3bd904cb1294b09a8d9c..06df94a0dba1620dcaf3521db702f6b79bdd06e5 100644
--- a/v4/pango/pango-markup.go
+++ b/v4/pango/pango-markup.go
@@ -3,7 +3,7 @@ package pango
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 )
 
@@ -87,6 +87,8 @@
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-matrix.go b/v4/pango/pango-matrix.go
index dab604371f392c947e0623c16551c9bb129bf13f..bc403613c8f488eafb8a3590ca42d5d768830297 100644
--- a/v4/pango/pango-matrix.go
+++ b/v4/pango/pango-matrix.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -213,6 +213,8 @@
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-renderer.go b/v4/pango/pango-renderer.go
index f5c7eadc16f98d03cdad0e6fe9e49376282666f0..83b69c00d587aa48694e539304a09e4b6022ee75 100644
--- a/v4/pango/pango-renderer.go
+++ b/v4/pango/pango-renderer.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -363,6 +363,8 @@ 	c.Ptr = ptr
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-script.go b/v4/pango/pango-script.go
index baa31792fbf890103d03c314cd8540595856b1e0..975c7c173c2862a87a9654b87a02192a109e14ab 100644
--- a/v4/pango/pango-script.go
+++ b/v4/pango/pango-script.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -395,6 +395,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-tabs.go b/v4/pango/pango-tabs.go
index f889f6da32ce321032c9c873208810a5f50fbbd4..ac8af65d11532c18ae0a37dc7f4a23a6c253691a 100644
--- a/v4/pango/pango-tabs.go
+++ b/v4/pango/pango-tabs.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -242,6 +242,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-types.go b/v4/pango/pango-types.go
index a0ab21a33f84c1dd517c1256be96c91d87b7776b..a2cdf3bc2ecc97e19e41b2e3b6c8b0950b85d0c0 100644
--- a/v4/pango/pango-types.go
+++ b/v4/pango/pango-types.go
@@ -6,7 +6,7 @@ 	"structs"
 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -218,6 +218,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pango/pango-utils.go b/v4/pango/pango-utils.go
index 18545696170ef78f76d3439f5eb78e08e08782b1..59905d805a69ed187d9ddda8583cb2a602ce9ee2 100644
--- a/v4/pango/pango-utils.go
+++ b/v4/pango/pango-utils.go
@@ -3,7 +3,7 @@ package pango
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -278,6 +278,8 @@ 	return cret
 }
 
 func init() {
+	core.SetPackageName("PANGO", "pango")
+	core.SetSharedLibrary("PANGO", "libpango-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)
diff --git a/v4/pangocairo/pangocairo.go b/v4/pangocairo/pangocairo.go
index 1884b4dd02dea59410741ddb14e1d56fb1edec16..ea399fb8b7531ffdcc1aca126ac2a090175ff724 100644
--- a/v4/pangocairo/pangocairo.go
+++ b/v4/pangocairo/pangocairo.go
@@ -3,7 +3,7 @@ package pangocairo
 
 import (
 	"github.com/jwijenbergh/purego"
-	"github.com/jwijenbergh/puregotk/internal/core"
+	"github.com/jwijenbergh/puregotk/pkg/core"
 	"github.com/jwijenbergh/puregotk/v4/cairo"
 	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
@@ -236,7 +236,7 @@ //
 // See `PangoCairoShapeRendererFunc` for details.
 func ContextSetShapeRenderer(ContextVar *pango.Context, FuncVar *ShapeRendererFunc, DataVar uintptr, DnotifyVar *glib.DestroyNotify) {
 
-	xContextSetShapeRenderer(ContextVar.GoPointer(), glib.NewCallback(FuncVar), DataVar, glib.NewCallback(DnotifyVar))
+	xContextSetShapeRenderer(ContextVar.GoPointer(), glib.NewCallbackNullable(FuncVar), DataVar, glib.NewCallbackNullable(DnotifyVar))
 
 }
 
@@ -525,6 +525,8 @@
 }
 
 func init() {
+	core.SetPackageName("PANGOCAIRO", "pangocairo")
+	core.SetSharedLibrary("PANGOCAIRO", "libpangocairo-1.0.so.0")
 	lib, err := purego.Dlopen(core.GetPath("PANGOCAIRO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
 	if err != nil {
 		panic(err)

