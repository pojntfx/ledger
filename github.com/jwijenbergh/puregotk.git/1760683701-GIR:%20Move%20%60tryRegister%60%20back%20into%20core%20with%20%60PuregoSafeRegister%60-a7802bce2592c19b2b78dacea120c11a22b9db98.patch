From a7802bce2592c19b2b78dacea120c11a22b9db98 Mon Sep 17 00:00:00 2001
From: Felicitas Pojtinger <felicitas@pojtinger.com>
Date: Thu, 16 Oct 2025 23:48:21 -0700
Subject: [PATCH] GIR: Move `tryRegister` back into core with `PuregoSafeRegister`

Signed-off-by: Felicitas Pojtinger <felicitas@pojtinger.com>
---
diff --git a/internal/core/core.go b/internal/core/core.go
index 7e33beb7326574029084092982936997f3d738f2..ac276334bc2a456a04d5e784302389fcaed0614d 100644
--- a/internal/core/core.go
+++ b/internal/core/core.go
@@ -15,13 +15,15 @@
 	"github.com/jwijenbergh/purego"
 )
 
-func PuregoSafeRegister(fptr interface{}, handle uintptr, name string) error {
-	sym, err := purego.Dlsym(handle, name)
-	if err != nil {
-		return err
+func PuregoSafeRegister(fptr interface{}, libs []uintptr, name string) {
+	for _, lib := range libs {
+		sym, err := purego.Dlsym(lib, name)
+		if err == nil {
+			purego.RegisterFunc(fptr, sym)
+
+			return
+		}
 	}
-	purego.RegisterFunc(fptr, sym)
-	return nil
 }
 
 // paths to where the shared object files should be located
@@ -105,7 +107,7 @@ 	}
 	return ""
 }
 
-// GetPath gets a shared object file from a library name
+// getPath gets a shared object file from a library name
 // it does it in the following order
 // see if PUREGOTK_LIBNAME_PATH is set (full path to the lib)
 // - e.g. PUREGOTK_GTK_PATH
@@ -115,7 +117,7 @@ // find a library name with pkg-config
 // panic if failed
 // TODO: Hardcore a library shared object with linker -X flag
 // This is useful for packaging
-func GetPath(name string) string {
+func getPath(name string) string {
 	// try to get from env var
 	ev := fmt.Sprintf("PUREGOTK_%s_PATH", name)
 	if v := os.Getenv(ev); v != "" {
@@ -178,12 +180,12 @@ func GetPaths(name string) []string {
 	libNames, ok := names[name]
 	if !ok || len(libNames) == 0 {
 		// Fallback to single GetPath for backward compatibility
-		return []string{GetPath(name)}
+		return []string{getPath(name)}
 	}
 
 	// If only one library, use the original GetPath logic
 	if len(libNames) == 1 {
-		return []string{GetPath(name)}
+		return []string{getPath(name)}
 	}
 
 	var result []string
diff --git a/pkg/core/core.go b/pkg/core/core.go
index 8081bdb50c6534658d46115b8a4d506b11b1fbce..fdea7cf9fc223606e9da9e23ec8082ed91e5340b 100644
--- a/pkg/core/core.go
+++ b/pkg/core/core.go
@@ -3,10 +3,9 @@
 import "github.com/jwijenbergh/puregotk/internal/core"
 
 var (
-	PuregoSafeRegister = core.PuregoSafeRegister
-	GetPath            = core.GetPath
 	GetPaths           = core.GetPaths
 	GoString           = core.GoString
 	SetPackageName     = core.SetPackageName
-	SetSharedLibraries   = core.SetSharedLibraries
+	SetSharedLibraries = core.SetSharedLibraries
+	PuregoSafeRegister = core.PuregoSafeRegister
 )
diff --git a/templates/go b/templates/go
index 9376d174bb88470a07679c31d193bd1807f61679..991011fa2e24ca9610d833a241c28cf192632fdc 100644
--- a/templates/go
+++ b/templates/go
@@ -348,63 +348,55 @@         }
         libs = append(libs, lib)
     }
 
-    tryRegister := func(fptr interface{}, name string) {
-        for _, lib := range libs {
-            if err := core.PuregoSafeRegister(fptr, lib, name); err == nil {
-                return
-            }
-        }
-    }
-
     {{range .Aliases -}}
     {{if .TypeGetter -}}
-    tryRegister(&x{{.Name}}GLibType, "{{.TypeGetter}}")
+    core.PuregoSafeRegister(&x{{.Name}}GLibType, libs, "{{.TypeGetter}}")
     {{end}}
     {{end}}
     {{range .Enums -}}
     {{if .TypeGetter -}}
-    tryRegister(&x{{.Name}}GLibType, "{{.TypeGetter}}")
+    core.PuregoSafeRegister(&x{{.Name}}GLibType, libs, "{{.TypeGetter}}")
     {{end}}
     {{end}}
     {{range .Functions -}}
-    tryRegister(&x{{.Name}}, "{{.CName}}")
+    core.PuregoSafeRegister(&x{{.Name}}, libs, "{{.CName}}")
     {{end}}
 
     {{range .Records -}}
     {{$rec := .}}
     {{if .TypeGetter -}}
-    tryRegister(&x{{.Name}}GLibType, "{{.TypeGetter}}")
+    core.PuregoSafeRegister(&x{{.Name}}GLibType, libs, "{{.TypeGetter}}")
     {{end}}
     {{range .Constructors -}}
-    tryRegister(&x{{.Name}}, "{{.CName}}")
+    core.PuregoSafeRegister(&x{{.Name}}, libs, "{{.CName}}")
     {{end}}
     {{range .Receivers -}}
-    tryRegister(&x{{$rec.Name}}{{.Name}}, "{{.CName}}")
+    core.PuregoSafeRegister(&x{{$rec.Name}}{{.Name}}, libs, "{{.CName}}")
     {{end}}
     {{end}}
 
     {{range .Classes -}}
     {{$cls := .}}
     {{if .TypeGetter -}}
-    tryRegister(&x{{.Name}}GLibType, "{{.TypeGetter}}")
+    core.PuregoSafeRegister(&x{{.Name}}GLibType, libs, "{{.TypeGetter}}")
     {{end}}
     {{range .Constructors -}}
-    tryRegister(&x{{.Name}}, "{{.CName}}")
+    core.PuregoSafeRegister(&x{{.Name}}, libs, "{{.CName}}")
     {{end}}
     {{range .Receivers -}}
-    tryRegister(&x{{$cls.Name}}{{.Name}}, "{{.CName}}")
+    core.PuregoSafeRegister(&x{{$cls.Name}}{{.Name}}, libs, "{{.CName}}")
     {{end}}
     {{range .Functions -}}
-    tryRegister(&x{{.Name}}, "{{.CName}}")
+    core.PuregoSafeRegister(&x{{.Name}}, libs, "{{.CName}}")
     {{end}}
     {{end}}
 
     {{range .Interfaces -}}
     {{if .TypeGetter -}}
-    tryRegister(&x{{.Name}}GLibType, "{{.TypeGetter}}")
+    core.PuregoSafeRegister(&x{{.Name}}GLibType, libs, "{{.TypeGetter}}")
     {{end}}
     {{range .Methods -}}
-    tryRegister(&{{.Namespace}}X{{.FullName}}, "{{.CName}}")
+    core.PuregoSafeRegister(&{{.Namespace}}X{{.FullName}}, libs, "{{.CName}}")
     {{end}}
     {{end}}
 }

