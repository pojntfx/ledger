From aac23fadaa30fb34b8cb445202c4f11f8355056c Mon Sep 17 00:00:00 2001
From: Felicitas Pojtinger <felicitas@pojtinger.com>
Date: Sat, 18 Oct 2025 20:35:29 -0700
Subject: [PATCH] GIR: Decompose property setters and getters

Signed-off-by: Felicitas Pojtinger <felicitas@pojtinger.com>
---
diff --git a/internal/gir/util/util.go b/internal/gir/util/util.go
index f71593c6e2258cb1bfe8bc734a47114ca5defdd6..42865f71e0a262c0e56594c9c56c99980ea7e4ac 100644
--- a/internal/gir/util/util.go
+++ b/internal/gir/util/util.go
@@ -297,3 +297,116 @@ 	default:
 		return "return " + goType + "(v.GetPointer())"
 	}
 }
+
+// PropertySetArray generates the array conversion and v.SetXXX(value) call for array types
+func PropertySetArray(goType, objPrefix, glibPrefix, propertyName string, useBaseObj bool) string {
+	if goType == "[]string" {
+		objAccess := "x"
+		if useBaseObj {
+			objAccess = "obj"
+		}
+
+		result := `var v ` + objPrefix + `Value
+     v.Init(` + glibPrefix + `StrvGetType())
+
+     cStrBytes := make([][]byte, len(value))
+     cStrings := make([]uintptr, len(value)+1)
+     for i, s := range value {
+          cStrBytes[i] = make([]byte, len(s)+1)
+          copy(cStrBytes[i], s)
+          cStrBytes[i][len(s)] = 0
+          cStrings[i] = uintptr(unsafe.Pointer(&cStrBytes[i][0]))
+     }
+     cStrings[len(value)] = 0
+
+     v.SetBoxed(uintptr(unsafe.Pointer(&cStrings[0])))`
+
+		if useBaseObj {
+			result += "\n     obj := " + objPrefix + "Object{Ptr: x.GoPointer()}"
+		}
+
+		result += "\n     " + objAccess + `.SetProperty("` + propertyName + `", &v)
+
+     v.Unset()`
+		return result
+	} else if goType == "[]byte" {
+		objAccess := "x"
+		if useBaseObj {
+			objAccess = "obj"
+		}
+
+		result := `var v ` + objPrefix + `Value
+     v.Init(` + objPrefix + `TypePointerVal)
+
+     if len(value) > 0 {
+          v.SetPointer(uintptr(unsafe.Pointer(&value[0])))
+     } else {
+          v.SetPointer(0)
+     }`
+
+		if useBaseObj {
+			result += "\n     obj := " + objPrefix + "Object{Ptr: x.GoPointer()}"
+		}
+
+		result += "\n     " + objAccess + `.SetProperty("` + propertyName + `", &v)
+
+     v.Unset()`
+		return result
+	}
+	return ""
+}
+
+// PropertyGetArray generates the array conversion and v.GetXXX() call for array types
+func PropertyGetArray(goType, objPrefix, corePrefix, propertyName string, useBaseObj bool) string {
+	if goType == "[]string" {
+		objAccess := "x"
+		result := `var v ` + objPrefix + `Value`
+
+		if useBaseObj {
+			objAccess = "obj"
+			result += "\n     obj := " + objPrefix + "Object{Ptr: x.GoPointer()}"
+		}
+
+		result += `
+     ` + objAccess + `.GetProperty("` + propertyName + `", &v)
+     defer v.Unset()
+
+     strvPtr := v.GetBoxed()
+     if strvPtr == 0 {
+          return nil
+     }
+
+     var result []string
+     for i := 0; ; i++ {
+          charPtr := *(*uintptr)(unsafe.Pointer(strvPtr + uintptr(i)*unsafe.Sizeof(uintptr(0))))
+          if charPtr == 0 {
+               break
+          }
+          result = append(result, ` + corePrefix + `GoString(charPtr))
+     }
+
+     return result`
+		return result
+	} else if goType == "[]byte" {
+		objAccess := "x"
+		result := `var v ` + objPrefix + `Value`
+
+		if useBaseObj {
+			objAccess = "obj"
+			result += "\n     obj := " + objPrefix + "Object{Ptr: x.GoPointer()}"
+		}
+
+		result += `
+     ` + objAccess + `.GetProperty("` + propertyName + `", &v)
+     defer v.Unset()
+
+     ptr := v.GetPointer()
+     if ptr == 0 {
+          return nil
+     }
+
+     return *(*[]byte)(unsafe.Pointer(ptr))`
+		return result
+	}
+	return ""
+}
diff --git a/pkg/gir/util/util.go b/pkg/gir/util/util.go
index f2b657f9b479f860967afe31f894565df6200142..e131520b4bc4de67419c459b04d92a40c34526dc 100644
--- a/pkg/gir/util/util.go
+++ b/pkg/gir/util/util.go
@@ -11,4 +11,6 @@ 	ConvertArgsDeref         = util.ConvertArgsDeref
 	ConvertCallbackArgsNoErr = util.ConvertCallbackArgsNoErr
 	PropertyValueSet         = util.PropertyValueSet
 	PropertyValueGet         = util.PropertyValueGet
+	PropertySetArray         = util.PropertySetArray
+	PropertyGetArray         = util.PropertyGetArray
 )
diff --git a/templates/go b/templates/go
index 0539a3d488cf59eba9babc6a0ced71feed71dbfe..fb87a6a8a420b87b25facc7e4664dfc2da807336 100644
--- a/templates/go
+++ b/templates/go
@@ -186,35 +186,7 @@ {{if .Doc}}// SetProperty{{.Name}} sets the "{{.CName}}" property.
 {{.Doc}}
 {{else}}// SetProperty{{.Name}} sets the "{{.CName}}" property.
 {{end}}func (x *{{$outer.Name}}Base) SetProperty{{.Name}}(value {{.GoType}}) {
-     {{if eq .GoType "[]string"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     v.Init({{if $NotGObject}}glib.StrvGetType(){{else}}StrvGetType(){{end}})
-
-     cStrBytes := make([][]byte, len(value))
-     cStrings := make([]uintptr, len(value)+1)
-     for i, s := range value {
-          cStrBytes[i] = make([]byte, len(s)+1)
-          copy(cStrBytes[i], s)
-          cStrBytes[i][len(s)] = 0
-          cStrings[i] = uintptr(unsafe.Pointer(&cStrBytes[i][0]))
-     }
-     cStrings[len(value)] = 0
-
-     v.SetBoxed(uintptr(unsafe.Pointer(&cStrings[0])))
-     obj := {{if $NotGObject}}gobject.{{end}}Object{Ptr: x.GoPointer()}
-     obj.SetProperty("{{.CName}}", &v)
-
-     v.Unset(){{else if eq .GoType "[]byte"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     v.Init({{if $NotGObject}}gobject.{{end}}TypePointerVal)
-
-     if len(value) > 0 {
-          v.SetPointer(uintptr(unsafe.Pointer(&value[0])))
-     } else {
-          v.SetPointer(0)
-     }
-     obj := {{if $NotGObject}}gobject.{{end}}Object{Ptr: x.GoPointer()}
-     obj.SetProperty("{{.CName}}", &v)
-
-     v.Unset(){{else}}var v {{if $NotGObject}}gobject.{{end}}Value
+     {{if or (eq .GoType "[]string") (eq .GoType "[]byte")}}{{if $NotGObject}}{{arraysetprop .GoType "gobject." "glib." .CName true}}{{else}}{{arraysetprop .GoType "" "" .CName true}}{{end}}{{else}}var v {{if $NotGObject}}gobject.{{end}}Value
      v.Init({{if $NotGObject}}gobject.{{end}}{{.GLibType}})
      {{if $NotGObject}}{{valueset .GoType .GLibType "value" "gobject."}}{{else}}{{valueset .GoType .GLibType "value" ""}}{{end}}
      obj := {{if $NotGObject}}gobject.{{end}}Object{Ptr: x.GoPointer()}
@@ -227,36 +199,7 @@ {{if .Doc}}// GetProperty{{.Name}} gets the "{{.CName}}" property.
 {{.Doc}}
 {{else}}// GetProperty{{.Name}} gets the "{{.CName}}" property.
 {{end}}func (x *{{$outer.Name}}Base) GetProperty{{.Name}}() {{.GoType}} {
-     {{if eq .GoType "[]string"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     obj := {{if $NotGObject}}gobject.{{end}}Object{Ptr: x.GoPointer()}
-     obj.GetProperty("{{.CName}}", &v)
-     defer v.Unset()
-
-     strvPtr := v.GetBoxed()
-     if strvPtr == 0 {
-          return nil
-     }
-
-     var result []string
-     for i := 0; ; i++ {
-          charPtr := *(*uintptr)(unsafe.Pointer(strvPtr + uintptr(i)*unsafe.Sizeof(uintptr(0))))
-          if charPtr == 0 {
-               break
-          }
-          result = append(result, {{if $NotGLib}}core.GoString(charPtr){{else}}GoString(charPtr){{end}})
-     }
-
-     return result{{else if eq .GoType "[]byte"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     obj := {{if $NotGObject}}gobject.{{end}}Object{Ptr: x.GoPointer()}
-     obj.GetProperty("{{.CName}}", &v)
-     defer v.Unset()
-
-     ptr := v.GetPointer()
-     if ptr == 0 {
-          return nil
-     }
-
-     return *(*[]byte)(unsafe.Pointer(ptr)){{else}}var v {{if $NotGObject}}gobject.{{end}}Value
+     {{if or (eq .GoType "[]string") (eq .GoType "[]byte")}}{{if $NotGObject}}{{arraygetprop .GoType "gobject." "core." .CName true}}{{else}}{{arraygetprop .GoType "" "" .CName true}}{{end}}{{else}}var v {{if $NotGObject}}gobject.{{end}}Value
      obj := {{if $NotGObject}}gobject.{{end}}Object{Ptr: x.GoPointer()}
      obj.GetProperty("{{.CName}}", &v)
      {{valueget .GoType .GLibType .BaseGoType .IsInterface .IsRecord}}{{end}}
@@ -382,33 +325,7 @@ {{if .Doc}}// SetProperty{{.Name}} sets the "{{.CName}}" property.
 {{.Doc}}
 {{else}}// SetProperty{{.Name}} sets the "{{.CName}}" property.
 {{end}}func (x *{{$outer.Name}}) SetProperty{{.Name}}(value {{.GoType}}) {
-     {{if eq .GoType "[]string"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     v.Init({{if $NotGObject}}glib.StrvGetType(){{else}}StrvGetType(){{end}})
-
-     cStrBytes := make([][]byte, len(value))
-     cStrings := make([]uintptr, len(value)+1)
-     for i, s := range value {
-          cStrBytes[i] = make([]byte, len(s)+1)
-          copy(cStrBytes[i], s)
-          cStrBytes[i][len(s)] = 0
-          cStrings[i] = uintptr(unsafe.Pointer(&cStrBytes[i][0]))
-     }
-     cStrings[len(value)] = 0
-
-     v.SetBoxed(uintptr(unsafe.Pointer(&cStrings[0])))
-     x.SetProperty("{{.CName}}", &v)
-
-     v.Unset(){{else if eq .GoType "[]byte"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     v.Init({{if $NotGObject}}gobject.{{end}}TypePointerVal)
-
-     if len(value) > 0 {
-          v.SetPointer(uintptr(unsafe.Pointer(&value[0])))
-     } else {
-          v.SetPointer(0)
-     }
-     x.SetProperty("{{.CName}}", &v)
-
-     v.Unset(){{else}}var v {{if $NotGObject}}gobject.{{end}}Value
+     {{if or (eq .GoType "[]string") (eq .GoType "[]byte")}}{{if $NotGObject}}{{arraysetprop .GoType "gobject." "glib." .CName false}}{{else}}{{arraysetprop .GoType "" "" .CName false}}{{end}}{{else}}var v {{if $NotGObject}}gobject.{{end}}Value
      v.Init({{if $NotGObject}}gobject.{{end}}{{.GLibType}})
      {{if $NotGObject}}{{valueset .GoType .GLibType "value" "gobject."}}{{else}}{{valueset .GoType .GLibType "value" ""}}{{end}}
      x.SetProperty("{{.CName}}", &v){{end}}
@@ -420,34 +337,7 @@ {{if .Doc}}// GetProperty{{.Name}} gets the "{{.CName}}" property.
 {{.Doc}}
 {{else}}// GetProperty{{.Name}} gets the "{{.CName}}" property.
 {{end}}func (x *{{$outer.Name}}) GetProperty{{.Name}}() {{.GoType}} {
-     {{if eq .GoType "[]string"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     x.GetProperty("{{.CName}}", &v)
-     defer v.Unset()
-
-     strvPtr := v.GetBoxed()
-     if strvPtr == 0 {
-          return nil
-     }
-
-     var result []string
-     for i := 0; ; i++ {
-          charPtr := *(*uintptr)(unsafe.Pointer(strvPtr + uintptr(i)*unsafe.Sizeof(uintptr(0))))
-          if charPtr == 0 {
-               break
-          }
-          result = append(result, {{if $NotGLib}}core.GoString(charPtr){{else}}GoString(charPtr){{end}})
-     }
-
-     return result{{else if eq .GoType "[]byte"}}var v {{if $NotGObject}}gobject.{{end}}Value
-     x.GetProperty("{{.CName}}", &v)
-     defer v.Unset()
-
-     ptr := v.GetPointer()
-     if ptr == 0 {
-          return nil
-     }
-
-     return *(*[]byte)(unsafe.Pointer(ptr)){{else}}var v {{if $NotGObject}}gobject.{{end}}Value
+     {{if or (eq .GoType "[]string") (eq .GoType "[]byte")}}{{if $NotGObject}}{{arraygetprop .GoType "gobject." "core." .CName false}}{{else}}{{arraygetprop .GoType "" "" .CName false}}{{end}}{{else}}var v {{if $NotGObject}}gobject.{{end}}Value
      x.GetProperty("{{.CName}}", &v)
      {{valueget .GoType .GLibType .BaseGoType .IsInterface .IsRecord}}{{end}}
 }

