From 242962164ebe07469a086ba959f7b2de78df118c Mon Sep 17 00:00:00 2001
From: Felicitas Pojtinger <felicitas@pojtinger.com>
Date: Fri, 03 Oct 2025 23:38:01 -0700
Subject: [PATCH] Gen: Re-run script

Signed-off-by: Felicitas Pojtinger <felicitas@pojtinger.com>
---
diff --git a/v4/adw/adw-action-row.go b/v4/adw/adw-action-row.go
index 0d725f861c81d39b15aa65522423dd6af0a09eb1..f0c0584d469c26b6299ec6772219defcea09010f 100644
--- a/v4/adw/adw-action-row.go
+++ b/v4/adw/adw-action-row.go
@@ -18,13 +18,38 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [4]uintptr
 }
 
 func (x *ActionRowClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackActivate sets the callback function.
+// Activates the row to trigger its main action.
+func (x *ActionRowClass) SetCallbackActivate(cb func(*ActionRow)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(ActionRowNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+// Activates the row to trigger its main action.
+func (x *ActionRowClass) GetCallbackActivate() func(*ActionRow) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(SelfVar *ActionRow) {
+		rawCallback(SelfVar.GoPointer())
+	}
 }
 
 // A [class@Gtk.ListBoxRow] used to present actions.
diff --git a/v4/adw/adw-alert-dialog.go b/v4/adw/adw-alert-dialog.go
index 844533f226e960b7247041422c3b3dabac4bf4ec..4254df4ab36c9e72c9f7f374cab42ae7ac24f49e 100644
--- a/v4/adw/adw-alert-dialog.go
+++ b/v4/adw/adw-alert-dialog.go
@@ -19,13 +19,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Response uintptr
+	xResponse uintptr
 
 	Padding [4]uintptr
 }
 
 func (x *AlertDialogClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackResponse sets the callback function.
+func (x *AlertDialogClass) SetCallbackResponse(cb func(*AlertDialog, string)) {
+	if cb == nil {
+		x.xResponse = 0
+	} else {
+		x.xResponse = purego.NewCallback(func(SelfVarp uintptr, ResponseVarp string) {
+			cb(AlertDialogNewFromInternalPtr(SelfVarp), ResponseVarp)
+		})
+	}
+}
+
+// GetCallbackResponse gets the callback function.
+func (x *AlertDialogClass) GetCallbackResponse() func(*AlertDialog, string) {
+	if x.xResponse == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ResponseVarp string)
+	purego.RegisterFunc(&rawCallback, x.xResponse)
+	return func(SelfVar *AlertDialog, ResponseVar string) {
+		rawCallback(SelfVar.GoPointer(), ResponseVar)
+	}
 }
 
 // Describes the possible styles of [class@AlertDialog] response buttons.
diff --git a/v4/adw/adw-dialog.go b/v4/adw/adw-dialog.go
index 9b4e55910310ac4c2e4b29124becdc98f965a000..064b4cdb49450d98969f0b22e8cea1c7c1117541 100644
--- a/v4/adw/adw-dialog.go
+++ b/v4/adw/adw-dialog.go
@@ -18,15 +18,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	CloseAttempt uintptr
+	xCloseAttempt uintptr
 
-	Closed uintptr
+	xClosed uintptr
 
 	Padding [4]uintptr
 }
 
 func (x *DialogClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackCloseAttempt sets the callback function.
+func (x *DialogClass) SetCallbackCloseAttempt(cb func(*Dialog)) {
+	if cb == nil {
+		x.xCloseAttempt = 0
+	} else {
+		x.xCloseAttempt = purego.NewCallback(func(DialogVarp uintptr) {
+			cb(DialogNewFromInternalPtr(DialogVarp))
+		})
+	}
+}
+
+// GetCallbackCloseAttempt gets the callback function.
+func (x *DialogClass) GetCallbackCloseAttempt() func(*Dialog) {
+	if x.xCloseAttempt == 0 {
+		return nil
+	}
+	var rawCallback func(DialogVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCloseAttempt)
+	return func(DialogVar *Dialog) {
+		rawCallback(DialogVar.GoPointer())
+	}
+}
+
+// SetCallbackClosed sets the callback function.
+func (x *DialogClass) SetCallbackClosed(cb func(*Dialog)) {
+	if cb == nil {
+		x.xClosed = 0
+	} else {
+		x.xClosed = purego.NewCallback(func(DialogVarp uintptr) {
+			cb(DialogNewFromInternalPtr(DialogVarp))
+		})
+	}
+}
+
+// GetCallbackClosed gets the callback function.
+func (x *DialogClass) GetCallbackClosed() func(*Dialog) {
+	if x.xClosed == 0 {
+		return nil
+	}
+	var rawCallback func(DialogVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClosed)
+	return func(DialogVar *Dialog) {
+		rawCallback(DialogVar.GoPointer())
+	}
 }
 
 // Describes the available presentation modes for [class@Dialog].
diff --git a/v4/adw/adw-message-dialog.go b/v4/adw/adw-message-dialog.go
index 4c7a38788d5ebf28f6826af424de6b1bc369e60b..7e4191abfe6abc1e6b02771107e4a99119619c27 100644
--- a/v4/adw/adw-message-dialog.go
+++ b/v4/adw/adw-message-dialog.go
@@ -21,13 +21,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Response uintptr
+	xResponse uintptr
 
 	Padding [4]uintptr
 }
 
 func (x *MessageDialogClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackResponse sets the callback function.
+func (x *MessageDialogClass) SetCallbackResponse(cb func(*MessageDialog, string)) {
+	if cb == nil {
+		x.xResponse = 0
+	} else {
+		x.xResponse = purego.NewCallback(func(SelfVarp uintptr, ResponseVarp string) {
+			cb(MessageDialogNewFromInternalPtr(SelfVarp), ResponseVarp)
+		})
+	}
+}
+
+// GetCallbackResponse gets the callback function.
+func (x *MessageDialogClass) GetCallbackResponse() func(*MessageDialog, string) {
+	if x.xResponse == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ResponseVarp string)
+	purego.RegisterFunc(&rawCallback, x.xResponse)
+	return func(SelfVar *MessageDialog, ResponseVar string) {
+		rawCallback(SelfVar.GoPointer(), ResponseVar)
+	}
 }
 
 // A dialog presenting a message or a question.
diff --git a/v4/adw/adw-navigation-view.go b/v4/adw/adw-navigation-view.go
index cb0a5c883553ecc1e268984f64e29326a4bf9974..f0a48593da7657a372285f3f2aa55999ce5a5d1c 100644
--- a/v4/adw/adw-navigation-view.go
+++ b/v4/adw/adw-navigation-view.go
@@ -20,19 +20,111 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Showing uintptr
+	xShowing uintptr
 
-	Shown uintptr
+	xShown uintptr
 
-	Hiding uintptr
+	xHiding uintptr
 
-	Hidden uintptr
+	xHidden uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *NavigationPageClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackShowing sets the callback function.
+func (x *NavigationPageClass) SetCallbackShowing(cb func(*NavigationPage)) {
+	if cb == nil {
+		x.xShowing = 0
+	} else {
+		x.xShowing = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(NavigationPageNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackShowing gets the callback function.
+func (x *NavigationPageClass) GetCallbackShowing() func(*NavigationPage) {
+	if x.xShowing == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xShowing)
+	return func(SelfVar *NavigationPage) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackShown sets the callback function.
+func (x *NavigationPageClass) SetCallbackShown(cb func(*NavigationPage)) {
+	if cb == nil {
+		x.xShown = 0
+	} else {
+		x.xShown = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(NavigationPageNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackShown gets the callback function.
+func (x *NavigationPageClass) GetCallbackShown() func(*NavigationPage) {
+	if x.xShown == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xShown)
+	return func(SelfVar *NavigationPage) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackHiding sets the callback function.
+func (x *NavigationPageClass) SetCallbackHiding(cb func(*NavigationPage)) {
+	if cb == nil {
+		x.xHiding = 0
+	} else {
+		x.xHiding = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(NavigationPageNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackHiding gets the callback function.
+func (x *NavigationPageClass) GetCallbackHiding() func(*NavigationPage) {
+	if x.xHiding == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xHiding)
+	return func(SelfVar *NavigationPage) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackHidden sets the callback function.
+func (x *NavigationPageClass) SetCallbackHidden(cb func(*NavigationPage)) {
+	if cb == nil {
+		x.xHidden = 0
+	} else {
+		x.xHidden = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(NavigationPageNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackHidden gets the callback function.
+func (x *NavigationPageClass) GetCallbackHidden() func(*NavigationPage) {
+	if x.xHidden == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xHidden)
+	return func(SelfVar *NavigationPage) {
+		rawCallback(SelfVar.GoPointer())
+	}
 }
 
 type NavigationViewClass struct {
diff --git a/v4/adw/adw-swipeable.go b/v4/adw/adw-swipeable.go
index 1e7132e83c4e38a7ff879d40a4a76874d910f340..14ec87cc818a9ec05b197c25eff3ecd813f12957 100644
--- a/v4/adw/adw-swipeable.go
+++ b/v4/adw/adw-swipeable.go
@@ -17,21 +17,146 @@ 	_ structs.HostLayout
 
 	Parent uintptr
 
-	GetDistance uintptr
+	xGetDistance uintptr
 
-	GetSnapPoints uintptr
+	xGetSnapPoints uintptr
 
-	GetProgress uintptr
+	xGetProgress uintptr
 
-	GetCancelProgress uintptr
+	xGetCancelProgress uintptr
 
-	GetSwipeArea uintptr
+	xGetSwipeArea uintptr
 
 	Padding [4]uintptr
 }
 
 func (x *SwipeableInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetDistance sets the callback function.
+// Gets the swipe distance.
+func (x *SwipeableInterface) SetCallbackGetDistance(cb func(Swipeable) float64) {
+	if cb == nil {
+		x.xGetDistance = 0
+	} else {
+		x.xGetDistance = purego.NewCallback(func(SelfVarp uintptr) float64 {
+			return cb(&SwipeableBase{Ptr: SelfVarp})
+		})
+	}
+}
+
+// GetCallbackGetDistance gets the callback function.
+// Gets the swipe distance.
+func (x *SwipeableInterface) GetCallbackGetDistance() func(Swipeable) float64 {
+	if x.xGetDistance == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr) float64
+	purego.RegisterFunc(&rawCallback, x.xGetDistance)
+	return func(SelfVar Swipeable) float64 {
+		return rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSnapPoints sets the callback function.
+// Gets the snap points.
+func (x *SwipeableInterface) SetCallbackGetSnapPoints(cb func(Swipeable, int) uintptr) {
+	if cb == nil {
+		x.xGetSnapPoints = 0
+	} else {
+		x.xGetSnapPoints = purego.NewCallback(func(SelfVarp uintptr, NSnapPointsVarp int) uintptr {
+			return cb(&SwipeableBase{Ptr: SelfVarp}, NSnapPointsVarp)
+		})
+	}
+}
+
+// GetCallbackGetSnapPoints gets the callback function.
+// Gets the snap points.
+func (x *SwipeableInterface) GetCallbackGetSnapPoints() func(Swipeable, int) uintptr {
+	if x.xGetSnapPoints == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, NSnapPointsVarp int) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetSnapPoints)
+	return func(SelfVar Swipeable, NSnapPointsVar int) uintptr {
+		return rawCallback(SelfVar.GoPointer(), NSnapPointsVar)
+	}
+}
+
+// SetCallbackGetProgress sets the callback function.
+// Gets the current progress.
+func (x *SwipeableInterface) SetCallbackGetProgress(cb func(Swipeable) float64) {
+	if cb == nil {
+		x.xGetProgress = 0
+	} else {
+		x.xGetProgress = purego.NewCallback(func(SelfVarp uintptr) float64 {
+			return cb(&SwipeableBase{Ptr: SelfVarp})
+		})
+	}
+}
+
+// GetCallbackGetProgress gets the callback function.
+// Gets the current progress.
+func (x *SwipeableInterface) GetCallbackGetProgress() func(Swipeable) float64 {
+	if x.xGetProgress == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr) float64
+	purego.RegisterFunc(&rawCallback, x.xGetProgress)
+	return func(SelfVar Swipeable) float64 {
+		return rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackGetCancelProgress sets the callback function.
+// Gets the cancel progress.
+func (x *SwipeableInterface) SetCallbackGetCancelProgress(cb func(Swipeable) float64) {
+	if cb == nil {
+		x.xGetCancelProgress = 0
+	} else {
+		x.xGetCancelProgress = purego.NewCallback(func(SelfVarp uintptr) float64 {
+			return cb(&SwipeableBase{Ptr: SelfVarp})
+		})
+	}
+}
+
+// GetCallbackGetCancelProgress gets the callback function.
+// Gets the cancel progress.
+func (x *SwipeableInterface) GetCallbackGetCancelProgress() func(Swipeable) float64 {
+	if x.xGetCancelProgress == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr) float64
+	purego.RegisterFunc(&rawCallback, x.xGetCancelProgress)
+	return func(SelfVar Swipeable) float64 {
+		return rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSwipeArea sets the callback function.
+// Gets the swipeable rectangle.
+func (x *SwipeableInterface) SetCallbackGetSwipeArea(cb func(Swipeable, NavigationDirection, bool, *gdk.Rectangle)) {
+	if cb == nil {
+		x.xGetSwipeArea = 0
+	} else {
+		x.xGetSwipeArea = purego.NewCallback(func(SelfVarp uintptr, NavigationDirectionVarp NavigationDirection, IsDragVarp bool, RectVarp *gdk.Rectangle) {
+			cb(&SwipeableBase{Ptr: SelfVarp}, NavigationDirectionVarp, IsDragVarp, RectVarp)
+		})
+	}
+}
+
+// GetCallbackGetSwipeArea gets the callback function.
+// Gets the swipeable rectangle.
+func (x *SwipeableInterface) GetCallbackGetSwipeArea() func(Swipeable, NavigationDirection, bool, *gdk.Rectangle) {
+	if x.xGetSwipeArea == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, NavigationDirectionVarp NavigationDirection, IsDragVarp bool, RectVarp *gdk.Rectangle)
+	purego.RegisterFunc(&rawCallback, x.xGetSwipeArea)
+	return func(SelfVar Swipeable, NavigationDirectionVar NavigationDirection, IsDragVar bool, RectVar *gdk.Rectangle) {
+		rawCallback(SelfVar.GoPointer(), NavigationDirectionVar, IsDragVar, RectVar)
+	}
 }
 
 // An interface for swipeable widgets.
diff --git a/v4/gdk/gdkcontentprovider.go b/v4/gdk/gdkcontentprovider.go
index 4dd18cc94a4bbf51f971d8052fb2caca7e3dee74..1d7dbcbcf09560f2cdb0e27713e6af7883958195 100644
--- a/v4/gdk/gdkcontentprovider.go
+++ b/v4/gdk/gdkcontentprovider.go
@@ -19,27 +19,211 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ContentChanged uintptr
+	xContentChanged uintptr
 
-	AttachClipboard uintptr
+	xAttachClipboard uintptr
 
-	DetachClipboard uintptr
+	xDetachClipboard uintptr
 
-	RefFormats uintptr
+	xRefFormats uintptr
 
-	RefStorableFormats uintptr
+	xRefStorableFormats uintptr
 
-	WriteMimeTypeAsync uintptr
+	xWriteMimeTypeAsync uintptr
 
-	WriteMimeTypeFinish uintptr
+	xWriteMimeTypeFinish uintptr
 
-	GetValue uintptr
+	xGetValue uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *ContentProviderClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackContentChanged sets the callback function.
+func (x *ContentProviderClass) SetCallbackContentChanged(cb func(*ContentProvider)) {
+	if cb == nil {
+		x.xContentChanged = 0
+	} else {
+		x.xContentChanged = purego.NewCallback(func(ProviderVarp uintptr) {
+			cb(ContentProviderNewFromInternalPtr(ProviderVarp))
+		})
+	}
+}
+
+// GetCallbackContentChanged gets the callback function.
+func (x *ContentProviderClass) GetCallbackContentChanged() func(*ContentProvider) {
+	if x.xContentChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xContentChanged)
+	return func(ProviderVar *ContentProvider) {
+		rawCallback(ProviderVar.GoPointer())
+	}
+}
+
+// SetCallbackAttachClipboard sets the callback function.
+func (x *ContentProviderClass) SetCallbackAttachClipboard(cb func(*ContentProvider, *Clipboard)) {
+	if cb == nil {
+		x.xAttachClipboard = 0
+	} else {
+		x.xAttachClipboard = purego.NewCallback(func(ProviderVarp uintptr, ClipboardVarp uintptr) {
+			cb(ContentProviderNewFromInternalPtr(ProviderVarp), ClipboardNewFromInternalPtr(ClipboardVarp))
+		})
+	}
+}
+
+// GetCallbackAttachClipboard gets the callback function.
+func (x *ContentProviderClass) GetCallbackAttachClipboard() func(*ContentProvider, *Clipboard) {
+	if x.xAttachClipboard == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr, ClipboardVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAttachClipboard)
+	return func(ProviderVar *ContentProvider, ClipboardVar *Clipboard) {
+		rawCallback(ProviderVar.GoPointer(), ClipboardVar.GoPointer())
+	}
+}
+
+// SetCallbackDetachClipboard sets the callback function.
+func (x *ContentProviderClass) SetCallbackDetachClipboard(cb func(*ContentProvider, *Clipboard)) {
+	if cb == nil {
+		x.xDetachClipboard = 0
+	} else {
+		x.xDetachClipboard = purego.NewCallback(func(ProviderVarp uintptr, ClipboardVarp uintptr) {
+			cb(ContentProviderNewFromInternalPtr(ProviderVarp), ClipboardNewFromInternalPtr(ClipboardVarp))
+		})
+	}
+}
+
+// GetCallbackDetachClipboard gets the callback function.
+func (x *ContentProviderClass) GetCallbackDetachClipboard() func(*ContentProvider, *Clipboard) {
+	if x.xDetachClipboard == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr, ClipboardVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDetachClipboard)
+	return func(ProviderVar *ContentProvider, ClipboardVar *Clipboard) {
+		rawCallback(ProviderVar.GoPointer(), ClipboardVar.GoPointer())
+	}
+}
+
+// SetCallbackRefFormats sets the callback function.
+func (x *ContentProviderClass) SetCallbackRefFormats(cb func(*ContentProvider) *ContentFormats) {
+	if cb == nil {
+		x.xRefFormats = 0
+	} else {
+		x.xRefFormats = purego.NewCallback(func(ProviderVarp uintptr) *ContentFormats {
+			return cb(ContentProviderNewFromInternalPtr(ProviderVarp))
+		})
+	}
+}
+
+// GetCallbackRefFormats gets the callback function.
+func (x *ContentProviderClass) GetCallbackRefFormats() func(*ContentProvider) *ContentFormats {
+	if x.xRefFormats == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr) *ContentFormats
+	purego.RegisterFunc(&rawCallback, x.xRefFormats)
+	return func(ProviderVar *ContentProvider) *ContentFormats {
+		return rawCallback(ProviderVar.GoPointer())
+	}
+}
+
+// SetCallbackRefStorableFormats sets the callback function.
+func (x *ContentProviderClass) SetCallbackRefStorableFormats(cb func(*ContentProvider) *ContentFormats) {
+	if cb == nil {
+		x.xRefStorableFormats = 0
+	} else {
+		x.xRefStorableFormats = purego.NewCallback(func(ProviderVarp uintptr) *ContentFormats {
+			return cb(ContentProviderNewFromInternalPtr(ProviderVarp))
+		})
+	}
+}
+
+// GetCallbackRefStorableFormats gets the callback function.
+func (x *ContentProviderClass) GetCallbackRefStorableFormats() func(*ContentProvider) *ContentFormats {
+	if x.xRefStorableFormats == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr) *ContentFormats
+	purego.RegisterFunc(&rawCallback, x.xRefStorableFormats)
+	return func(ProviderVar *ContentProvider) *ContentFormats {
+		return rawCallback(ProviderVar.GoPointer())
+	}
+}
+
+// SetCallbackWriteMimeTypeAsync sets the callback function.
+func (x *ContentProviderClass) SetCallbackWriteMimeTypeAsync(cb func(*ContentProvider, string, *gio.OutputStream, int, *gio.Cancellable, *gio.AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xWriteMimeTypeAsync = 0
+	} else {
+		x.xWriteMimeTypeAsync = purego.NewCallback(func(ProviderVarp uintptr, MimeTypeVarp string, StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(ContentProviderNewFromInternalPtr(ProviderVarp), MimeTypeVarp, gio.OutputStreamNewFromInternalPtr(StreamVarp), IoPriorityVarp, gio.CancellableNewFromInternalPtr(CancellableVarp), (*gio.AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackWriteMimeTypeAsync gets the callback function.
+func (x *ContentProviderClass) GetCallbackWriteMimeTypeAsync() func(*ContentProvider, string, *gio.OutputStream, int, *gio.Cancellable, *gio.AsyncReadyCallback, uintptr) {
+	if x.xWriteMimeTypeAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr, MimeTypeVarp string, StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xWriteMimeTypeAsync)
+	return func(ProviderVar *ContentProvider, MimeTypeVar string, StreamVar *gio.OutputStream, IoPriorityVar int, CancellableVar *gio.Cancellable, CallbackVar *gio.AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ProviderVar.GoPointer(), MimeTypeVar, StreamVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackWriteMimeTypeFinish sets the callback function.
+func (x *ContentProviderClass) SetCallbackWriteMimeTypeFinish(cb func(*ContentProvider, gio.AsyncResult) bool) {
+	if cb == nil {
+		x.xWriteMimeTypeFinish = 0
+	} else {
+		x.xWriteMimeTypeFinish = purego.NewCallback(func(ProviderVarp uintptr, ResultVarp uintptr) bool {
+			return cb(ContentProviderNewFromInternalPtr(ProviderVarp), &gio.AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackWriteMimeTypeFinish gets the callback function.
+func (x *ContentProviderClass) GetCallbackWriteMimeTypeFinish() func(*ContentProvider, gio.AsyncResult) bool {
+	if x.xWriteMimeTypeFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xWriteMimeTypeFinish)
+	return func(ProviderVar *ContentProvider, ResultVar gio.AsyncResult) bool {
+		return rawCallback(ProviderVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGetValue sets the callback function.
+func (x *ContentProviderClass) SetCallbackGetValue(cb func(*ContentProvider, *gobject.Value) bool) {
+	if cb == nil {
+		x.xGetValue = 0
+	} else {
+		x.xGetValue = purego.NewCallback(func(ProviderVarp uintptr, ValueVarp *gobject.Value) bool {
+			return cb(ContentProviderNewFromInternalPtr(ProviderVarp), ValueVarp)
+		})
+	}
+}
+
+// GetCallbackGetValue gets the callback function.
+func (x *ContentProviderClass) GetCallbackGetValue() func(*ContentProvider, *gobject.Value) bool {
+	if x.xGetValue == 0 {
+		return nil
+	}
+	var rawCallback func(ProviderVarp uintptr, ValueVarp *gobject.Value) bool
+	purego.RegisterFunc(&rawCallback, x.xGetValue)
+	return func(ProviderVar *ContentProvider, ValueVar *gobject.Value) bool {
+		return rawCallback(ProviderVar.GoPointer(), ValueVar)
+	}
 }
 
 // A `GdkContentProvider` is used to provide content for the clipboard or
diff --git a/v4/gdk/gdkpaintable.go b/v4/gdk/gdkpaintable.go
index e7bcb71a0298b34d7c5fa39f662d0ad339ca70a7..bc83674240f586b3b1f988a8c4eb7e70d36749b3 100644
--- a/v4/gdk/gdkpaintable.go
+++ b/v4/gdk/gdkpaintable.go
@@ -24,21 +24,169 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Snapshot uintptr
+	xSnapshot uintptr
 
-	GetCurrentImage uintptr
+	xGetCurrentImage uintptr
 
-	GetFlags uintptr
+	xGetFlags uintptr
 
-	GetIntrinsicWidth uintptr
+	xGetIntrinsicWidth uintptr
 
-	GetIntrinsicHeight uintptr
+	xGetIntrinsicHeight uintptr
 
-	GetIntrinsicAspectRatio uintptr
+	xGetIntrinsicAspectRatio uintptr
 }
 
 func (x *PaintableInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackSnapshot sets the callback function.
+func (x *PaintableInterface) SetCallbackSnapshot(cb func(Paintable, *Snapshot, float64, float64)) {
+	if cb == nil {
+		x.xSnapshot = 0
+	} else {
+		x.xSnapshot = purego.NewCallback(func(PaintableVarp uintptr, SnapshotVarp uintptr, WidthVarp float64, HeightVarp float64) {
+			cb(&PaintableBase{Ptr: PaintableVarp}, SnapshotNewFromInternalPtr(SnapshotVarp), WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackSnapshot gets the callback function.
+func (x *PaintableInterface) GetCallbackSnapshot() func(Paintable, *Snapshot, float64, float64) {
+	if x.xSnapshot == 0 {
+		return nil
+	}
+	var rawCallback func(PaintableVarp uintptr, SnapshotVarp uintptr, WidthVarp float64, HeightVarp float64)
+	purego.RegisterFunc(&rawCallback, x.xSnapshot)
+	return func(PaintableVar Paintable, SnapshotVar *Snapshot, WidthVar float64, HeightVar float64) {
+		rawCallback(PaintableVar.GoPointer(), SnapshotVar.GoPointer(), WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackGetCurrentImage sets the callback function.
+func (x *PaintableInterface) SetCallbackGetCurrentImage(cb func(Paintable) *PaintableBase) {
+	if cb == nil {
+		x.xGetCurrentImage = 0
+	} else {
+		x.xGetCurrentImage = purego.NewCallback(func(PaintableVarp uintptr) uintptr {
+			ret := cb(&PaintableBase{Ptr: PaintableVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetCurrentImage gets the callback function.
+func (x *PaintableInterface) GetCallbackGetCurrentImage() func(Paintable) *PaintableBase {
+	if x.xGetCurrentImage == 0 {
+		return nil
+	}
+	var rawCallback func(PaintableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetCurrentImage)
+	return func(PaintableVar Paintable) *PaintableBase {
+		rawRet := rawCallback(PaintableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &PaintableBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetFlags sets the callback function.
+func (x *PaintableInterface) SetCallbackGetFlags(cb func(Paintable) PaintableFlags) {
+	if cb == nil {
+		x.xGetFlags = 0
+	} else {
+		x.xGetFlags = purego.NewCallback(func(PaintableVarp uintptr) PaintableFlags {
+			return cb(&PaintableBase{Ptr: PaintableVarp})
+		})
+	}
+}
+
+// GetCallbackGetFlags gets the callback function.
+func (x *PaintableInterface) GetCallbackGetFlags() func(Paintable) PaintableFlags {
+	if x.xGetFlags == 0 {
+		return nil
+	}
+	var rawCallback func(PaintableVarp uintptr) PaintableFlags
+	purego.RegisterFunc(&rawCallback, x.xGetFlags)
+	return func(PaintableVar Paintable) PaintableFlags {
+		return rawCallback(PaintableVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIntrinsicWidth sets the callback function.
+func (x *PaintableInterface) SetCallbackGetIntrinsicWidth(cb func(Paintable) int) {
+	if cb == nil {
+		x.xGetIntrinsicWidth = 0
+	} else {
+		x.xGetIntrinsicWidth = purego.NewCallback(func(PaintableVarp uintptr) int {
+			return cb(&PaintableBase{Ptr: PaintableVarp})
+		})
+	}
+}
+
+// GetCallbackGetIntrinsicWidth gets the callback function.
+func (x *PaintableInterface) GetCallbackGetIntrinsicWidth() func(Paintable) int {
+	if x.xGetIntrinsicWidth == 0 {
+		return nil
+	}
+	var rawCallback func(PaintableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetIntrinsicWidth)
+	return func(PaintableVar Paintable) int {
+		return rawCallback(PaintableVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIntrinsicHeight sets the callback function.
+func (x *PaintableInterface) SetCallbackGetIntrinsicHeight(cb func(Paintable) int) {
+	if cb == nil {
+		x.xGetIntrinsicHeight = 0
+	} else {
+		x.xGetIntrinsicHeight = purego.NewCallback(func(PaintableVarp uintptr) int {
+			return cb(&PaintableBase{Ptr: PaintableVarp})
+		})
+	}
+}
+
+// GetCallbackGetIntrinsicHeight gets the callback function.
+func (x *PaintableInterface) GetCallbackGetIntrinsicHeight() func(Paintable) int {
+	if x.xGetIntrinsicHeight == 0 {
+		return nil
+	}
+	var rawCallback func(PaintableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetIntrinsicHeight)
+	return func(PaintableVar Paintable) int {
+		return rawCallback(PaintableVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIntrinsicAspectRatio sets the callback function.
+func (x *PaintableInterface) SetCallbackGetIntrinsicAspectRatio(cb func(Paintable) float64) {
+	if cb == nil {
+		x.xGetIntrinsicAspectRatio = 0
+	} else {
+		x.xGetIntrinsicAspectRatio = purego.NewCallback(func(PaintableVarp uintptr) float64 {
+			return cb(&PaintableBase{Ptr: PaintableVarp})
+		})
+	}
+}
+
+// GetCallbackGetIntrinsicAspectRatio gets the callback function.
+func (x *PaintableInterface) GetCallbackGetIntrinsicAspectRatio() func(Paintable) float64 {
+	if x.xGetIntrinsicAspectRatio == 0 {
+		return nil
+	}
+	var rawCallback func(PaintableVarp uintptr) float64
+	purego.RegisterFunc(&rawCallback, x.xGetIntrinsicAspectRatio)
+	return func(PaintableVar Paintable) float64 {
+		return rawCallback(PaintableVar.GoPointer())
+	}
 }
 
 // `GdkPaintable` is a simple interface used by GTK to represent content that
diff --git a/v4/gdkpixbuf/gdk-pixbuf-animation.go b/v4/gdkpixbuf/gdk-pixbuf-animation.go
index 6140ca077f6cbd382ecb871614d298a7d2f57cb9..e49fc4bd5ac04491d18a84203797fb0251d053d6 100644
--- a/v4/gdkpixbuf/gdk-pixbuf-animation.go
+++ b/v4/gdkpixbuf/gdk-pixbuf-animation.go
@@ -21,19 +21,131 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	IsStaticImage uintptr
+	xIsStaticImage uintptr
 
-	GetStaticImage uintptr
+	xGetStaticImage uintptr
 
-	GetSize uintptr
+	xGetSize uintptr
 
-	GetIter uintptr
+	xGetIter uintptr
 }
 
 func (x *PixbufAnimationClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackIsStaticImage sets the callback function.
+func (x *PixbufAnimationClass) SetCallbackIsStaticImage(cb func(*PixbufAnimation) bool) {
+	if cb == nil {
+		x.xIsStaticImage = 0
+	} else {
+		x.xIsStaticImage = purego.NewCallback(func(AnimationVarp uintptr) bool {
+			return cb(PixbufAnimationNewFromInternalPtr(AnimationVarp))
+		})
+	}
+}
+
+// GetCallbackIsStaticImage gets the callback function.
+func (x *PixbufAnimationClass) GetCallbackIsStaticImage() func(*PixbufAnimation) bool {
+	if x.xIsStaticImage == 0 {
+		return nil
+	}
+	var rawCallback func(AnimationVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsStaticImage)
+	return func(AnimationVar *PixbufAnimation) bool {
+		return rawCallback(AnimationVar.GoPointer())
+	}
+}
+
+// SetCallbackGetStaticImage sets the callback function.
+func (x *PixbufAnimationClass) SetCallbackGetStaticImage(cb func(*PixbufAnimation) *Pixbuf) {
+	if cb == nil {
+		x.xGetStaticImage = 0
+	} else {
+		x.xGetStaticImage = purego.NewCallback(func(AnimationVarp uintptr) uintptr {
+			ret := cb(PixbufAnimationNewFromInternalPtr(AnimationVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetStaticImage gets the callback function.
+func (x *PixbufAnimationClass) GetCallbackGetStaticImage() func(*PixbufAnimation) *Pixbuf {
+	if x.xGetStaticImage == 0 {
+		return nil
+	}
+	var rawCallback func(AnimationVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetStaticImage)
+	return func(AnimationVar *PixbufAnimation) *Pixbuf {
+		rawRet := rawCallback(AnimationVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Pixbuf{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetSize sets the callback function.
+func (x *PixbufAnimationClass) SetCallbackGetSize(cb func(*PixbufAnimation, int, int)) {
+	if cb == nil {
+		x.xGetSize = 0
+	} else {
+		x.xGetSize = purego.NewCallback(func(AnimationVarp uintptr, WidthVarp int, HeightVarp int) {
+			cb(PixbufAnimationNewFromInternalPtr(AnimationVarp), WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackGetSize gets the callback function.
+func (x *PixbufAnimationClass) GetCallbackGetSize() func(*PixbufAnimation, int, int) {
+	if x.xGetSize == 0 {
+		return nil
+	}
+	var rawCallback func(AnimationVarp uintptr, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetSize)
+	return func(AnimationVar *PixbufAnimation, WidthVar int, HeightVar int) {
+		rawCallback(AnimationVar.GoPointer(), WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackGetIter sets the callback function.
+func (x *PixbufAnimationClass) SetCallbackGetIter(cb func(*PixbufAnimation, *glib.TimeVal) *PixbufAnimationIter) {
+	if cb == nil {
+		x.xGetIter = 0
+	} else {
+		x.xGetIter = purego.NewCallback(func(AnimationVarp uintptr, StartTimeVarp *glib.TimeVal) uintptr {
+			ret := cb(PixbufAnimationNewFromInternalPtr(AnimationVarp), StartTimeVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetIter gets the callback function.
+func (x *PixbufAnimationClass) GetCallbackGetIter() func(*PixbufAnimation, *glib.TimeVal) *PixbufAnimationIter {
+	if x.xGetIter == 0 {
+		return nil
+	}
+	var rawCallback func(AnimationVarp uintptr, StartTimeVarp *glib.TimeVal) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetIter)
+	return func(AnimationVar *PixbufAnimation, StartTimeVar *glib.TimeVal) *PixbufAnimationIter {
+		rawRet := rawCallback(AnimationVar.GoPointer(), StartTimeVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &PixbufAnimationIter{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
 // Modules supporting animations must derive a type from
 // #GdkPixbufAnimationIter, providing suitable implementations of the
 // virtual functions.
@@ -42,17 +154,119 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetDelayTime uintptr
+	xGetDelayTime uintptr
 
-	GetPixbuf uintptr
+	xGetPixbuf uintptr
 
-	OnCurrentlyLoadingFrame uintptr
+	xOnCurrentlyLoadingFrame uintptr
 
-	Advance uintptr
+	xAdvance uintptr
 }
 
 func (x *PixbufAnimationIterClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetDelayTime sets the callback function.
+func (x *PixbufAnimationIterClass) SetCallbackGetDelayTime(cb func(*PixbufAnimationIter) int) {
+	if cb == nil {
+		x.xGetDelayTime = 0
+	} else {
+		x.xGetDelayTime = purego.NewCallback(func(IterVarp uintptr) int {
+			return cb(PixbufAnimationIterNewFromInternalPtr(IterVarp))
+		})
+	}
+}
+
+// GetCallbackGetDelayTime gets the callback function.
+func (x *PixbufAnimationIterClass) GetCallbackGetDelayTime() func(*PixbufAnimationIter) int {
+	if x.xGetDelayTime == 0 {
+		return nil
+	}
+	var rawCallback func(IterVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetDelayTime)
+	return func(IterVar *PixbufAnimationIter) int {
+		return rawCallback(IterVar.GoPointer())
+	}
+}
+
+// SetCallbackGetPixbuf sets the callback function.
+func (x *PixbufAnimationIterClass) SetCallbackGetPixbuf(cb func(*PixbufAnimationIter) *Pixbuf) {
+	if cb == nil {
+		x.xGetPixbuf = 0
+	} else {
+		x.xGetPixbuf = purego.NewCallback(func(IterVarp uintptr) uintptr {
+			ret := cb(PixbufAnimationIterNewFromInternalPtr(IterVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetPixbuf gets the callback function.
+func (x *PixbufAnimationIterClass) GetCallbackGetPixbuf() func(*PixbufAnimationIter) *Pixbuf {
+	if x.xGetPixbuf == 0 {
+		return nil
+	}
+	var rawCallback func(IterVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetPixbuf)
+	return func(IterVar *PixbufAnimationIter) *Pixbuf {
+		rawRet := rawCallback(IterVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Pixbuf{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackOnCurrentlyLoadingFrame sets the callback function.
+func (x *PixbufAnimationIterClass) SetCallbackOnCurrentlyLoadingFrame(cb func(*PixbufAnimationIter) bool) {
+	if cb == nil {
+		x.xOnCurrentlyLoadingFrame = 0
+	} else {
+		x.xOnCurrentlyLoadingFrame = purego.NewCallback(func(IterVarp uintptr) bool {
+			return cb(PixbufAnimationIterNewFromInternalPtr(IterVarp))
+		})
+	}
+}
+
+// GetCallbackOnCurrentlyLoadingFrame gets the callback function.
+func (x *PixbufAnimationIterClass) GetCallbackOnCurrentlyLoadingFrame() func(*PixbufAnimationIter) bool {
+	if x.xOnCurrentlyLoadingFrame == 0 {
+		return nil
+	}
+	var rawCallback func(IterVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xOnCurrentlyLoadingFrame)
+	return func(IterVar *PixbufAnimationIter) bool {
+		return rawCallback(IterVar.GoPointer())
+	}
+}
+
+// SetCallbackAdvance sets the callback function.
+func (x *PixbufAnimationIterClass) SetCallbackAdvance(cb func(*PixbufAnimationIter, *glib.TimeVal) bool) {
+	if cb == nil {
+		x.xAdvance = 0
+	} else {
+		x.xAdvance = purego.NewCallback(func(IterVarp uintptr, CurrentTimeVarp *glib.TimeVal) bool {
+			return cb(PixbufAnimationIterNewFromInternalPtr(IterVarp), CurrentTimeVarp)
+		})
+	}
+}
+
+// GetCallbackAdvance gets the callback function.
+func (x *PixbufAnimationIterClass) GetCallbackAdvance() func(*PixbufAnimationIter, *glib.TimeVal) bool {
+	if x.xAdvance == 0 {
+		return nil
+	}
+	var rawCallback func(IterVarp uintptr, CurrentTimeVarp *glib.TimeVal) bool
+	purego.RegisterFunc(&rawCallback, x.xAdvance)
+	return func(IterVar *PixbufAnimationIter, CurrentTimeVar *glib.TimeVal) bool {
+		return rawCallback(IterVar.GoPointer(), CurrentTimeVar)
+	}
 }
 
 // An opaque object representing an animation.
diff --git a/v4/gdkpixbuf/gdk-pixbuf-io.go b/v4/gdkpixbuf/gdk-pixbuf-io.go
index 38d66c61581f5366af56b4b16fa382f22a628379..912fe528ddd8afd355c2dad3427670d9852057c9 100644
--- a/v4/gdkpixbuf/gdk-pixbuf-io.go
+++ b/v4/gdkpixbuf/gdk-pixbuf-io.go
@@ -339,17 +339,109 @@ 	SaveToCallback PixbufModuleSaveCallbackFunc
 
 	IsSaveOptionSupported PixbufModuleSaveOptionSupportedFunc
 
-	Reserved1 uintptr
+	xReserved1 uintptr
 
-	Reserved2 uintptr
+	xReserved2 uintptr
 
-	Reserved3 uintptr
+	xReserved3 uintptr
 
-	Reserved4 uintptr
+	xReserved4 uintptr
 }
 
 func (x *PixbufModule) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackReserved1 sets the callback function.
+func (x *PixbufModule) SetCallbackReserved1(cb func()) {
+	if cb == nil {
+		x.xReserved1 = 0
+	} else {
+		x.xReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved1 gets the callback function.
+func (x *PixbufModule) GetCallbackReserved1() func() {
+	if x.xReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackReserved2 sets the callback function.
+func (x *PixbufModule) SetCallbackReserved2(cb func()) {
+	if cb == nil {
+		x.xReserved2 = 0
+	} else {
+		x.xReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved2 gets the callback function.
+func (x *PixbufModule) GetCallbackReserved2() func() {
+	if x.xReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackReserved3 sets the callback function.
+func (x *PixbufModule) SetCallbackReserved3(cb func()) {
+	if cb == nil {
+		x.xReserved3 = 0
+	} else {
+		x.xReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved3 gets the callback function.
+func (x *PixbufModule) GetCallbackReserved3() func() {
+	if x.xReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackReserved4 sets the callback function.
+func (x *PixbufModule) SetCallbackReserved4(cb func()) {
+	if cb == nil {
+		x.xReserved4 = 0
+	} else {
+		x.xReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved4 gets the callback function.
+func (x *PixbufModule) GetCallbackReserved4() func() {
+	if x.xReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 // The signature prefix for a module.
diff --git a/v4/gdkpixbuf/gdk-pixbuf-loader.go b/v4/gdkpixbuf/gdk-pixbuf-loader.go
index 5913f2a6b35d385a5e8cab4c53160bce783a5fd7..63da1bdca57c4310bd3c007afe0c16e9a7791a9f 100644
--- a/v4/gdkpixbuf/gdk-pixbuf-loader.go
+++ b/v4/gdkpixbuf/gdk-pixbuf-loader.go
@@ -17,17 +17,109 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	SizePrepared uintptr
+	xSizePrepared uintptr
 
-	AreaPrepared uintptr
+	xAreaPrepared uintptr
 
-	AreaUpdated uintptr
+	xAreaUpdated uintptr
 
-	Closed uintptr
+	xClosed uintptr
 }
 
 func (x *PixbufLoaderClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackSizePrepared sets the callback function.
+func (x *PixbufLoaderClass) SetCallbackSizePrepared(cb func(*PixbufLoader, int, int)) {
+	if cb == nil {
+		x.xSizePrepared = 0
+	} else {
+		x.xSizePrepared = purego.NewCallback(func(LoaderVarp uintptr, WidthVarp int, HeightVarp int) {
+			cb(PixbufLoaderNewFromInternalPtr(LoaderVarp), WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackSizePrepared gets the callback function.
+func (x *PixbufLoaderClass) GetCallbackSizePrepared() func(*PixbufLoader, int, int) {
+	if x.xSizePrepared == 0 {
+		return nil
+	}
+	var rawCallback func(LoaderVarp uintptr, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xSizePrepared)
+	return func(LoaderVar *PixbufLoader, WidthVar int, HeightVar int) {
+		rawCallback(LoaderVar.GoPointer(), WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackAreaPrepared sets the callback function.
+func (x *PixbufLoaderClass) SetCallbackAreaPrepared(cb func(*PixbufLoader)) {
+	if cb == nil {
+		x.xAreaPrepared = 0
+	} else {
+		x.xAreaPrepared = purego.NewCallback(func(LoaderVarp uintptr) {
+			cb(PixbufLoaderNewFromInternalPtr(LoaderVarp))
+		})
+	}
+}
+
+// GetCallbackAreaPrepared gets the callback function.
+func (x *PixbufLoaderClass) GetCallbackAreaPrepared() func(*PixbufLoader) {
+	if x.xAreaPrepared == 0 {
+		return nil
+	}
+	var rawCallback func(LoaderVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAreaPrepared)
+	return func(LoaderVar *PixbufLoader) {
+		rawCallback(LoaderVar.GoPointer())
+	}
+}
+
+// SetCallbackAreaUpdated sets the callback function.
+func (x *PixbufLoaderClass) SetCallbackAreaUpdated(cb func(*PixbufLoader, int, int, int, int)) {
+	if cb == nil {
+		x.xAreaUpdated = 0
+	} else {
+		x.xAreaUpdated = purego.NewCallback(func(LoaderVarp uintptr, XVarp int, YVarp int, WidthVarp int, HeightVarp int) {
+			cb(PixbufLoaderNewFromInternalPtr(LoaderVarp), XVarp, YVarp, WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackAreaUpdated gets the callback function.
+func (x *PixbufLoaderClass) GetCallbackAreaUpdated() func(*PixbufLoader, int, int, int, int) {
+	if x.xAreaUpdated == 0 {
+		return nil
+	}
+	var rawCallback func(LoaderVarp uintptr, XVarp int, YVarp int, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xAreaUpdated)
+	return func(LoaderVar *PixbufLoader, XVar int, YVar int, WidthVar int, HeightVar int) {
+		rawCallback(LoaderVar.GoPointer(), XVar, YVar, WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackClosed sets the callback function.
+func (x *PixbufLoaderClass) SetCallbackClosed(cb func(*PixbufLoader)) {
+	if cb == nil {
+		x.xClosed = 0
+	} else {
+		x.xClosed = purego.NewCallback(func(LoaderVarp uintptr) {
+			cb(PixbufLoaderNewFromInternalPtr(LoaderVarp))
+		})
+	}
+}
+
+// GetCallbackClosed gets the callback function.
+func (x *PixbufLoaderClass) GetCallbackClosed() func(*PixbufLoader) {
+	if x.xClosed == 0 {
+		return nil
+	}
+	var rawCallback func(LoaderVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClosed)
+	return func(LoaderVar *PixbufLoader) {
+		rawCallback(LoaderVar.GoPointer())
+	}
 }
 
 // Incremental image loader.
diff --git a/v4/gio/gaction.go b/v4/gio/gaction.go
index c37fc9247e82c9427c09a0af43cbcbc3369cb439..717398303f3724d4400ce9b1c83750ec9ccf5c31 100644
--- a/v4/gio/gaction.go
+++ b/v4/gio/gaction.go
@@ -17,25 +17,209 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	GetName uintptr
+	xGetName uintptr
 
-	GetParameterType uintptr
+	xGetParameterType uintptr
 
-	GetStateType uintptr
+	xGetStateType uintptr
 
-	GetStateHint uintptr
+	xGetStateHint uintptr
 
-	GetEnabled uintptr
+	xGetEnabled uintptr
 
-	GetState uintptr
+	xGetState uintptr
 
-	ChangeState uintptr
+	xChangeState uintptr
 
-	Activate uintptr
+	xActivate uintptr
 }
 
 func (x *ActionInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetName sets the callback function.
+func (x *ActionInterface) SetCallbackGetName(cb func(Action) string) {
+	if cb == nil {
+		x.xGetName = 0
+	} else {
+		x.xGetName = purego.NewCallback(func(ActionVarp uintptr) string {
+			return cb(&ActionBase{Ptr: ActionVarp})
+		})
+	}
+}
+
+// GetCallbackGetName gets the callback function.
+func (x *ActionInterface) GetCallbackGetName() func(Action) string {
+	if x.xGetName == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetName)
+	return func(ActionVar Action) string {
+		return rawCallback(ActionVar.GoPointer())
+	}
+}
+
+// SetCallbackGetParameterType sets the callback function.
+func (x *ActionInterface) SetCallbackGetParameterType(cb func(Action) *glib.VariantType) {
+	if cb == nil {
+		x.xGetParameterType = 0
+	} else {
+		x.xGetParameterType = purego.NewCallback(func(ActionVarp uintptr) *glib.VariantType {
+			return cb(&ActionBase{Ptr: ActionVarp})
+		})
+	}
+}
+
+// GetCallbackGetParameterType gets the callback function.
+func (x *ActionInterface) GetCallbackGetParameterType() func(Action) *glib.VariantType {
+	if x.xGetParameterType == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr) *glib.VariantType
+	purego.RegisterFunc(&rawCallback, x.xGetParameterType)
+	return func(ActionVar Action) *glib.VariantType {
+		return rawCallback(ActionVar.GoPointer())
+	}
+}
+
+// SetCallbackGetStateType sets the callback function.
+func (x *ActionInterface) SetCallbackGetStateType(cb func(Action) *glib.VariantType) {
+	if cb == nil {
+		x.xGetStateType = 0
+	} else {
+		x.xGetStateType = purego.NewCallback(func(ActionVarp uintptr) *glib.VariantType {
+			return cb(&ActionBase{Ptr: ActionVarp})
+		})
+	}
+}
+
+// GetCallbackGetStateType gets the callback function.
+func (x *ActionInterface) GetCallbackGetStateType() func(Action) *glib.VariantType {
+	if x.xGetStateType == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr) *glib.VariantType
+	purego.RegisterFunc(&rawCallback, x.xGetStateType)
+	return func(ActionVar Action) *glib.VariantType {
+		return rawCallback(ActionVar.GoPointer())
+	}
+}
+
+// SetCallbackGetStateHint sets the callback function.
+func (x *ActionInterface) SetCallbackGetStateHint(cb func(Action) *glib.Variant) {
+	if cb == nil {
+		x.xGetStateHint = 0
+	} else {
+		x.xGetStateHint = purego.NewCallback(func(ActionVarp uintptr) *glib.Variant {
+			return cb(&ActionBase{Ptr: ActionVarp})
+		})
+	}
+}
+
+// GetCallbackGetStateHint gets the callback function.
+func (x *ActionInterface) GetCallbackGetStateHint() func(Action) *glib.Variant {
+	if x.xGetStateHint == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xGetStateHint)
+	return func(ActionVar Action) *glib.Variant {
+		return rawCallback(ActionVar.GoPointer())
+	}
+}
+
+// SetCallbackGetEnabled sets the callback function.
+func (x *ActionInterface) SetCallbackGetEnabled(cb func(Action) bool) {
+	if cb == nil {
+		x.xGetEnabled = 0
+	} else {
+		x.xGetEnabled = purego.NewCallback(func(ActionVarp uintptr) bool {
+			return cb(&ActionBase{Ptr: ActionVarp})
+		})
+	}
+}
+
+// GetCallbackGetEnabled gets the callback function.
+func (x *ActionInterface) GetCallbackGetEnabled() func(Action) bool {
+	if x.xGetEnabled == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xGetEnabled)
+	return func(ActionVar Action) bool {
+		return rawCallback(ActionVar.GoPointer())
+	}
+}
+
+// SetCallbackGetState sets the callback function.
+func (x *ActionInterface) SetCallbackGetState(cb func(Action) *glib.Variant) {
+	if cb == nil {
+		x.xGetState = 0
+	} else {
+		x.xGetState = purego.NewCallback(func(ActionVarp uintptr) *glib.Variant {
+			return cb(&ActionBase{Ptr: ActionVarp})
+		})
+	}
+}
+
+// GetCallbackGetState gets the callback function.
+func (x *ActionInterface) GetCallbackGetState() func(Action) *glib.Variant {
+	if x.xGetState == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xGetState)
+	return func(ActionVar Action) *glib.Variant {
+		return rawCallback(ActionVar.GoPointer())
+	}
+}
+
+// SetCallbackChangeState sets the callback function.
+func (x *ActionInterface) SetCallbackChangeState(cb func(Action, *glib.Variant)) {
+	if cb == nil {
+		x.xChangeState = 0
+	} else {
+		x.xChangeState = purego.NewCallback(func(ActionVarp uintptr, ValueVarp *glib.Variant) {
+			cb(&ActionBase{Ptr: ActionVarp}, ValueVarp)
+		})
+	}
+}
+
+// GetCallbackChangeState gets the callback function.
+func (x *ActionInterface) GetCallbackChangeState() func(Action, *glib.Variant) {
+	if x.xChangeState == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr, ValueVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xChangeState)
+	return func(ActionVar Action, ValueVar *glib.Variant) {
+		rawCallback(ActionVar.GoPointer(), ValueVar)
+	}
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *ActionInterface) SetCallbackActivate(cb func(Action, *glib.Variant)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(ActionVarp uintptr, ParameterVarp *glib.Variant) {
+			cb(&ActionBase{Ptr: ActionVarp}, ParameterVarp)
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *ActionInterface) GetCallbackActivate() func(Action, *glib.Variant) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr, ParameterVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(ActionVar Action, ParameterVar *glib.Variant) {
+		rawCallback(ActionVar.GoPointer(), ParameterVar)
+	}
 }
 
 // #GAction represents a single named action.
diff --git a/v4/gio/gactiongroup.go b/v4/gio/gactiongroup.go
index 2a8edab0156e12879029fd30ad840f088909503c..243399ae1c44181a98c0bdae905956c8a16ee36e 100644
--- a/v4/gio/gactiongroup.go
+++ b/v4/gio/gactiongroup.go
@@ -17,37 +17,359 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	HasAction uintptr
+	xHasAction uintptr
 
-	ListActions uintptr
+	xListActions uintptr
 
-	GetActionEnabled uintptr
+	xGetActionEnabled uintptr
 
-	GetActionParameterType uintptr
+	xGetActionParameterType uintptr
 
-	GetActionStateType uintptr
+	xGetActionStateType uintptr
 
-	GetActionStateHint uintptr
+	xGetActionStateHint uintptr
 
-	GetActionState uintptr
+	xGetActionState uintptr
 
-	ChangeActionState uintptr
+	xChangeActionState uintptr
 
-	ActivateAction uintptr
+	xActivateAction uintptr
 
-	ActionAdded uintptr
+	xActionAdded uintptr
 
-	ActionRemoved uintptr
+	xActionRemoved uintptr
 
-	ActionEnabledChanged uintptr
+	xActionEnabledChanged uintptr
 
-	ActionStateChanged uintptr
+	xActionStateChanged uintptr
 
-	QueryAction uintptr
+	xQueryAction uintptr
 }
 
 func (x *ActionGroupInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackHasAction sets the callback function.
+func (x *ActionGroupInterface) SetCallbackHasAction(cb func(ActionGroup, string) bool) {
+	if cb == nil {
+		x.xHasAction = 0
+	} else {
+		x.xHasAction = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) bool {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackHasAction gets the callback function.
+func (x *ActionGroupInterface) GetCallbackHasAction() func(ActionGroup, string) bool {
+	if x.xHasAction == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xHasAction)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) bool {
+		return rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackListActions sets the callback function.
+func (x *ActionGroupInterface) SetCallbackListActions(cb func(ActionGroup) []string) {
+	if cb == nil {
+		x.xListActions = 0
+	} else {
+		x.xListActions = purego.NewCallback(func(ActionGroupVarp uintptr) []string {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp})
+		})
+	}
+}
+
+// GetCallbackListActions gets the callback function.
+func (x *ActionGroupInterface) GetCallbackListActions() func(ActionGroup) []string {
+	if x.xListActions == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xListActions)
+	return func(ActionGroupVar ActionGroup) []string {
+		return rawCallback(ActionGroupVar.GoPointer())
+	}
+}
+
+// SetCallbackGetActionEnabled sets the callback function.
+func (x *ActionGroupInterface) SetCallbackGetActionEnabled(cb func(ActionGroup, string) bool) {
+	if cb == nil {
+		x.xGetActionEnabled = 0
+	} else {
+		x.xGetActionEnabled = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) bool {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackGetActionEnabled gets the callback function.
+func (x *ActionGroupInterface) GetCallbackGetActionEnabled() func(ActionGroup, string) bool {
+	if x.xGetActionEnabled == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xGetActionEnabled)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) bool {
+		return rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackGetActionParameterType sets the callback function.
+func (x *ActionGroupInterface) SetCallbackGetActionParameterType(cb func(ActionGroup, string) *glib.VariantType) {
+	if cb == nil {
+		x.xGetActionParameterType = 0
+	} else {
+		x.xGetActionParameterType = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.VariantType {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackGetActionParameterType gets the callback function.
+func (x *ActionGroupInterface) GetCallbackGetActionParameterType() func(ActionGroup, string) *glib.VariantType {
+	if x.xGetActionParameterType == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.VariantType
+	purego.RegisterFunc(&rawCallback, x.xGetActionParameterType)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) *glib.VariantType {
+		return rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackGetActionStateType sets the callback function.
+func (x *ActionGroupInterface) SetCallbackGetActionStateType(cb func(ActionGroup, string) *glib.VariantType) {
+	if cb == nil {
+		x.xGetActionStateType = 0
+	} else {
+		x.xGetActionStateType = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.VariantType {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackGetActionStateType gets the callback function.
+func (x *ActionGroupInterface) GetCallbackGetActionStateType() func(ActionGroup, string) *glib.VariantType {
+	if x.xGetActionStateType == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.VariantType
+	purego.RegisterFunc(&rawCallback, x.xGetActionStateType)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) *glib.VariantType {
+		return rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackGetActionStateHint sets the callback function.
+func (x *ActionGroupInterface) SetCallbackGetActionStateHint(cb func(ActionGroup, string) *glib.Variant) {
+	if cb == nil {
+		x.xGetActionStateHint = 0
+	} else {
+		x.xGetActionStateHint = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.Variant {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackGetActionStateHint gets the callback function.
+func (x *ActionGroupInterface) GetCallbackGetActionStateHint() func(ActionGroup, string) *glib.Variant {
+	if x.xGetActionStateHint == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xGetActionStateHint)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) *glib.Variant {
+		return rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackGetActionState sets the callback function.
+func (x *ActionGroupInterface) SetCallbackGetActionState(cb func(ActionGroup, string) *glib.Variant) {
+	if cb == nil {
+		x.xGetActionState = 0
+	} else {
+		x.xGetActionState = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.Variant {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackGetActionState gets the callback function.
+func (x *ActionGroupInterface) GetCallbackGetActionState() func(ActionGroup, string) *glib.Variant {
+	if x.xGetActionState == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xGetActionState)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) *glib.Variant {
+		return rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackChangeActionState sets the callback function.
+func (x *ActionGroupInterface) SetCallbackChangeActionState(cb func(ActionGroup, string, *glib.Variant)) {
+	if cb == nil {
+		x.xChangeActionState = 0
+	} else {
+		x.xChangeActionState = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string, ValueVarp *glib.Variant) {
+			cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp, ValueVarp)
+		})
+	}
+}
+
+// GetCallbackChangeActionState gets the callback function.
+func (x *ActionGroupInterface) GetCallbackChangeActionState() func(ActionGroup, string, *glib.Variant) {
+	if x.xChangeActionState == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string, ValueVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xChangeActionState)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string, ValueVar *glib.Variant) {
+		rawCallback(ActionGroupVar.GoPointer(), ActionNameVar, ValueVar)
+	}
+}
+
+// SetCallbackActivateAction sets the callback function.
+func (x *ActionGroupInterface) SetCallbackActivateAction(cb func(ActionGroup, string, *glib.Variant)) {
+	if cb == nil {
+		x.xActivateAction = 0
+	} else {
+		x.xActivateAction = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string, ParameterVarp *glib.Variant) {
+			cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp, ParameterVarp)
+		})
+	}
+}
+
+// GetCallbackActivateAction gets the callback function.
+func (x *ActionGroupInterface) GetCallbackActivateAction() func(ActionGroup, string, *glib.Variant) {
+	if x.xActivateAction == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string, ParameterVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xActivateAction)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string, ParameterVar *glib.Variant) {
+		rawCallback(ActionGroupVar.GoPointer(), ActionNameVar, ParameterVar)
+	}
+}
+
+// SetCallbackActionAdded sets the callback function.
+func (x *ActionGroupInterface) SetCallbackActionAdded(cb func(ActionGroup, string)) {
+	if cb == nil {
+		x.xActionAdded = 0
+	} else {
+		x.xActionAdded = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) {
+			cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackActionAdded gets the callback function.
+func (x *ActionGroupInterface) GetCallbackActionAdded() func(ActionGroup, string) {
+	if x.xActionAdded == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xActionAdded)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) {
+		rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackActionRemoved sets the callback function.
+func (x *ActionGroupInterface) SetCallbackActionRemoved(cb func(ActionGroup, string)) {
+	if cb == nil {
+		x.xActionRemoved = 0
+	} else {
+		x.xActionRemoved = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string) {
+			cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackActionRemoved gets the callback function.
+func (x *ActionGroupInterface) GetCallbackActionRemoved() func(ActionGroup, string) {
+	if x.xActionRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xActionRemoved)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string) {
+		rawCallback(ActionGroupVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackActionEnabledChanged sets the callback function.
+func (x *ActionGroupInterface) SetCallbackActionEnabledChanged(cb func(ActionGroup, string, bool)) {
+	if cb == nil {
+		x.xActionEnabledChanged = 0
+	} else {
+		x.xActionEnabledChanged = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string, EnabledVarp bool) {
+			cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp, EnabledVarp)
+		})
+	}
+}
+
+// GetCallbackActionEnabledChanged gets the callback function.
+func (x *ActionGroupInterface) GetCallbackActionEnabledChanged() func(ActionGroup, string, bool) {
+	if x.xActionEnabledChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string, EnabledVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xActionEnabledChanged)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string, EnabledVar bool) {
+		rawCallback(ActionGroupVar.GoPointer(), ActionNameVar, EnabledVar)
+	}
+}
+
+// SetCallbackActionStateChanged sets the callback function.
+func (x *ActionGroupInterface) SetCallbackActionStateChanged(cb func(ActionGroup, string, *glib.Variant)) {
+	if cb == nil {
+		x.xActionStateChanged = 0
+	} else {
+		x.xActionStateChanged = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string, StateVarp *glib.Variant) {
+			cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp, StateVarp)
+		})
+	}
+}
+
+// GetCallbackActionStateChanged gets the callback function.
+func (x *ActionGroupInterface) GetCallbackActionStateChanged() func(ActionGroup, string, *glib.Variant) {
+	if x.xActionStateChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string, StateVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xActionStateChanged)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string, StateVar *glib.Variant) {
+		rawCallback(ActionGroupVar.GoPointer(), ActionNameVar, StateVar)
+	}
+}
+
+// SetCallbackQueryAction sets the callback function.
+func (x *ActionGroupInterface) SetCallbackQueryAction(cb func(ActionGroup, string, bool, **glib.VariantType, **glib.VariantType, **glib.Variant, **glib.Variant) bool) {
+	if cb == nil {
+		x.xQueryAction = 0
+	} else {
+		x.xQueryAction = purego.NewCallback(func(ActionGroupVarp uintptr, ActionNameVarp string, EnabledVarp bool, ParameterTypeVarp **glib.VariantType, StateTypeVarp **glib.VariantType, StateHintVarp **glib.Variant, StateVarp **glib.Variant) bool {
+			return cb(&ActionGroupBase{Ptr: ActionGroupVarp}, ActionNameVarp, EnabledVarp, ParameterTypeVarp, StateTypeVarp, StateHintVarp, StateVarp)
+		})
+	}
+}
+
+// GetCallbackQueryAction gets the callback function.
+func (x *ActionGroupInterface) GetCallbackQueryAction() func(ActionGroup, string, bool, **glib.VariantType, **glib.VariantType, **glib.Variant, **glib.Variant) bool {
+	if x.xQueryAction == 0 {
+		return nil
+	}
+	var rawCallback func(ActionGroupVarp uintptr, ActionNameVarp string, EnabledVarp bool, ParameterTypeVarp **glib.VariantType, StateTypeVarp **glib.VariantType, StateHintVarp **glib.Variant, StateVarp **glib.Variant) bool
+	purego.RegisterFunc(&rawCallback, x.xQueryAction)
+	return func(ActionGroupVar ActionGroup, ActionNameVar string, EnabledVar bool, ParameterTypeVar **glib.VariantType, StateTypeVar **glib.VariantType, StateHintVar **glib.Variant, StateVar **glib.Variant) bool {
+		return rawCallback(ActionGroupVar.GoPointer(), ActionNameVar, EnabledVar, ParameterTypeVar, StateTypeVar, StateHintVar, StateVar)
+	}
 }
 
 // #GActionGroup represents a group of actions. Actions can be used to
diff --git a/v4/gio/gactionmap.go b/v4/gio/gactionmap.go
index d74603a6f2c5ba4819e0e2c1a40114e1250b6ca2..3ec872aa6e0295fc09a038bef2c12e17b1033a73 100644
--- a/v4/gio/gactionmap.go
+++ b/v4/gio/gactionmap.go
@@ -7,6 +7,7 @@ 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
 	"github.com/jwijenbergh/puregotk/pkg/core"
+	"github.com/jwijenbergh/puregotk/v4/glib"
 	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
@@ -26,13 +27,13 @@ 	_ structs.HostLayout
 
 	Name uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	ParameterType uintptr
 
 	State uintptr
 
-	ChangeState uintptr
+	xChangeState uintptr
 
 	Padding [3]uint
 }
@@ -41,21 +42,146 @@ func (x *ActionEntry) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackActivate sets the callback function.
+func (x *ActionEntry) SetCallbackActivate(cb func(*SimpleAction, *glib.Variant, uintptr)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(ActionVarp uintptr, ParameterVarp *glib.Variant, UserDataVarp uintptr) {
+			cb(SimpleActionNewFromInternalPtr(ActionVarp), ParameterVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *ActionEntry) GetCallbackActivate() func(*SimpleAction, *glib.Variant, uintptr) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr, ParameterVarp *glib.Variant, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(ActionVar *SimpleAction, ParameterVar *glib.Variant, UserDataVar uintptr) {
+		rawCallback(ActionVar.GoPointer(), ParameterVar, UserDataVar)
+	}
+}
+
+// SetCallbackChangeState sets the callback function.
+func (x *ActionEntry) SetCallbackChangeState(cb func(*SimpleAction, *glib.Variant, uintptr)) {
+	if cb == nil {
+		x.xChangeState = 0
+	} else {
+		x.xChangeState = purego.NewCallback(func(ActionVarp uintptr, ValueVarp *glib.Variant, UserDataVarp uintptr) {
+			cb(SimpleActionNewFromInternalPtr(ActionVarp), ValueVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackChangeState gets the callback function.
+func (x *ActionEntry) GetCallbackChangeState() func(*SimpleAction, *glib.Variant, uintptr) {
+	if x.xChangeState == 0 {
+		return nil
+	}
+	var rawCallback func(ActionVarp uintptr, ValueVarp *glib.Variant, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChangeState)
+	return func(ActionVar *SimpleAction, ValueVar *glib.Variant, UserDataVar uintptr) {
+		rawCallback(ActionVar.GoPointer(), ValueVar, UserDataVar)
+	}
+}
+
 // The virtual function table for #GActionMap.
 type ActionMapInterface struct {
 	_ structs.HostLayout
 
 	GIface uintptr
 
-	LookupAction uintptr
+	xLookupAction uintptr
 
-	AddAction uintptr
+	xAddAction uintptr
 
-	RemoveAction uintptr
+	xRemoveAction uintptr
 }
 
 func (x *ActionMapInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackLookupAction sets the callback function.
+func (x *ActionMapInterface) SetCallbackLookupAction(cb func(ActionMap, string) *ActionBase) {
+	if cb == nil {
+		x.xLookupAction = 0
+	} else {
+		x.xLookupAction = purego.NewCallback(func(ActionMapVarp uintptr, ActionNameVarp string) uintptr {
+			ret := cb(&ActionMapBase{Ptr: ActionMapVarp}, ActionNameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLookupAction gets the callback function.
+func (x *ActionMapInterface) GetCallbackLookupAction() func(ActionMap, string) *ActionBase {
+	if x.xLookupAction == 0 {
+		return nil
+	}
+	var rawCallback func(ActionMapVarp uintptr, ActionNameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLookupAction)
+	return func(ActionMapVar ActionMap, ActionNameVar string) *ActionBase {
+		rawRet := rawCallback(ActionMapVar.GoPointer(), ActionNameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &ActionBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackAddAction sets the callback function.
+func (x *ActionMapInterface) SetCallbackAddAction(cb func(ActionMap, Action)) {
+	if cb == nil {
+		x.xAddAction = 0
+	} else {
+		x.xAddAction = purego.NewCallback(func(ActionMapVarp uintptr, ActionVarp uintptr) {
+			cb(&ActionMapBase{Ptr: ActionMapVarp}, &ActionBase{Ptr: ActionVarp})
+		})
+	}
+}
+
+// GetCallbackAddAction gets the callback function.
+func (x *ActionMapInterface) GetCallbackAddAction() func(ActionMap, Action) {
+	if x.xAddAction == 0 {
+		return nil
+	}
+	var rawCallback func(ActionMapVarp uintptr, ActionVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAddAction)
+	return func(ActionMapVar ActionMap, ActionVar Action) {
+		rawCallback(ActionMapVar.GoPointer(), ActionVar.GoPointer())
+	}
+}
+
+// SetCallbackRemoveAction sets the callback function.
+func (x *ActionMapInterface) SetCallbackRemoveAction(cb func(ActionMap, string)) {
+	if cb == nil {
+		x.xRemoveAction = 0
+	} else {
+		x.xRemoveAction = purego.NewCallback(func(ActionMapVarp uintptr, ActionNameVarp string) {
+			cb(&ActionMapBase{Ptr: ActionMapVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackRemoveAction gets the callback function.
+func (x *ActionMapInterface) GetCallbackRemoveAction() func(ActionMap, string) {
+	if x.xRemoveAction == 0 {
+		return nil
+	}
+	var rawCallback func(ActionMapVarp uintptr, ActionNameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xRemoveAction)
+	return func(ActionMapVar ActionMap, ActionNameVar string) {
+		rawCallback(ActionMapVar.GoPointer(), ActionNameVar)
+	}
 }
 
 // The GActionMap interface is implemented by #GActionGroup
diff --git a/v4/gio/gappinfo.go b/v4/gio/gappinfo.go
index 444d73917d47cfc8e613144529a28b3fa2c97acf..9339e08637c11ac27bb27ca65af433a60025b36b 100644
--- a/v4/gio/gappinfo.go
+++ b/v4/gio/gappinfo.go
@@ -18,87 +18,866 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Dup uintptr
+	xDup uintptr
 
-	Equal uintptr
+	xEqual uintptr
 
-	GetId uintptr
+	xGetId uintptr
 
-	GetName uintptr
+	xGetName uintptr
 
-	GetDescription uintptr
+	xGetDescription uintptr
 
-	GetExecutable uintptr
+	xGetExecutable uintptr
 
-	GetIcon uintptr
+	xGetIcon uintptr
 
-	Launch uintptr
+	xLaunch uintptr
 
-	SupportsUris uintptr
+	xSupportsUris uintptr
 
-	SupportsFiles uintptr
+	xSupportsFiles uintptr
 
-	LaunchUris uintptr
+	xLaunchUris uintptr
 
-	ShouldShow uintptr
+	xShouldShow uintptr
 
-	SetAsDefaultForType uintptr
+	xSetAsDefaultForType uintptr
 
-	SetAsDefaultForExtension uintptr
+	xSetAsDefaultForExtension uintptr
 
-	AddSupportsType uintptr
+	xAddSupportsType uintptr
 
-	CanRemoveSupportsType uintptr
+	xCanRemoveSupportsType uintptr
 
-	RemoveSupportsType uintptr
+	xRemoveSupportsType uintptr
 
-	CanDelete uintptr
+	xCanDelete uintptr
 
-	DoDelete uintptr
+	xDoDelete uintptr
 
-	GetCommandline uintptr
+	xGetCommandline uintptr
 
-	GetDisplayName uintptr
+	xGetDisplayName uintptr
 
-	SetAsLastUsedForType uintptr
+	xSetAsLastUsedForType uintptr
 
-	GetSupportedTypes uintptr
+	xGetSupportedTypes uintptr
 
-	LaunchUrisAsync uintptr
+	xLaunchUrisAsync uintptr
 
-	LaunchUrisFinish uintptr
+	xLaunchUrisFinish uintptr
 }
 
 func (x *AppInfoIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackDup sets the callback function.
+func (x *AppInfoIface) SetCallbackDup(cb func(AppInfo) *AppInfoBase) {
+	if cb == nil {
+		x.xDup = 0
+	} else {
+		x.xDup = purego.NewCallback(func(AppinfoVarp uintptr) uintptr {
+			ret := cb(&AppInfoBase{Ptr: AppinfoVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackDup gets the callback function.
+func (x *AppInfoIface) GetCallbackDup() func(AppInfo) *AppInfoBase {
+	if x.xDup == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xDup)
+	return func(AppinfoVar AppInfo) *AppInfoBase {
+		rawRet := rawCallback(AppinfoVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &AppInfoBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackEqual sets the callback function.
+func (x *AppInfoIface) SetCallbackEqual(cb func(AppInfo, AppInfo) bool) {
+	if cb == nil {
+		x.xEqual = 0
+	} else {
+		x.xEqual = purego.NewCallback(func(Appinfo1Varp uintptr, Appinfo2Varp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: Appinfo1Varp}, &AppInfoBase{Ptr: Appinfo2Varp})
+		})
+	}
+}
+
+// GetCallbackEqual gets the callback function.
+func (x *AppInfoIface) GetCallbackEqual() func(AppInfo, AppInfo) bool {
+	if x.xEqual == 0 {
+		return nil
+	}
+	var rawCallback func(Appinfo1Varp uintptr, Appinfo2Varp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEqual)
+	return func(Appinfo1Var AppInfo, Appinfo2Var AppInfo) bool {
+		return rawCallback(Appinfo1Var.GoPointer(), Appinfo2Var.GoPointer())
+	}
+}
+
+// SetCallbackGetId sets the callback function.
+func (x *AppInfoIface) SetCallbackGetId(cb func(AppInfo) string) {
+	if cb == nil {
+		x.xGetId = 0
+	} else {
+		x.xGetId = purego.NewCallback(func(AppinfoVarp uintptr) string {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackGetId gets the callback function.
+func (x *AppInfoIface) GetCallbackGetId() func(AppInfo) string {
+	if x.xGetId == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetId)
+	return func(AppinfoVar AppInfo) string {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackGetName sets the callback function.
+func (x *AppInfoIface) SetCallbackGetName(cb func(AppInfo) string) {
+	if cb == nil {
+		x.xGetName = 0
+	} else {
+		x.xGetName = purego.NewCallback(func(AppinfoVarp uintptr) string {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackGetName gets the callback function.
+func (x *AppInfoIface) GetCallbackGetName() func(AppInfo) string {
+	if x.xGetName == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetName)
+	return func(AppinfoVar AppInfo) string {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackGetDescription sets the callback function.
+func (x *AppInfoIface) SetCallbackGetDescription(cb func(AppInfo) string) {
+	if cb == nil {
+		x.xGetDescription = 0
+	} else {
+		x.xGetDescription = purego.NewCallback(func(AppinfoVarp uintptr) string {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackGetDescription gets the callback function.
+func (x *AppInfoIface) GetCallbackGetDescription() func(AppInfo) string {
+	if x.xGetDescription == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetDescription)
+	return func(AppinfoVar AppInfo) string {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackGetExecutable sets the callback function.
+func (x *AppInfoIface) SetCallbackGetExecutable(cb func(AppInfo) string) {
+	if cb == nil {
+		x.xGetExecutable = 0
+	} else {
+		x.xGetExecutable = purego.NewCallback(func(AppinfoVarp uintptr) string {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackGetExecutable gets the callback function.
+func (x *AppInfoIface) GetCallbackGetExecutable() func(AppInfo) string {
+	if x.xGetExecutable == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetExecutable)
+	return func(AppinfoVar AppInfo) string {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIcon sets the callback function.
+func (x *AppInfoIface) SetCallbackGetIcon(cb func(AppInfo) *IconBase) {
+	if cb == nil {
+		x.xGetIcon = 0
+	} else {
+		x.xGetIcon = purego.NewCallback(func(AppinfoVarp uintptr) uintptr {
+			ret := cb(&AppInfoBase{Ptr: AppinfoVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetIcon gets the callback function.
+func (x *AppInfoIface) GetCallbackGetIcon() func(AppInfo) *IconBase {
+	if x.xGetIcon == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetIcon)
+	return func(AppinfoVar AppInfo) *IconBase {
+		rawRet := rawCallback(AppinfoVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackLaunch sets the callback function.
+func (x *AppInfoIface) SetCallbackLaunch(cb func(AppInfo, *glib.List, *AppLaunchContext) bool) {
+	if cb == nil {
+		x.xLaunch = 0
+	} else {
+		x.xLaunch = purego.NewCallback(func(AppinfoVarp uintptr, FilesVarp *glib.List, ContextVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, FilesVarp, AppLaunchContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackLaunch gets the callback function.
+func (x *AppInfoIface) GetCallbackLaunch() func(AppInfo, *glib.List, *AppLaunchContext) bool {
+	if x.xLaunch == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, FilesVarp *glib.List, ContextVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xLaunch)
+	return func(AppinfoVar AppInfo, FilesVar *glib.List, ContextVar *AppLaunchContext) bool {
+		return rawCallback(AppinfoVar.GoPointer(), FilesVar, ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackSupportsUris sets the callback function.
+func (x *AppInfoIface) SetCallbackSupportsUris(cb func(AppInfo) bool) {
+	if cb == nil {
+		x.xSupportsUris = 0
+	} else {
+		x.xSupportsUris = purego.NewCallback(func(AppinfoVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackSupportsUris gets the callback function.
+func (x *AppInfoIface) GetCallbackSupportsUris() func(AppInfo) bool {
+	if x.xSupportsUris == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSupportsUris)
+	return func(AppinfoVar AppInfo) bool {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackSupportsFiles sets the callback function.
+func (x *AppInfoIface) SetCallbackSupportsFiles(cb func(AppInfo) bool) {
+	if cb == nil {
+		x.xSupportsFiles = 0
+	} else {
+		x.xSupportsFiles = purego.NewCallback(func(AppinfoVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackSupportsFiles gets the callback function.
+func (x *AppInfoIface) GetCallbackSupportsFiles() func(AppInfo) bool {
+	if x.xSupportsFiles == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSupportsFiles)
+	return func(AppinfoVar AppInfo) bool {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackLaunchUris sets the callback function.
+func (x *AppInfoIface) SetCallbackLaunchUris(cb func(AppInfo, *glib.List, *AppLaunchContext) bool) {
+	if cb == nil {
+		x.xLaunchUris = 0
+	} else {
+		x.xLaunchUris = purego.NewCallback(func(AppinfoVarp uintptr, UrisVarp *glib.List, ContextVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, UrisVarp, AppLaunchContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackLaunchUris gets the callback function.
+func (x *AppInfoIface) GetCallbackLaunchUris() func(AppInfo, *glib.List, *AppLaunchContext) bool {
+	if x.xLaunchUris == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, UrisVarp *glib.List, ContextVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xLaunchUris)
+	return func(AppinfoVar AppInfo, UrisVar *glib.List, ContextVar *AppLaunchContext) bool {
+		return rawCallback(AppinfoVar.GoPointer(), UrisVar, ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackShouldShow sets the callback function.
+func (x *AppInfoIface) SetCallbackShouldShow(cb func(AppInfo) bool) {
+	if cb == nil {
+		x.xShouldShow = 0
+	} else {
+		x.xShouldShow = purego.NewCallback(func(AppinfoVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackShouldShow gets the callback function.
+func (x *AppInfoIface) GetCallbackShouldShow() func(AppInfo) bool {
+	if x.xShouldShow == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xShouldShow)
+	return func(AppinfoVar AppInfo) bool {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackSetAsDefaultForType sets the callback function.
+func (x *AppInfoIface) SetCallbackSetAsDefaultForType(cb func(AppInfo, string) bool) {
+	if cb == nil {
+		x.xSetAsDefaultForType = 0
+	} else {
+		x.xSetAsDefaultForType = purego.NewCallback(func(AppinfoVarp uintptr, ContentTypeVarp string) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, ContentTypeVarp)
+		})
+	}
+}
+
+// GetCallbackSetAsDefaultForType gets the callback function.
+func (x *AppInfoIface) GetCallbackSetAsDefaultForType() func(AppInfo, string) bool {
+	if x.xSetAsDefaultForType == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, ContentTypeVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xSetAsDefaultForType)
+	return func(AppinfoVar AppInfo, ContentTypeVar string) bool {
+		return rawCallback(AppinfoVar.GoPointer(), ContentTypeVar)
+	}
+}
+
+// SetCallbackSetAsDefaultForExtension sets the callback function.
+func (x *AppInfoIface) SetCallbackSetAsDefaultForExtension(cb func(AppInfo, string) bool) {
+	if cb == nil {
+		x.xSetAsDefaultForExtension = 0
+	} else {
+		x.xSetAsDefaultForExtension = purego.NewCallback(func(AppinfoVarp uintptr, ExtensionVarp string) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, ExtensionVarp)
+		})
+	}
+}
+
+// GetCallbackSetAsDefaultForExtension gets the callback function.
+func (x *AppInfoIface) GetCallbackSetAsDefaultForExtension() func(AppInfo, string) bool {
+	if x.xSetAsDefaultForExtension == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, ExtensionVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xSetAsDefaultForExtension)
+	return func(AppinfoVar AppInfo, ExtensionVar string) bool {
+		return rawCallback(AppinfoVar.GoPointer(), ExtensionVar)
+	}
+}
+
+// SetCallbackAddSupportsType sets the callback function.
+func (x *AppInfoIface) SetCallbackAddSupportsType(cb func(AppInfo, string) bool) {
+	if cb == nil {
+		x.xAddSupportsType = 0
+	} else {
+		x.xAddSupportsType = purego.NewCallback(func(AppinfoVarp uintptr, ContentTypeVarp string) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, ContentTypeVarp)
+		})
+	}
+}
+
+// GetCallbackAddSupportsType gets the callback function.
+func (x *AppInfoIface) GetCallbackAddSupportsType() func(AppInfo, string) bool {
+	if x.xAddSupportsType == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, ContentTypeVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xAddSupportsType)
+	return func(AppinfoVar AppInfo, ContentTypeVar string) bool {
+		return rawCallback(AppinfoVar.GoPointer(), ContentTypeVar)
+	}
+}
+
+// SetCallbackCanRemoveSupportsType sets the callback function.
+func (x *AppInfoIface) SetCallbackCanRemoveSupportsType(cb func(AppInfo) bool) {
+	if cb == nil {
+		x.xCanRemoveSupportsType = 0
+	} else {
+		x.xCanRemoveSupportsType = purego.NewCallback(func(AppinfoVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackCanRemoveSupportsType gets the callback function.
+func (x *AppInfoIface) GetCallbackCanRemoveSupportsType() func(AppInfo) bool {
+	if x.xCanRemoveSupportsType == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanRemoveSupportsType)
+	return func(AppinfoVar AppInfo) bool {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackRemoveSupportsType sets the callback function.
+func (x *AppInfoIface) SetCallbackRemoveSupportsType(cb func(AppInfo, string) bool) {
+	if cb == nil {
+		x.xRemoveSupportsType = 0
+	} else {
+		x.xRemoveSupportsType = purego.NewCallback(func(AppinfoVarp uintptr, ContentTypeVarp string) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, ContentTypeVarp)
+		})
+	}
+}
+
+// GetCallbackRemoveSupportsType gets the callback function.
+func (x *AppInfoIface) GetCallbackRemoveSupportsType() func(AppInfo, string) bool {
+	if x.xRemoveSupportsType == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, ContentTypeVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xRemoveSupportsType)
+	return func(AppinfoVar AppInfo, ContentTypeVar string) bool {
+		return rawCallback(AppinfoVar.GoPointer(), ContentTypeVar)
+	}
+}
+
+// SetCallbackCanDelete sets the callback function.
+func (x *AppInfoIface) SetCallbackCanDelete(cb func(AppInfo) bool) {
+	if cb == nil {
+		x.xCanDelete = 0
+	} else {
+		x.xCanDelete = purego.NewCallback(func(AppinfoVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackCanDelete gets the callback function.
+func (x *AppInfoIface) GetCallbackCanDelete() func(AppInfo) bool {
+	if x.xCanDelete == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanDelete)
+	return func(AppinfoVar AppInfo) bool {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackDoDelete sets the callback function.
+func (x *AppInfoIface) SetCallbackDoDelete(cb func(AppInfo) bool) {
+	if cb == nil {
+		x.xDoDelete = 0
+	} else {
+		x.xDoDelete = purego.NewCallback(func(AppinfoVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackDoDelete gets the callback function.
+func (x *AppInfoIface) GetCallbackDoDelete() func(AppInfo) bool {
+	if x.xDoDelete == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xDoDelete)
+	return func(AppinfoVar AppInfo) bool {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackGetCommandline sets the callback function.
+func (x *AppInfoIface) SetCallbackGetCommandline(cb func(AppInfo) string) {
+	if cb == nil {
+		x.xGetCommandline = 0
+	} else {
+		x.xGetCommandline = purego.NewCallback(func(AppinfoVarp uintptr) string {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackGetCommandline gets the callback function.
+func (x *AppInfoIface) GetCallbackGetCommandline() func(AppInfo) string {
+	if x.xGetCommandline == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetCommandline)
+	return func(AppinfoVar AppInfo) string {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackGetDisplayName sets the callback function.
+func (x *AppInfoIface) SetCallbackGetDisplayName(cb func(AppInfo) string) {
+	if cb == nil {
+		x.xGetDisplayName = 0
+	} else {
+		x.xGetDisplayName = purego.NewCallback(func(AppinfoVarp uintptr) string {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackGetDisplayName gets the callback function.
+func (x *AppInfoIface) GetCallbackGetDisplayName() func(AppInfo) string {
+	if x.xGetDisplayName == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetDisplayName)
+	return func(AppinfoVar AppInfo) string {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackSetAsLastUsedForType sets the callback function.
+func (x *AppInfoIface) SetCallbackSetAsLastUsedForType(cb func(AppInfo, string) bool) {
+	if cb == nil {
+		x.xSetAsLastUsedForType = 0
+	} else {
+		x.xSetAsLastUsedForType = purego.NewCallback(func(AppinfoVarp uintptr, ContentTypeVarp string) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, ContentTypeVarp)
+		})
+	}
+}
+
+// GetCallbackSetAsLastUsedForType gets the callback function.
+func (x *AppInfoIface) GetCallbackSetAsLastUsedForType() func(AppInfo, string) bool {
+	if x.xSetAsLastUsedForType == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, ContentTypeVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xSetAsLastUsedForType)
+	return func(AppinfoVar AppInfo, ContentTypeVar string) bool {
+		return rawCallback(AppinfoVar.GoPointer(), ContentTypeVar)
+	}
+}
+
+// SetCallbackGetSupportedTypes sets the callback function.
+func (x *AppInfoIface) SetCallbackGetSupportedTypes(cb func(AppInfo) []string) {
+	if cb == nil {
+		x.xGetSupportedTypes = 0
+	} else {
+		x.xGetSupportedTypes = purego.NewCallback(func(AppinfoVarp uintptr) []string {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp})
+		})
+	}
+}
+
+// GetCallbackGetSupportedTypes gets the callback function.
+func (x *AppInfoIface) GetCallbackGetSupportedTypes() func(AppInfo) []string {
+	if x.xGetSupportedTypes == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xGetSupportedTypes)
+	return func(AppinfoVar AppInfo) []string {
+		return rawCallback(AppinfoVar.GoPointer())
+	}
+}
+
+// SetCallbackLaunchUrisAsync sets the callback function.
+func (x *AppInfoIface) SetCallbackLaunchUrisAsync(cb func(AppInfo, *glib.List, *AppLaunchContext, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLaunchUrisAsync = 0
+	} else {
+		x.xLaunchUrisAsync = purego.NewCallback(func(AppinfoVarp uintptr, UrisVarp *glib.List, ContextVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&AppInfoBase{Ptr: AppinfoVarp}, UrisVarp, AppLaunchContextNewFromInternalPtr(ContextVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLaunchUrisAsync gets the callback function.
+func (x *AppInfoIface) GetCallbackLaunchUrisAsync() func(AppInfo, *glib.List, *AppLaunchContext, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLaunchUrisAsync == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, UrisVarp *glib.List, ContextVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLaunchUrisAsync)
+	return func(AppinfoVar AppInfo, UrisVar *glib.List, ContextVar *AppLaunchContext, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(AppinfoVar.GoPointer(), UrisVar, ContextVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLaunchUrisFinish sets the callback function.
+func (x *AppInfoIface) SetCallbackLaunchUrisFinish(cb func(AppInfo, AsyncResult) bool) {
+	if cb == nil {
+		x.xLaunchUrisFinish = 0
+	} else {
+		x.xLaunchUrisFinish = purego.NewCallback(func(AppinfoVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&AppInfoBase{Ptr: AppinfoVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLaunchUrisFinish gets the callback function.
+func (x *AppInfoIface) GetCallbackLaunchUrisFinish() func(AppInfo, AsyncResult) bool {
+	if x.xLaunchUrisFinish == 0 {
+		return nil
+	}
+	var rawCallback func(AppinfoVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xLaunchUrisFinish)
+	return func(AppinfoVar AppInfo, ResultVar AsyncResult) bool {
+		return rawCallback(AppinfoVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
 type AppLaunchContextClass struct {
 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetDisplay uintptr
+	xGetDisplay uintptr
 
-	GetStartupNotifyId uintptr
+	xGetStartupNotifyId uintptr
 
-	LaunchFailed uintptr
+	xLaunchFailed uintptr
 
-	Launched uintptr
+	xLaunched uintptr
 
-	LaunchStarted uintptr
+	xLaunchStarted uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 }
 
 func (x *AppLaunchContextClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackGetDisplay sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackGetDisplay(cb func(*AppLaunchContext, AppInfo, *glib.List) string) {
+	if cb == nil {
+		x.xGetDisplay = 0
+	} else {
+		x.xGetDisplay = purego.NewCallback(func(ContextVarp uintptr, InfoVarp uintptr, FilesVarp *glib.List) string {
+			return cb(AppLaunchContextNewFromInternalPtr(ContextVarp), &AppInfoBase{Ptr: InfoVarp}, FilesVarp)
+		})
+	}
+}
+
+// GetCallbackGetDisplay gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackGetDisplay() func(*AppLaunchContext, AppInfo, *glib.List) string {
+	if x.xGetDisplay == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, InfoVarp uintptr, FilesVarp *glib.List) string
+	purego.RegisterFunc(&rawCallback, x.xGetDisplay)
+	return func(ContextVar *AppLaunchContext, InfoVar AppInfo, FilesVar *glib.List) string {
+		return rawCallback(ContextVar.GoPointer(), InfoVar.GoPointer(), FilesVar)
+	}
+}
+
+// SetCallbackGetStartupNotifyId sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackGetStartupNotifyId(cb func(*AppLaunchContext, AppInfo, *glib.List) string) {
+	if cb == nil {
+		x.xGetStartupNotifyId = 0
+	} else {
+		x.xGetStartupNotifyId = purego.NewCallback(func(ContextVarp uintptr, InfoVarp uintptr, FilesVarp *glib.List) string {
+			return cb(AppLaunchContextNewFromInternalPtr(ContextVarp), &AppInfoBase{Ptr: InfoVarp}, FilesVarp)
+		})
+	}
+}
+
+// GetCallbackGetStartupNotifyId gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackGetStartupNotifyId() func(*AppLaunchContext, AppInfo, *glib.List) string {
+	if x.xGetStartupNotifyId == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, InfoVarp uintptr, FilesVarp *glib.List) string
+	purego.RegisterFunc(&rawCallback, x.xGetStartupNotifyId)
+	return func(ContextVar *AppLaunchContext, InfoVar AppInfo, FilesVar *glib.List) string {
+		return rawCallback(ContextVar.GoPointer(), InfoVar.GoPointer(), FilesVar)
+	}
+}
+
+// SetCallbackLaunchFailed sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackLaunchFailed(cb func(*AppLaunchContext, string)) {
+	if cb == nil {
+		x.xLaunchFailed = 0
+	} else {
+		x.xLaunchFailed = purego.NewCallback(func(ContextVarp uintptr, StartupNotifyIdVarp string) {
+			cb(AppLaunchContextNewFromInternalPtr(ContextVarp), StartupNotifyIdVarp)
+		})
+	}
+}
+
+// GetCallbackLaunchFailed gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackLaunchFailed() func(*AppLaunchContext, string) {
+	if x.xLaunchFailed == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, StartupNotifyIdVarp string)
+	purego.RegisterFunc(&rawCallback, x.xLaunchFailed)
+	return func(ContextVar *AppLaunchContext, StartupNotifyIdVar string) {
+		rawCallback(ContextVar.GoPointer(), StartupNotifyIdVar)
+	}
+}
+
+// SetCallbackLaunched sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackLaunched(cb func(*AppLaunchContext, AppInfo, *glib.Variant)) {
+	if cb == nil {
+		x.xLaunched = 0
+	} else {
+		x.xLaunched = purego.NewCallback(func(ContextVarp uintptr, InfoVarp uintptr, PlatformDataVarp *glib.Variant) {
+			cb(AppLaunchContextNewFromInternalPtr(ContextVarp), &AppInfoBase{Ptr: InfoVarp}, PlatformDataVarp)
+		})
+	}
+}
+
+// GetCallbackLaunched gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackLaunched() func(*AppLaunchContext, AppInfo, *glib.Variant) {
+	if x.xLaunched == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, InfoVarp uintptr, PlatformDataVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xLaunched)
+	return func(ContextVar *AppLaunchContext, InfoVar AppInfo, PlatformDataVar *glib.Variant) {
+		rawCallback(ContextVar.GoPointer(), InfoVar.GoPointer(), PlatformDataVar)
+	}
+}
+
+// SetCallbackLaunchStarted sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackLaunchStarted(cb func(*AppLaunchContext, AppInfo, *glib.Variant)) {
+	if cb == nil {
+		x.xLaunchStarted = 0
+	} else {
+		x.xLaunchStarted = purego.NewCallback(func(ContextVarp uintptr, InfoVarp uintptr, PlatformDataVarp *glib.Variant) {
+			cb(AppLaunchContextNewFromInternalPtr(ContextVarp), &AppInfoBase{Ptr: InfoVarp}, PlatformDataVarp)
+		})
+	}
+}
+
+// GetCallbackLaunchStarted gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackLaunchStarted() func(*AppLaunchContext, AppInfo, *glib.Variant) {
+	if x.xLaunchStarted == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, InfoVarp uintptr, PlatformDataVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xLaunchStarted)
+	return func(ContextVar *AppLaunchContext, InfoVar AppInfo, PlatformDataVar *glib.Variant) {
+		rawCallback(ContextVar.GoPointer(), InfoVar.GoPointer(), PlatformDataVar)
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *AppLaunchContextClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *AppLaunchContextClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
 type AppLaunchContextPrivate struct {
 	_ structs.HostLayout
 }
@@ -160,7 +939,7 @@ // different ideas of what a given URI means.
 type AppInfo interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	AddSupportsType(ContentTypeVar string) bool
+	AddSupportsType(ContentTypeVar string) (bool, error)
 	CanDelete() bool
 	CanRemoveSupportsType() bool
 	Delete() bool
@@ -174,14 +953,14 @@ 	GetIcon() *IconBase
 	GetId() string
 	GetName() string
 	GetSupportedTypes() []string
-	Launch(FilesVar *glib.List, ContextVar *AppLaunchContext) bool
-	LaunchUris(UrisVar *glib.List, ContextVar *AppLaunchContext) bool
+	Launch(FilesVar *glib.List, ContextVar *AppLaunchContext) (bool, error)
+	LaunchUris(UrisVar *glib.List, ContextVar *AppLaunchContext) (bool, error)
 	LaunchUrisAsync(UrisVar *glib.List, ContextVar *AppLaunchContext, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	LaunchUrisFinish(ResultVar AsyncResult) bool
-	RemoveSupportsType(ContentTypeVar string) bool
-	SetAsDefaultForExtension(ExtensionVar string) bool
-	SetAsDefaultForType(ContentTypeVar string) bool
-	SetAsLastUsedForType(ContentTypeVar string) bool
+	LaunchUrisFinish(ResultVar AsyncResult) (bool, error)
+	RemoveSupportsType(ContentTypeVar string) (bool, error)
+	SetAsDefaultForExtension(ExtensionVar string) (bool, error)
+	SetAsDefaultForType(ContentTypeVar string) (bool, error)
+	SetAsLastUsedForType(ContentTypeVar string) (bool, error)
 	ShouldShow() bool
 	SupportsFiles() bool
 	SupportsUris() bool
diff --git a/v4/gio/gapplication.go b/v4/gio/gapplication.go
index 6afd9f470b49025df6ec357e1b2f9b31ecb240c3..68736298bf7882cfb7c9e6c4e199dae635278353 100644
--- a/v4/gio/gapplication.go
+++ b/v4/gio/gapplication.go
@@ -18,41 +18,386 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Startup uintptr
+	xStartup uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
-	Open uintptr
+	xOpen uintptr
 
-	CommandLine uintptr
+	xCommandLine uintptr
 
-	LocalCommandLine uintptr
+	xLocalCommandLine uintptr
 
-	BeforeEmit uintptr
+	xBeforeEmit uintptr
 
-	AfterEmit uintptr
+	xAfterEmit uintptr
 
-	AddPlatformData uintptr
+	xAddPlatformData uintptr
 
-	QuitMainloop uintptr
+	xQuitMainloop uintptr
 
-	RunMainloop uintptr
+	xRunMainloop uintptr
 
-	Shutdown uintptr
+	xShutdown uintptr
 
-	DbusRegister uintptr
+	xDbusRegister uintptr
 
-	DbusUnregister uintptr
+	xDbusUnregister uintptr
 
-	HandleLocalOptions uintptr
+	xHandleLocalOptions uintptr
 
-	NameLost uintptr
+	xNameLost uintptr
 
 	Padding [7]uintptr
 }
 
 func (x *ApplicationClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackStartup sets the callback function.
+func (x *ApplicationClass) SetCallbackStartup(cb func(*Application)) {
+	if cb == nil {
+		x.xStartup = 0
+	} else {
+		x.xStartup = purego.NewCallback(func(ApplicationVarp uintptr) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp))
+		})
+	}
+}
+
+// GetCallbackStartup gets the callback function.
+func (x *ApplicationClass) GetCallbackStartup() func(*Application) {
+	if x.xStartup == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStartup)
+	return func(ApplicationVar *Application) {
+		rawCallback(ApplicationVar.GoPointer())
+	}
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *ApplicationClass) SetCallbackActivate(cb func(*Application)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(ApplicationVarp uintptr) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *ApplicationClass) GetCallbackActivate() func(*Application) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(ApplicationVar *Application) {
+		rawCallback(ApplicationVar.GoPointer())
+	}
+}
+
+// SetCallbackOpen sets the callback function.
+func (x *ApplicationClass) SetCallbackOpen(cb func(*Application, uintptr, int, string)) {
+	if cb == nil {
+		x.xOpen = 0
+	} else {
+		x.xOpen = purego.NewCallback(func(ApplicationVarp uintptr, FilesVarp uintptr, NFilesVarp int, HintVarp string) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp), FilesVarp, NFilesVarp, HintVarp)
+		})
+	}
+}
+
+// GetCallbackOpen gets the callback function.
+func (x *ApplicationClass) GetCallbackOpen() func(*Application, uintptr, int, string) {
+	if x.xOpen == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, FilesVarp uintptr, NFilesVarp int, HintVarp string)
+	purego.RegisterFunc(&rawCallback, x.xOpen)
+	return func(ApplicationVar *Application, FilesVar uintptr, NFilesVar int, HintVar string) {
+		rawCallback(ApplicationVar.GoPointer(), FilesVar, NFilesVar, HintVar)
+	}
+}
+
+// SetCallbackCommandLine sets the callback function.
+func (x *ApplicationClass) SetCallbackCommandLine(cb func(*Application, *ApplicationCommandLine) int) {
+	if cb == nil {
+		x.xCommandLine = 0
+	} else {
+		x.xCommandLine = purego.NewCallback(func(ApplicationVarp uintptr, CommandLineVarp uintptr) int {
+			return cb(ApplicationNewFromInternalPtr(ApplicationVarp), ApplicationCommandLineNewFromInternalPtr(CommandLineVarp))
+		})
+	}
+}
+
+// GetCallbackCommandLine gets the callback function.
+func (x *ApplicationClass) GetCallbackCommandLine() func(*Application, *ApplicationCommandLine) int {
+	if x.xCommandLine == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, CommandLineVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xCommandLine)
+	return func(ApplicationVar *Application, CommandLineVar *ApplicationCommandLine) int {
+		return rawCallback(ApplicationVar.GoPointer(), CommandLineVar.GoPointer())
+	}
+}
+
+// SetCallbackLocalCommandLine sets the callback function.
+func (x *ApplicationClass) SetCallbackLocalCommandLine(cb func(*Application, []string, int) bool) {
+	if cb == nil {
+		x.xLocalCommandLine = 0
+	} else {
+		x.xLocalCommandLine = purego.NewCallback(func(ApplicationVarp uintptr, ArgumentsVarp []string, ExitStatusVarp int) bool {
+			return cb(ApplicationNewFromInternalPtr(ApplicationVarp), ArgumentsVarp, ExitStatusVarp)
+		})
+	}
+}
+
+// GetCallbackLocalCommandLine gets the callback function.
+func (x *ApplicationClass) GetCallbackLocalCommandLine() func(*Application, []string, int) bool {
+	if x.xLocalCommandLine == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, ArgumentsVarp []string, ExitStatusVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xLocalCommandLine)
+	return func(ApplicationVar *Application, ArgumentsVar []string, ExitStatusVar int) bool {
+		return rawCallback(ApplicationVar.GoPointer(), ArgumentsVar, ExitStatusVar)
+	}
+}
+
+// SetCallbackBeforeEmit sets the callback function.
+func (x *ApplicationClass) SetCallbackBeforeEmit(cb func(*Application, *glib.Variant)) {
+	if cb == nil {
+		x.xBeforeEmit = 0
+	} else {
+		x.xBeforeEmit = purego.NewCallback(func(ApplicationVarp uintptr, PlatformDataVarp *glib.Variant) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp), PlatformDataVarp)
+		})
+	}
+}
+
+// GetCallbackBeforeEmit gets the callback function.
+func (x *ApplicationClass) GetCallbackBeforeEmit() func(*Application, *glib.Variant) {
+	if x.xBeforeEmit == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, PlatformDataVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xBeforeEmit)
+	return func(ApplicationVar *Application, PlatformDataVar *glib.Variant) {
+		rawCallback(ApplicationVar.GoPointer(), PlatformDataVar)
+	}
+}
+
+// SetCallbackAfterEmit sets the callback function.
+func (x *ApplicationClass) SetCallbackAfterEmit(cb func(*Application, *glib.Variant)) {
+	if cb == nil {
+		x.xAfterEmit = 0
+	} else {
+		x.xAfterEmit = purego.NewCallback(func(ApplicationVarp uintptr, PlatformDataVarp *glib.Variant) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp), PlatformDataVarp)
+		})
+	}
+}
+
+// GetCallbackAfterEmit gets the callback function.
+func (x *ApplicationClass) GetCallbackAfterEmit() func(*Application, *glib.Variant) {
+	if x.xAfterEmit == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, PlatformDataVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xAfterEmit)
+	return func(ApplicationVar *Application, PlatformDataVar *glib.Variant) {
+		rawCallback(ApplicationVar.GoPointer(), PlatformDataVar)
+	}
+}
+
+// SetCallbackAddPlatformData sets the callback function.
+func (x *ApplicationClass) SetCallbackAddPlatformData(cb func(*Application, *glib.VariantBuilder)) {
+	if cb == nil {
+		x.xAddPlatformData = 0
+	} else {
+		x.xAddPlatformData = purego.NewCallback(func(ApplicationVarp uintptr, BuilderVarp *glib.VariantBuilder) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp), BuilderVarp)
+		})
+	}
+}
+
+// GetCallbackAddPlatformData gets the callback function.
+func (x *ApplicationClass) GetCallbackAddPlatformData() func(*Application, *glib.VariantBuilder) {
+	if x.xAddPlatformData == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, BuilderVarp *glib.VariantBuilder)
+	purego.RegisterFunc(&rawCallback, x.xAddPlatformData)
+	return func(ApplicationVar *Application, BuilderVar *glib.VariantBuilder) {
+		rawCallback(ApplicationVar.GoPointer(), BuilderVar)
+	}
+}
+
+// SetCallbackQuitMainloop sets the callback function.
+func (x *ApplicationClass) SetCallbackQuitMainloop(cb func(*Application)) {
+	if cb == nil {
+		x.xQuitMainloop = 0
+	} else {
+		x.xQuitMainloop = purego.NewCallback(func(ApplicationVarp uintptr) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp))
+		})
+	}
+}
+
+// GetCallbackQuitMainloop gets the callback function.
+func (x *ApplicationClass) GetCallbackQuitMainloop() func(*Application) {
+	if x.xQuitMainloop == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xQuitMainloop)
+	return func(ApplicationVar *Application) {
+		rawCallback(ApplicationVar.GoPointer())
+	}
+}
+
+// SetCallbackRunMainloop sets the callback function.
+func (x *ApplicationClass) SetCallbackRunMainloop(cb func(*Application)) {
+	if cb == nil {
+		x.xRunMainloop = 0
+	} else {
+		x.xRunMainloop = purego.NewCallback(func(ApplicationVarp uintptr) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp))
+		})
+	}
+}
+
+// GetCallbackRunMainloop gets the callback function.
+func (x *ApplicationClass) GetCallbackRunMainloop() func(*Application) {
+	if x.xRunMainloop == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRunMainloop)
+	return func(ApplicationVar *Application) {
+		rawCallback(ApplicationVar.GoPointer())
+	}
+}
+
+// SetCallbackShutdown sets the callback function.
+func (x *ApplicationClass) SetCallbackShutdown(cb func(*Application)) {
+	if cb == nil {
+		x.xShutdown = 0
+	} else {
+		x.xShutdown = purego.NewCallback(func(ApplicationVarp uintptr) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp))
+		})
+	}
+}
+
+// GetCallbackShutdown gets the callback function.
+func (x *ApplicationClass) GetCallbackShutdown() func(*Application) {
+	if x.xShutdown == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xShutdown)
+	return func(ApplicationVar *Application) {
+		rawCallback(ApplicationVar.GoPointer())
+	}
+}
+
+// SetCallbackDbusRegister sets the callback function.
+func (x *ApplicationClass) SetCallbackDbusRegister(cb func(*Application, *DBusConnection, string) bool) {
+	if cb == nil {
+		x.xDbusRegister = 0
+	} else {
+		x.xDbusRegister = purego.NewCallback(func(ApplicationVarp uintptr, ConnectionVarp uintptr, ObjectPathVarp string) bool {
+			return cb(ApplicationNewFromInternalPtr(ApplicationVarp), DBusConnectionNewFromInternalPtr(ConnectionVarp), ObjectPathVarp)
+		})
+	}
+}
+
+// GetCallbackDbusRegister gets the callback function.
+func (x *ApplicationClass) GetCallbackDbusRegister() func(*Application, *DBusConnection, string) bool {
+	if x.xDbusRegister == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, ConnectionVarp uintptr, ObjectPathVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xDbusRegister)
+	return func(ApplicationVar *Application, ConnectionVar *DBusConnection, ObjectPathVar string) bool {
+		return rawCallback(ApplicationVar.GoPointer(), ConnectionVar.GoPointer(), ObjectPathVar)
+	}
+}
+
+// SetCallbackDbusUnregister sets the callback function.
+func (x *ApplicationClass) SetCallbackDbusUnregister(cb func(*Application, *DBusConnection, string)) {
+	if cb == nil {
+		x.xDbusUnregister = 0
+	} else {
+		x.xDbusUnregister = purego.NewCallback(func(ApplicationVarp uintptr, ConnectionVarp uintptr, ObjectPathVarp string) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp), DBusConnectionNewFromInternalPtr(ConnectionVarp), ObjectPathVarp)
+		})
+	}
+}
+
+// GetCallbackDbusUnregister gets the callback function.
+func (x *ApplicationClass) GetCallbackDbusUnregister() func(*Application, *DBusConnection, string) {
+	if x.xDbusUnregister == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, ConnectionVarp uintptr, ObjectPathVarp string)
+	purego.RegisterFunc(&rawCallback, x.xDbusUnregister)
+	return func(ApplicationVar *Application, ConnectionVar *DBusConnection, ObjectPathVar string) {
+		rawCallback(ApplicationVar.GoPointer(), ConnectionVar.GoPointer(), ObjectPathVar)
+	}
+}
+
+// SetCallbackHandleLocalOptions sets the callback function.
+func (x *ApplicationClass) SetCallbackHandleLocalOptions(cb func(*Application, *glib.VariantDict) int) {
+	if cb == nil {
+		x.xHandleLocalOptions = 0
+	} else {
+		x.xHandleLocalOptions = purego.NewCallback(func(ApplicationVarp uintptr, OptionsVarp *glib.VariantDict) int {
+			return cb(ApplicationNewFromInternalPtr(ApplicationVarp), OptionsVarp)
+		})
+	}
+}
+
+// GetCallbackHandleLocalOptions gets the callback function.
+func (x *ApplicationClass) GetCallbackHandleLocalOptions() func(*Application, *glib.VariantDict) int {
+	if x.xHandleLocalOptions == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, OptionsVarp *glib.VariantDict) int
+	purego.RegisterFunc(&rawCallback, x.xHandleLocalOptions)
+	return func(ApplicationVar *Application, OptionsVar *glib.VariantDict) int {
+		return rawCallback(ApplicationVar.GoPointer(), OptionsVar)
+	}
+}
+
+// SetCallbackNameLost sets the callback function.
+func (x *ApplicationClass) SetCallbackNameLost(cb func(*Application) bool) {
+	if cb == nil {
+		x.xNameLost = 0
+	} else {
+		x.xNameLost = purego.NewCallback(func(ApplicationVarp uintptr) bool {
+			return cb(ApplicationNewFromInternalPtr(ApplicationVarp))
+		})
+	}
+}
+
+// GetCallbackNameLost gets the callback function.
+func (x *ApplicationClass) GetCallbackNameLost() func(*Application) bool {
+	if x.xNameLost == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xNameLost)
+	return func(ApplicationVar *Application) bool {
+		return rawCallback(ApplicationVar.GoPointer())
+	}
 }
 
 type ApplicationPrivate struct {
diff --git a/v4/gio/gapplicationcommandline.go b/v4/gio/gapplicationcommandline.go
index 50af816d562738efc927e3aea1edd0b169595452..f21827f3664a0a5f19980c8724ba09bc260cdba4 100644
--- a/v4/gio/gapplicationcommandline.go
+++ b/v4/gio/gapplicationcommandline.go
@@ -19,17 +19,96 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	PrintLiteral uintptr
+	xPrintLiteral uintptr
 
-	PrinterrLiteral uintptr
+	xPrinterrLiteral uintptr
 
-	GetStdin uintptr
+	xGetStdin uintptr
 
 	Padding [11]uintptr
 }
 
 func (x *ApplicationCommandLineClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackPrintLiteral sets the callback function.
+func (x *ApplicationCommandLineClass) SetCallbackPrintLiteral(cb func(*ApplicationCommandLine, string)) {
+	if cb == nil {
+		x.xPrintLiteral = 0
+	} else {
+		x.xPrintLiteral = purego.NewCallback(func(CmdlineVarp uintptr, MessageVarp string) {
+			cb(ApplicationCommandLineNewFromInternalPtr(CmdlineVarp), MessageVarp)
+		})
+	}
+}
+
+// GetCallbackPrintLiteral gets the callback function.
+func (x *ApplicationCommandLineClass) GetCallbackPrintLiteral() func(*ApplicationCommandLine, string) {
+	if x.xPrintLiteral == 0 {
+		return nil
+	}
+	var rawCallback func(CmdlineVarp uintptr, MessageVarp string)
+	purego.RegisterFunc(&rawCallback, x.xPrintLiteral)
+	return func(CmdlineVar *ApplicationCommandLine, MessageVar string) {
+		rawCallback(CmdlineVar.GoPointer(), MessageVar)
+	}
+}
+
+// SetCallbackPrinterrLiteral sets the callback function.
+func (x *ApplicationCommandLineClass) SetCallbackPrinterrLiteral(cb func(*ApplicationCommandLine, string)) {
+	if cb == nil {
+		x.xPrinterrLiteral = 0
+	} else {
+		x.xPrinterrLiteral = purego.NewCallback(func(CmdlineVarp uintptr, MessageVarp string) {
+			cb(ApplicationCommandLineNewFromInternalPtr(CmdlineVarp), MessageVarp)
+		})
+	}
+}
+
+// GetCallbackPrinterrLiteral gets the callback function.
+func (x *ApplicationCommandLineClass) GetCallbackPrinterrLiteral() func(*ApplicationCommandLine, string) {
+	if x.xPrinterrLiteral == 0 {
+		return nil
+	}
+	var rawCallback func(CmdlineVarp uintptr, MessageVarp string)
+	purego.RegisterFunc(&rawCallback, x.xPrinterrLiteral)
+	return func(CmdlineVar *ApplicationCommandLine, MessageVar string) {
+		rawCallback(CmdlineVar.GoPointer(), MessageVar)
+	}
+}
+
+// SetCallbackGetStdin sets the callback function.
+func (x *ApplicationCommandLineClass) SetCallbackGetStdin(cb func(*ApplicationCommandLine) *InputStream) {
+	if cb == nil {
+		x.xGetStdin = 0
+	} else {
+		x.xGetStdin = purego.NewCallback(func(CmdlineVarp uintptr) uintptr {
+			ret := cb(ApplicationCommandLineNewFromInternalPtr(CmdlineVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetStdin gets the callback function.
+func (x *ApplicationCommandLineClass) GetCallbackGetStdin() func(*ApplicationCommandLine) *InputStream {
+	if x.xGetStdin == 0 {
+		return nil
+	}
+	var rawCallback func(CmdlineVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetStdin)
+	return func(CmdlineVar *ApplicationCommandLine) *InputStream {
+		rawRet := rawCallback(CmdlineVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &InputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 type ApplicationCommandLinePrivate struct {
diff --git a/v4/gio/gasyncinitable.go b/v4/gio/gasyncinitable.go
index 5f020d97923fdc771d6d6cfd15b395ddf315c785..2a667af404b7d716695b87265dfc29f0d2c31573 100644
--- a/v4/gio/gasyncinitable.go
+++ b/v4/gio/gasyncinitable.go
@@ -19,13 +19,59 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	InitAsync uintptr
+	xInitAsync uintptr
 
-	InitFinish uintptr
+	xInitFinish uintptr
 }
 
 func (x *AsyncInitableIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackInitAsync sets the callback function.
+func (x *AsyncInitableIface) SetCallbackInitAsync(cb func(AsyncInitable, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xInitAsync = 0
+	} else {
+		x.xInitAsync = purego.NewCallback(func(InitableVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&AsyncInitableBase{Ptr: InitableVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackInitAsync gets the callback function.
+func (x *AsyncInitableIface) GetCallbackInitAsync() func(AsyncInitable, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xInitAsync == 0 {
+		return nil
+	}
+	var rawCallback func(InitableVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInitAsync)
+	return func(InitableVar AsyncInitable, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(InitableVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackInitFinish sets the callback function.
+func (x *AsyncInitableIface) SetCallbackInitFinish(cb func(AsyncInitable, AsyncResult) bool) {
+	if cb == nil {
+		x.xInitFinish = 0
+	} else {
+		x.xInitFinish = purego.NewCallback(func(InitableVarp uintptr, ResVarp uintptr) bool {
+			return cb(&AsyncInitableBase{Ptr: InitableVarp}, &AsyncResultBase{Ptr: ResVarp})
+		})
+	}
+}
+
+// GetCallbackInitFinish gets the callback function.
+func (x *AsyncInitableIface) GetCallbackInitFinish() func(AsyncInitable, AsyncResult) bool {
+	if x.xInitFinish == 0 {
+		return nil
+	}
+	var rawCallback func(InitableVarp uintptr, ResVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xInitFinish)
+	return func(InitableVar AsyncInitable, ResVar AsyncResult) bool {
+		return rawCallback(InitableVar.GoPointer(), ResVar.GoPointer())
+	}
 }
 
 // This is the asynchronous version of #GInitable; it behaves the same
@@ -140,8 +186,8 @@ type AsyncInitable interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
 	InitAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	InitFinish(ResVar AsyncResult) bool
-	NewFinish(ResVar AsyncResult) *gobject.Object
+	InitFinish(ResVar AsyncResult) (bool, error)
+	NewFinish(ResVar AsyncResult) (*gobject.Object, error)
 }
 
 var xAsyncInitableGLibType func() types.GType
diff --git a/v4/gio/gasyncresult.go b/v4/gio/gasyncresult.go
index 0eda02c98ca9736714dacb36ff02b534828cf624..44a6f5bbfe5ef2ebde172c5d4575a463272ac7fd 100644
--- a/v4/gio/gasyncresult.go
+++ b/v4/gio/gasyncresult.go
@@ -18,15 +18,94 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	GetUserData uintptr
+	xGetUserData uintptr
 
-	GetSourceObject uintptr
+	xGetSourceObject uintptr
 
-	IsTagged uintptr
+	xIsTagged uintptr
 }
 
 func (x *AsyncResultIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetUserData sets the callback function.
+func (x *AsyncResultIface) SetCallbackGetUserData(cb func(AsyncResult) uintptr) {
+	if cb == nil {
+		x.xGetUserData = 0
+	} else {
+		x.xGetUserData = purego.NewCallback(func(ResVarp uintptr) uintptr {
+			return cb(&AsyncResultBase{Ptr: ResVarp})
+		})
+	}
+}
+
+// GetCallbackGetUserData gets the callback function.
+func (x *AsyncResultIface) GetCallbackGetUserData() func(AsyncResult) uintptr {
+	if x.xGetUserData == 0 {
+		return nil
+	}
+	var rawCallback func(ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetUserData)
+	return func(ResVar AsyncResult) uintptr {
+		return rawCallback(ResVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSourceObject sets the callback function.
+func (x *AsyncResultIface) SetCallbackGetSourceObject(cb func(AsyncResult) *gobject.Object) {
+	if cb == nil {
+		x.xGetSourceObject = 0
+	} else {
+		x.xGetSourceObject = purego.NewCallback(func(ResVarp uintptr) uintptr {
+			ret := cb(&AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetSourceObject gets the callback function.
+func (x *AsyncResultIface) GetCallbackGetSourceObject() func(AsyncResult) *gobject.Object {
+	if x.xGetSourceObject == 0 {
+		return nil
+	}
+	var rawCallback func(ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetSourceObject)
+	return func(ResVar AsyncResult) *gobject.Object {
+		rawRet := rawCallback(ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &gobject.Object{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackIsTagged sets the callback function.
+func (x *AsyncResultIface) SetCallbackIsTagged(cb func(AsyncResult, uintptr) bool) {
+	if cb == nil {
+		x.xIsTagged = 0
+	} else {
+		x.xIsTagged = purego.NewCallback(func(ResVarp uintptr, SourceTagVarp uintptr) bool {
+			return cb(&AsyncResultBase{Ptr: ResVarp}, SourceTagVarp)
+		})
+	}
+}
+
+// GetCallbackIsTagged gets the callback function.
+func (x *AsyncResultIface) GetCallbackIsTagged() func(AsyncResult, uintptr) bool {
+	if x.xIsTagged == 0 {
+		return nil
+	}
+	var rawCallback func(ResVarp uintptr, SourceTagVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsTagged)
+	return func(ResVar AsyncResult, SourceTagVar uintptr) bool {
+		return rawCallback(ResVar.GoPointer(), SourceTagVar)
+	}
 }
 
 // Provides a base class for implementing asynchronous function results.
@@ -125,7 +204,7 @@ 	SetGoPointer(uintptr)
 	GetSourceObject() *gobject.Object
 	GetUserData() uintptr
 	IsTagged(SourceTagVar uintptr) bool
-	LegacyPropagateError() bool
+	LegacyPropagateError() (bool, error)
 }
 
 var xAsyncResultGLibType func() types.GType
diff --git a/v4/gio/gbufferedinputstream.go b/v4/gio/gbufferedinputstream.go
index c2cdc191063ad185aa7b4a6de3e7f425b9df3f31..9c00066aa217849aed88180c88905bce7b62139e 100644
--- a/v4/gio/gbufferedinputstream.go
+++ b/v4/gio/gbufferedinputstream.go
@@ -16,25 +16,209 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Fill uintptr
+	xFill uintptr
 
-	FillAsync uintptr
+	xFillAsync uintptr
 
-	FillFinish uintptr
+	xFillFinish uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *BufferedInputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackFill sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackFill(cb func(*BufferedInputStream, int, *Cancellable) int) {
+	if cb == nil {
+		x.xFill = 0
+	} else {
+		x.xFill = purego.NewCallback(func(StreamVarp uintptr, CountVarp int, CancellableVarp uintptr) int {
+			return cb(BufferedInputStreamNewFromInternalPtr(StreamVarp), CountVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackFill gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackFill() func(*BufferedInputStream, int, *Cancellable) int {
+	if x.xFill == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CountVarp int, CancellableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xFill)
+	return func(StreamVar *BufferedInputStream, CountVar int, CancellableVar *Cancellable) int {
+		return rawCallback(StreamVar.GoPointer(), CountVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackFillAsync sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackFillAsync(cb func(*BufferedInputStream, int, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xFillAsync = 0
+	} else {
+		x.xFillAsync = purego.NewCallback(func(StreamVarp uintptr, CountVarp int, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(BufferedInputStreamNewFromInternalPtr(StreamVarp), CountVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackFillAsync gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackFillAsync() func(*BufferedInputStream, int, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xFillAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CountVarp int, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFillAsync)
+	return func(StreamVar *BufferedInputStream, CountVar int, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackFillFinish sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackFillFinish(cb func(*BufferedInputStream, AsyncResult) int) {
+	if cb == nil {
+		x.xFillFinish = 0
+	} else {
+		x.xFillFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) int {
+			return cb(BufferedInputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackFillFinish gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackFillFinish() func(*BufferedInputStream, AsyncResult) int {
+	if x.xFillFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xFillFinish)
+	return func(StreamVar *BufferedInputStream, ResultVar AsyncResult) int {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *BufferedInputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *BufferedInputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type BufferedInputStreamPrivate struct {
diff --git a/v4/gio/gbufferedoutputstream.go b/v4/gio/gbufferedoutputstream.go
index 6550c15b4360af81accd27492281a45ad9456062..841d98e271a2d4f833bf6c46f347ead08ec1d291 100644
--- a/v4/gio/gbufferedoutputstream.go
+++ b/v4/gio/gbufferedoutputstream.go
@@ -16,13 +16,59 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 }
 
 func (x *BufferedOutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *BufferedOutputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *BufferedOutputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *BufferedOutputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *BufferedOutputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
 }
 
 type BufferedOutputStreamPrivate struct {
diff --git a/v4/gio/gcancellable.go b/v4/gio/gcancellable.go
index 63ed343dc2d0596510c8097842dde2d025a51245..ecc45c8e6d98c29c8246561d2477dac3be1b6211 100644
--- a/v4/gio/gcancellable.go
+++ b/v4/gio/gcancellable.go
@@ -17,21 +17,159 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Cancelled uintptr
+	xCancelled uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *CancellableClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackCancelled sets the callback function.
+func (x *CancellableClass) SetCallbackCancelled(cb func(*Cancellable)) {
+	if cb == nil {
+		x.xCancelled = 0
+	} else {
+		x.xCancelled = purego.NewCallback(func(CancellableVarp uintptr) {
+			cb(CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCancelled gets the callback function.
+func (x *CancellableClass) GetCallbackCancelled() func(*Cancellable) {
+	if x.xCancelled == 0 {
+		return nil
+	}
+	var rawCallback func(CancellableVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCancelled)
+	return func(CancellableVar *Cancellable) {
+		rawCallback(CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *CancellableClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *CancellableClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *CancellableClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *CancellableClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *CancellableClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *CancellableClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *CancellableClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *CancellableClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *CancellableClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *CancellableClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type CancellablePrivate struct {
diff --git a/v4/gio/gconverter.go b/v4/gio/gconverter.go
index 8b4cd894f72f022bbe89e78d256558a855f468a8..5cfaad9baad4d85bda16ef18fd04996c729d7028 100644
--- a/v4/gio/gconverter.go
+++ b/v4/gio/gconverter.go
@@ -19,15 +19,61 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Convert uintptr
+	xConvert uintptr
 
-	Reset uintptr
+	xReset uintptr
 }
 
 func (x *ConverterIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackConvert sets the callback function.
+func (x *ConverterIface) SetCallbackConvert(cb func(Converter, []byte, uint, []byte, uint, ConverterFlags, uint, uint) ConverterResult) {
+	if cb == nil {
+		x.xConvert = 0
+	} else {
+		x.xConvert = purego.NewCallback(func(ConverterVarp uintptr, InbufVarp []byte, InbufSizeVarp uint, OutbufVarp []byte, OutbufSizeVarp uint, FlagsVarp ConverterFlags, BytesReadVarp uint, BytesWrittenVarp uint) ConverterResult {
+			return cb(&ConverterBase{Ptr: ConverterVarp}, InbufVarp, InbufSizeVarp, OutbufVarp, OutbufSizeVarp, FlagsVarp, BytesReadVarp, BytesWrittenVarp)
+		})
+	}
+}
+
+// GetCallbackConvert gets the callback function.
+func (x *ConverterIface) GetCallbackConvert() func(Converter, []byte, uint, []byte, uint, ConverterFlags, uint, uint) ConverterResult {
+	if x.xConvert == 0 {
+		return nil
+	}
+	var rawCallback func(ConverterVarp uintptr, InbufVarp []byte, InbufSizeVarp uint, OutbufVarp []byte, OutbufSizeVarp uint, FlagsVarp ConverterFlags, BytesReadVarp uint, BytesWrittenVarp uint) ConverterResult
+	purego.RegisterFunc(&rawCallback, x.xConvert)
+	return func(ConverterVar Converter, InbufVar []byte, InbufSizeVar uint, OutbufVar []byte, OutbufSizeVar uint, FlagsVar ConverterFlags, BytesReadVar uint, BytesWrittenVar uint) ConverterResult {
+		return rawCallback(ConverterVar.GoPointer(), InbufVar, InbufSizeVar, OutbufVar, OutbufSizeVar, FlagsVar, BytesReadVar, BytesWrittenVar)
+	}
+}
+
+// SetCallbackReset sets the callback function.
+func (x *ConverterIface) SetCallbackReset(cb func(Converter)) {
+	if cb == nil {
+		x.xReset = 0
+	} else {
+		x.xReset = purego.NewCallback(func(ConverterVarp uintptr) {
+			cb(&ConverterBase{Ptr: ConverterVarp})
+		})
+	}
+}
+
+// GetCallbackReset gets the callback function.
+func (x *ConverterIface) GetCallbackReset() func(Converter) {
+	if x.xReset == 0 {
+		return nil
+	}
+	var rawCallback func(ConverterVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReset)
+	return func(ConverterVar Converter) {
+		rawCallback(ConverterVar.GoPointer())
+	}
+}
+
 // #GConverter is implemented by objects that convert
 // binary data in various ways. The conversion can be
 // stateful and may fail at any place.
@@ -38,7 +84,7 @@ // replace.
 type Converter interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	Convert(InbufVar []byte, InbufSizeVar uint, OutbufVar []byte, OutbufSizeVar uint, FlagsVar ConverterFlags, BytesReadVar uint, BytesWrittenVar uint) ConverterResult
+	Convert(InbufVar []byte, InbufSizeVar uint, OutbufVar []byte, OutbufSizeVar uint, FlagsVar ConverterFlags, BytesReadVar uint, BytesWrittenVar uint) (ConverterResult, error)
 	Reset()
 }
 
diff --git a/v4/gio/gconverterinputstream.go b/v4/gio/gconverterinputstream.go
index 6f1ce520e15dfc6884935b2f0a903c1f436cac62..143a0e6d4ef3f100df0c1078a54289b91e58f6ab 100644
--- a/v4/gio/gconverterinputstream.go
+++ b/v4/gio/gconverterinputstream.go
@@ -17,19 +17,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *ConverterInputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *ConverterInputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *ConverterInputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *ConverterInputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *ConverterInputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *ConverterInputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *ConverterInputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *ConverterInputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *ConverterInputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *ConverterInputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *ConverterInputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type ConverterInputStreamPrivate struct {
diff --git a/v4/gio/gconverteroutputstream.go b/v4/gio/gconverteroutputstream.go
index dffa98acbb51a472588985703417307c63df749a..edccba40d6335fba992b2f238152e737b787130f 100644
--- a/v4/gio/gconverteroutputstream.go
+++ b/v4/gio/gconverteroutputstream.go
@@ -17,19 +17,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *ConverterOutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *ConverterOutputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *ConverterOutputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *ConverterOutputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *ConverterOutputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *ConverterOutputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *ConverterOutputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *ConverterOutputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *ConverterOutputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *ConverterOutputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *ConverterOutputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type ConverterOutputStreamPrivate struct {
diff --git a/v4/gio/gdatagrambased.go b/v4/gio/gdatagrambased.go
index 17a44db4bd01022f134c40d1ada5d8698cbcfa2f..b62c2de2c48e91a091f0205b3e1e050e7e278c38 100644
--- a/v4/gio/gdatagrambased.go
+++ b/v4/gio/gdatagrambased.go
@@ -21,21 +21,136 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	ReceiveMessages uintptr
+	xReceiveMessages uintptr
 
-	SendMessages uintptr
+	xSendMessages uintptr
 
-	CreateSource uintptr
+	xCreateSource uintptr
 
-	ConditionCheck uintptr
+	xConditionCheck uintptr
 
-	ConditionWait uintptr
+	xConditionWait uintptr
 }
 
 func (x *DatagramBasedInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackReceiveMessages sets the callback function.
+func (x *DatagramBasedInterface) SetCallbackReceiveMessages(cb func(DatagramBased, []InputMessage, uint, int, int64, *Cancellable) int) {
+	if cb == nil {
+		x.xReceiveMessages = 0
+	} else {
+		x.xReceiveMessages = purego.NewCallback(func(DatagramBasedVarp uintptr, MessagesVarp []InputMessage, NumMessagesVarp uint, FlagsVarp int, TimeoutVarp int64, CancellableVarp uintptr) int {
+			return cb(&DatagramBasedBase{Ptr: DatagramBasedVarp}, MessagesVarp, NumMessagesVarp, FlagsVarp, TimeoutVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackReceiveMessages gets the callback function.
+func (x *DatagramBasedInterface) GetCallbackReceiveMessages() func(DatagramBased, []InputMessage, uint, int, int64, *Cancellable) int {
+	if x.xReceiveMessages == 0 {
+		return nil
+	}
+	var rawCallback func(DatagramBasedVarp uintptr, MessagesVarp []InputMessage, NumMessagesVarp uint, FlagsVarp int, TimeoutVarp int64, CancellableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xReceiveMessages)
+	return func(DatagramBasedVar DatagramBased, MessagesVar []InputMessage, NumMessagesVar uint, FlagsVar int, TimeoutVar int64, CancellableVar *Cancellable) int {
+		return rawCallback(DatagramBasedVar.GoPointer(), MessagesVar, NumMessagesVar, FlagsVar, TimeoutVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackSendMessages sets the callback function.
+func (x *DatagramBasedInterface) SetCallbackSendMessages(cb func(DatagramBased, []OutputMessage, uint, int, int64, *Cancellable) int) {
+	if cb == nil {
+		x.xSendMessages = 0
+	} else {
+		x.xSendMessages = purego.NewCallback(func(DatagramBasedVarp uintptr, MessagesVarp []OutputMessage, NumMessagesVarp uint, FlagsVarp int, TimeoutVarp int64, CancellableVarp uintptr) int {
+			return cb(&DatagramBasedBase{Ptr: DatagramBasedVarp}, MessagesVarp, NumMessagesVarp, FlagsVarp, TimeoutVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSendMessages gets the callback function.
+func (x *DatagramBasedInterface) GetCallbackSendMessages() func(DatagramBased, []OutputMessage, uint, int, int64, *Cancellable) int {
+	if x.xSendMessages == 0 {
+		return nil
+	}
+	var rawCallback func(DatagramBasedVarp uintptr, MessagesVarp []OutputMessage, NumMessagesVarp uint, FlagsVarp int, TimeoutVarp int64, CancellableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xSendMessages)
+	return func(DatagramBasedVar DatagramBased, MessagesVar []OutputMessage, NumMessagesVar uint, FlagsVar int, TimeoutVar int64, CancellableVar *Cancellable) int {
+		return rawCallback(DatagramBasedVar.GoPointer(), MessagesVar, NumMessagesVar, FlagsVar, TimeoutVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCreateSource sets the callback function.
+func (x *DatagramBasedInterface) SetCallbackCreateSource(cb func(DatagramBased, glib.IOCondition, *Cancellable) *glib.Source) {
+	if cb == nil {
+		x.xCreateSource = 0
+	} else {
+		x.xCreateSource = purego.NewCallback(func(DatagramBasedVarp uintptr, ConditionVarp glib.IOCondition, CancellableVarp uintptr) *glib.Source {
+			return cb(&DatagramBasedBase{Ptr: DatagramBasedVarp}, ConditionVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCreateSource gets the callback function.
+func (x *DatagramBasedInterface) GetCallbackCreateSource() func(DatagramBased, glib.IOCondition, *Cancellable) *glib.Source {
+	if x.xCreateSource == 0 {
+		return nil
+	}
+	var rawCallback func(DatagramBasedVarp uintptr, ConditionVarp glib.IOCondition, CancellableVarp uintptr) *glib.Source
+	purego.RegisterFunc(&rawCallback, x.xCreateSource)
+	return func(DatagramBasedVar DatagramBased, ConditionVar glib.IOCondition, CancellableVar *Cancellable) *glib.Source {
+		return rawCallback(DatagramBasedVar.GoPointer(), ConditionVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackConditionCheck sets the callback function.
+func (x *DatagramBasedInterface) SetCallbackConditionCheck(cb func(DatagramBased, glib.IOCondition) glib.IOCondition) {
+	if cb == nil {
+		x.xConditionCheck = 0
+	} else {
+		x.xConditionCheck = purego.NewCallback(func(DatagramBasedVarp uintptr, ConditionVarp glib.IOCondition) glib.IOCondition {
+			return cb(&DatagramBasedBase{Ptr: DatagramBasedVarp}, ConditionVarp)
+		})
+	}
+}
+
+// GetCallbackConditionCheck gets the callback function.
+func (x *DatagramBasedInterface) GetCallbackConditionCheck() func(DatagramBased, glib.IOCondition) glib.IOCondition {
+	if x.xConditionCheck == 0 {
+		return nil
+	}
+	var rawCallback func(DatagramBasedVarp uintptr, ConditionVarp glib.IOCondition) glib.IOCondition
+	purego.RegisterFunc(&rawCallback, x.xConditionCheck)
+	return func(DatagramBasedVar DatagramBased, ConditionVar glib.IOCondition) glib.IOCondition {
+		return rawCallback(DatagramBasedVar.GoPointer(), ConditionVar)
+	}
+}
+
+// SetCallbackConditionWait sets the callback function.
+func (x *DatagramBasedInterface) SetCallbackConditionWait(cb func(DatagramBased, glib.IOCondition, int64, *Cancellable) bool) {
+	if cb == nil {
+		x.xConditionWait = 0
+	} else {
+		x.xConditionWait = purego.NewCallback(func(DatagramBasedVarp uintptr, ConditionVarp glib.IOCondition, TimeoutVarp int64, CancellableVarp uintptr) bool {
+			return cb(&DatagramBasedBase{Ptr: DatagramBasedVarp}, ConditionVarp, TimeoutVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackConditionWait gets the callback function.
+func (x *DatagramBasedInterface) GetCallbackConditionWait() func(DatagramBased, glib.IOCondition, int64, *Cancellable) bool {
+	if x.xConditionWait == 0 {
+		return nil
+	}
+	var rawCallback func(DatagramBasedVarp uintptr, ConditionVarp glib.IOCondition, TimeoutVarp int64, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xConditionWait)
+	return func(DatagramBasedVar DatagramBased, ConditionVar glib.IOCondition, TimeoutVar int64, CancellableVar *Cancellable) bool {
+		return rawCallback(DatagramBasedVar.GoPointer(), ConditionVar, TimeoutVar, CancellableVar.GoPointer())
+	}
+}
+
 // A #GDatagramBased is a networking interface for representing datagram-based
 // communications. It is a more or less direct mapping of the core parts of the
 // BSD socket API in a portable GObject interface. It is implemented by
@@ -87,10 +202,10 @@ type DatagramBased interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
 	ConditionCheck(ConditionVar glib.IOCondition) glib.IOCondition
-	ConditionWait(ConditionVar glib.IOCondition, TimeoutVar int64, CancellableVar *Cancellable) bool
+	ConditionWait(ConditionVar glib.IOCondition, TimeoutVar int64, CancellableVar *Cancellable) (bool, error)
 	CreateSource(ConditionVar glib.IOCondition, CancellableVar *Cancellable) *glib.Source
-	ReceiveMessages(MessagesVar []InputMessage, NumMessagesVar uint, FlagsVar int, TimeoutVar int64, CancellableVar *Cancellable) int
-	SendMessages(MessagesVar []OutputMessage, NumMessagesVar uint, FlagsVar int, TimeoutVar int64, CancellableVar *Cancellable) int
+	ReceiveMessages(MessagesVar []InputMessage, NumMessagesVar uint, FlagsVar int, TimeoutVar int64, CancellableVar *Cancellable) (int, error)
+	SendMessages(MessagesVar []OutputMessage, NumMessagesVar uint, FlagsVar int, TimeoutVar int64, CancellableVar *Cancellable) (int, error)
 }
 
 var xDatagramBasedGLibType func() types.GType
diff --git a/v4/gio/gdatainputstream.go b/v4/gio/gdatainputstream.go
index e056ffa01940b7bd75428fdb4ec512a5ac87097d..30a3d28c8e81c761fe94179655285349cd349003 100644
--- a/v4/gio/gdatainputstream.go
+++ b/v4/gio/gdatainputstream.go
@@ -16,19 +16,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *DataInputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *DataInputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *DataInputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *DataInputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *DataInputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *DataInputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *DataInputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *DataInputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *DataInputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *DataInputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *DataInputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type DataInputStreamPrivate struct {
diff --git a/v4/gio/gdataoutputstream.go b/v4/gio/gdataoutputstream.go
index 00409489d72e0cada03ba28e2d6162e84b8fd7c1..01c2d0cb866a1e9fc241601f66c3a87abf760892 100644
--- a/v4/gio/gdataoutputstream.go
+++ b/v4/gio/gdataoutputstream.go
@@ -16,19 +16,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *DataOutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *DataOutputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *DataOutputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *DataOutputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *DataOutputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *DataOutputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *DataOutputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *DataOutputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *DataOutputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *DataOutputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *DataOutputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type DataOutputStreamPrivate struct {
diff --git a/v4/gio/gdbusinterface.go b/v4/gio/gdbusinterface.go
index 2c4c35f8d7e50f19d0d707b1760ba1ce56fca288..9736ad26a374b79cce804072f6e07a837b8ca1bb 100644
--- a/v4/gio/gdbusinterface.go
+++ b/v4/gio/gdbusinterface.go
@@ -17,17 +17,129 @@ 	_ structs.HostLayout
 
 	ParentIface uintptr
 
-	GetInfo uintptr
+	xGetInfo uintptr
 
-	GetObject uintptr
+	xGetObject uintptr
 
-	SetObject uintptr
+	xSetObject uintptr
 
-	DupObject uintptr
+	xDupObject uintptr
 }
 
 func (x *DBusInterfaceIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetInfo sets the callback function.
+func (x *DBusInterfaceIface) SetCallbackGetInfo(cb func(DBusInterface) *DBusInterfaceInfo) {
+	if cb == nil {
+		x.xGetInfo = 0
+	} else {
+		x.xGetInfo = purego.NewCallback(func(InterfaceVarp uintptr) *DBusInterfaceInfo {
+			return cb(&DBusInterfaceBase{Ptr: InterfaceVarp})
+		})
+	}
+}
+
+// GetCallbackGetInfo gets the callback function.
+func (x *DBusInterfaceIface) GetCallbackGetInfo() func(DBusInterface) *DBusInterfaceInfo {
+	if x.xGetInfo == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr) *DBusInterfaceInfo
+	purego.RegisterFunc(&rawCallback, x.xGetInfo)
+	return func(InterfaceVar DBusInterface) *DBusInterfaceInfo {
+		return rawCallback(InterfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackGetObject sets the callback function.
+func (x *DBusInterfaceIface) SetCallbackGetObject(cb func(DBusInterface) *DBusObjectBase) {
+	if cb == nil {
+		x.xGetObject = 0
+	} else {
+		x.xGetObject = purego.NewCallback(func(InterfaceVarp uintptr) uintptr {
+			ret := cb(&DBusInterfaceBase{Ptr: InterfaceVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetObject gets the callback function.
+func (x *DBusInterfaceIface) GetCallbackGetObject() func(DBusInterface) *DBusObjectBase {
+	if x.xGetObject == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetObject)
+	return func(InterfaceVar DBusInterface) *DBusObjectBase {
+		rawRet := rawCallback(InterfaceVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &DBusObjectBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSetObject sets the callback function.
+func (x *DBusInterfaceIface) SetCallbackSetObject(cb func(DBusInterface, DBusObject)) {
+	if cb == nil {
+		x.xSetObject = 0
+	} else {
+		x.xSetObject = purego.NewCallback(func(InterfaceVarp uintptr, ObjectVarp uintptr) {
+			cb(&DBusInterfaceBase{Ptr: InterfaceVarp}, &DBusObjectBase{Ptr: ObjectVarp})
+		})
+	}
+}
+
+// GetCallbackSetObject gets the callback function.
+func (x *DBusInterfaceIface) GetCallbackSetObject() func(DBusInterface, DBusObject) {
+	if x.xSetObject == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr, ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetObject)
+	return func(InterfaceVar DBusInterface, ObjectVar DBusObject) {
+		rawCallback(InterfaceVar.GoPointer(), ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackDupObject sets the callback function.
+func (x *DBusInterfaceIface) SetCallbackDupObject(cb func(DBusInterface) *DBusObjectBase) {
+	if cb == nil {
+		x.xDupObject = 0
+	} else {
+		x.xDupObject = purego.NewCallback(func(InterfaceVarp uintptr) uintptr {
+			ret := cb(&DBusInterfaceBase{Ptr: InterfaceVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackDupObject gets the callback function.
+func (x *DBusInterfaceIface) GetCallbackDupObject() func(DBusInterface) *DBusObjectBase {
+	if x.xDupObject == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xDupObject)
+	return func(InterfaceVar DBusInterface) *DBusObjectBase {
+		rawRet := rawCallback(InterfaceVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &DBusObjectBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // The #GDBusInterface type is the base type for D-Bus interfaces both
diff --git a/v4/gio/gdbusinterfaceskeleton.go b/v4/gio/gdbusinterfaceskeleton.go
index 1386934dedf0b87368823dfdf231412e02ee5368..23b0f8dd11f8428e97ec7033c5d17f8a62235293 100644
--- a/v4/gio/gdbusinterfaceskeleton.go
+++ b/v4/gio/gdbusinterfaceskeleton.go
@@ -18,23 +18,138 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetInfo uintptr
+	xGetInfo uintptr
 
-	GetVtable uintptr
+	xGetVtable uintptr
 
-	GetProperties uintptr
+	xGetProperties uintptr
 
-	Flush uintptr
+	xFlush uintptr
 
 	VfuncPadding [8]uintptr
 
-	GAuthorizeMethod uintptr
+	xGAuthorizeMethod uintptr
 
 	SignalPadding [8]uintptr
 }
 
 func (x *DBusInterfaceSkeletonClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetInfo sets the callback function.
+func (x *DBusInterfaceSkeletonClass) SetCallbackGetInfo(cb func(*DBusInterfaceSkeleton) *DBusInterfaceInfo) {
+	if cb == nil {
+		x.xGetInfo = 0
+	} else {
+		x.xGetInfo = purego.NewCallback(func(InterfaceVarp uintptr) *DBusInterfaceInfo {
+			return cb(DBusInterfaceSkeletonNewFromInternalPtr(InterfaceVarp))
+		})
+	}
+}
+
+// GetCallbackGetInfo gets the callback function.
+func (x *DBusInterfaceSkeletonClass) GetCallbackGetInfo() func(*DBusInterfaceSkeleton) *DBusInterfaceInfo {
+	if x.xGetInfo == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr) *DBusInterfaceInfo
+	purego.RegisterFunc(&rawCallback, x.xGetInfo)
+	return func(InterfaceVar *DBusInterfaceSkeleton) *DBusInterfaceInfo {
+		return rawCallback(InterfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackGetVtable sets the callback function.
+func (x *DBusInterfaceSkeletonClass) SetCallbackGetVtable(cb func(*DBusInterfaceSkeleton) *DBusInterfaceVTable) {
+	if cb == nil {
+		x.xGetVtable = 0
+	} else {
+		x.xGetVtable = purego.NewCallback(func(InterfaceVarp uintptr) *DBusInterfaceVTable {
+			return cb(DBusInterfaceSkeletonNewFromInternalPtr(InterfaceVarp))
+		})
+	}
+}
+
+// GetCallbackGetVtable gets the callback function.
+func (x *DBusInterfaceSkeletonClass) GetCallbackGetVtable() func(*DBusInterfaceSkeleton) *DBusInterfaceVTable {
+	if x.xGetVtable == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr) *DBusInterfaceVTable
+	purego.RegisterFunc(&rawCallback, x.xGetVtable)
+	return func(InterfaceVar *DBusInterfaceSkeleton) *DBusInterfaceVTable {
+		return rawCallback(InterfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackGetProperties sets the callback function.
+func (x *DBusInterfaceSkeletonClass) SetCallbackGetProperties(cb func(*DBusInterfaceSkeleton) *glib.Variant) {
+	if cb == nil {
+		x.xGetProperties = 0
+	} else {
+		x.xGetProperties = purego.NewCallback(func(InterfaceVarp uintptr) *glib.Variant {
+			return cb(DBusInterfaceSkeletonNewFromInternalPtr(InterfaceVarp))
+		})
+	}
+}
+
+// GetCallbackGetProperties gets the callback function.
+func (x *DBusInterfaceSkeletonClass) GetCallbackGetProperties() func(*DBusInterfaceSkeleton) *glib.Variant {
+	if x.xGetProperties == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xGetProperties)
+	return func(InterfaceVar *DBusInterfaceSkeleton) *glib.Variant {
+		return rawCallback(InterfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackFlush sets the callback function.
+func (x *DBusInterfaceSkeletonClass) SetCallbackFlush(cb func(*DBusInterfaceSkeleton)) {
+	if cb == nil {
+		x.xFlush = 0
+	} else {
+		x.xFlush = purego.NewCallback(func(InterfaceVarp uintptr) {
+			cb(DBusInterfaceSkeletonNewFromInternalPtr(InterfaceVarp))
+		})
+	}
+}
+
+// GetCallbackFlush gets the callback function.
+func (x *DBusInterfaceSkeletonClass) GetCallbackFlush() func(*DBusInterfaceSkeleton) {
+	if x.xFlush == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFlush)
+	return func(InterfaceVar *DBusInterfaceSkeleton) {
+		rawCallback(InterfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackGAuthorizeMethod sets the callback function.
+func (x *DBusInterfaceSkeletonClass) SetCallbackGAuthorizeMethod(cb func(*DBusInterfaceSkeleton, *DBusMethodInvocation) bool) {
+	if cb == nil {
+		x.xGAuthorizeMethod = 0
+	} else {
+		x.xGAuthorizeMethod = purego.NewCallback(func(InterfaceVarp uintptr, InvocationVarp uintptr) bool {
+			return cb(DBusInterfaceSkeletonNewFromInternalPtr(InterfaceVarp), DBusMethodInvocationNewFromInternalPtr(InvocationVarp))
+		})
+	}
+}
+
+// GetCallbackGAuthorizeMethod gets the callback function.
+func (x *DBusInterfaceSkeletonClass) GetCallbackGAuthorizeMethod() func(*DBusInterfaceSkeleton, *DBusMethodInvocation) bool {
+	if x.xGAuthorizeMethod == 0 {
+		return nil
+	}
+	var rawCallback func(InterfaceVarp uintptr, InvocationVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xGAuthorizeMethod)
+	return func(InterfaceVar *DBusInterfaceSkeleton, InvocationVar *DBusMethodInvocation) bool {
+		return rawCallback(InterfaceVar.GoPointer(), InvocationVar.GoPointer())
+	}
 }
 
 type DBusInterfaceSkeletonPrivate struct {
diff --git a/v4/gio/gdbusobject.go b/v4/gio/gdbusobject.go
index 7f1ab32714a66f57a43fc6546d980776035c8447..beb5750fd4b6f688288a280143774f0977983662 100644
--- a/v4/gio/gdbusobject.go
+++ b/v4/gio/gdbusobject.go
@@ -17,19 +17,144 @@ 	_ structs.HostLayout
 
 	ParentIface uintptr
 
-	GetObjectPath uintptr
+	xGetObjectPath uintptr
 
-	GetInterfaces uintptr
+	xGetInterfaces uintptr
 
-	GetInterface uintptr
+	xGetInterface uintptr
 
-	InterfaceAdded uintptr
+	xInterfaceAdded uintptr
 
-	InterfaceRemoved uintptr
+	xInterfaceRemoved uintptr
 }
 
 func (x *DBusObjectIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetObjectPath sets the callback function.
+func (x *DBusObjectIface) SetCallbackGetObjectPath(cb func(DBusObject) string) {
+	if cb == nil {
+		x.xGetObjectPath = 0
+	} else {
+		x.xGetObjectPath = purego.NewCallback(func(ObjectVarp uintptr) string {
+			return cb(&DBusObjectBase{Ptr: ObjectVarp})
+		})
+	}
+}
+
+// GetCallbackGetObjectPath gets the callback function.
+func (x *DBusObjectIface) GetCallbackGetObjectPath() func(DBusObject) string {
+	if x.xGetObjectPath == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetObjectPath)
+	return func(ObjectVar DBusObject) string {
+		return rawCallback(ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackGetInterfaces sets the callback function.
+func (x *DBusObjectIface) SetCallbackGetInterfaces(cb func(DBusObject) *glib.List) {
+	if cb == nil {
+		x.xGetInterfaces = 0
+	} else {
+		x.xGetInterfaces = purego.NewCallback(func(ObjectVarp uintptr) *glib.List {
+			return cb(&DBusObjectBase{Ptr: ObjectVarp})
+		})
+	}
+}
+
+// GetCallbackGetInterfaces gets the callback function.
+func (x *DBusObjectIface) GetCallbackGetInterfaces() func(DBusObject) *glib.List {
+	if x.xGetInterfaces == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xGetInterfaces)
+	return func(ObjectVar DBusObject) *glib.List {
+		return rawCallback(ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackGetInterface sets the callback function.
+func (x *DBusObjectIface) SetCallbackGetInterface(cb func(DBusObject, string) *DBusInterfaceBase) {
+	if cb == nil {
+		x.xGetInterface = 0
+	} else {
+		x.xGetInterface = purego.NewCallback(func(ObjectVarp uintptr, InterfaceNameVarp string) uintptr {
+			ret := cb(&DBusObjectBase{Ptr: ObjectVarp}, InterfaceNameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetInterface gets the callback function.
+func (x *DBusObjectIface) GetCallbackGetInterface() func(DBusObject, string) *DBusInterfaceBase {
+	if x.xGetInterface == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, InterfaceNameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetInterface)
+	return func(ObjectVar DBusObject, InterfaceNameVar string) *DBusInterfaceBase {
+		rawRet := rawCallback(ObjectVar.GoPointer(), InterfaceNameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &DBusInterfaceBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackInterfaceAdded sets the callback function.
+func (x *DBusObjectIface) SetCallbackInterfaceAdded(cb func(DBusObject, DBusInterface)) {
+	if cb == nil {
+		x.xInterfaceAdded = 0
+	} else {
+		x.xInterfaceAdded = purego.NewCallback(func(ObjectVarp uintptr, InterfaceVarp uintptr) {
+			cb(&DBusObjectBase{Ptr: ObjectVarp}, &DBusInterfaceBase{Ptr: InterfaceVarp})
+		})
+	}
+}
+
+// GetCallbackInterfaceAdded gets the callback function.
+func (x *DBusObjectIface) GetCallbackInterfaceAdded() func(DBusObject, DBusInterface) {
+	if x.xInterfaceAdded == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, InterfaceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInterfaceAdded)
+	return func(ObjectVar DBusObject, InterfaceVar DBusInterface) {
+		rawCallback(ObjectVar.GoPointer(), InterfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackInterfaceRemoved sets the callback function.
+func (x *DBusObjectIface) SetCallbackInterfaceRemoved(cb func(DBusObject, DBusInterface)) {
+	if cb == nil {
+		x.xInterfaceRemoved = 0
+	} else {
+		x.xInterfaceRemoved = purego.NewCallback(func(ObjectVarp uintptr, InterfaceVarp uintptr) {
+			cb(&DBusObjectBase{Ptr: ObjectVarp}, &DBusInterfaceBase{Ptr: InterfaceVarp})
+		})
+	}
+}
+
+// GetCallbackInterfaceRemoved gets the callback function.
+func (x *DBusObjectIface) GetCallbackInterfaceRemoved() func(DBusObject, DBusInterface) {
+	if x.xInterfaceRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, InterfaceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInterfaceRemoved)
+	return func(ObjectVar DBusObject, InterfaceVar DBusInterface) {
+		rawCallback(ObjectVar.GoPointer(), InterfaceVar.GoPointer())
+	}
 }
 
 // The #GDBusObject type is the base type for D-Bus objects on both
diff --git a/v4/gio/gdbusobjectmanager.go b/v4/gio/gdbusobjectmanager.go
index 6f6b94773dc1b4080eb8605a3c093ee46fd75342..730420c4faf7f674986579f5bf79083a49da80bf 100644
--- a/v4/gio/gdbusobjectmanager.go
+++ b/v4/gio/gdbusobjectmanager.go
@@ -17,25 +17,229 @@ 	_ structs.HostLayout
 
 	ParentIface uintptr
 
-	GetObjectPath uintptr
+	xGetObjectPath uintptr
 
-	GetObjects uintptr
+	xGetObjects uintptr
 
-	GetObject uintptr
+	xGetObject uintptr
 
-	GetInterface uintptr
+	xGetInterface uintptr
 
-	ObjectAdded uintptr
+	xObjectAdded uintptr
 
-	ObjectRemoved uintptr
+	xObjectRemoved uintptr
 
-	InterfaceAdded uintptr
+	xInterfaceAdded uintptr
 
-	InterfaceRemoved uintptr
+	xInterfaceRemoved uintptr
 }
 
 func (x *DBusObjectManagerIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetObjectPath sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackGetObjectPath(cb func(DBusObjectManager) string) {
+	if cb == nil {
+		x.xGetObjectPath = 0
+	} else {
+		x.xGetObjectPath = purego.NewCallback(func(ManagerVarp uintptr) string {
+			return cb(&DBusObjectManagerBase{Ptr: ManagerVarp})
+		})
+	}
+}
+
+// GetCallbackGetObjectPath gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackGetObjectPath() func(DBusObjectManager) string {
+	if x.xGetObjectPath == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetObjectPath)
+	return func(ManagerVar DBusObjectManager) string {
+		return rawCallback(ManagerVar.GoPointer())
+	}
+}
+
+// SetCallbackGetObjects sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackGetObjects(cb func(DBusObjectManager) *glib.List) {
+	if cb == nil {
+		x.xGetObjects = 0
+	} else {
+		x.xGetObjects = purego.NewCallback(func(ManagerVarp uintptr) *glib.List {
+			return cb(&DBusObjectManagerBase{Ptr: ManagerVarp})
+		})
+	}
+}
+
+// GetCallbackGetObjects gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackGetObjects() func(DBusObjectManager) *glib.List {
+	if x.xGetObjects == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xGetObjects)
+	return func(ManagerVar DBusObjectManager) *glib.List {
+		return rawCallback(ManagerVar.GoPointer())
+	}
+}
+
+// SetCallbackGetObject sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackGetObject(cb func(DBusObjectManager, string) *DBusObjectBase) {
+	if cb == nil {
+		x.xGetObject = 0
+	} else {
+		x.xGetObject = purego.NewCallback(func(ManagerVarp uintptr, ObjectPathVarp string) uintptr {
+			ret := cb(&DBusObjectManagerBase{Ptr: ManagerVarp}, ObjectPathVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetObject gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackGetObject() func(DBusObjectManager, string) *DBusObjectBase {
+	if x.xGetObject == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectPathVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetObject)
+	return func(ManagerVar DBusObjectManager, ObjectPathVar string) *DBusObjectBase {
+		rawRet := rawCallback(ManagerVar.GoPointer(), ObjectPathVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &DBusObjectBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetInterface sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackGetInterface(cb func(DBusObjectManager, string, string) *DBusInterfaceBase) {
+	if cb == nil {
+		x.xGetInterface = 0
+	} else {
+		x.xGetInterface = purego.NewCallback(func(ManagerVarp uintptr, ObjectPathVarp string, InterfaceNameVarp string) uintptr {
+			ret := cb(&DBusObjectManagerBase{Ptr: ManagerVarp}, ObjectPathVarp, InterfaceNameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetInterface gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackGetInterface() func(DBusObjectManager, string, string) *DBusInterfaceBase {
+	if x.xGetInterface == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectPathVarp string, InterfaceNameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetInterface)
+	return func(ManagerVar DBusObjectManager, ObjectPathVar string, InterfaceNameVar string) *DBusInterfaceBase {
+		rawRet := rawCallback(ManagerVar.GoPointer(), ObjectPathVar, InterfaceNameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &DBusInterfaceBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackObjectAdded sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackObjectAdded(cb func(DBusObjectManager, DBusObject)) {
+	if cb == nil {
+		x.xObjectAdded = 0
+	} else {
+		x.xObjectAdded = purego.NewCallback(func(ManagerVarp uintptr, ObjectVarp uintptr) {
+			cb(&DBusObjectManagerBase{Ptr: ManagerVarp}, &DBusObjectBase{Ptr: ObjectVarp})
+		})
+	}
+}
+
+// GetCallbackObjectAdded gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackObjectAdded() func(DBusObjectManager, DBusObject) {
+	if x.xObjectAdded == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xObjectAdded)
+	return func(ManagerVar DBusObjectManager, ObjectVar DBusObject) {
+		rawCallback(ManagerVar.GoPointer(), ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackObjectRemoved sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackObjectRemoved(cb func(DBusObjectManager, DBusObject)) {
+	if cb == nil {
+		x.xObjectRemoved = 0
+	} else {
+		x.xObjectRemoved = purego.NewCallback(func(ManagerVarp uintptr, ObjectVarp uintptr) {
+			cb(&DBusObjectManagerBase{Ptr: ManagerVarp}, &DBusObjectBase{Ptr: ObjectVarp})
+		})
+	}
+}
+
+// GetCallbackObjectRemoved gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackObjectRemoved() func(DBusObjectManager, DBusObject) {
+	if x.xObjectRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xObjectRemoved)
+	return func(ManagerVar DBusObjectManager, ObjectVar DBusObject) {
+		rawCallback(ManagerVar.GoPointer(), ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackInterfaceAdded sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackInterfaceAdded(cb func(DBusObjectManager, DBusObject, DBusInterface)) {
+	if cb == nil {
+		x.xInterfaceAdded = 0
+	} else {
+		x.xInterfaceAdded = purego.NewCallback(func(ManagerVarp uintptr, ObjectVarp uintptr, InterfaceVarp uintptr) {
+			cb(&DBusObjectManagerBase{Ptr: ManagerVarp}, &DBusObjectBase{Ptr: ObjectVarp}, &DBusInterfaceBase{Ptr: InterfaceVarp})
+		})
+	}
+}
+
+// GetCallbackInterfaceAdded gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackInterfaceAdded() func(DBusObjectManager, DBusObject, DBusInterface) {
+	if x.xInterfaceAdded == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectVarp uintptr, InterfaceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInterfaceAdded)
+	return func(ManagerVar DBusObjectManager, ObjectVar DBusObject, InterfaceVar DBusInterface) {
+		rawCallback(ManagerVar.GoPointer(), ObjectVar.GoPointer(), InterfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackInterfaceRemoved sets the callback function.
+func (x *DBusObjectManagerIface) SetCallbackInterfaceRemoved(cb func(DBusObjectManager, DBusObject, DBusInterface)) {
+	if cb == nil {
+		x.xInterfaceRemoved = 0
+	} else {
+		x.xInterfaceRemoved = purego.NewCallback(func(ManagerVarp uintptr, ObjectVarp uintptr, InterfaceVarp uintptr) {
+			cb(&DBusObjectManagerBase{Ptr: ManagerVarp}, &DBusObjectBase{Ptr: ObjectVarp}, &DBusInterfaceBase{Ptr: InterfaceVarp})
+		})
+	}
+}
+
+// GetCallbackInterfaceRemoved gets the callback function.
+func (x *DBusObjectManagerIface) GetCallbackInterfaceRemoved() func(DBusObjectManager, DBusObject, DBusInterface) {
+	if x.xInterfaceRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectVarp uintptr, InterfaceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInterfaceRemoved)
+	return func(ManagerVar DBusObjectManager, ObjectVar DBusObject, InterfaceVar DBusInterface) {
+		rawCallback(ManagerVar.GoPointer(), ObjectVar.GoPointer(), InterfaceVar.GoPointer())
+	}
 }
 
 // The #GDBusObjectManager type is the base type for service- and
diff --git a/v4/gio/gdbusobjectmanagerclient.go b/v4/gio/gdbusobjectmanagerclient.go
index 428187e18e7ff02229abd663025df14345cedc6e..6ebf7dda22e025f469a224dcd99cda7fa4d9ed11 100644
--- a/v4/gio/gdbusobjectmanagerclient.go
+++ b/v4/gio/gdbusobjectmanagerclient.go
@@ -18,15 +18,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	InterfaceProxySignal uintptr
+	xInterfaceProxySignal uintptr
 
-	InterfaceProxyPropertiesChanged uintptr
+	xInterfaceProxyPropertiesChanged uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *DBusObjectManagerClientClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackInterfaceProxySignal sets the callback function.
+func (x *DBusObjectManagerClientClass) SetCallbackInterfaceProxySignal(cb func(*DBusObjectManagerClient, *DBusObjectProxy, *DBusProxy, string, string, *glib.Variant)) {
+	if cb == nil {
+		x.xInterfaceProxySignal = 0
+	} else {
+		x.xInterfaceProxySignal = purego.NewCallback(func(ManagerVarp uintptr, ObjectProxyVarp uintptr, InterfaceProxyVarp uintptr, SenderNameVarp string, SignalNameVarp string, ParametersVarp *glib.Variant) {
+			cb(DBusObjectManagerClientNewFromInternalPtr(ManagerVarp), DBusObjectProxyNewFromInternalPtr(ObjectProxyVarp), DBusProxyNewFromInternalPtr(InterfaceProxyVarp), SenderNameVarp, SignalNameVarp, ParametersVarp)
+		})
+	}
+}
+
+// GetCallbackInterfaceProxySignal gets the callback function.
+func (x *DBusObjectManagerClientClass) GetCallbackInterfaceProxySignal() func(*DBusObjectManagerClient, *DBusObjectProxy, *DBusProxy, string, string, *glib.Variant) {
+	if x.xInterfaceProxySignal == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectProxyVarp uintptr, InterfaceProxyVarp uintptr, SenderNameVarp string, SignalNameVarp string, ParametersVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xInterfaceProxySignal)
+	return func(ManagerVar *DBusObjectManagerClient, ObjectProxyVar *DBusObjectProxy, InterfaceProxyVar *DBusProxy, SenderNameVar string, SignalNameVar string, ParametersVar *glib.Variant) {
+		rawCallback(ManagerVar.GoPointer(), ObjectProxyVar.GoPointer(), InterfaceProxyVar.GoPointer(), SenderNameVar, SignalNameVar, ParametersVar)
+	}
+}
+
+// SetCallbackInterfaceProxyPropertiesChanged sets the callback function.
+func (x *DBusObjectManagerClientClass) SetCallbackInterfaceProxyPropertiesChanged(cb func(*DBusObjectManagerClient, *DBusObjectProxy, *DBusProxy, *glib.Variant, string)) {
+	if cb == nil {
+		x.xInterfaceProxyPropertiesChanged = 0
+	} else {
+		x.xInterfaceProxyPropertiesChanged = purego.NewCallback(func(ManagerVarp uintptr, ObjectProxyVarp uintptr, InterfaceProxyVarp uintptr, ChangedPropertiesVarp *glib.Variant, InvalidatedPropertiesVarp string) {
+			cb(DBusObjectManagerClientNewFromInternalPtr(ManagerVarp), DBusObjectProxyNewFromInternalPtr(ObjectProxyVarp), DBusProxyNewFromInternalPtr(InterfaceProxyVarp), ChangedPropertiesVarp, InvalidatedPropertiesVarp)
+		})
+	}
+}
+
+// GetCallbackInterfaceProxyPropertiesChanged gets the callback function.
+func (x *DBusObjectManagerClientClass) GetCallbackInterfaceProxyPropertiesChanged() func(*DBusObjectManagerClient, *DBusObjectProxy, *DBusProxy, *glib.Variant, string) {
+	if x.xInterfaceProxyPropertiesChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, ObjectProxyVarp uintptr, InterfaceProxyVarp uintptr, ChangedPropertiesVarp *glib.Variant, InvalidatedPropertiesVarp string)
+	purego.RegisterFunc(&rawCallback, x.xInterfaceProxyPropertiesChanged)
+	return func(ManagerVar *DBusObjectManagerClient, ObjectProxyVar *DBusObjectProxy, InterfaceProxyVar *DBusProxy, ChangedPropertiesVar *glib.Variant, InvalidatedPropertiesVar string) {
+		rawCallback(ManagerVar.GoPointer(), ObjectProxyVar.GoPointer(), InterfaceProxyVar.GoPointer(), ChangedPropertiesVar, InvalidatedPropertiesVar)
+	}
 }
 
 type DBusObjectManagerClientPrivate struct {
diff --git a/v4/gio/gdbusobjectskeleton.go b/v4/gio/gdbusobjectskeleton.go
index e215fb2256861e8f8a33e0760cfeb382ff6b77f4..f092d238370dd8740441e306e8a891b4a6bbd0f3 100644
--- a/v4/gio/gdbusobjectskeleton.go
+++ b/v4/gio/gdbusobjectskeleton.go
@@ -18,13 +18,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	AuthorizeMethod uintptr
+	xAuthorizeMethod uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *DBusObjectSkeletonClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAuthorizeMethod sets the callback function.
+func (x *DBusObjectSkeletonClass) SetCallbackAuthorizeMethod(cb func(*DBusObjectSkeleton, *DBusInterfaceSkeleton, *DBusMethodInvocation) bool) {
+	if cb == nil {
+		x.xAuthorizeMethod = 0
+	} else {
+		x.xAuthorizeMethod = purego.NewCallback(func(ObjectVarp uintptr, InterfaceVarp uintptr, InvocationVarp uintptr) bool {
+			return cb(DBusObjectSkeletonNewFromInternalPtr(ObjectVarp), DBusInterfaceSkeletonNewFromInternalPtr(InterfaceVarp), DBusMethodInvocationNewFromInternalPtr(InvocationVarp))
+		})
+	}
+}
+
+// GetCallbackAuthorizeMethod gets the callback function.
+func (x *DBusObjectSkeletonClass) GetCallbackAuthorizeMethod() func(*DBusObjectSkeleton, *DBusInterfaceSkeleton, *DBusMethodInvocation) bool {
+	if x.xAuthorizeMethod == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, InterfaceVarp uintptr, InvocationVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xAuthorizeMethod)
+	return func(ObjectVar *DBusObjectSkeleton, InterfaceVar *DBusInterfaceSkeleton, InvocationVar *DBusMethodInvocation) bool {
+		return rawCallback(ObjectVar.GoPointer(), InterfaceVar.GoPointer(), InvocationVar.GoPointer())
+	}
 }
 
 type DBusObjectSkeletonPrivate struct {
diff --git a/v4/gio/gdbusproxy.go b/v4/gio/gdbusproxy.go
index 0f089c88c1e4932010497479f76e68ac21c7977b..55f9f07e3cbf52207cb98e5544cac5b3ac3387c4 100644
--- a/v4/gio/gdbusproxy.go
+++ b/v4/gio/gdbusproxy.go
@@ -18,15 +18,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GPropertiesChanged uintptr
+	xGPropertiesChanged uintptr
 
-	GSignal uintptr
+	xGSignal uintptr
 
 	Padding [32]uintptr
 }
 
 func (x *DBusProxyClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGPropertiesChanged sets the callback function.
+func (x *DBusProxyClass) SetCallbackGPropertiesChanged(cb func(*DBusProxy, *glib.Variant, string)) {
+	if cb == nil {
+		x.xGPropertiesChanged = 0
+	} else {
+		x.xGPropertiesChanged = purego.NewCallback(func(ProxyVarp uintptr, ChangedPropertiesVarp *glib.Variant, InvalidatedPropertiesVarp string) {
+			cb(DBusProxyNewFromInternalPtr(ProxyVarp), ChangedPropertiesVarp, InvalidatedPropertiesVarp)
+		})
+	}
+}
+
+// GetCallbackGPropertiesChanged gets the callback function.
+func (x *DBusProxyClass) GetCallbackGPropertiesChanged() func(*DBusProxy, *glib.Variant, string) {
+	if x.xGPropertiesChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ProxyVarp uintptr, ChangedPropertiesVarp *glib.Variant, InvalidatedPropertiesVarp string)
+	purego.RegisterFunc(&rawCallback, x.xGPropertiesChanged)
+	return func(ProxyVar *DBusProxy, ChangedPropertiesVar *glib.Variant, InvalidatedPropertiesVar string) {
+		rawCallback(ProxyVar.GoPointer(), ChangedPropertiesVar, InvalidatedPropertiesVar)
+	}
+}
+
+// SetCallbackGSignal sets the callback function.
+func (x *DBusProxyClass) SetCallbackGSignal(cb func(*DBusProxy, string, string, *glib.Variant)) {
+	if cb == nil {
+		x.xGSignal = 0
+	} else {
+		x.xGSignal = purego.NewCallback(func(ProxyVarp uintptr, SenderNameVarp string, SignalNameVarp string, ParametersVarp *glib.Variant) {
+			cb(DBusProxyNewFromInternalPtr(ProxyVarp), SenderNameVarp, SignalNameVarp, ParametersVarp)
+		})
+	}
+}
+
+// GetCallbackGSignal gets the callback function.
+func (x *DBusProxyClass) GetCallbackGSignal() func(*DBusProxy, string, string, *glib.Variant) {
+	if x.xGSignal == 0 {
+		return nil
+	}
+	var rawCallback func(ProxyVarp uintptr, SenderNameVarp string, SignalNameVarp string, ParametersVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xGSignal)
+	return func(ProxyVar *DBusProxy, SenderNameVar string, SignalNameVar string, ParametersVar *glib.Variant) {
+		rawCallback(ProxyVar.GoPointer(), SenderNameVar, SignalNameVar, ParametersVar)
+	}
 }
 
 type DBusProxyPrivate struct {
@@ -330,13 +376,13 @@ 	xDBusProxyCallWithUnixFdList(x.GoPointer(), MethodNameVar, ParametersVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
-var xDBusProxyCallWithUnixFdListFinish func(uintptr, *uintptr, uintptr, **glib.Error) *glib.Variant
+var xDBusProxyCallWithUnixFdListFinish func(uintptr, uintptr, uintptr, **glib.Error) *glib.Variant
 
 // Finishes an operation started with g_dbus_proxy_call_with_unix_fd_list().
 func (x *DBusProxy) CallWithUnixFdListFinish(OutFdListVar **UnixFDList, ResVar AsyncResult) (*glib.Variant, error) {
 	var cerr *glib.Error
 
-	cret := xDBusProxyCallWithUnixFdListFinish(x.GoPointer(), gobject.ConvertPtr(OutFdListVar), ResVar.GoPointer(), &cerr)
+	cret := xDBusProxyCallWithUnixFdListFinish(x.GoPointer(), *gobject.ConvertPtr(OutFdListVar), ResVar.GoPointer(), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -344,7 +390,7 @@ 	return cret, cerr
 
 }
 
-var xDBusProxyCallWithUnixFdListSync func(uintptr, string, *glib.Variant, DBusCallFlags, int, uintptr, *uintptr, uintptr, **glib.Error) *glib.Variant
+var xDBusProxyCallWithUnixFdListSync func(uintptr, string, *glib.Variant, DBusCallFlags, int, uintptr, uintptr, uintptr, **glib.Error) *glib.Variant
 
 // Like g_dbus_proxy_call_sync() but also takes and returns #GUnixFDList objects.
 //
@@ -352,7 +398,7 @@ // This method is only available on UNIX.
 func (x *DBusProxy) CallWithUnixFdListSync(MethodNameVar string, ParametersVar *glib.Variant, FlagsVar DBusCallFlags, TimeoutMsecVar int, FdListVar *UnixFDList, OutFdListVar **UnixFDList, CancellableVar *Cancellable) (*glib.Variant, error) {
 	var cerr *glib.Error
 
-	cret := xDBusProxyCallWithUnixFdListSync(x.GoPointer(), MethodNameVar, ParametersVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), gobject.ConvertPtr(OutFdListVar), CancellableVar.GoPointer(), &cerr)
+	cret := xDBusProxyCallWithUnixFdListSync(x.GoPointer(), MethodNameVar, ParametersVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), *gobject.ConvertPtr(OutFdListVar), CancellableVar.GoPointer(), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
diff --git a/v4/gio/gdebugcontrollerdbus.go b/v4/gio/gdebugcontrollerdbus.go
index b8db1789362514df4895780143fbb77f5f1fcf1e..94fb067ca3e1aa2a35dcb00e75b9b58857acf887 100644
--- a/v4/gio/gdebugcontrollerdbus.go
+++ b/v4/gio/gdebugcontrollerdbus.go
@@ -18,13 +18,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Authorize uintptr
+	xAuthorize uintptr
 
 	Padding [12]uintptr
 }
 
 func (x *DebugControllerDBusClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAuthorize sets the callback function.
+func (x *DebugControllerDBusClass) SetCallbackAuthorize(cb func(*DebugControllerDBus, *DBusMethodInvocation) bool) {
+	if cb == nil {
+		x.xAuthorize = 0
+	} else {
+		x.xAuthorize = purego.NewCallback(func(ControllerVarp uintptr, InvocationVarp uintptr) bool {
+			return cb(DebugControllerDBusNewFromInternalPtr(ControllerVarp), DBusMethodInvocationNewFromInternalPtr(InvocationVarp))
+		})
+	}
+}
+
+// GetCallbackAuthorize gets the callback function.
+func (x *DebugControllerDBusClass) GetCallbackAuthorize() func(*DebugControllerDBus, *DBusMethodInvocation) bool {
+	if x.xAuthorize == 0 {
+		return nil
+	}
+	var rawCallback func(ControllerVarp uintptr, InvocationVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xAuthorize)
+	return func(ControllerVar *DebugControllerDBus, InvocationVar *DBusMethodInvocation) bool {
+		return rawCallback(ControllerVar.GoPointer(), InvocationVar.GoPointer())
+	}
 }
 
 // #GDebugControllerDBus is an implementation of #GDebugController which exposes
diff --git a/v4/gio/gdesktopappinfo.go b/v4/gio/gdesktopappinfo.go
index 3f17469bc61b919bf79099e3d6c84f5cd5106b5c..28e3d218d3be6d2984f3d596be428f2a2290ce8b 100644
--- a/v4/gio/gdesktopappinfo.go
+++ b/v4/gio/gdesktopappinfo.go
@@ -34,11 +34,44 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	GetDefaultForUriScheme uintptr
+	xGetDefaultForUriScheme uintptr
 }
 
 func (x *DesktopAppInfoLookupIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetDefaultForUriScheme sets the callback function.
+func (x *DesktopAppInfoLookupIface) SetCallbackGetDefaultForUriScheme(cb func(DesktopAppInfoLookup, string) *AppInfoBase) {
+	if cb == nil {
+		x.xGetDefaultForUriScheme = 0
+	} else {
+		x.xGetDefaultForUriScheme = purego.NewCallback(func(LookupVarp uintptr, UriSchemeVarp string) uintptr {
+			ret := cb(&DesktopAppInfoLookupBase{Ptr: LookupVarp}, UriSchemeVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetDefaultForUriScheme gets the callback function.
+func (x *DesktopAppInfoLookupIface) GetCallbackGetDefaultForUriScheme() func(DesktopAppInfoLookup, string) *AppInfoBase {
+	if x.xGetDefaultForUriScheme == 0 {
+		return nil
+	}
+	var rawCallback func(LookupVarp uintptr, UriSchemeVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetDefaultForUriScheme)
+	return func(LookupVar DesktopAppInfoLookup, UriSchemeVar string) *AppInfoBase {
+		rawRet := rawCallback(LookupVar.GoPointer(), UriSchemeVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &AppInfoBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // #GDesktopAppInfoLookup is an opaque data structure and can only be accessed
diff --git a/v4/gio/gdrive.go b/v4/gio/gdrive.go
index c6734a04eb78ee30037e0eebd00665e4cca88c63..164a982c41b840e08dc4618b4beedbc81da3affc 100644
--- a/v4/gio/gdrive.go
+++ b/v4/gio/gdrive.go
@@ -17,75 +17,831 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	Disconnected uintptr
+	xDisconnected uintptr
 
-	EjectButton uintptr
+	xEjectButton uintptr
 
-	GetName uintptr
+	xGetName uintptr
 
-	GetIcon uintptr
+	xGetIcon uintptr
 
-	HasVolumes uintptr
+	xHasVolumes uintptr
 
-	GetVolumes uintptr
+	xGetVolumes uintptr
 
-	IsMediaRemovable uintptr
+	xIsMediaRemovable uintptr
 
-	HasMedia uintptr
+	xHasMedia uintptr
 
-	IsMediaCheckAutomatic uintptr
+	xIsMediaCheckAutomatic uintptr
 
-	CanEject uintptr
+	xCanEject uintptr
 
-	CanPollForMedia uintptr
+	xCanPollForMedia uintptr
 
-	Eject uintptr
+	xEject uintptr
 
-	EjectFinish uintptr
+	xEjectFinish uintptr
 
-	PollForMedia uintptr
+	xPollForMedia uintptr
 
-	PollForMediaFinish uintptr
+	xPollForMediaFinish uintptr
 
-	GetIdentifier uintptr
+	xGetIdentifier uintptr
 
-	EnumerateIdentifiers uintptr
+	xEnumerateIdentifiers uintptr
 
-	GetStartStopType uintptr
+	xGetStartStopType uintptr
 
-	CanStart uintptr
+	xCanStart uintptr
 
-	CanStartDegraded uintptr
+	xCanStartDegraded uintptr
 
-	Start uintptr
+	xStart uintptr
 
-	StartFinish uintptr
+	xStartFinish uintptr
 
-	CanStop uintptr
+	xCanStop uintptr
 
-	Stop uintptr
+	xStop uintptr
 
-	StopFinish uintptr
+	xStopFinish uintptr
 
-	StopButton uintptr
+	xStopButton uintptr
 
-	EjectWithOperation uintptr
+	xEjectWithOperation uintptr
 
-	EjectWithOperationFinish uintptr
+	xEjectWithOperationFinish uintptr
 
-	GetSortKey uintptr
+	xGetSortKey uintptr
 
-	GetSymbolicIcon uintptr
+	xGetSymbolicIcon uintptr
 
-	IsRemovable uintptr
+	xIsRemovable uintptr
 }
 
 func (x *DriveIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackChanged sets the callback function.
+func (x *DriveIface) SetCallbackChanged(cb func(Drive)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(DriveVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *DriveIface) GetCallbackChanged() func(Drive) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(DriveVar Drive) {
+		rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackDisconnected sets the callback function.
+func (x *DriveIface) SetCallbackDisconnected(cb func(Drive)) {
+	if cb == nil {
+		x.xDisconnected = 0
+	} else {
+		x.xDisconnected = purego.NewCallback(func(DriveVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackDisconnected gets the callback function.
+func (x *DriveIface) GetCallbackDisconnected() func(Drive) {
+	if x.xDisconnected == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDisconnected)
+	return func(DriveVar Drive) {
+		rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackEjectButton sets the callback function.
+func (x *DriveIface) SetCallbackEjectButton(cb func(Drive)) {
+	if cb == nil {
+		x.xEjectButton = 0
+	} else {
+		x.xEjectButton = purego.NewCallback(func(DriveVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackEjectButton gets the callback function.
+func (x *DriveIface) GetCallbackEjectButton() func(Drive) {
+	if x.xEjectButton == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEjectButton)
+	return func(DriveVar Drive) {
+		rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackGetName sets the callback function.
+func (x *DriveIface) SetCallbackGetName(cb func(Drive) string) {
+	if cb == nil {
+		x.xGetName = 0
+	} else {
+		x.xGetName = purego.NewCallback(func(DriveVarp uintptr) string {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackGetName gets the callback function.
+func (x *DriveIface) GetCallbackGetName() func(Drive) string {
+	if x.xGetName == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetName)
+	return func(DriveVar Drive) string {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIcon sets the callback function.
+func (x *DriveIface) SetCallbackGetIcon(cb func(Drive) *IconBase) {
+	if cb == nil {
+		x.xGetIcon = 0
+	} else {
+		x.xGetIcon = purego.NewCallback(func(DriveVarp uintptr) uintptr {
+			ret := cb(&DriveBase{Ptr: DriveVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetIcon gets the callback function.
+func (x *DriveIface) GetCallbackGetIcon() func(Drive) *IconBase {
+	if x.xGetIcon == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetIcon)
+	return func(DriveVar Drive) *IconBase {
+		rawRet := rawCallback(DriveVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackHasVolumes sets the callback function.
+func (x *DriveIface) SetCallbackHasVolumes(cb func(Drive) bool) {
+	if cb == nil {
+		x.xHasVolumes = 0
+	} else {
+		x.xHasVolumes = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackHasVolumes gets the callback function.
+func (x *DriveIface) GetCallbackHasVolumes() func(Drive) bool {
+	if x.xHasVolumes == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xHasVolumes)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackGetVolumes sets the callback function.
+func (x *DriveIface) SetCallbackGetVolumes(cb func(Drive) *glib.List) {
+	if cb == nil {
+		x.xGetVolumes = 0
+	} else {
+		x.xGetVolumes = purego.NewCallback(func(DriveVarp uintptr) *glib.List {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackGetVolumes gets the callback function.
+func (x *DriveIface) GetCallbackGetVolumes() func(Drive) *glib.List {
+	if x.xGetVolumes == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xGetVolumes)
+	return func(DriveVar Drive) *glib.List {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackIsMediaRemovable sets the callback function.
+func (x *DriveIface) SetCallbackIsMediaRemovable(cb func(Drive) bool) {
+	if cb == nil {
+		x.xIsMediaRemovable = 0
+	} else {
+		x.xIsMediaRemovable = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackIsMediaRemovable gets the callback function.
+func (x *DriveIface) GetCallbackIsMediaRemovable() func(Drive) bool {
+	if x.xIsMediaRemovable == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsMediaRemovable)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackHasMedia sets the callback function.
+func (x *DriveIface) SetCallbackHasMedia(cb func(Drive) bool) {
+	if cb == nil {
+		x.xHasMedia = 0
+	} else {
+		x.xHasMedia = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackHasMedia gets the callback function.
+func (x *DriveIface) GetCallbackHasMedia() func(Drive) bool {
+	if x.xHasMedia == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xHasMedia)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackIsMediaCheckAutomatic sets the callback function.
+func (x *DriveIface) SetCallbackIsMediaCheckAutomatic(cb func(Drive) bool) {
+	if cb == nil {
+		x.xIsMediaCheckAutomatic = 0
+	} else {
+		x.xIsMediaCheckAutomatic = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackIsMediaCheckAutomatic gets the callback function.
+func (x *DriveIface) GetCallbackIsMediaCheckAutomatic() func(Drive) bool {
+	if x.xIsMediaCheckAutomatic == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsMediaCheckAutomatic)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackCanEject sets the callback function.
+func (x *DriveIface) SetCallbackCanEject(cb func(Drive) bool) {
+	if cb == nil {
+		x.xCanEject = 0
+	} else {
+		x.xCanEject = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackCanEject gets the callback function.
+func (x *DriveIface) GetCallbackCanEject() func(Drive) bool {
+	if x.xCanEject == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanEject)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackCanPollForMedia sets the callback function.
+func (x *DriveIface) SetCallbackCanPollForMedia(cb func(Drive) bool) {
+	if cb == nil {
+		x.xCanPollForMedia = 0
+	} else {
+		x.xCanPollForMedia = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackCanPollForMedia gets the callback function.
+func (x *DriveIface) GetCallbackCanPollForMedia() func(Drive) bool {
+	if x.xCanPollForMedia == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanPollForMedia)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackEject sets the callback function.
+func (x *DriveIface) SetCallbackEject(cb func(Drive, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEject = 0
+	} else {
+		x.xEject = purego.NewCallback(func(DriveVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEject gets the callback function.
+func (x *DriveIface) GetCallbackEject() func(Drive, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEject == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEject)
+	return func(DriveVar Drive, FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(DriveVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectFinish sets the callback function.
+func (x *DriveIface) SetCallbackEjectFinish(cb func(Drive, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectFinish = 0
+	} else {
+		x.xEjectFinish = purego.NewCallback(func(DriveVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectFinish gets the callback function.
+func (x *DriveIface) GetCallbackEjectFinish() func(Drive, AsyncResult) bool {
+	if x.xEjectFinish == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectFinish)
+	return func(DriveVar Drive, ResultVar AsyncResult) bool {
+		return rawCallback(DriveVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackPollForMedia sets the callback function.
+func (x *DriveIface) SetCallbackPollForMedia(cb func(Drive, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xPollForMedia = 0
+	} else {
+		x.xPollForMedia = purego.NewCallback(func(DriveVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp}, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackPollForMedia gets the callback function.
+func (x *DriveIface) GetCallbackPollForMedia() func(Drive, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xPollForMedia == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPollForMedia)
+	return func(DriveVar Drive, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(DriveVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackPollForMediaFinish sets the callback function.
+func (x *DriveIface) SetCallbackPollForMediaFinish(cb func(Drive, AsyncResult) bool) {
+	if cb == nil {
+		x.xPollForMediaFinish = 0
+	} else {
+		x.xPollForMediaFinish = purego.NewCallback(func(DriveVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackPollForMediaFinish gets the callback function.
+func (x *DriveIface) GetCallbackPollForMediaFinish() func(Drive, AsyncResult) bool {
+	if x.xPollForMediaFinish == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xPollForMediaFinish)
+	return func(DriveVar Drive, ResultVar AsyncResult) bool {
+		return rawCallback(DriveVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIdentifier sets the callback function.
+func (x *DriveIface) SetCallbackGetIdentifier(cb func(Drive, string) string) {
+	if cb == nil {
+		x.xGetIdentifier = 0
+	} else {
+		x.xGetIdentifier = purego.NewCallback(func(DriveVarp uintptr, KindVarp string) string {
+			return cb(&DriveBase{Ptr: DriveVarp}, KindVarp)
+		})
+	}
+}
+
+// GetCallbackGetIdentifier gets the callback function.
+func (x *DriveIface) GetCallbackGetIdentifier() func(Drive, string) string {
+	if x.xGetIdentifier == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, KindVarp string) string
+	purego.RegisterFunc(&rawCallback, x.xGetIdentifier)
+	return func(DriveVar Drive, KindVar string) string {
+		return rawCallback(DriveVar.GoPointer(), KindVar)
+	}
+}
+
+// SetCallbackEnumerateIdentifiers sets the callback function.
+func (x *DriveIface) SetCallbackEnumerateIdentifiers(cb func(Drive) []string) {
+	if cb == nil {
+		x.xEnumerateIdentifiers = 0
+	} else {
+		x.xEnumerateIdentifiers = purego.NewCallback(func(DriveVarp uintptr) []string {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackEnumerateIdentifiers gets the callback function.
+func (x *DriveIface) GetCallbackEnumerateIdentifiers() func(Drive) []string {
+	if x.xEnumerateIdentifiers == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xEnumerateIdentifiers)
+	return func(DriveVar Drive) []string {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackGetStartStopType sets the callback function.
+func (x *DriveIface) SetCallbackGetStartStopType(cb func(Drive) DriveStartStopType) {
+	if cb == nil {
+		x.xGetStartStopType = 0
+	} else {
+		x.xGetStartStopType = purego.NewCallback(func(DriveVarp uintptr) DriveStartStopType {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackGetStartStopType gets the callback function.
+func (x *DriveIface) GetCallbackGetStartStopType() func(Drive) DriveStartStopType {
+	if x.xGetStartStopType == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) DriveStartStopType
+	purego.RegisterFunc(&rawCallback, x.xGetStartStopType)
+	return func(DriveVar Drive) DriveStartStopType {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackCanStart sets the callback function.
+func (x *DriveIface) SetCallbackCanStart(cb func(Drive) bool) {
+	if cb == nil {
+		x.xCanStart = 0
+	} else {
+		x.xCanStart = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackCanStart gets the callback function.
+func (x *DriveIface) GetCallbackCanStart() func(Drive) bool {
+	if x.xCanStart == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanStart)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackCanStartDegraded sets the callback function.
+func (x *DriveIface) SetCallbackCanStartDegraded(cb func(Drive) bool) {
+	if cb == nil {
+		x.xCanStartDegraded = 0
+	} else {
+		x.xCanStartDegraded = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackCanStartDegraded gets the callback function.
+func (x *DriveIface) GetCallbackCanStartDegraded() func(Drive) bool {
+	if x.xCanStartDegraded == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanStartDegraded)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackStart sets the callback function.
+func (x *DriveIface) SetCallbackStart(cb func(Drive, DriveStartFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xStart = 0
+	} else {
+		x.xStart = purego.NewCallback(func(DriveVarp uintptr, FlagsVarp DriveStartFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackStart gets the callback function.
+func (x *DriveIface) GetCallbackStart() func(Drive, DriveStartFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xStart == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, FlagsVarp DriveStartFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStart)
+	return func(DriveVar Drive, FlagsVar DriveStartFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(DriveVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackStartFinish sets the callback function.
+func (x *DriveIface) SetCallbackStartFinish(cb func(Drive, AsyncResult) bool) {
+	if cb == nil {
+		x.xStartFinish = 0
+	} else {
+		x.xStartFinish = purego.NewCallback(func(DriveVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackStartFinish gets the callback function.
+func (x *DriveIface) GetCallbackStartFinish() func(Drive, AsyncResult) bool {
+	if x.xStartFinish == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xStartFinish)
+	return func(DriveVar Drive, ResultVar AsyncResult) bool {
+		return rawCallback(DriveVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackCanStop sets the callback function.
+func (x *DriveIface) SetCallbackCanStop(cb func(Drive) bool) {
+	if cb == nil {
+		x.xCanStop = 0
+	} else {
+		x.xCanStop = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackCanStop gets the callback function.
+func (x *DriveIface) GetCallbackCanStop() func(Drive) bool {
+	if x.xCanStop == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanStop)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackStop sets the callback function.
+func (x *DriveIface) SetCallbackStop(cb func(Drive, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xStop = 0
+	} else {
+		x.xStop = purego.NewCallback(func(DriveVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackStop gets the callback function.
+func (x *DriveIface) GetCallbackStop() func(Drive, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xStop == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStop)
+	return func(DriveVar Drive, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(DriveVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackStopFinish sets the callback function.
+func (x *DriveIface) SetCallbackStopFinish(cb func(Drive, AsyncResult) bool) {
+	if cb == nil {
+		x.xStopFinish = 0
+	} else {
+		x.xStopFinish = purego.NewCallback(func(DriveVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackStopFinish gets the callback function.
+func (x *DriveIface) GetCallbackStopFinish() func(Drive, AsyncResult) bool {
+	if x.xStopFinish == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xStopFinish)
+	return func(DriveVar Drive, ResultVar AsyncResult) bool {
+		return rawCallback(DriveVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackStopButton sets the callback function.
+func (x *DriveIface) SetCallbackStopButton(cb func(Drive)) {
+	if cb == nil {
+		x.xStopButton = 0
+	} else {
+		x.xStopButton = purego.NewCallback(func(DriveVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackStopButton gets the callback function.
+func (x *DriveIface) GetCallbackStopButton() func(Drive) {
+	if x.xStopButton == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStopButton)
+	return func(DriveVar Drive) {
+		rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackEjectWithOperation sets the callback function.
+func (x *DriveIface) SetCallbackEjectWithOperation(cb func(Drive, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEjectWithOperation = 0
+	} else {
+		x.xEjectWithOperation = purego.NewCallback(func(DriveVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&DriveBase{Ptr: DriveVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEjectWithOperation gets the callback function.
+func (x *DriveIface) GetCallbackEjectWithOperation() func(Drive, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEjectWithOperation == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEjectWithOperation)
+	return func(DriveVar Drive, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(DriveVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectWithOperationFinish sets the callback function.
+func (x *DriveIface) SetCallbackEjectWithOperationFinish(cb func(Drive, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectWithOperationFinish = 0
+	} else {
+		x.xEjectWithOperationFinish = purego.NewCallback(func(DriveVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectWithOperationFinish gets the callback function.
+func (x *DriveIface) GetCallbackEjectWithOperationFinish() func(Drive, AsyncResult) bool {
+	if x.xEjectWithOperationFinish == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectWithOperationFinish)
+	return func(DriveVar Drive, ResultVar AsyncResult) bool {
+		return rawCallback(DriveVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSortKey sets the callback function.
+func (x *DriveIface) SetCallbackGetSortKey(cb func(Drive) string) {
+	if cb == nil {
+		x.xGetSortKey = 0
+	} else {
+		x.xGetSortKey = purego.NewCallback(func(DriveVarp uintptr) string {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackGetSortKey gets the callback function.
+func (x *DriveIface) GetCallbackGetSortKey() func(Drive) string {
+	if x.xGetSortKey == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetSortKey)
+	return func(DriveVar Drive) string {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSymbolicIcon sets the callback function.
+func (x *DriveIface) SetCallbackGetSymbolicIcon(cb func(Drive) *IconBase) {
+	if cb == nil {
+		x.xGetSymbolicIcon = 0
+	} else {
+		x.xGetSymbolicIcon = purego.NewCallback(func(DriveVarp uintptr) uintptr {
+			ret := cb(&DriveBase{Ptr: DriveVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetSymbolicIcon gets the callback function.
+func (x *DriveIface) GetCallbackGetSymbolicIcon() func(Drive) *IconBase {
+	if x.xGetSymbolicIcon == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetSymbolicIcon)
+	return func(DriveVar Drive) *IconBase {
+		rawRet := rawCallback(DriveVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackIsRemovable sets the callback function.
+func (x *DriveIface) SetCallbackIsRemovable(cb func(Drive) bool) {
+	if cb == nil {
+		x.xIsRemovable = 0
+	} else {
+		x.xIsRemovable = purego.NewCallback(func(DriveVarp uintptr) bool {
+			return cb(&DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackIsRemovable gets the callback function.
+func (x *DriveIface) GetCallbackIsRemovable() func(Drive) bool {
+	if x.xIsRemovable == 0 {
+		return nil
+	}
+	var rawCallback func(DriveVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsRemovable)
+	return func(DriveVar Drive) bool {
+		return rawCallback(DriveVar.GoPointer())
+	}
+}
+
 // #GDrive - this represent a piece of hardware connected to the machine.
 // It's generally only created for removable hardware or hardware with
 // removable media.
@@ -121,9 +877,9 @@ 	CanStart() bool
 	CanStartDegraded() bool
 	CanStop() bool
 	Eject(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectFinish(ResultVar AsyncResult) bool
+	EjectFinish(ResultVar AsyncResult) (bool, error)
 	EjectWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectWithOperationFinish(ResultVar AsyncResult) bool
+	EjectWithOperationFinish(ResultVar AsyncResult) (bool, error)
 	EnumerateIdentifiers() []string
 	GetIcon() *IconBase
 	GetIdentifier(KindVar string) string
@@ -138,11 +894,11 @@ 	IsMediaCheckAutomatic() bool
 	IsMediaRemovable() bool
 	IsRemovable() bool
 	PollForMedia(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	PollForMediaFinish(ResultVar AsyncResult) bool
+	PollForMediaFinish(ResultVar AsyncResult) (bool, error)
 	Start(FlagsVar DriveStartFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	StartFinish(ResultVar AsyncResult) bool
+	StartFinish(ResultVar AsyncResult) (bool, error)
 	Stop(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	StopFinish(ResultVar AsyncResult) bool
+	StopFinish(ResultVar AsyncResult) (bool, error)
 }
 
 var xDriveGLibType func() types.GType
diff --git a/v4/gio/gdtlsconnection.go b/v4/gio/gdtlsconnection.go
index b42bb19cd51ac83ee957bafe41cfb7745cd1ecef..137ac4a2492f6bec1d9157cab7c4a8234cf19fa6 100644
--- a/v4/gio/gdtlsconnection.go
+++ b/v4/gio/gdtlsconnection.go
@@ -18,31 +18,261 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	AcceptCertificate uintptr
+	xAcceptCertificate uintptr
 
-	Handshake uintptr
+	xHandshake uintptr
 
-	HandshakeAsync uintptr
+	xHandshakeAsync uintptr
 
-	HandshakeFinish uintptr
+	xHandshakeFinish uintptr
 
-	Shutdown uintptr
+	xShutdown uintptr
 
-	ShutdownAsync uintptr
+	xShutdownAsync uintptr
 
-	ShutdownFinish uintptr
+	xShutdownFinish uintptr
 
-	SetAdvertisedProtocols uintptr
+	xSetAdvertisedProtocols uintptr
 
-	GetNegotiatedProtocol uintptr
+	xGetNegotiatedProtocol uintptr
 
-	GetBindingData uintptr
+	xGetBindingData uintptr
 }
 
 func (x *DtlsConnectionInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackAcceptCertificate sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackAcceptCertificate(cb func(DtlsConnection, *TlsCertificate, TlsCertificateFlags) bool) {
+	if cb == nil {
+		x.xAcceptCertificate = 0
+	} else {
+		x.xAcceptCertificate = purego.NewCallback(func(ConnectionVarp uintptr, PeerCertVarp uintptr, ErrorsVarp TlsCertificateFlags) bool {
+			return cb(&DtlsConnectionBase{Ptr: ConnectionVarp}, TlsCertificateNewFromInternalPtr(PeerCertVarp), ErrorsVarp)
+		})
+	}
+}
+
+// GetCallbackAcceptCertificate gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackAcceptCertificate() func(DtlsConnection, *TlsCertificate, TlsCertificateFlags) bool {
+	if x.xAcceptCertificate == 0 {
+		return nil
+	}
+	var rawCallback func(ConnectionVarp uintptr, PeerCertVarp uintptr, ErrorsVarp TlsCertificateFlags) bool
+	purego.RegisterFunc(&rawCallback, x.xAcceptCertificate)
+	return func(ConnectionVar DtlsConnection, PeerCertVar *TlsCertificate, ErrorsVar TlsCertificateFlags) bool {
+		return rawCallback(ConnectionVar.GoPointer(), PeerCertVar.GoPointer(), ErrorsVar)
+	}
+}
+
+// SetCallbackHandshake sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackHandshake(cb func(DtlsConnection, *Cancellable) bool) {
+	if cb == nil {
+		x.xHandshake = 0
+	} else {
+		x.xHandshake = purego.NewCallback(func(ConnVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(&DtlsConnectionBase{Ptr: ConnVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackHandshake gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackHandshake() func(DtlsConnection, *Cancellable) bool {
+	if x.xHandshake == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xHandshake)
+	return func(ConnVar DtlsConnection, CancellableVar *Cancellable) bool {
+		return rawCallback(ConnVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackHandshakeAsync sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackHandshakeAsync(cb func(DtlsConnection, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xHandshakeAsync = 0
+	} else {
+		x.xHandshakeAsync = purego.NewCallback(func(ConnVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&DtlsConnectionBase{Ptr: ConnVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackHandshakeAsync gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackHandshakeAsync() func(DtlsConnection, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xHandshakeAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xHandshakeAsync)
+	return func(ConnVar DtlsConnection, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ConnVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackHandshakeFinish sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackHandshakeFinish(cb func(DtlsConnection, AsyncResult) bool) {
+	if cb == nil {
+		x.xHandshakeFinish = 0
+	} else {
+		x.xHandshakeFinish = purego.NewCallback(func(ConnVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&DtlsConnectionBase{Ptr: ConnVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackHandshakeFinish gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackHandshakeFinish() func(DtlsConnection, AsyncResult) bool {
+	if x.xHandshakeFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xHandshakeFinish)
+	return func(ConnVar DtlsConnection, ResultVar AsyncResult) bool {
+		return rawCallback(ConnVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackShutdown sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackShutdown(cb func(DtlsConnection, bool, bool, *Cancellable) bool) {
+	if cb == nil {
+		x.xShutdown = 0
+	} else {
+		x.xShutdown = purego.NewCallback(func(ConnVarp uintptr, ShutdownReadVarp bool, ShutdownWriteVarp bool, CancellableVarp uintptr) bool {
+			return cb(&DtlsConnectionBase{Ptr: ConnVarp}, ShutdownReadVarp, ShutdownWriteVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackShutdown gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackShutdown() func(DtlsConnection, bool, bool, *Cancellable) bool {
+	if x.xShutdown == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, ShutdownReadVarp bool, ShutdownWriteVarp bool, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xShutdown)
+	return func(ConnVar DtlsConnection, ShutdownReadVar bool, ShutdownWriteVar bool, CancellableVar *Cancellable) bool {
+		return rawCallback(ConnVar.GoPointer(), ShutdownReadVar, ShutdownWriteVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackShutdownAsync sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackShutdownAsync(cb func(DtlsConnection, bool, bool, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xShutdownAsync = 0
+	} else {
+		x.xShutdownAsync = purego.NewCallback(func(ConnVarp uintptr, ShutdownReadVarp bool, ShutdownWriteVarp bool, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&DtlsConnectionBase{Ptr: ConnVarp}, ShutdownReadVarp, ShutdownWriteVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackShutdownAsync gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackShutdownAsync() func(DtlsConnection, bool, bool, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xShutdownAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, ShutdownReadVarp bool, ShutdownWriteVarp bool, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xShutdownAsync)
+	return func(ConnVar DtlsConnection, ShutdownReadVar bool, ShutdownWriteVar bool, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ConnVar.GoPointer(), ShutdownReadVar, ShutdownWriteVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackShutdownFinish sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackShutdownFinish(cb func(DtlsConnection, AsyncResult) bool) {
+	if cb == nil {
+		x.xShutdownFinish = 0
+	} else {
+		x.xShutdownFinish = purego.NewCallback(func(ConnVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&DtlsConnectionBase{Ptr: ConnVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackShutdownFinish gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackShutdownFinish() func(DtlsConnection, AsyncResult) bool {
+	if x.xShutdownFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xShutdownFinish)
+	return func(ConnVar DtlsConnection, ResultVar AsyncResult) bool {
+		return rawCallback(ConnVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackSetAdvertisedProtocols sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackSetAdvertisedProtocols(cb func(DtlsConnection, []string)) {
+	if cb == nil {
+		x.xSetAdvertisedProtocols = 0
+	} else {
+		x.xSetAdvertisedProtocols = purego.NewCallback(func(ConnVarp uintptr, ProtocolsVarp []string) {
+			cb(&DtlsConnectionBase{Ptr: ConnVarp}, ProtocolsVarp)
+		})
+	}
+}
+
+// GetCallbackSetAdvertisedProtocols gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackSetAdvertisedProtocols() func(DtlsConnection, []string) {
+	if x.xSetAdvertisedProtocols == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, ProtocolsVarp []string)
+	purego.RegisterFunc(&rawCallback, x.xSetAdvertisedProtocols)
+	return func(ConnVar DtlsConnection, ProtocolsVar []string) {
+		rawCallback(ConnVar.GoPointer(), ProtocolsVar)
+	}
+}
+
+// SetCallbackGetNegotiatedProtocol sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackGetNegotiatedProtocol(cb func(DtlsConnection) string) {
+	if cb == nil {
+		x.xGetNegotiatedProtocol = 0
+	} else {
+		x.xGetNegotiatedProtocol = purego.NewCallback(func(ConnVarp uintptr) string {
+			return cb(&DtlsConnectionBase{Ptr: ConnVarp})
+		})
+	}
+}
+
+// GetCallbackGetNegotiatedProtocol gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackGetNegotiatedProtocol() func(DtlsConnection) string {
+	if x.xGetNegotiatedProtocol == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetNegotiatedProtocol)
+	return func(ConnVar DtlsConnection) string {
+		return rawCallback(ConnVar.GoPointer())
+	}
+}
+
+// SetCallbackGetBindingData sets the callback function.
+func (x *DtlsConnectionInterface) SetCallbackGetBindingData(cb func(DtlsConnection, TlsChannelBindingType, []byte) bool) {
+	if cb == nil {
+		x.xGetBindingData = 0
+	} else {
+		x.xGetBindingData = purego.NewCallback(func(ConnVarp uintptr, TypeVarp TlsChannelBindingType, DataVarp []byte) bool {
+			return cb(&DtlsConnectionBase{Ptr: ConnVarp}, TypeVarp, DataVarp)
+		})
+	}
+}
+
+// GetCallbackGetBindingData gets the callback function.
+func (x *DtlsConnectionInterface) GetCallbackGetBindingData() func(DtlsConnection, TlsChannelBindingType, []byte) bool {
+	if x.xGetBindingData == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, TypeVarp TlsChannelBindingType, DataVarp []byte) bool
+	purego.RegisterFunc(&rawCallback, x.xGetBindingData)
+	return func(ConnVar DtlsConnection, TypeVar TlsChannelBindingType, DataVar []byte) bool {
+		return rawCallback(ConnVar.GoPointer(), TypeVar, DataVar)
+	}
+}
+
 // #GDtlsConnection is the base DTLS connection class type, which wraps
 // a #GDatagramBased and provides DTLS encryption on top of it. Its
 // subclasses, #GDtlsClientConnection and #GDtlsServerConnection,
@@ -65,12 +295,12 @@ // error on further I/O.
 type DtlsConnection interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	Close(CancellableVar *Cancellable) bool
+	Close(CancellableVar *Cancellable) (bool, error)
 	CloseAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	CloseFinish(ResultVar AsyncResult) bool
+	CloseFinish(ResultVar AsyncResult) (bool, error)
 	EmitAcceptCertificate(PeerCertVar *TlsCertificate, ErrorsVar TlsCertificateFlags) bool
 	GetCertificate() *TlsCertificate
-	GetChannelBindingData(TypeVar TlsChannelBindingType, DataVar []byte) bool
+	GetChannelBindingData(TypeVar TlsChannelBindingType, DataVar []byte) (bool, error)
 	GetCiphersuiteName() string
 	GetDatabase() *TlsDatabase
 	GetInteraction() *TlsInteraction
@@ -80,18 +310,18 @@ 	GetPeerCertificateErrors() TlsCertificateFlags
 	GetProtocolVersion() TlsProtocolVersion
 	GetRehandshakeMode() TlsRehandshakeMode
 	GetRequireCloseNotify() bool
-	Handshake(CancellableVar *Cancellable) bool
+	Handshake(CancellableVar *Cancellable) (bool, error)
 	HandshakeAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	HandshakeFinish(ResultVar AsyncResult) bool
+	HandshakeFinish(ResultVar AsyncResult) (bool, error)
 	SetAdvertisedProtocols(ProtocolsVar []string)
 	SetCertificate(CertificateVar *TlsCertificate)
 	SetDatabase(DatabaseVar *TlsDatabase)
 	SetInteraction(InteractionVar *TlsInteraction)
 	SetRehandshakeMode(ModeVar TlsRehandshakeMode)
 	SetRequireCloseNotify(RequireCloseNotifyVar bool)
-	Shutdown(ShutdownReadVar bool, ShutdownWriteVar bool, CancellableVar *Cancellable) bool
+	Shutdown(ShutdownReadVar bool, ShutdownWriteVar bool, CancellableVar *Cancellable) (bool, error)
 	ShutdownAsync(ShutdownReadVar bool, ShutdownWriteVar bool, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	ShutdownFinish(ResultVar AsyncResult) bool
+	ShutdownFinish(ResultVar AsyncResult) (bool, error)
 }
 
 var xDtlsConnectionGLibType func() types.GType
diff --git a/v4/gio/gfile.go b/v4/gio/gfile.go
index 4f101c87fb0581f568f49e31691c284d6f2a4bf4..149053250b988f850cf2324300941ca269edda16 100644
--- a/v4/gio/gfile.go
+++ b/v4/gio/gfile.go
@@ -18,217 +18,2873 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Dup uintptr
+	xDup uintptr
 
-	Hash uintptr
+	xHash uintptr
 
-	Equal uintptr
+	xEqual uintptr
 
-	IsNative uintptr
+	xIsNative uintptr
 
-	HasUriScheme uintptr
+	xHasUriScheme uintptr
 
-	GetUriScheme uintptr
+	xGetUriScheme uintptr
 
-	GetBasename uintptr
+	xGetBasename uintptr
 
-	GetPath uintptr
+	xGetPath uintptr
 
-	GetUri uintptr
+	xGetUri uintptr
 
-	GetParseName uintptr
+	xGetParseName uintptr
 
-	GetParent uintptr
+	xGetParent uintptr
 
-	PrefixMatches uintptr
+	xPrefixMatches uintptr
 
-	GetRelativePath uintptr
+	xGetRelativePath uintptr
 
-	ResolveRelativePath uintptr
+	xResolveRelativePath uintptr
 
-	GetChildForDisplayName uintptr
+	xGetChildForDisplayName uintptr
 
-	EnumerateChildren uintptr
+	xEnumerateChildren uintptr
 
-	EnumerateChildrenAsync uintptr
+	xEnumerateChildrenAsync uintptr
 
-	EnumerateChildrenFinish uintptr
+	xEnumerateChildrenFinish uintptr
 
-	QueryInfo uintptr
+	xQueryInfo uintptr
 
-	QueryInfoAsync uintptr
+	xQueryInfoAsync uintptr
 
-	QueryInfoFinish uintptr
+	xQueryInfoFinish uintptr
 
-	QueryFilesystemInfo uintptr
+	xQueryFilesystemInfo uintptr
 
-	QueryFilesystemInfoAsync uintptr
+	xQueryFilesystemInfoAsync uintptr
 
-	QueryFilesystemInfoFinish uintptr
+	xQueryFilesystemInfoFinish uintptr
 
-	FindEnclosingMount uintptr
+	xFindEnclosingMount uintptr
 
-	FindEnclosingMountAsync uintptr
+	xFindEnclosingMountAsync uintptr
 
-	FindEnclosingMountFinish uintptr
+	xFindEnclosingMountFinish uintptr
 
-	SetDisplayName uintptr
+	xSetDisplayName uintptr
 
-	SetDisplayNameAsync uintptr
+	xSetDisplayNameAsync uintptr
 
-	SetDisplayNameFinish uintptr
+	xSetDisplayNameFinish uintptr
 
-	QuerySettableAttributes uintptr
+	xQuerySettableAttributes uintptr
 
-	QuerySettableAttributesAsync uintptr
+	xQuerySettableAttributesAsync uintptr
 
-	QuerySettableAttributesFinish uintptr
+	xQuerySettableAttributesFinish uintptr
 
-	QueryWritableNamespaces uintptr
+	xQueryWritableNamespaces uintptr
 
-	QueryWritableNamespacesAsync uintptr
+	xQueryWritableNamespacesAsync uintptr
 
-	QueryWritableNamespacesFinish uintptr
+	xQueryWritableNamespacesFinish uintptr
 
-	SetAttribute uintptr
+	xSetAttribute uintptr
 
-	SetAttributesFromInfo uintptr
+	xSetAttributesFromInfo uintptr
 
-	SetAttributesAsync uintptr
+	xSetAttributesAsync uintptr
 
-	SetAttributesFinish uintptr
+	xSetAttributesFinish uintptr
 
-	ReadFn uintptr
+	xReadFn uintptr
 
-	ReadAsync uintptr
+	xReadAsync uintptr
 
-	ReadFinish uintptr
+	xReadFinish uintptr
 
-	AppendTo uintptr
+	xAppendTo uintptr
 
-	AppendToAsync uintptr
+	xAppendToAsync uintptr
 
-	AppendToFinish uintptr
+	xAppendToFinish uintptr
 
-	Create uintptr
+	xCreate uintptr
 
-	CreateAsync uintptr
+	xCreateAsync uintptr
 
-	CreateFinish uintptr
+	xCreateFinish uintptr
 
-	Replace uintptr
+	xReplace uintptr
 
-	ReplaceAsync uintptr
+	xReplaceAsync uintptr
 
-	ReplaceFinish uintptr
+	xReplaceFinish uintptr
 
-	DeleteFile uintptr
+	xDeleteFile uintptr
 
-	DeleteFileAsync uintptr
+	xDeleteFileAsync uintptr
 
-	DeleteFileFinish uintptr
+	xDeleteFileFinish uintptr
 
-	Trash uintptr
+	xTrash uintptr
 
-	TrashAsync uintptr
+	xTrashAsync uintptr
 
-	TrashFinish uintptr
+	xTrashFinish uintptr
 
-	MakeDirectory uintptr
+	xMakeDirectory uintptr
 
-	MakeDirectoryAsync uintptr
+	xMakeDirectoryAsync uintptr
 
-	MakeDirectoryFinish uintptr
+	xMakeDirectoryFinish uintptr
 
-	MakeSymbolicLink uintptr
+	xMakeSymbolicLink uintptr
 
-	MakeSymbolicLinkAsync uintptr
+	xMakeSymbolicLinkAsync uintptr
 
-	MakeSymbolicLinkFinish uintptr
+	xMakeSymbolicLinkFinish uintptr
 
-	Copy uintptr
+	xCopy uintptr
 
-	CopyAsync uintptr
+	xCopyAsync uintptr
 
-	CopyFinish uintptr
+	xCopyFinish uintptr
 
-	Move uintptr
+	xMove uintptr
 
-	MoveAsync uintptr
+	xMoveAsync uintptr
 
-	MoveFinish uintptr
+	xMoveFinish uintptr
 
-	MountMountable uintptr
+	xMountMountable uintptr
 
-	MountMountableFinish uintptr
+	xMountMountableFinish uintptr
 
-	UnmountMountable uintptr
+	xUnmountMountable uintptr
 
-	UnmountMountableFinish uintptr
+	xUnmountMountableFinish uintptr
 
-	EjectMountable uintptr
+	xEjectMountable uintptr
 
-	EjectMountableFinish uintptr
+	xEjectMountableFinish uintptr
 
-	MountEnclosingVolume uintptr
+	xMountEnclosingVolume uintptr
 
-	MountEnclosingVolumeFinish uintptr
+	xMountEnclosingVolumeFinish uintptr
 
-	MonitorDir uintptr
+	xMonitorDir uintptr
 
-	MonitorFile uintptr
+	xMonitorFile uintptr
 
-	OpenReadwrite uintptr
+	xOpenReadwrite uintptr
 
-	OpenReadwriteAsync uintptr
+	xOpenReadwriteAsync uintptr
 
-	OpenReadwriteFinish uintptr
+	xOpenReadwriteFinish uintptr
 
-	CreateReadwrite uintptr
+	xCreateReadwrite uintptr
 
-	CreateReadwriteAsync uintptr
+	xCreateReadwriteAsync uintptr
 
-	CreateReadwriteFinish uintptr
+	xCreateReadwriteFinish uintptr
 
-	ReplaceReadwrite uintptr
+	xReplaceReadwrite uintptr
 
-	ReplaceReadwriteAsync uintptr
+	xReplaceReadwriteAsync uintptr
 
-	ReplaceReadwriteFinish uintptr
+	xReplaceReadwriteFinish uintptr
 
-	StartMountable uintptr
+	xStartMountable uintptr
 
-	StartMountableFinish uintptr
+	xStartMountableFinish uintptr
 
-	StopMountable uintptr
+	xStopMountable uintptr
 
-	StopMountableFinish uintptr
+	xStopMountableFinish uintptr
 
 	SupportsThreadContexts bool
 
-	UnmountMountableWithOperation uintptr
+	xUnmountMountableWithOperation uintptr
 
-	UnmountMountableWithOperationFinish uintptr
+	xUnmountMountableWithOperationFinish uintptr
 
-	EjectMountableWithOperation uintptr
+	xEjectMountableWithOperation uintptr
 
-	EjectMountableWithOperationFinish uintptr
+	xEjectMountableWithOperationFinish uintptr
 
-	PollMountable uintptr
+	xPollMountable uintptr
 
-	PollMountableFinish uintptr
+	xPollMountableFinish uintptr
 
-	MeasureDiskUsage uintptr
+	xMeasureDiskUsage uintptr
 
-	MeasureDiskUsageAsync uintptr
+	xMeasureDiskUsageAsync uintptr
 
-	MeasureDiskUsageFinish uintptr
+	xMeasureDiskUsageFinish uintptr
 }
 
 func (x *FileIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackDup sets the callback function.
+func (x *FileIface) SetCallbackDup(cb func(File) *FileBase) {
+	if cb == nil {
+		x.xDup = 0
+	} else {
+		x.xDup = purego.NewCallback(func(FileVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackDup gets the callback function.
+func (x *FileIface) GetCallbackDup() func(File) *FileBase {
+	if x.xDup == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xDup)
+	return func(FileVar File) *FileBase {
+		rawRet := rawCallback(FileVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackHash sets the callback function.
+func (x *FileIface) SetCallbackHash(cb func(File) uint) {
+	if cb == nil {
+		x.xHash = 0
+	} else {
+		x.xHash = purego.NewCallback(func(FileVarp uintptr) uint {
+			return cb(&FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackHash gets the callback function.
+func (x *FileIface) GetCallbackHash() func(File) uint {
+	if x.xHash == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) uint
+	purego.RegisterFunc(&rawCallback, x.xHash)
+	return func(FileVar File) uint {
+		return rawCallback(FileVar.GoPointer())
+	}
+}
+
+// SetCallbackEqual sets the callback function.
+func (x *FileIface) SetCallbackEqual(cb func(File, File) bool) {
+	if cb == nil {
+		x.xEqual = 0
+	} else {
+		x.xEqual = purego.NewCallback(func(File1Varp uintptr, File2Varp uintptr) bool {
+			return cb(&FileBase{Ptr: File1Varp}, &FileBase{Ptr: File2Varp})
+		})
+	}
+}
+
+// GetCallbackEqual gets the callback function.
+func (x *FileIface) GetCallbackEqual() func(File, File) bool {
+	if x.xEqual == 0 {
+		return nil
+	}
+	var rawCallback func(File1Varp uintptr, File2Varp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEqual)
+	return func(File1Var File, File2Var File) bool {
+		return rawCallback(File1Var.GoPointer(), File2Var.GoPointer())
+	}
+}
+
+// SetCallbackIsNative sets the callback function.
+func (x *FileIface) SetCallbackIsNative(cb func(File) bool) {
+	if cb == nil {
+		x.xIsNative = 0
+	} else {
+		x.xIsNative = purego.NewCallback(func(FileVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackIsNative gets the callback function.
+func (x *FileIface) GetCallbackIsNative() func(File) bool {
+	if x.xIsNative == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsNative)
+	return func(FileVar File) bool {
+		return rawCallback(FileVar.GoPointer())
+	}
+}
+
+// SetCallbackHasUriScheme sets the callback function.
+func (x *FileIface) SetCallbackHasUriScheme(cb func(File, string) bool) {
+	if cb == nil {
+		x.xHasUriScheme = 0
+	} else {
+		x.xHasUriScheme = purego.NewCallback(func(FileVarp uintptr, UriSchemeVarp string) bool {
+			return cb(&FileBase{Ptr: FileVarp}, UriSchemeVarp)
+		})
+	}
+}
+
+// GetCallbackHasUriScheme gets the callback function.
+func (x *FileIface) GetCallbackHasUriScheme() func(File, string) bool {
+	if x.xHasUriScheme == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, UriSchemeVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xHasUriScheme)
+	return func(FileVar File, UriSchemeVar string) bool {
+		return rawCallback(FileVar.GoPointer(), UriSchemeVar)
+	}
+}
+
+// SetCallbackGetUriScheme sets the callback function.
+func (x *FileIface) SetCallbackGetUriScheme(cb func(File) string) {
+	if cb == nil {
+		x.xGetUriScheme = 0
+	} else {
+		x.xGetUriScheme = purego.NewCallback(func(FileVarp uintptr) string {
+			return cb(&FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackGetUriScheme gets the callback function.
+func (x *FileIface) GetCallbackGetUriScheme() func(File) string {
+	if x.xGetUriScheme == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetUriScheme)
+	return func(FileVar File) string {
+		return rawCallback(FileVar.GoPointer())
+	}
+}
+
+// SetCallbackGetBasename sets the callback function.
+func (x *FileIface) SetCallbackGetBasename(cb func(File) string) {
+	if cb == nil {
+		x.xGetBasename = 0
+	} else {
+		x.xGetBasename = purego.NewCallback(func(FileVarp uintptr) string {
+			return cb(&FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackGetBasename gets the callback function.
+func (x *FileIface) GetCallbackGetBasename() func(File) string {
+	if x.xGetBasename == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetBasename)
+	return func(FileVar File) string {
+		return rawCallback(FileVar.GoPointer())
+	}
+}
+
+// SetCallbackGetPath sets the callback function.
+func (x *FileIface) SetCallbackGetPath(cb func(File) string) {
+	if cb == nil {
+		x.xGetPath = 0
+	} else {
+		x.xGetPath = purego.NewCallback(func(FileVarp uintptr) string {
+			return cb(&FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackGetPath gets the callback function.
+func (x *FileIface) GetCallbackGetPath() func(File) string {
+	if x.xGetPath == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetPath)
+	return func(FileVar File) string {
+		return rawCallback(FileVar.GoPointer())
+	}
+}
+
+// SetCallbackGetUri sets the callback function.
+func (x *FileIface) SetCallbackGetUri(cb func(File) string) {
+	if cb == nil {
+		x.xGetUri = 0
+	} else {
+		x.xGetUri = purego.NewCallback(func(FileVarp uintptr) string {
+			return cb(&FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackGetUri gets the callback function.
+func (x *FileIface) GetCallbackGetUri() func(File) string {
+	if x.xGetUri == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetUri)
+	return func(FileVar File) string {
+		return rawCallback(FileVar.GoPointer())
+	}
+}
+
+// SetCallbackGetParseName sets the callback function.
+func (x *FileIface) SetCallbackGetParseName(cb func(File) string) {
+	if cb == nil {
+		x.xGetParseName = 0
+	} else {
+		x.xGetParseName = purego.NewCallback(func(FileVarp uintptr) string {
+			return cb(&FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackGetParseName gets the callback function.
+func (x *FileIface) GetCallbackGetParseName() func(File) string {
+	if x.xGetParseName == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetParseName)
+	return func(FileVar File) string {
+		return rawCallback(FileVar.GoPointer())
+	}
+}
+
+// SetCallbackGetParent sets the callback function.
+func (x *FileIface) SetCallbackGetParent(cb func(File) *FileBase) {
+	if cb == nil {
+		x.xGetParent = 0
+	} else {
+		x.xGetParent = purego.NewCallback(func(FileVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetParent gets the callback function.
+func (x *FileIface) GetCallbackGetParent() func(File) *FileBase {
+	if x.xGetParent == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetParent)
+	return func(FileVar File) *FileBase {
+		rawRet := rawCallback(FileVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackPrefixMatches sets the callback function.
+func (x *FileIface) SetCallbackPrefixMatches(cb func(File, File) bool) {
+	if cb == nil {
+		x.xPrefixMatches = 0
+	} else {
+		x.xPrefixMatches = purego.NewCallback(func(PrefixVarp uintptr, FileVarp uintptr) bool {
+			return cb(&FileBase{Ptr: PrefixVarp}, &FileBase{Ptr: FileVarp})
+		})
+	}
+}
+
+// GetCallbackPrefixMatches gets the callback function.
+func (x *FileIface) GetCallbackPrefixMatches() func(File, File) bool {
+	if x.xPrefixMatches == 0 {
+		return nil
+	}
+	var rawCallback func(PrefixVarp uintptr, FileVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xPrefixMatches)
+	return func(PrefixVar File, FileVar File) bool {
+		return rawCallback(PrefixVar.GoPointer(), FileVar.GoPointer())
+	}
+}
+
+// SetCallbackGetRelativePath sets the callback function.
+func (x *FileIface) SetCallbackGetRelativePath(cb func(File, File) string) {
+	if cb == nil {
+		x.xGetRelativePath = 0
+	} else {
+		x.xGetRelativePath = purego.NewCallback(func(ParentVarp uintptr, DescendantVarp uintptr) string {
+			return cb(&FileBase{Ptr: ParentVarp}, &FileBase{Ptr: DescendantVarp})
+		})
+	}
+}
+
+// GetCallbackGetRelativePath gets the callback function.
+func (x *FileIface) GetCallbackGetRelativePath() func(File, File) string {
+	if x.xGetRelativePath == 0 {
+		return nil
+	}
+	var rawCallback func(ParentVarp uintptr, DescendantVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetRelativePath)
+	return func(ParentVar File, DescendantVar File) string {
+		return rawCallback(ParentVar.GoPointer(), DescendantVar.GoPointer())
+	}
+}
+
+// SetCallbackResolveRelativePath sets the callback function.
+func (x *FileIface) SetCallbackResolveRelativePath(cb func(File, string) *FileBase) {
+	if cb == nil {
+		x.xResolveRelativePath = 0
+	} else {
+		x.xResolveRelativePath = purego.NewCallback(func(FileVarp uintptr, RelativePathVarp string) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, RelativePathVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackResolveRelativePath gets the callback function.
+func (x *FileIface) GetCallbackResolveRelativePath() func(File, string) *FileBase {
+	if x.xResolveRelativePath == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, RelativePathVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xResolveRelativePath)
+	return func(FileVar File, RelativePathVar string) *FileBase {
+		rawRet := rawCallback(FileVar.GoPointer(), RelativePathVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetChildForDisplayName sets the callback function.
+func (x *FileIface) SetCallbackGetChildForDisplayName(cb func(File, string) *FileBase) {
+	if cb == nil {
+		x.xGetChildForDisplayName = 0
+	} else {
+		x.xGetChildForDisplayName = purego.NewCallback(func(FileVarp uintptr, DisplayNameVarp string) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, DisplayNameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetChildForDisplayName gets the callback function.
+func (x *FileIface) GetCallbackGetChildForDisplayName() func(File, string) *FileBase {
+	if x.xGetChildForDisplayName == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, DisplayNameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetChildForDisplayName)
+	return func(FileVar File, DisplayNameVar string) *FileBase {
+		rawRet := rawCallback(FileVar.GoPointer(), DisplayNameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackEnumerateChildren sets the callback function.
+func (x *FileIface) SetCallbackEnumerateChildren(cb func(File, string, FileQueryInfoFlags, *Cancellable) *FileEnumerator) {
+	if cb == nil {
+		x.xEnumerateChildren = 0
+	} else {
+		x.xEnumerateChildren = purego.NewCallback(func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, AttributesVarp, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackEnumerateChildren gets the callback function.
+func (x *FileIface) GetCallbackEnumerateChildren() func(File, string, FileQueryInfoFlags, *Cancellable) *FileEnumerator {
+	if x.xEnumerateChildren == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xEnumerateChildren)
+	return func(FileVar File, AttributesVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) *FileEnumerator {
+		rawRet := rawCallback(FileVar.GoPointer(), AttributesVar, FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileEnumerator{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackEnumerateChildrenAsync sets the callback function.
+func (x *FileIface) SetCallbackEnumerateChildrenAsync(cb func(File, string, FileQueryInfoFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEnumerateChildrenAsync = 0
+	} else {
+		x.xEnumerateChildrenAsync = purego.NewCallback(func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, AttributesVarp, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEnumerateChildrenAsync gets the callback function.
+func (x *FileIface) GetCallbackEnumerateChildrenAsync() func(File, string, FileQueryInfoFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEnumerateChildrenAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEnumerateChildrenAsync)
+	return func(FileVar File, AttributesVar string, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), AttributesVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEnumerateChildrenFinish sets the callback function.
+func (x *FileIface) SetCallbackEnumerateChildrenFinish(cb func(File, AsyncResult) *FileEnumerator) {
+	if cb == nil {
+		x.xEnumerateChildrenFinish = 0
+	} else {
+		x.xEnumerateChildrenFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackEnumerateChildrenFinish gets the callback function.
+func (x *FileIface) GetCallbackEnumerateChildrenFinish() func(File, AsyncResult) *FileEnumerator {
+	if x.xEnumerateChildrenFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xEnumerateChildrenFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileEnumerator {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileEnumerator{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQueryInfo sets the callback function.
+func (x *FileIface) SetCallbackQueryInfo(cb func(File, string, FileQueryInfoFlags, *Cancellable) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfo = 0
+	} else {
+		x.xQueryInfo = purego.NewCallback(func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, AttributesVarp, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfo gets the callback function.
+func (x *FileIface) GetCallbackQueryInfo() func(File, string, FileQueryInfoFlags, *Cancellable) *FileInfo {
+	if x.xQueryInfo == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfo)
+	return func(FileVar File, AttributesVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) *FileInfo {
+		rawRet := rawCallback(FileVar.GoPointer(), AttributesVar, FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQueryInfoAsync sets the callback function.
+func (x *FileIface) SetCallbackQueryInfoAsync(cb func(File, string, FileQueryInfoFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xQueryInfoAsync = 0
+	} else {
+		x.xQueryInfoAsync = purego.NewCallback(func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, AttributesVarp, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackQueryInfoAsync gets the callback function.
+func (x *FileIface) GetCallbackQueryInfoAsync() func(File, string, FileQueryInfoFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xQueryInfoAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, AttributesVarp string, FlagsVarp FileQueryInfoFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoAsync)
+	return func(FileVar File, AttributesVar string, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), AttributesVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackQueryInfoFinish sets the callback function.
+func (x *FileIface) SetCallbackQueryInfoFinish(cb func(File, AsyncResult) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfoFinish = 0
+	} else {
+		x.xQueryInfoFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfoFinish gets the callback function.
+func (x *FileIface) GetCallbackQueryInfoFinish() func(File, AsyncResult) *FileInfo {
+	if x.xQueryInfoFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileInfo {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQueryFilesystemInfo sets the callback function.
+func (x *FileIface) SetCallbackQueryFilesystemInfo(cb func(File, string, *Cancellable) *FileInfo) {
+	if cb == nil {
+		x.xQueryFilesystemInfo = 0
+	} else {
+		x.xQueryFilesystemInfo = purego.NewCallback(func(FileVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, AttributesVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryFilesystemInfo gets the callback function.
+func (x *FileIface) GetCallbackQueryFilesystemInfo() func(File, string, *Cancellable) *FileInfo {
+	if x.xQueryFilesystemInfo == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryFilesystemInfo)
+	return func(FileVar File, AttributesVar string, CancellableVar *Cancellable) *FileInfo {
+		rawRet := rawCallback(FileVar.GoPointer(), AttributesVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQueryFilesystemInfoAsync sets the callback function.
+func (x *FileIface) SetCallbackQueryFilesystemInfoAsync(cb func(File, string, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xQueryFilesystemInfoAsync = 0
+	} else {
+		x.xQueryFilesystemInfoAsync = purego.NewCallback(func(FileVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, AttributesVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackQueryFilesystemInfoAsync gets the callback function.
+func (x *FileIface) GetCallbackQueryFilesystemInfoAsync() func(File, string, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xQueryFilesystemInfoAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xQueryFilesystemInfoAsync)
+	return func(FileVar File, AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackQueryFilesystemInfoFinish sets the callback function.
+func (x *FileIface) SetCallbackQueryFilesystemInfoFinish(cb func(File, AsyncResult) *FileInfo) {
+	if cb == nil {
+		x.xQueryFilesystemInfoFinish = 0
+	} else {
+		x.xQueryFilesystemInfoFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryFilesystemInfoFinish gets the callback function.
+func (x *FileIface) GetCallbackQueryFilesystemInfoFinish() func(File, AsyncResult) *FileInfo {
+	if x.xQueryFilesystemInfoFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryFilesystemInfoFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileInfo {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackFindEnclosingMount sets the callback function.
+func (x *FileIface) SetCallbackFindEnclosingMount(cb func(File, *Cancellable) *MountBase) {
+	if cb == nil {
+		x.xFindEnclosingMount = 0
+	} else {
+		x.xFindEnclosingMount = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackFindEnclosingMount gets the callback function.
+func (x *FileIface) GetCallbackFindEnclosingMount() func(File, *Cancellable) *MountBase {
+	if x.xFindEnclosingMount == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xFindEnclosingMount)
+	return func(FileVar File, CancellableVar *Cancellable) *MountBase {
+		rawRet := rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MountBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackFindEnclosingMountAsync sets the callback function.
+func (x *FileIface) SetCallbackFindEnclosingMountAsync(cb func(File, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xFindEnclosingMountAsync = 0
+	} else {
+		x.xFindEnclosingMountAsync = purego.NewCallback(func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackFindEnclosingMountAsync gets the callback function.
+func (x *FileIface) GetCallbackFindEnclosingMountAsync() func(File, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xFindEnclosingMountAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFindEnclosingMountAsync)
+	return func(FileVar File, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackFindEnclosingMountFinish sets the callback function.
+func (x *FileIface) SetCallbackFindEnclosingMountFinish(cb func(File, AsyncResult) *MountBase) {
+	if cb == nil {
+		x.xFindEnclosingMountFinish = 0
+	} else {
+		x.xFindEnclosingMountFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackFindEnclosingMountFinish gets the callback function.
+func (x *FileIface) GetCallbackFindEnclosingMountFinish() func(File, AsyncResult) *MountBase {
+	if x.xFindEnclosingMountFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xFindEnclosingMountFinish)
+	return func(FileVar File, ResVar AsyncResult) *MountBase {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MountBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSetDisplayName sets the callback function.
+func (x *FileIface) SetCallbackSetDisplayName(cb func(File, string, *Cancellable) *FileBase) {
+	if cb == nil {
+		x.xSetDisplayName = 0
+	} else {
+		x.xSetDisplayName = purego.NewCallback(func(FileVarp uintptr, DisplayNameVarp string, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, DisplayNameVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackSetDisplayName gets the callback function.
+func (x *FileIface) GetCallbackSetDisplayName() func(File, string, *Cancellable) *FileBase {
+	if x.xSetDisplayName == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, DisplayNameVarp string, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xSetDisplayName)
+	return func(FileVar File, DisplayNameVar string, CancellableVar *Cancellable) *FileBase {
+		rawRet := rawCallback(FileVar.GoPointer(), DisplayNameVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSetDisplayNameAsync sets the callback function.
+func (x *FileIface) SetCallbackSetDisplayNameAsync(cb func(File, string, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xSetDisplayNameAsync = 0
+	} else {
+		x.xSetDisplayNameAsync = purego.NewCallback(func(FileVarp uintptr, DisplayNameVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, DisplayNameVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackSetDisplayNameAsync gets the callback function.
+func (x *FileIface) GetCallbackSetDisplayNameAsync() func(File, string, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xSetDisplayNameAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, DisplayNameVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetDisplayNameAsync)
+	return func(FileVar File, DisplayNameVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), DisplayNameVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackSetDisplayNameFinish sets the callback function.
+func (x *FileIface) SetCallbackSetDisplayNameFinish(cb func(File, AsyncResult) *FileBase) {
+	if cb == nil {
+		x.xSetDisplayNameFinish = 0
+	} else {
+		x.xSetDisplayNameFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackSetDisplayNameFinish gets the callback function.
+func (x *FileIface) GetCallbackSetDisplayNameFinish() func(File, AsyncResult) *FileBase {
+	if x.xSetDisplayNameFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xSetDisplayNameFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileBase {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQuerySettableAttributes sets the callback function.
+func (x *FileIface) SetCallbackQuerySettableAttributes(cb func(File, *Cancellable) *FileAttributeInfoList) {
+	if cb == nil {
+		x.xQuerySettableAttributes = 0
+	} else {
+		x.xQuerySettableAttributes = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) *FileAttributeInfoList {
+			return cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackQuerySettableAttributes gets the callback function.
+func (x *FileIface) GetCallbackQuerySettableAttributes() func(File, *Cancellable) *FileAttributeInfoList {
+	if x.xQuerySettableAttributes == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) *FileAttributeInfoList
+	purego.RegisterFunc(&rawCallback, x.xQuerySettableAttributes)
+	return func(FileVar File, CancellableVar *Cancellable) *FileAttributeInfoList {
+		return rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackQuerySettableAttributesAsync sets the callback function.
+func (x *FileIface) SetCallbackQuerySettableAttributesAsync(cb func()) {
+	if cb == nil {
+		x.xQuerySettableAttributesAsync = 0
+	} else {
+		x.xQuerySettableAttributesAsync = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackQuerySettableAttributesAsync gets the callback function.
+func (x *FileIface) GetCallbackQuerySettableAttributesAsync() func() {
+	if x.xQuerySettableAttributesAsync == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xQuerySettableAttributesAsync)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackQuerySettableAttributesFinish sets the callback function.
+func (x *FileIface) SetCallbackQuerySettableAttributesFinish(cb func()) {
+	if cb == nil {
+		x.xQuerySettableAttributesFinish = 0
+	} else {
+		x.xQuerySettableAttributesFinish = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackQuerySettableAttributesFinish gets the callback function.
+func (x *FileIface) GetCallbackQuerySettableAttributesFinish() func() {
+	if x.xQuerySettableAttributesFinish == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xQuerySettableAttributesFinish)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackQueryWritableNamespaces sets the callback function.
+func (x *FileIface) SetCallbackQueryWritableNamespaces(cb func(File, *Cancellable) *FileAttributeInfoList) {
+	if cb == nil {
+		x.xQueryWritableNamespaces = 0
+	} else {
+		x.xQueryWritableNamespaces = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) *FileAttributeInfoList {
+			return cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackQueryWritableNamespaces gets the callback function.
+func (x *FileIface) GetCallbackQueryWritableNamespaces() func(File, *Cancellable) *FileAttributeInfoList {
+	if x.xQueryWritableNamespaces == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) *FileAttributeInfoList
+	purego.RegisterFunc(&rawCallback, x.xQueryWritableNamespaces)
+	return func(FileVar File, CancellableVar *Cancellable) *FileAttributeInfoList {
+		return rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackQueryWritableNamespacesAsync sets the callback function.
+func (x *FileIface) SetCallbackQueryWritableNamespacesAsync(cb func()) {
+	if cb == nil {
+		x.xQueryWritableNamespacesAsync = 0
+	} else {
+		x.xQueryWritableNamespacesAsync = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackQueryWritableNamespacesAsync gets the callback function.
+func (x *FileIface) GetCallbackQueryWritableNamespacesAsync() func() {
+	if x.xQueryWritableNamespacesAsync == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xQueryWritableNamespacesAsync)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackQueryWritableNamespacesFinish sets the callback function.
+func (x *FileIface) SetCallbackQueryWritableNamespacesFinish(cb func()) {
+	if cb == nil {
+		x.xQueryWritableNamespacesFinish = 0
+	} else {
+		x.xQueryWritableNamespacesFinish = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackQueryWritableNamespacesFinish gets the callback function.
+func (x *FileIface) GetCallbackQueryWritableNamespacesFinish() func() {
+	if x.xQueryWritableNamespacesFinish == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xQueryWritableNamespacesFinish)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackSetAttribute sets the callback function.
+func (x *FileIface) SetCallbackSetAttribute(cb func(File, string, FileAttributeType, uintptr, FileQueryInfoFlags, *Cancellable) bool) {
+	if cb == nil {
+		x.xSetAttribute = 0
+	} else {
+		x.xSetAttribute = purego.NewCallback(func(FileVarp uintptr, AttributeVarp string, TypeVarp FileAttributeType, ValuePVarp uintptr, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, AttributeVarp, TypeVarp, ValuePVarp, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSetAttribute gets the callback function.
+func (x *FileIface) GetCallbackSetAttribute() func(File, string, FileAttributeType, uintptr, FileQueryInfoFlags, *Cancellable) bool {
+	if x.xSetAttribute == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, AttributeVarp string, TypeVarp FileAttributeType, ValuePVarp uintptr, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSetAttribute)
+	return func(FileVar File, AttributeVar string, TypeVar FileAttributeType, ValuePVar uintptr, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool {
+		return rawCallback(FileVar.GoPointer(), AttributeVar, TypeVar, ValuePVar, FlagsVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackSetAttributesFromInfo sets the callback function.
+func (x *FileIface) SetCallbackSetAttributesFromInfo(cb func(File, *FileInfo, FileQueryInfoFlags, *Cancellable) bool) {
+	if cb == nil {
+		x.xSetAttributesFromInfo = 0
+	} else {
+		x.xSetAttributesFromInfo = purego.NewCallback(func(FileVarp uintptr, InfoVarp uintptr, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, FileInfoNewFromInternalPtr(InfoVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSetAttributesFromInfo gets the callback function.
+func (x *FileIface) GetCallbackSetAttributesFromInfo() func(File, *FileInfo, FileQueryInfoFlags, *Cancellable) bool {
+	if x.xSetAttributesFromInfo == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, InfoVarp uintptr, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSetAttributesFromInfo)
+	return func(FileVar File, InfoVar *FileInfo, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool {
+		return rawCallback(FileVar.GoPointer(), InfoVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackSetAttributesAsync sets the callback function.
+func (x *FileIface) SetCallbackSetAttributesAsync(cb func(File, *FileInfo, FileQueryInfoFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xSetAttributesAsync = 0
+	} else {
+		x.xSetAttributesAsync = purego.NewCallback(func(FileVarp uintptr, InfoVarp uintptr, FlagsVarp FileQueryInfoFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FileInfoNewFromInternalPtr(InfoVarp), FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackSetAttributesAsync gets the callback function.
+func (x *FileIface) GetCallbackSetAttributesAsync() func(File, *FileInfo, FileQueryInfoFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xSetAttributesAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, InfoVarp uintptr, FlagsVarp FileQueryInfoFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetAttributesAsync)
+	return func(FileVar File, InfoVar *FileInfo, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), InfoVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackSetAttributesFinish sets the callback function.
+func (x *FileIface) SetCallbackSetAttributesFinish(cb func(File, AsyncResult, **FileInfo) bool) {
+	if cb == nil {
+		x.xSetAttributesFinish = 0
+	} else {
+		x.xSetAttributesFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr, InfoVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp}, (**FileInfo)(unsafe.Pointer(InfoVarp)))
+		})
+	}
+}
+
+// GetCallbackSetAttributesFinish gets the callback function.
+func (x *FileIface) GetCallbackSetAttributesFinish() func(File, AsyncResult, **FileInfo) bool {
+	if x.xSetAttributesFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr, InfoVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSetAttributesFinish)
+	return func(FileVar File, ResultVar AsyncResult, InfoVar **FileInfo) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer(), *gobject.ConvertPtr(InfoVar))
+	}
+}
+
+// SetCallbackReadFn sets the callback function.
+func (x *FileIface) SetCallbackReadFn(cb func(File, *Cancellable) *FileInputStream) {
+	if cb == nil {
+		x.xReadFn = 0
+	} else {
+		x.xReadFn = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackReadFn gets the callback function.
+func (x *FileIface) GetCallbackReadFn() func(File, *Cancellable) *FileInputStream {
+	if x.xReadFn == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xReadFn)
+	return func(FileVar File, CancellableVar *Cancellable) *FileInputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackReadAsync sets the callback function.
+func (x *FileIface) SetCallbackReadAsync(cb func(File, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xReadAsync = 0
+	} else {
+		x.xReadAsync = purego.NewCallback(func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackReadAsync gets the callback function.
+func (x *FileIface) GetCallbackReadAsync() func(File, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xReadAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReadAsync)
+	return func(FileVar File, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackReadFinish sets the callback function.
+func (x *FileIface) SetCallbackReadFinish(cb func(File, AsyncResult) *FileInputStream) {
+	if cb == nil {
+		x.xReadFinish = 0
+	} else {
+		x.xReadFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackReadFinish gets the callback function.
+func (x *FileIface) GetCallbackReadFinish() func(File, AsyncResult) *FileInputStream {
+	if x.xReadFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xReadFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileInputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackAppendTo sets the callback function.
+func (x *FileIface) SetCallbackAppendTo(cb func(File, FileCreateFlags, *Cancellable) *FileOutputStream) {
+	if cb == nil {
+		x.xAppendTo = 0
+	} else {
+		x.xAppendTo = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackAppendTo gets the callback function.
+func (x *FileIface) GetCallbackAppendTo() func(File, FileCreateFlags, *Cancellable) *FileOutputStream {
+	if x.xAppendTo == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xAppendTo)
+	return func(FileVar File, FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileOutputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileOutputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackAppendToAsync sets the callback function.
+func (x *FileIface) SetCallbackAppendToAsync(cb func(File, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xAppendToAsync = 0
+	} else {
+		x.xAppendToAsync = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackAppendToAsync gets the callback function.
+func (x *FileIface) GetCallbackAppendToAsync() func(File, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xAppendToAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAppendToAsync)
+	return func(FileVar File, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackAppendToFinish sets the callback function.
+func (x *FileIface) SetCallbackAppendToFinish(cb func(File, AsyncResult) *FileOutputStream) {
+	if cb == nil {
+		x.xAppendToFinish = 0
+	} else {
+		x.xAppendToFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackAppendToFinish gets the callback function.
+func (x *FileIface) GetCallbackAppendToFinish() func(File, AsyncResult) *FileOutputStream {
+	if x.xAppendToFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xAppendToFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileOutputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileOutputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCreate sets the callback function.
+func (x *FileIface) SetCallbackCreate(cb func(File, FileCreateFlags, *Cancellable) *FileOutputStream) {
+	if cb == nil {
+		x.xCreate = 0
+	} else {
+		x.xCreate = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreate gets the callback function.
+func (x *FileIface) GetCallbackCreate() func(File, FileCreateFlags, *Cancellable) *FileOutputStream {
+	if x.xCreate == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreate)
+	return func(FileVar File, FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileOutputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileOutputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCreateAsync sets the callback function.
+func (x *FileIface) SetCallbackCreateAsync(cb func(File, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCreateAsync = 0
+	} else {
+		x.xCreateAsync = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCreateAsync gets the callback function.
+func (x *FileIface) GetCallbackCreateAsync() func(File, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xCreateAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCreateAsync)
+	return func(FileVar File, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCreateFinish sets the callback function.
+func (x *FileIface) SetCallbackCreateFinish(cb func(File, AsyncResult) *FileOutputStream) {
+	if cb == nil {
+		x.xCreateFinish = 0
+	} else {
+		x.xCreateFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateFinish gets the callback function.
+func (x *FileIface) GetCallbackCreateFinish() func(File, AsyncResult) *FileOutputStream {
+	if x.xCreateFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileOutputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileOutputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackReplace sets the callback function.
+func (x *FileIface) SetCallbackReplace(cb func(File, string, bool, FileCreateFlags, *Cancellable) *FileOutputStream) {
+	if cb == nil {
+		x.xReplace = 0
+	} else {
+		x.xReplace = purego.NewCallback(func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, EtagVarp, MakeBackupVarp, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackReplace gets the callback function.
+func (x *FileIface) GetCallbackReplace() func(File, string, bool, FileCreateFlags, *Cancellable) *FileOutputStream {
+	if x.xReplace == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xReplace)
+	return func(FileVar File, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileOutputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileOutputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackReplaceAsync sets the callback function.
+func (x *FileIface) SetCallbackReplaceAsync(cb func(File, string, bool, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xReplaceAsync = 0
+	} else {
+		x.xReplaceAsync = purego.NewCallback(func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, EtagVarp, MakeBackupVarp, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackReplaceAsync gets the callback function.
+func (x *FileIface) GetCallbackReplaceAsync() func(File, string, bool, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xReplaceAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReplaceAsync)
+	return func(FileVar File, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackReplaceFinish sets the callback function.
+func (x *FileIface) SetCallbackReplaceFinish(cb func(File, AsyncResult) *FileOutputStream) {
+	if cb == nil {
+		x.xReplaceFinish = 0
+	} else {
+		x.xReplaceFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackReplaceFinish gets the callback function.
+func (x *FileIface) GetCallbackReplaceFinish() func(File, AsyncResult) *FileOutputStream {
+	if x.xReplaceFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xReplaceFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileOutputStream {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileOutputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackDeleteFile sets the callback function.
+func (x *FileIface) SetCallbackDeleteFile(cb func(File, *Cancellable) bool) {
+	if cb == nil {
+		x.xDeleteFile = 0
+	} else {
+		x.xDeleteFile = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackDeleteFile gets the callback function.
+func (x *FileIface) GetCallbackDeleteFile() func(File, *Cancellable) bool {
+	if x.xDeleteFile == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xDeleteFile)
+	return func(FileVar File, CancellableVar *Cancellable) bool {
+		return rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackDeleteFileAsync sets the callback function.
+func (x *FileIface) SetCallbackDeleteFileAsync(cb func(File, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xDeleteFileAsync = 0
+	} else {
+		x.xDeleteFileAsync = purego.NewCallback(func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackDeleteFileAsync gets the callback function.
+func (x *FileIface) GetCallbackDeleteFileAsync() func(File, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xDeleteFileAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDeleteFileAsync)
+	return func(FileVar File, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackDeleteFileFinish sets the callback function.
+func (x *FileIface) SetCallbackDeleteFileFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xDeleteFileFinish = 0
+	} else {
+		x.xDeleteFileFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackDeleteFileFinish gets the callback function.
+func (x *FileIface) GetCallbackDeleteFileFinish() func(File, AsyncResult) bool {
+	if x.xDeleteFileFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xDeleteFileFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackTrash sets the callback function.
+func (x *FileIface) SetCallbackTrash(cb func(File, *Cancellable) bool) {
+	if cb == nil {
+		x.xTrash = 0
+	} else {
+		x.xTrash = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackTrash gets the callback function.
+func (x *FileIface) GetCallbackTrash() func(File, *Cancellable) bool {
+	if x.xTrash == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xTrash)
+	return func(FileVar File, CancellableVar *Cancellable) bool {
+		return rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackTrashAsync sets the callback function.
+func (x *FileIface) SetCallbackTrashAsync(cb func(File, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xTrashAsync = 0
+	} else {
+		x.xTrashAsync = purego.NewCallback(func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackTrashAsync gets the callback function.
+func (x *FileIface) GetCallbackTrashAsync() func(File, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xTrashAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xTrashAsync)
+	return func(FileVar File, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackTrashFinish sets the callback function.
+func (x *FileIface) SetCallbackTrashFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xTrashFinish = 0
+	} else {
+		x.xTrashFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackTrashFinish gets the callback function.
+func (x *FileIface) GetCallbackTrashFinish() func(File, AsyncResult) bool {
+	if x.xTrashFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xTrashFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackMakeDirectory sets the callback function.
+func (x *FileIface) SetCallbackMakeDirectory(cb func(File, *Cancellable) bool) {
+	if cb == nil {
+		x.xMakeDirectory = 0
+	} else {
+		x.xMakeDirectory = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackMakeDirectory gets the callback function.
+func (x *FileIface) GetCallbackMakeDirectory() func(File, *Cancellable) bool {
+	if x.xMakeDirectory == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMakeDirectory)
+	return func(FileVar File, CancellableVar *Cancellable) bool {
+		return rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackMakeDirectoryAsync sets the callback function.
+func (x *FileIface) SetCallbackMakeDirectoryAsync(cb func(File, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xMakeDirectoryAsync = 0
+	} else {
+		x.xMakeDirectoryAsync = purego.NewCallback(func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackMakeDirectoryAsync gets the callback function.
+func (x *FileIface) GetCallbackMakeDirectoryAsync() func(File, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xMakeDirectoryAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMakeDirectoryAsync)
+	return func(FileVar File, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackMakeDirectoryFinish sets the callback function.
+func (x *FileIface) SetCallbackMakeDirectoryFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xMakeDirectoryFinish = 0
+	} else {
+		x.xMakeDirectoryFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackMakeDirectoryFinish gets the callback function.
+func (x *FileIface) GetCallbackMakeDirectoryFinish() func(File, AsyncResult) bool {
+	if x.xMakeDirectoryFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMakeDirectoryFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackMakeSymbolicLink sets the callback function.
+func (x *FileIface) SetCallbackMakeSymbolicLink(cb func(File, string, *Cancellable) bool) {
+	if cb == nil {
+		x.xMakeSymbolicLink = 0
+	} else {
+		x.xMakeSymbolicLink = purego.NewCallback(func(FileVarp uintptr, SymlinkValueVarp string, CancellableVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, SymlinkValueVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackMakeSymbolicLink gets the callback function.
+func (x *FileIface) GetCallbackMakeSymbolicLink() func(File, string, *Cancellable) bool {
+	if x.xMakeSymbolicLink == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, SymlinkValueVarp string, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMakeSymbolicLink)
+	return func(FileVar File, SymlinkValueVar string, CancellableVar *Cancellable) bool {
+		return rawCallback(FileVar.GoPointer(), SymlinkValueVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackMakeSymbolicLinkAsync sets the callback function.
+func (x *FileIface) SetCallbackMakeSymbolicLinkAsync(cb func()) {
+	if cb == nil {
+		x.xMakeSymbolicLinkAsync = 0
+	} else {
+		x.xMakeSymbolicLinkAsync = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackMakeSymbolicLinkAsync gets the callback function.
+func (x *FileIface) GetCallbackMakeSymbolicLinkAsync() func() {
+	if x.xMakeSymbolicLinkAsync == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xMakeSymbolicLinkAsync)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackMakeSymbolicLinkFinish sets the callback function.
+func (x *FileIface) SetCallbackMakeSymbolicLinkFinish(cb func()) {
+	if cb == nil {
+		x.xMakeSymbolicLinkFinish = 0
+	} else {
+		x.xMakeSymbolicLinkFinish = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackMakeSymbolicLinkFinish gets the callback function.
+func (x *FileIface) GetCallbackMakeSymbolicLinkFinish() func() {
+	if x.xMakeSymbolicLinkFinish == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xMakeSymbolicLinkFinish)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackCopy sets the callback function.
+func (x *FileIface) SetCallbackCopy(cb func(File, File, FileCopyFlags, *Cancellable, *FileProgressCallback, uintptr) bool) {
+	if cb == nil {
+		x.xCopy = 0
+	} else {
+		x.xCopy = purego.NewCallback(func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr) bool {
+			return cb(&FileBase{Ptr: SourceVarp}, &FileBase{Ptr: DestinationVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*FileProgressCallback)(unsafe.Pointer(ProgressCallbackVarp)), ProgressCallbackDataVarp)
+		})
+	}
+}
+
+// GetCallbackCopy gets the callback function.
+func (x *FileIface) GetCallbackCopy() func(File, File, FileCopyFlags, *Cancellable, *FileProgressCallback, uintptr) bool {
+	if x.xCopy == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCopy)
+	return func(SourceVar File, DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) bool {
+		return rawCallback(SourceVar.GoPointer(), DestinationVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar)
+	}
+}
+
+// SetCallbackCopyAsync sets the callback function.
+func (x *FileIface) SetCallbackCopyAsync(cb func(File, File, FileCopyFlags, int, *Cancellable, *FileProgressCallback, uintptr, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCopyAsync = 0
+	} else {
+		x.xCopyAsync = purego.NewCallback(func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, IoPriorityVarp int, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: SourceVarp}, &FileBase{Ptr: DestinationVarp}, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*FileProgressCallback)(unsafe.Pointer(ProgressCallbackVarp)), ProgressCallbackDataVarp, (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCopyAsync gets the callback function.
+func (x *FileIface) GetCallbackCopyAsync() func(File, File, FileCopyFlags, int, *Cancellable, *FileProgressCallback, uintptr, *AsyncReadyCallback, uintptr) {
+	if x.xCopyAsync == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, IoPriorityVarp int, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCopyAsync)
+	return func(SourceVar File, DestinationVar File, FlagsVar FileCopyFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(SourceVar.GoPointer(), DestinationVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar, glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCopyFinish sets the callback function.
+func (x *FileIface) SetCallbackCopyFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xCopyFinish = 0
+	} else {
+		x.xCopyFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+		})
+	}
+}
+
+// GetCallbackCopyFinish gets the callback function.
+func (x *FileIface) GetCallbackCopyFinish() func(File, AsyncResult) bool {
+	if x.xCopyFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCopyFinish)
+	return func(FileVar File, ResVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+	}
+}
+
+// SetCallbackMove sets the callback function.
+func (x *FileIface) SetCallbackMove(cb func(File, File, FileCopyFlags, *Cancellable, *FileProgressCallback, uintptr) bool) {
+	if cb == nil {
+		x.xMove = 0
+	} else {
+		x.xMove = purego.NewCallback(func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr) bool {
+			return cb(&FileBase{Ptr: SourceVarp}, &FileBase{Ptr: DestinationVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*FileProgressCallback)(unsafe.Pointer(ProgressCallbackVarp)), ProgressCallbackDataVarp)
+		})
+	}
+}
+
+// GetCallbackMove gets the callback function.
+func (x *FileIface) GetCallbackMove() func(File, File, FileCopyFlags, *Cancellable, *FileProgressCallback, uintptr) bool {
+	if x.xMove == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMove)
+	return func(SourceVar File, DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) bool {
+		return rawCallback(SourceVar.GoPointer(), DestinationVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar)
+	}
+}
+
+// SetCallbackMoveAsync sets the callback function.
+func (x *FileIface) SetCallbackMoveAsync(cb func(File, File, FileCopyFlags, int, *Cancellable, *FileProgressCallback, uintptr, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xMoveAsync = 0
+	} else {
+		x.xMoveAsync = purego.NewCallback(func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, IoPriorityVarp int, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: SourceVarp}, &FileBase{Ptr: DestinationVarp}, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*FileProgressCallback)(unsafe.Pointer(ProgressCallbackVarp)), ProgressCallbackDataVarp, (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackMoveAsync gets the callback function.
+func (x *FileIface) GetCallbackMoveAsync() func(File, File, FileCopyFlags, int, *Cancellable, *FileProgressCallback, uintptr, *AsyncReadyCallback, uintptr) {
+	if x.xMoveAsync == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp uintptr, DestinationVarp uintptr, FlagsVarp FileCopyFlags, IoPriorityVarp int, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressCallbackDataVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMoveAsync)
+	return func(SourceVar File, DestinationVar File, FlagsVar FileCopyFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(SourceVar.GoPointer(), DestinationVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressCallbackDataVar, glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackMoveFinish sets the callback function.
+func (x *FileIface) SetCallbackMoveFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xMoveFinish = 0
+	} else {
+		x.xMoveFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackMoveFinish gets the callback function.
+func (x *FileIface) GetCallbackMoveFinish() func(File, AsyncResult) bool {
+	if x.xMoveFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMoveFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackMountMountable sets the callback function.
+func (x *FileIface) SetCallbackMountMountable(cb func(File, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xMountMountable = 0
+	} else {
+		x.xMountMountable = purego.NewCallback(func(FileVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackMountMountable gets the callback function.
+func (x *FileIface) GetCallbackMountMountable() func(File, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xMountMountable == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMountMountable)
+	return func(FileVar File, FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackMountMountableFinish sets the callback function.
+func (x *FileIface) SetCallbackMountMountableFinish(cb func(File, AsyncResult) *FileBase) {
+	if cb == nil {
+		x.xMountMountableFinish = 0
+	} else {
+		x.xMountMountableFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackMountMountableFinish gets the callback function.
+func (x *FileIface) GetCallbackMountMountableFinish() func(File, AsyncResult) *FileBase {
+	if x.xMountMountableFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xMountMountableFinish)
+	return func(FileVar File, ResultVar AsyncResult) *FileBase {
+		rawRet := rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackUnmountMountable sets the callback function.
+func (x *FileIface) SetCallbackUnmountMountable(cb func(File, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xUnmountMountable = 0
+	} else {
+		x.xUnmountMountable = purego.NewCallback(func(FileVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackUnmountMountable gets the callback function.
+func (x *FileIface) GetCallbackUnmountMountable() func(File, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xUnmountMountable == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnmountMountable)
+	return func(FileVar File, FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackUnmountMountableFinish sets the callback function.
+func (x *FileIface) SetCallbackUnmountMountableFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xUnmountMountableFinish = 0
+	} else {
+		x.xUnmountMountableFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackUnmountMountableFinish gets the callback function.
+func (x *FileIface) GetCallbackUnmountMountableFinish() func(File, AsyncResult) bool {
+	if x.xUnmountMountableFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xUnmountMountableFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackEjectMountable sets the callback function.
+func (x *FileIface) SetCallbackEjectMountable(cb func(File, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEjectMountable = 0
+	} else {
+		x.xEjectMountable = purego.NewCallback(func(FileVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEjectMountable gets the callback function.
+func (x *FileIface) GetCallbackEjectMountable() func(File, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEjectMountable == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEjectMountable)
+	return func(FileVar File, FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectMountableFinish sets the callback function.
+func (x *FileIface) SetCallbackEjectMountableFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectMountableFinish = 0
+	} else {
+		x.xEjectMountableFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectMountableFinish gets the callback function.
+func (x *FileIface) GetCallbackEjectMountableFinish() func(File, AsyncResult) bool {
+	if x.xEjectMountableFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectMountableFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackMountEnclosingVolume sets the callback function.
+func (x *FileIface) SetCallbackMountEnclosingVolume(cb func(File, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xMountEnclosingVolume = 0
+	} else {
+		x.xMountEnclosingVolume = purego.NewCallback(func(LocationVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: LocationVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackMountEnclosingVolume gets the callback function.
+func (x *FileIface) GetCallbackMountEnclosingVolume() func(File, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xMountEnclosingVolume == 0 {
+		return nil
+	}
+	var rawCallback func(LocationVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMountEnclosingVolume)
+	return func(LocationVar File, FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(LocationVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackMountEnclosingVolumeFinish sets the callback function.
+func (x *FileIface) SetCallbackMountEnclosingVolumeFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xMountEnclosingVolumeFinish = 0
+	} else {
+		x.xMountEnclosingVolumeFinish = purego.NewCallback(func(LocationVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: LocationVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackMountEnclosingVolumeFinish gets the callback function.
+func (x *FileIface) GetCallbackMountEnclosingVolumeFinish() func(File, AsyncResult) bool {
+	if x.xMountEnclosingVolumeFinish == 0 {
+		return nil
+	}
+	var rawCallback func(LocationVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMountEnclosingVolumeFinish)
+	return func(LocationVar File, ResultVar AsyncResult) bool {
+		return rawCallback(LocationVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackMonitorDir sets the callback function.
+func (x *FileIface) SetCallbackMonitorDir(cb func(File, FileMonitorFlags, *Cancellable) *FileMonitor) {
+	if cb == nil {
+		x.xMonitorDir = 0
+	} else {
+		x.xMonitorDir = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileMonitorFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackMonitorDir gets the callback function.
+func (x *FileIface) GetCallbackMonitorDir() func(File, FileMonitorFlags, *Cancellable) *FileMonitor {
+	if x.xMonitorDir == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileMonitorFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xMonitorDir)
+	return func(FileVar File, FlagsVar FileMonitorFlags, CancellableVar *Cancellable) *FileMonitor {
+		rawRet := rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileMonitor{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackMonitorFile sets the callback function.
+func (x *FileIface) SetCallbackMonitorFile(cb func(File, FileMonitorFlags, *Cancellable) *FileMonitor) {
+	if cb == nil {
+		x.xMonitorFile = 0
+	} else {
+		x.xMonitorFile = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileMonitorFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackMonitorFile gets the callback function.
+func (x *FileIface) GetCallbackMonitorFile() func(File, FileMonitorFlags, *Cancellable) *FileMonitor {
+	if x.xMonitorFile == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileMonitorFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xMonitorFile)
+	return func(FileVar File, FlagsVar FileMonitorFlags, CancellableVar *Cancellable) *FileMonitor {
+		rawRet := rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileMonitor{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackOpenReadwrite sets the callback function.
+func (x *FileIface) SetCallbackOpenReadwrite(cb func(File, *Cancellable) *FileIOStream) {
+	if cb == nil {
+		x.xOpenReadwrite = 0
+	} else {
+		x.xOpenReadwrite = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackOpenReadwrite gets the callback function.
+func (x *FileIface) GetCallbackOpenReadwrite() func(File, *Cancellable) *FileIOStream {
+	if x.xOpenReadwrite == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xOpenReadwrite)
+	return func(FileVar File, CancellableVar *Cancellable) *FileIOStream {
+		rawRet := rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileIOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackOpenReadwriteAsync sets the callback function.
+func (x *FileIface) SetCallbackOpenReadwriteAsync(cb func(File, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xOpenReadwriteAsync = 0
+	} else {
+		x.xOpenReadwriteAsync = purego.NewCallback(func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackOpenReadwriteAsync gets the callback function.
+func (x *FileIface) GetCallbackOpenReadwriteAsync() func(File, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xOpenReadwriteAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xOpenReadwriteAsync)
+	return func(FileVar File, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackOpenReadwriteFinish sets the callback function.
+func (x *FileIface) SetCallbackOpenReadwriteFinish(cb func(File, AsyncResult) *FileIOStream) {
+	if cb == nil {
+		x.xOpenReadwriteFinish = 0
+	} else {
+		x.xOpenReadwriteFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackOpenReadwriteFinish gets the callback function.
+func (x *FileIface) GetCallbackOpenReadwriteFinish() func(File, AsyncResult) *FileIOStream {
+	if x.xOpenReadwriteFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xOpenReadwriteFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileIOStream {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileIOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCreateReadwrite sets the callback function.
+func (x *FileIface) SetCallbackCreateReadwrite(cb func(File, FileCreateFlags, *Cancellable) *FileIOStream) {
+	if cb == nil {
+		x.xCreateReadwrite = 0
+	} else {
+		x.xCreateReadwrite = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateReadwrite gets the callback function.
+func (x *FileIface) GetCallbackCreateReadwrite() func(File, FileCreateFlags, *Cancellable) *FileIOStream {
+	if x.xCreateReadwrite == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateReadwrite)
+	return func(FileVar File, FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileIOStream {
+		rawRet := rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileIOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCreateReadwriteAsync sets the callback function.
+func (x *FileIface) SetCallbackCreateReadwriteAsync(cb func(File, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCreateReadwriteAsync = 0
+	} else {
+		x.xCreateReadwriteAsync = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCreateReadwriteAsync gets the callback function.
+func (x *FileIface) GetCallbackCreateReadwriteAsync() func(File, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xCreateReadwriteAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCreateReadwriteAsync)
+	return func(FileVar File, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCreateReadwriteFinish sets the callback function.
+func (x *FileIface) SetCallbackCreateReadwriteFinish(cb func(File, AsyncResult) *FileIOStream) {
+	if cb == nil {
+		x.xCreateReadwriteFinish = 0
+	} else {
+		x.xCreateReadwriteFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateReadwriteFinish gets the callback function.
+func (x *FileIface) GetCallbackCreateReadwriteFinish() func(File, AsyncResult) *FileIOStream {
+	if x.xCreateReadwriteFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateReadwriteFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileIOStream {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileIOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackReplaceReadwrite sets the callback function.
+func (x *FileIface) SetCallbackReplaceReadwrite(cb func(File, string, bool, FileCreateFlags, *Cancellable) *FileIOStream) {
+	if cb == nil {
+		x.xReplaceReadwrite = 0
+	} else {
+		x.xReplaceReadwrite = purego.NewCallback(func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, EtagVarp, MakeBackupVarp, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackReplaceReadwrite gets the callback function.
+func (x *FileIface) GetCallbackReplaceReadwrite() func(File, string, bool, FileCreateFlags, *Cancellable) *FileIOStream {
+	if x.xReplaceReadwrite == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xReplaceReadwrite)
+	return func(FileVar File, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileIOStream {
+		rawRet := rawCallback(FileVar.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileIOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackReplaceReadwriteAsync sets the callback function.
+func (x *FileIface) SetCallbackReplaceReadwriteAsync(cb func(File, string, bool, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xReplaceReadwriteAsync = 0
+	} else {
+		x.xReplaceReadwriteAsync = purego.NewCallback(func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, EtagVarp, MakeBackupVarp, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackReplaceReadwriteAsync gets the callback function.
+func (x *FileIface) GetCallbackReplaceReadwriteAsync() func(File, string, bool, FileCreateFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xReplaceReadwriteAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, EtagVarp string, MakeBackupVarp bool, FlagsVarp FileCreateFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReplaceReadwriteAsync)
+	return func(FileVar File, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), EtagVar, MakeBackupVar, FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackReplaceReadwriteFinish sets the callback function.
+func (x *FileIface) SetCallbackReplaceReadwriteFinish(cb func(File, AsyncResult) *FileIOStream) {
+	if cb == nil {
+		x.xReplaceReadwriteFinish = 0
+	} else {
+		x.xReplaceReadwriteFinish = purego.NewCallback(func(FileVarp uintptr, ResVarp uintptr) uintptr {
+			ret := cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackReplaceReadwriteFinish gets the callback function.
+func (x *FileIface) GetCallbackReplaceReadwriteFinish() func(File, AsyncResult) *FileIOStream {
+	if x.xReplaceReadwriteFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xReplaceReadwriteFinish)
+	return func(FileVar File, ResVar AsyncResult) *FileIOStream {
+		rawRet := rawCallback(FileVar.GoPointer(), ResVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileIOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackStartMountable sets the callback function.
+func (x *FileIface) SetCallbackStartMountable(cb func(File, DriveStartFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xStartMountable = 0
+	} else {
+		x.xStartMountable = purego.NewCallback(func(FileVarp uintptr, FlagsVarp DriveStartFlags, StartOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, MountOperationNewFromInternalPtr(StartOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackStartMountable gets the callback function.
+func (x *FileIface) GetCallbackStartMountable() func(File, DriveStartFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xStartMountable == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp DriveStartFlags, StartOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStartMountable)
+	return func(FileVar File, FlagsVar DriveStartFlags, StartOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, StartOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackStartMountableFinish sets the callback function.
+func (x *FileIface) SetCallbackStartMountableFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xStartMountableFinish = 0
+	} else {
+		x.xStartMountableFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackStartMountableFinish gets the callback function.
+func (x *FileIface) GetCallbackStartMountableFinish() func(File, AsyncResult) bool {
+	if x.xStartMountableFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xStartMountableFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackStopMountable sets the callback function.
+func (x *FileIface) SetCallbackStopMountable(cb func(File, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xStopMountable = 0
+	} else {
+		x.xStopMountable = purego.NewCallback(func(FileVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackStopMountable gets the callback function.
+func (x *FileIface) GetCallbackStopMountable() func(File, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xStopMountable == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStopMountable)
+	return func(FileVar File, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackStopMountableFinish sets the callback function.
+func (x *FileIface) SetCallbackStopMountableFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xStopMountableFinish = 0
+	} else {
+		x.xStopMountableFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackStopMountableFinish gets the callback function.
+func (x *FileIface) GetCallbackStopMountableFinish() func(File, AsyncResult) bool {
+	if x.xStopMountableFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xStopMountableFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackUnmountMountableWithOperation sets the callback function.
+func (x *FileIface) SetCallbackUnmountMountableWithOperation(cb func(File, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xUnmountMountableWithOperation = 0
+	} else {
+		x.xUnmountMountableWithOperation = purego.NewCallback(func(FileVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackUnmountMountableWithOperation gets the callback function.
+func (x *FileIface) GetCallbackUnmountMountableWithOperation() func(File, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xUnmountMountableWithOperation == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnmountMountableWithOperation)
+	return func(FileVar File, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackUnmountMountableWithOperationFinish sets the callback function.
+func (x *FileIface) SetCallbackUnmountMountableWithOperationFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xUnmountMountableWithOperationFinish = 0
+	} else {
+		x.xUnmountMountableWithOperationFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackUnmountMountableWithOperationFinish gets the callback function.
+func (x *FileIface) GetCallbackUnmountMountableWithOperationFinish() func(File, AsyncResult) bool {
+	if x.xUnmountMountableWithOperationFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xUnmountMountableWithOperationFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackEjectMountableWithOperation sets the callback function.
+func (x *FileIface) SetCallbackEjectMountableWithOperation(cb func(File, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEjectMountableWithOperation = 0
+	} else {
+		x.xEjectMountableWithOperation = purego.NewCallback(func(FileVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEjectMountableWithOperation gets the callback function.
+func (x *FileIface) GetCallbackEjectMountableWithOperation() func(File, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEjectMountableWithOperation == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEjectMountableWithOperation)
+	return func(FileVar File, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectMountableWithOperationFinish sets the callback function.
+func (x *FileIface) SetCallbackEjectMountableWithOperationFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectMountableWithOperationFinish = 0
+	} else {
+		x.xEjectMountableWithOperationFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectMountableWithOperationFinish gets the callback function.
+func (x *FileIface) GetCallbackEjectMountableWithOperationFinish() func(File, AsyncResult) bool {
+	if x.xEjectMountableWithOperationFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectMountableWithOperationFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackPollMountable sets the callback function.
+func (x *FileIface) SetCallbackPollMountable(cb func(File, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xPollMountable = 0
+	} else {
+		x.xPollMountable = purego.NewCallback(func(FileVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackPollMountable gets the callback function.
+func (x *FileIface) GetCallbackPollMountable() func(File, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xPollMountable == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPollMountable)
+	return func(FileVar File, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackPollMountableFinish sets the callback function.
+func (x *FileIface) SetCallbackPollMountableFinish(cb func(File, AsyncResult) bool) {
+	if cb == nil {
+		x.xPollMountableFinish = 0
+	} else {
+		x.xPollMountableFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackPollMountableFinish gets the callback function.
+func (x *FileIface) GetCallbackPollMountableFinish() func(File, AsyncResult) bool {
+	if x.xPollMountableFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xPollMountableFinish)
+	return func(FileVar File, ResultVar AsyncResult) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackMeasureDiskUsage sets the callback function.
+func (x *FileIface) SetCallbackMeasureDiskUsage(cb func(File, FileMeasureFlags, *Cancellable, *FileMeasureProgressCallback, uintptr, uint64, uint64, uint64) bool) {
+	if cb == nil {
+		x.xMeasureDiskUsage = 0
+	} else {
+		x.xMeasureDiskUsage = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileMeasureFlags, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressDataVarp uintptr, DiskUsageVarp uint64, NumDirsVarp uint64, NumFilesVarp uint64) bool {
+			return cb(&FileBase{Ptr: FileVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*FileMeasureProgressCallback)(unsafe.Pointer(ProgressCallbackVarp)), ProgressDataVarp, DiskUsageVarp, NumDirsVarp, NumFilesVarp)
+		})
+	}
+}
+
+// GetCallbackMeasureDiskUsage gets the callback function.
+func (x *FileIface) GetCallbackMeasureDiskUsage() func(File, FileMeasureFlags, *Cancellable, *FileMeasureProgressCallback, uintptr, uint64, uint64, uint64) bool {
+	if x.xMeasureDiskUsage == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileMeasureFlags, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressDataVarp uintptr, DiskUsageVarp uint64, NumDirsVarp uint64, NumFilesVarp uint64) bool
+	purego.RegisterFunc(&rawCallback, x.xMeasureDiskUsage)
+	return func(FileVar File, FlagsVar FileMeasureFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileMeasureProgressCallback, ProgressDataVar uintptr, DiskUsageVar uint64, NumDirsVar uint64, NumFilesVar uint64) bool {
+		return rawCallback(FileVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressDataVar, DiskUsageVar, NumDirsVar, NumFilesVar)
+	}
+}
+
+// SetCallbackMeasureDiskUsageAsync sets the callback function.
+func (x *FileIface) SetCallbackMeasureDiskUsageAsync(cb func(File, FileMeasureFlags, int, *Cancellable, *FileMeasureProgressCallback, uintptr, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xMeasureDiskUsageAsync = 0
+	} else {
+		x.xMeasureDiskUsageAsync = purego.NewCallback(func(FileVarp uintptr, FlagsVarp FileMeasureFlags, IoPriorityVarp int, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressDataVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&FileBase{Ptr: FileVarp}, FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*FileMeasureProgressCallback)(unsafe.Pointer(ProgressCallbackVarp)), ProgressDataVarp, (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackMeasureDiskUsageAsync gets the callback function.
+func (x *FileIface) GetCallbackMeasureDiskUsageAsync() func(File, FileMeasureFlags, int, *Cancellable, *FileMeasureProgressCallback, uintptr, *AsyncReadyCallback, uintptr) {
+	if x.xMeasureDiskUsageAsync == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, FlagsVarp FileMeasureFlags, IoPriorityVarp int, CancellableVarp uintptr, ProgressCallbackVarp uintptr, ProgressDataVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMeasureDiskUsageAsync)
+	return func(FileVar File, FlagsVar FileMeasureFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileMeasureProgressCallback, ProgressDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(FileVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(ProgressCallbackVar), ProgressDataVar, glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackMeasureDiskUsageFinish sets the callback function.
+func (x *FileIface) SetCallbackMeasureDiskUsageFinish(cb func(File, AsyncResult, uint64, uint64, uint64) bool) {
+	if cb == nil {
+		x.xMeasureDiskUsageFinish = 0
+	} else {
+		x.xMeasureDiskUsageFinish = purego.NewCallback(func(FileVarp uintptr, ResultVarp uintptr, DiskUsageVarp uint64, NumDirsVarp uint64, NumFilesVarp uint64) bool {
+			return cb(&FileBase{Ptr: FileVarp}, &AsyncResultBase{Ptr: ResultVarp}, DiskUsageVarp, NumDirsVarp, NumFilesVarp)
+		})
+	}
+}
+
+// GetCallbackMeasureDiskUsageFinish gets the callback function.
+func (x *FileIface) GetCallbackMeasureDiskUsageFinish() func(File, AsyncResult, uint64, uint64, uint64) bool {
+	if x.xMeasureDiskUsageFinish == 0 {
+		return nil
+	}
+	var rawCallback func(FileVarp uintptr, ResultVarp uintptr, DiskUsageVarp uint64, NumDirsVarp uint64, NumFilesVarp uint64) bool
+	purego.RegisterFunc(&rawCallback, x.xMeasureDiskUsageFinish)
+	return func(FileVar File, ResultVar AsyncResult, DiskUsageVar uint64, NumDirsVar uint64, NumFilesVar uint64) bool {
+		return rawCallback(FileVar.GoPointer(), ResultVar.GoPointer(), DiskUsageVar, NumDirsVar, NumFilesVar)
+	}
+}
+
 // #GFile is a high level abstraction for manipulating files on a
 // virtual file system. #GFiles are lightweight, immutable objects
 // that do no I/O upon creation. It is necessary to understand that
@@ -313,38 +2969,38 @@ // for HTTP Etag headers, which are a very similar concept.
 type File interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	AppendTo(FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileOutputStream
+	AppendTo(FlagsVar FileCreateFlags, CancellableVar *Cancellable) (*FileOutputStream, error)
 	AppendToAsync(FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	AppendToFinish(ResVar AsyncResult) *FileOutputStream
-	BuildAttributeListForCopy(FlagsVar FileCopyFlags, CancellableVar *Cancellable) string
-	Copy(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) bool
+	AppendToFinish(ResVar AsyncResult) (*FileOutputStream, error)
+	BuildAttributeListForCopy(FlagsVar FileCopyFlags, CancellableVar *Cancellable) (string, error)
+	Copy(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) (bool, error)
 	CopyAsync(DestinationVar File, FlagsVar FileCopyFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	CopyAttributes(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable) bool
-	CopyFinish(ResVar AsyncResult) bool
-	Create(FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileOutputStream
+	CopyAttributes(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable) (bool, error)
+	CopyFinish(ResVar AsyncResult) (bool, error)
+	Create(FlagsVar FileCreateFlags, CancellableVar *Cancellable) (*FileOutputStream, error)
 	CreateAsync(FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	CreateFinish(ResVar AsyncResult) *FileOutputStream
-	CreateReadwrite(FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileIOStream
+	CreateFinish(ResVar AsyncResult) (*FileOutputStream, error)
+	CreateReadwrite(FlagsVar FileCreateFlags, CancellableVar *Cancellable) (*FileIOStream, error)
 	CreateReadwriteAsync(FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	CreateReadwriteFinish(ResVar AsyncResult) *FileIOStream
-	Delete(CancellableVar *Cancellable) bool
+	CreateReadwriteFinish(ResVar AsyncResult) (*FileIOStream, error)
+	Delete(CancellableVar *Cancellable) (bool, error)
 	DeleteAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	DeleteFinish(ResultVar AsyncResult) bool
+	DeleteFinish(ResultVar AsyncResult) (bool, error)
 	Dup() *FileBase
 	EjectMountable(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectMountableFinish(ResultVar AsyncResult) bool
+	EjectMountableFinish(ResultVar AsyncResult) (bool, error)
 	EjectMountableWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectMountableWithOperationFinish(ResultVar AsyncResult) bool
-	EnumerateChildren(AttributesVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) *FileEnumerator
+	EjectMountableWithOperationFinish(ResultVar AsyncResult) (bool, error)
+	EnumerateChildren(AttributesVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (*FileEnumerator, error)
 	EnumerateChildrenAsync(AttributesVar string, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EnumerateChildrenFinish(ResVar AsyncResult) *FileEnumerator
+	EnumerateChildrenFinish(ResVar AsyncResult) (*FileEnumerator, error)
 	Equal(File2Var File) bool
-	FindEnclosingMount(CancellableVar *Cancellable) *MountBase
+	FindEnclosingMount(CancellableVar *Cancellable) (*MountBase, error)
 	FindEnclosingMountAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	FindEnclosingMountFinish(ResVar AsyncResult) *MountBase
+	FindEnclosingMountFinish(ResVar AsyncResult) (*MountBase, error)
 	GetBasename() string
 	GetChild(NameVar string) *FileBase
-	GetChildForDisplayName(DisplayNameVar string) *FileBase
+	GetChildForDisplayName(DisplayNameVar string) (*FileBase, error)
 	GetParent() *FileBase
 	GetParseName() string
 	GetPath() string
@@ -356,90 +3012,90 @@ 	HasPrefix(PrefixVar File) bool
 	HasUriScheme(UriSchemeVar string) bool
 	Hash() uint
 	IsNative() bool
-	LoadBytes(CancellableVar *Cancellable, EtagOutVar string) *glib.Bytes
+	LoadBytes(CancellableVar *Cancellable, EtagOutVar string) (*glib.Bytes, error)
 	LoadBytesAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	LoadBytesFinish(ResultVar AsyncResult, EtagOutVar string) *glib.Bytes
-	LoadContents(CancellableVar *Cancellable, ContentsVar []string, LengthVar uint, EtagOutVar string) bool
+	LoadBytesFinish(ResultVar AsyncResult, EtagOutVar string) (*glib.Bytes, error)
+	LoadContents(CancellableVar *Cancellable, ContentsVar []string, LengthVar uint, EtagOutVar string) (bool, error)
 	LoadContentsAsync(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	LoadContentsFinish(ResVar AsyncResult, ContentsVar []string, LengthVar uint, EtagOutVar string) bool
+	LoadContentsFinish(ResVar AsyncResult, ContentsVar []string, LengthVar uint, EtagOutVar string) (bool, error)
 	LoadPartialContentsAsync(CancellableVar *Cancellable, ReadMoreCallbackVar *FileReadMoreCallback, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	LoadPartialContentsFinish(ResVar AsyncResult, ContentsVar []string, LengthVar uint, EtagOutVar string) bool
-	MakeDirectory(CancellableVar *Cancellable) bool
+	LoadPartialContentsFinish(ResVar AsyncResult, ContentsVar []string, LengthVar uint, EtagOutVar string) (bool, error)
+	MakeDirectory(CancellableVar *Cancellable) (bool, error)
 	MakeDirectoryAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	MakeDirectoryFinish(ResultVar AsyncResult) bool
-	MakeDirectoryWithParents(CancellableVar *Cancellable) bool
-	MakeSymbolicLink(SymlinkValueVar string, CancellableVar *Cancellable) bool
-	MeasureDiskUsage(FlagsVar FileMeasureFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileMeasureProgressCallback, ProgressDataVar uintptr, DiskUsageVar uint64, NumDirsVar uint64, NumFilesVar uint64) bool
+	MakeDirectoryFinish(ResultVar AsyncResult) (bool, error)
+	MakeDirectoryWithParents(CancellableVar *Cancellable) (bool, error)
+	MakeSymbolicLink(SymlinkValueVar string, CancellableVar *Cancellable) (bool, error)
+	MeasureDiskUsage(FlagsVar FileMeasureFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileMeasureProgressCallback, ProgressDataVar uintptr, DiskUsageVar uint64, NumDirsVar uint64, NumFilesVar uint64) (bool, error)
 	MeasureDiskUsageAsync(FlagsVar FileMeasureFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileMeasureProgressCallback, ProgressDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	MeasureDiskUsageFinish(ResultVar AsyncResult, DiskUsageVar uint64, NumDirsVar uint64, NumFilesVar uint64) bool
-	Monitor(FlagsVar FileMonitorFlags, CancellableVar *Cancellable) *FileMonitor
-	MonitorDirectory(FlagsVar FileMonitorFlags, CancellableVar *Cancellable) *FileMonitor
-	MonitorFile(FlagsVar FileMonitorFlags, CancellableVar *Cancellable) *FileMonitor
+	MeasureDiskUsageFinish(ResultVar AsyncResult, DiskUsageVar uint64, NumDirsVar uint64, NumFilesVar uint64) (bool, error)
+	Monitor(FlagsVar FileMonitorFlags, CancellableVar *Cancellable) (*FileMonitor, error)
+	MonitorDirectory(FlagsVar FileMonitorFlags, CancellableVar *Cancellable) (*FileMonitor, error)
+	MonitorFile(FlagsVar FileMonitorFlags, CancellableVar *Cancellable) (*FileMonitor, error)
 	MountEnclosingVolume(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	MountEnclosingVolumeFinish(ResultVar AsyncResult) bool
+	MountEnclosingVolumeFinish(ResultVar AsyncResult) (bool, error)
 	MountMountable(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	MountMountableFinish(ResultVar AsyncResult) *FileBase
-	Move(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) bool
+	MountMountableFinish(ResultVar AsyncResult) (*FileBase, error)
+	Move(DestinationVar File, FlagsVar FileCopyFlags, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr) (bool, error)
 	MoveAsync(DestinationVar File, FlagsVar FileCopyFlags, IoPriorityVar int, CancellableVar *Cancellable, ProgressCallbackVar *FileProgressCallback, ProgressCallbackDataVar uintptr, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	MoveFinish(ResultVar AsyncResult) bool
-	OpenReadwrite(CancellableVar *Cancellable) *FileIOStream
+	MoveFinish(ResultVar AsyncResult) (bool, error)
+	OpenReadwrite(CancellableVar *Cancellable) (*FileIOStream, error)
 	OpenReadwriteAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	OpenReadwriteFinish(ResVar AsyncResult) *FileIOStream
+	OpenReadwriteFinish(ResVar AsyncResult) (*FileIOStream, error)
 	PeekPath() string
 	PollMountable(CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	PollMountableFinish(ResultVar AsyncResult) bool
-	QueryDefaultHandler(CancellableVar *Cancellable) *AppInfoBase
+	PollMountableFinish(ResultVar AsyncResult) (bool, error)
+	QueryDefaultHandler(CancellableVar *Cancellable) (*AppInfoBase, error)
 	QueryDefaultHandlerAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	QueryDefaultHandlerFinish(ResultVar AsyncResult) *AppInfoBase
+	QueryDefaultHandlerFinish(ResultVar AsyncResult) (*AppInfoBase, error)
 	QueryExists(CancellableVar *Cancellable) bool
 	QueryFileType(FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) FileType
-	QueryFilesystemInfo(AttributesVar string, CancellableVar *Cancellable) *FileInfo
+	QueryFilesystemInfo(AttributesVar string, CancellableVar *Cancellable) (*FileInfo, error)
 	QueryFilesystemInfoAsync(AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	QueryFilesystemInfoFinish(ResVar AsyncResult) *FileInfo
-	QueryInfo(AttributesVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) *FileInfo
+	QueryFilesystemInfoFinish(ResVar AsyncResult) (*FileInfo, error)
+	QueryInfo(AttributesVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (*FileInfo, error)
 	QueryInfoAsync(AttributesVar string, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	QueryInfoFinish(ResVar AsyncResult) *FileInfo
-	QuerySettableAttributes(CancellableVar *Cancellable) *FileAttributeInfoList
-	QueryWritableNamespaces(CancellableVar *Cancellable) *FileAttributeInfoList
-	Read(CancellableVar *Cancellable) *FileInputStream
+	QueryInfoFinish(ResVar AsyncResult) (*FileInfo, error)
+	QuerySettableAttributes(CancellableVar *Cancellable) (*FileAttributeInfoList, error)
+	QueryWritableNamespaces(CancellableVar *Cancellable) (*FileAttributeInfoList, error)
+	Read(CancellableVar *Cancellable) (*FileInputStream, error)
 	ReadAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	ReadFinish(ResVar AsyncResult) *FileInputStream
-	Replace(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileOutputStream
+	ReadFinish(ResVar AsyncResult) (*FileInputStream, error)
+	Replace(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable) (*FileOutputStream, error)
 	ReplaceAsync(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	ReplaceContents(ContentsVar string, LengthVar uint, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, NewEtagVar string, CancellableVar *Cancellable) bool
+	ReplaceContents(ContentsVar string, LengthVar uint, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, NewEtagVar string, CancellableVar *Cancellable) (bool, error)
 	ReplaceContentsAsync(ContentsVar string, LengthVar uint, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
 	ReplaceContentsBytesAsync(ContentsVar *glib.Bytes, EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	ReplaceContentsFinish(ResVar AsyncResult, NewEtagVar string) bool
-	ReplaceFinish(ResVar AsyncResult) *FileOutputStream
-	ReplaceReadwrite(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable) *FileIOStream
+	ReplaceContentsFinish(ResVar AsyncResult, NewEtagVar string) (bool, error)
+	ReplaceFinish(ResVar AsyncResult) (*FileOutputStream, error)
+	ReplaceReadwrite(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, CancellableVar *Cancellable) (*FileIOStream, error)
 	ReplaceReadwriteAsync(EtagVar string, MakeBackupVar bool, FlagsVar FileCreateFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	ReplaceReadwriteFinish(ResVar AsyncResult) *FileIOStream
+	ReplaceReadwriteFinish(ResVar AsyncResult) (*FileIOStream, error)
 	ResolveRelativePath(RelativePathVar string) *FileBase
-	SetAttribute(AttributeVar string, TypeVar FileAttributeType, ValuePVar uintptr, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
-	SetAttributeByteString(AttributeVar string, ValueVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
-	SetAttributeInt32(AttributeVar string, ValueVar int32, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
-	SetAttributeInt64(AttributeVar string, ValueVar int64, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
-	SetAttributeString(AttributeVar string, ValueVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
-	SetAttributeUint32(AttributeVar string, ValueVar uint32, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
-	SetAttributeUint64(AttributeVar string, ValueVar uint64, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
+	SetAttribute(AttributeVar string, TypeVar FileAttributeType, ValuePVar uintptr, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
+	SetAttributeByteString(AttributeVar string, ValueVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
+	SetAttributeInt32(AttributeVar string, ValueVar int32, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
+	SetAttributeInt64(AttributeVar string, ValueVar int64, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
+	SetAttributeString(AttributeVar string, ValueVar string, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
+	SetAttributeUint32(AttributeVar string, ValueVar uint32, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
+	SetAttributeUint64(AttributeVar string, ValueVar uint64, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
 	SetAttributesAsync(InfoVar *FileInfo, FlagsVar FileQueryInfoFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	SetAttributesFinish(ResultVar AsyncResult, InfoVar **FileInfo) bool
-	SetAttributesFromInfo(InfoVar *FileInfo, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool
-	SetDisplayName(DisplayNameVar string, CancellableVar *Cancellable) *FileBase
+	SetAttributesFinish(ResultVar AsyncResult, InfoVar **FileInfo) (bool, error)
+	SetAttributesFromInfo(InfoVar *FileInfo, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) (bool, error)
+	SetDisplayName(DisplayNameVar string, CancellableVar *Cancellable) (*FileBase, error)
 	SetDisplayNameAsync(DisplayNameVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	SetDisplayNameFinish(ResVar AsyncResult) *FileBase
+	SetDisplayNameFinish(ResVar AsyncResult) (*FileBase, error)
 	StartMountable(FlagsVar DriveStartFlags, StartOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	StartMountableFinish(ResultVar AsyncResult) bool
+	StartMountableFinish(ResultVar AsyncResult) (bool, error)
 	StopMountable(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	StopMountableFinish(ResultVar AsyncResult) bool
+	StopMountableFinish(ResultVar AsyncResult) (bool, error)
 	SupportsThreadContexts() bool
-	Trash(CancellableVar *Cancellable) bool
+	Trash(CancellableVar *Cancellable) (bool, error)
 	TrashAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	TrashFinish(ResultVar AsyncResult) bool
+	TrashFinish(ResultVar AsyncResult) (bool, error)
 	UnmountMountable(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	UnmountMountableFinish(ResultVar AsyncResult) bool
+	UnmountMountableFinish(ResultVar AsyncResult) (bool, error)
 	UnmountMountableWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	UnmountMountableWithOperationFinish(ResultVar AsyncResult) bool
+	UnmountMountableWithOperationFinish(ResultVar AsyncResult) (bool, error)
 }
 
 var xFileGLibType func() types.GType
@@ -2668,7 +5324,7 @@ // Finishes setting an attribute started in g_file_set_attributes_async().
 func (x *FileBase) SetAttributesFinish(ResultVar AsyncResult, InfoVar **FileInfo) (bool, error) {
 	var cerr *glib.Error
 
-	cret := XGFileSetAttributesFinish(x.GoPointer(), ResultVar.GoPointer(), gobject.ConvertPtr(InfoVar), &cerr)
+	cret := XGFileSetAttributesFinish(x.GoPointer(), ResultVar.GoPointer(), *gobject.ConvertPtr(InfoVar), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -3050,7 +5706,7 @@ var XGFileSetAttributeString func(uintptr, string, string, FileQueryInfoFlags, uintptr, **glib.Error) bool
 var XGFileSetAttributeUint32 func(uintptr, string, uint32, FileQueryInfoFlags, uintptr, **glib.Error) bool
 var XGFileSetAttributeUint64 func(uintptr, string, uint64, FileQueryInfoFlags, uintptr, **glib.Error) bool
 var XGFileSetAttributesAsync func(uintptr, uintptr, FileQueryInfoFlags, int, uintptr, uintptr, uintptr)
-var XGFileSetAttributesFinish func(uintptr, uintptr, *uintptr, **glib.Error) bool
+var XGFileSetAttributesFinish func(uintptr, uintptr, uintptr, **glib.Error) bool
 var XGFileSetAttributesFromInfo func(uintptr, uintptr, FileQueryInfoFlags, uintptr, **glib.Error) bool
 var XGFileSetDisplayName func(uintptr, string, uintptr, **glib.Error) uintptr
 var XGFileSetDisplayNameAsync func(uintptr, string, int, uintptr, uintptr, uintptr)
@@ -3160,7 +5816,7 @@ 	cls.Ptr = cret
 	return cls
 }
 
-var xFileNewTmp func(string, *uintptr, **glib.Error) uintptr
+var xFileNewTmp func(string, uintptr, **glib.Error) uintptr
 
 // Opens a file in the preferred directory for temporary files (as
 // returned by g_get_tmp_dir()) and returns a #GFile and
@@ -3176,7 +5832,7 @@ func FileNewTmp(TmplVar string, IostreamVar **FileIOStream) (*FileBase, error) {
 	var cls *FileBase
 	var cerr *glib.Error
 
-	cret := xFileNewTmp(TmplVar, gobject.ConvertPtr(IostreamVar), &cerr)
+	cret := xFileNewTmp(TmplVar, *gobject.ConvertPtr(IostreamVar), &cerr)
 
 	if cret == 0 {
 		return nil, cerr
diff --git a/v4/gio/gfiledescriptorbased.go b/v4/gio/gfiledescriptorbased.go
index b48b05caac7f0df7b015efb4f46032409dff29ea..7d739427563eb9761b7130c451fe4948a12c1489 100644
--- a/v4/gio/gfiledescriptorbased.go
+++ b/v4/gio/gfiledescriptorbased.go
@@ -16,11 +16,34 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	GetFd uintptr
+	xGetFd uintptr
 }
 
 func (x *FileDescriptorBasedIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetFd sets the callback function.
+func (x *FileDescriptorBasedIface) SetCallbackGetFd(cb func(FileDescriptorBased) int) {
+	if cb == nil {
+		x.xGetFd = 0
+	} else {
+		x.xGetFd = purego.NewCallback(func(FdBasedVarp uintptr) int {
+			return cb(&FileDescriptorBasedBase{Ptr: FdBasedVarp})
+		})
+	}
+}
+
+// GetCallbackGetFd gets the callback function.
+func (x *FileDescriptorBasedIface) GetCallbackGetFd() func(FileDescriptorBased) int {
+	if x.xGetFd == 0 {
+		return nil
+	}
+	var rawCallback func(FdBasedVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetFd)
+	return func(FdBasedVar FileDescriptorBased) int {
+		return rawCallback(FdBasedVar.GoPointer())
+	}
 }
 
 // #GFileDescriptorBased is implemented by streams (implementations of
diff --git a/v4/gio/gfileenumerator.go b/v4/gio/gfileenumerator.go
index cd90cedd414b138711c5aa1fbe9a9c2cdcde71a1..b3dabfbc533d87667328c1b0ad27f6d151991ee1 100644
--- a/v4/gio/gfileenumerator.go
+++ b/v4/gio/gfileenumerator.go
@@ -17,37 +17,346 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	NextFile uintptr
+	xNextFile uintptr
 
-	CloseFn uintptr
+	xCloseFn uintptr
 
-	NextFilesAsync uintptr
+	xNextFilesAsync uintptr
 
-	NextFilesFinish uintptr
+	xNextFilesFinish uintptr
 
-	CloseAsync uintptr
+	xCloseAsync uintptr
 
-	CloseFinish uintptr
+	xCloseFinish uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 
-	GReserved7 uintptr
+	xGReserved7 uintptr
 }
 
 func (x *FileEnumeratorClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackNextFile sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackNextFile(cb func(*FileEnumerator, *Cancellable) *FileInfo) {
+	if cb == nil {
+		x.xNextFile = 0
+	} else {
+		x.xNextFile = purego.NewCallback(func(EnumeratorVarp uintptr, CancellableVarp uintptr) uintptr {
+			ret := cb(FileEnumeratorNewFromInternalPtr(EnumeratorVarp), CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackNextFile gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackNextFile() func(*FileEnumerator, *Cancellable) *FileInfo {
+	if x.xNextFile == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xNextFile)
+	return func(EnumeratorVar *FileEnumerator, CancellableVar *Cancellable) *FileInfo {
+		rawRet := rawCallback(EnumeratorVar.GoPointer(), CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCloseFn sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackCloseFn(cb func(*FileEnumerator, *Cancellable) bool) {
+	if cb == nil {
+		x.xCloseFn = 0
+	} else {
+		x.xCloseFn = purego.NewCallback(func(EnumeratorVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(FileEnumeratorNewFromInternalPtr(EnumeratorVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCloseFn gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackCloseFn() func(*FileEnumerator, *Cancellable) bool {
+	if x.xCloseFn == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFn)
+	return func(EnumeratorVar *FileEnumerator, CancellableVar *Cancellable) bool {
+		return rawCallback(EnumeratorVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackNextFilesAsync sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackNextFilesAsync(cb func(*FileEnumerator, int, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xNextFilesAsync = 0
+	} else {
+		x.xNextFilesAsync = purego.NewCallback(func(EnumeratorVarp uintptr, NumFilesVarp int, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(FileEnumeratorNewFromInternalPtr(EnumeratorVarp), NumFilesVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackNextFilesAsync gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackNextFilesAsync() func(*FileEnumerator, int, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xNextFilesAsync == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, NumFilesVarp int, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xNextFilesAsync)
+	return func(EnumeratorVar *FileEnumerator, NumFilesVar int, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(EnumeratorVar.GoPointer(), NumFilesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackNextFilesFinish sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackNextFilesFinish(cb func(*FileEnumerator, AsyncResult) *glib.List) {
+	if cb == nil {
+		x.xNextFilesFinish = 0
+	} else {
+		x.xNextFilesFinish = purego.NewCallback(func(EnumeratorVarp uintptr, ResultVarp uintptr) *glib.List {
+			return cb(FileEnumeratorNewFromInternalPtr(EnumeratorVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackNextFilesFinish gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackNextFilesFinish() func(*FileEnumerator, AsyncResult) *glib.List {
+	if x.xNextFilesFinish == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, ResultVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xNextFilesFinish)
+	return func(EnumeratorVar *FileEnumerator, ResultVar AsyncResult) *glib.List {
+		return rawCallback(EnumeratorVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackCloseAsync sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackCloseAsync(cb func(*FileEnumerator, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCloseAsync = 0
+	} else {
+		x.xCloseAsync = purego.NewCallback(func(EnumeratorVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(FileEnumeratorNewFromInternalPtr(EnumeratorVarp), IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCloseAsync gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackCloseAsync() func(*FileEnumerator, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xCloseAsync == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCloseAsync)
+	return func(EnumeratorVar *FileEnumerator, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(EnumeratorVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCloseFinish sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackCloseFinish(cb func(*FileEnumerator, AsyncResult) bool) {
+	if cb == nil {
+		x.xCloseFinish = 0
+	} else {
+		x.xCloseFinish = purego.NewCallback(func(EnumeratorVarp uintptr, ResultVarp uintptr) bool {
+			return cb(FileEnumeratorNewFromInternalPtr(EnumeratorVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackCloseFinish gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackCloseFinish() func(*FileEnumerator, AsyncResult) bool {
+	if x.xCloseFinish == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFinish)
+	return func(EnumeratorVar *FileEnumerator, ResultVar AsyncResult) bool {
+		return rawCallback(EnumeratorVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved7 sets the callback function.
+func (x *FileEnumeratorClass) SetCallbackGReserved7(cb func()) {
+	if cb == nil {
+		x.xGReserved7 = 0
+	} else {
+		x.xGReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved7 gets the callback function.
+func (x *FileEnumeratorClass) GetCallbackGReserved7() func() {
+	if x.xGReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
 type FileEnumeratorPrivate struct {
 	_ structs.HostLayout
 }
@@ -219,7 +528,7 @@ 	cret := xFileEnumeratorIsClosed(x.GoPointer())
 	return cret
 }
 
-var xFileEnumeratorIterate func(uintptr, *uintptr, *uintptr, uintptr, **glib.Error) bool
+var xFileEnumeratorIterate func(uintptr, uintptr, *uintptr, uintptr, **glib.Error) bool
 
 // This is a version of g_file_enumerator_next_file() that's easier to
 // use correctly from C programs.  With g_file_enumerator_next_file(),
@@ -265,7 +574,7 @@ // ]|
 func (x *FileEnumerator) Iterate(OutInfoVar **FileInfo, OutChildVar *File, CancellableVar *Cancellable) (bool, error) {
 	var cerr *glib.Error
 
-	cret := xFileEnumeratorIterate(x.GoPointer(), gobject.ConvertPtr(OutInfoVar), gobject.ConvertPtr(OutChildVar), CancellableVar.GoPointer(), &cerr)
+	cret := xFileEnumeratorIterate(x.GoPointer(), *gobject.ConvertPtr(OutInfoVar), gobject.ConvertPtr(OutChildVar), CancellableVar.GoPointer(), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
diff --git a/v4/gio/gfileinputstream.go b/v4/gio/gfileinputstream.go
index 222f3a02235bbfe1c254e1eb215d7f0d8070cf2f..2a240795970b892032968f1c17666690d7978f84 100644
--- a/v4/gio/gfileinputstream.go
+++ b/v4/gio/gfileinputstream.go
@@ -16,31 +16,304 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Tell uintptr
+	xTell uintptr
 
-	CanSeek uintptr
+	xCanSeek uintptr
 
-	Seek uintptr
+	xSeek uintptr
 
-	QueryInfo uintptr
+	xQueryInfo uintptr
 
-	QueryInfoAsync uintptr
+	xQueryInfoAsync uintptr
 
-	QueryInfoFinish uintptr
+	xQueryInfoFinish uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *FileInputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackTell sets the callback function.
+func (x *FileInputStreamClass) SetCallbackTell(cb func(*FileInputStream) int64) {
+	if cb == nil {
+		x.xTell = 0
+	} else {
+		x.xTell = purego.NewCallback(func(StreamVarp uintptr) int64 {
+			return cb(FileInputStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackTell gets the callback function.
+func (x *FileInputStreamClass) GetCallbackTell() func(*FileInputStream) int64 {
+	if x.xTell == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) int64
+	purego.RegisterFunc(&rawCallback, x.xTell)
+	return func(StreamVar *FileInputStream) int64 {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackCanSeek sets the callback function.
+func (x *FileInputStreamClass) SetCallbackCanSeek(cb func(*FileInputStream) bool) {
+	if cb == nil {
+		x.xCanSeek = 0
+	} else {
+		x.xCanSeek = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(FileInputStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackCanSeek gets the callback function.
+func (x *FileInputStreamClass) GetCallbackCanSeek() func(*FileInputStream) bool {
+	if x.xCanSeek == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanSeek)
+	return func(StreamVar *FileInputStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackSeek sets the callback function.
+func (x *FileInputStreamClass) SetCallbackSeek(cb func(*FileInputStream, int64, glib.SeekType, *Cancellable) bool) {
+	if cb == nil {
+		x.xSeek = 0
+	} else {
+		x.xSeek = purego.NewCallback(func(StreamVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool {
+			return cb(FileInputStreamNewFromInternalPtr(StreamVarp), OffsetVarp, TypeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSeek gets the callback function.
+func (x *FileInputStreamClass) GetCallbackSeek() func(*FileInputStream, int64, glib.SeekType, *Cancellable) bool {
+	if x.xSeek == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSeek)
+	return func(StreamVar *FileInputStream, OffsetVar int64, TypeVar glib.SeekType, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), OffsetVar, TypeVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackQueryInfo sets the callback function.
+func (x *FileInputStreamClass) SetCallbackQueryInfo(cb func(*FileInputStream, string, *Cancellable) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfo = 0
+	} else {
+		x.xQueryInfo = purego.NewCallback(func(StreamVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr {
+			ret := cb(FileInputStreamNewFromInternalPtr(StreamVarp), AttributesVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfo gets the callback function.
+func (x *FileInputStreamClass) GetCallbackQueryInfo() func(*FileInputStream, string, *Cancellable) *FileInfo {
+	if x.xQueryInfo == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfo)
+	return func(StreamVar *FileInputStream, AttributesVar string, CancellableVar *Cancellable) *FileInfo {
+		rawRet := rawCallback(StreamVar.GoPointer(), AttributesVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQueryInfoAsync sets the callback function.
+func (x *FileInputStreamClass) SetCallbackQueryInfoAsync(cb func(*FileInputStream, string, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xQueryInfoAsync = 0
+	} else {
+		x.xQueryInfoAsync = purego.NewCallback(func(StreamVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(FileInputStreamNewFromInternalPtr(StreamVarp), AttributesVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackQueryInfoAsync gets the callback function.
+func (x *FileInputStreamClass) GetCallbackQueryInfoAsync() func(*FileInputStream, string, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xQueryInfoAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoAsync)
+	return func(StreamVar *FileInputStream, AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackQueryInfoFinish sets the callback function.
+func (x *FileInputStreamClass) SetCallbackQueryInfoFinish(cb func(*FileInputStream, AsyncResult) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfoFinish = 0
+	} else {
+		x.xQueryInfoFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(FileInputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfoFinish gets the callback function.
+func (x *FileInputStreamClass) GetCallbackQueryInfoFinish() func(*FileInputStream, AsyncResult) *FileInfo {
+	if x.xQueryInfoFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoFinish)
+	return func(StreamVar *FileInputStream, ResultVar AsyncResult) *FileInfo {
+		rawRet := rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FileInputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FileInputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FileInputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FileInputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FileInputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FileInputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *FileInputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *FileInputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *FileInputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *FileInputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type FileInputStreamPrivate struct {
diff --git a/v4/gio/gfileiostream.go b/v4/gio/gfileiostream.go
index f07e66a67f791bc5c612c5ff7b8d85b645adad16..30fda86ae2f0ab28a5126a02ed92387e7486c168 100644
--- a/v4/gio/gfileiostream.go
+++ b/v4/gio/gfileiostream.go
@@ -16,37 +16,379 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Tell uintptr
+	xTell uintptr
 
-	CanSeek uintptr
+	xCanSeek uintptr
 
-	Seek uintptr
+	xSeek uintptr
 
-	CanTruncate uintptr
+	xCanTruncate uintptr
 
-	TruncateFn uintptr
+	xTruncateFn uintptr
 
-	QueryInfo uintptr
+	xQueryInfo uintptr
 
-	QueryInfoAsync uintptr
+	xQueryInfoAsync uintptr
 
-	QueryInfoFinish uintptr
+	xQueryInfoFinish uintptr
 
-	GetEtag uintptr
+	xGetEtag uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *FileIOStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackTell sets the callback function.
+func (x *FileIOStreamClass) SetCallbackTell(cb func(*FileIOStream) int64) {
+	if cb == nil {
+		x.xTell = 0
+	} else {
+		x.xTell = purego.NewCallback(func(StreamVarp uintptr) int64 {
+			return cb(FileIOStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackTell gets the callback function.
+func (x *FileIOStreamClass) GetCallbackTell() func(*FileIOStream) int64 {
+	if x.xTell == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) int64
+	purego.RegisterFunc(&rawCallback, x.xTell)
+	return func(StreamVar *FileIOStream) int64 {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackCanSeek sets the callback function.
+func (x *FileIOStreamClass) SetCallbackCanSeek(cb func(*FileIOStream) bool) {
+	if cb == nil {
+		x.xCanSeek = 0
+	} else {
+		x.xCanSeek = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(FileIOStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackCanSeek gets the callback function.
+func (x *FileIOStreamClass) GetCallbackCanSeek() func(*FileIOStream) bool {
+	if x.xCanSeek == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanSeek)
+	return func(StreamVar *FileIOStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackSeek sets the callback function.
+func (x *FileIOStreamClass) SetCallbackSeek(cb func(*FileIOStream, int64, glib.SeekType, *Cancellable) bool) {
+	if cb == nil {
+		x.xSeek = 0
+	} else {
+		x.xSeek = purego.NewCallback(func(StreamVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool {
+			return cb(FileIOStreamNewFromInternalPtr(StreamVarp), OffsetVarp, TypeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSeek gets the callback function.
+func (x *FileIOStreamClass) GetCallbackSeek() func(*FileIOStream, int64, glib.SeekType, *Cancellable) bool {
+	if x.xSeek == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSeek)
+	return func(StreamVar *FileIOStream, OffsetVar int64, TypeVar glib.SeekType, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), OffsetVar, TypeVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCanTruncate sets the callback function.
+func (x *FileIOStreamClass) SetCallbackCanTruncate(cb func(*FileIOStream) bool) {
+	if cb == nil {
+		x.xCanTruncate = 0
+	} else {
+		x.xCanTruncate = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(FileIOStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackCanTruncate gets the callback function.
+func (x *FileIOStreamClass) GetCallbackCanTruncate() func(*FileIOStream) bool {
+	if x.xCanTruncate == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanTruncate)
+	return func(StreamVar *FileIOStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackTruncateFn sets the callback function.
+func (x *FileIOStreamClass) SetCallbackTruncateFn(cb func(*FileIOStream, int64, *Cancellable) bool) {
+	if cb == nil {
+		x.xTruncateFn = 0
+	} else {
+		x.xTruncateFn = purego.NewCallback(func(StreamVarp uintptr, SizeVarp int64, CancellableVarp uintptr) bool {
+			return cb(FileIOStreamNewFromInternalPtr(StreamVarp), SizeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackTruncateFn gets the callback function.
+func (x *FileIOStreamClass) GetCallbackTruncateFn() func(*FileIOStream, int64, *Cancellable) bool {
+	if x.xTruncateFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, SizeVarp int64, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xTruncateFn)
+	return func(StreamVar *FileIOStream, SizeVar int64, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), SizeVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackQueryInfo sets the callback function.
+func (x *FileIOStreamClass) SetCallbackQueryInfo(cb func(*FileIOStream, string, *Cancellable) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfo = 0
+	} else {
+		x.xQueryInfo = purego.NewCallback(func(StreamVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr {
+			ret := cb(FileIOStreamNewFromInternalPtr(StreamVarp), AttributesVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfo gets the callback function.
+func (x *FileIOStreamClass) GetCallbackQueryInfo() func(*FileIOStream, string, *Cancellable) *FileInfo {
+	if x.xQueryInfo == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfo)
+	return func(StreamVar *FileIOStream, AttributesVar string, CancellableVar *Cancellable) *FileInfo {
+		rawRet := rawCallback(StreamVar.GoPointer(), AttributesVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQueryInfoAsync sets the callback function.
+func (x *FileIOStreamClass) SetCallbackQueryInfoAsync(cb func(*FileIOStream, string, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xQueryInfoAsync = 0
+	} else {
+		x.xQueryInfoAsync = purego.NewCallback(func(StreamVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(FileIOStreamNewFromInternalPtr(StreamVarp), AttributesVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackQueryInfoAsync gets the callback function.
+func (x *FileIOStreamClass) GetCallbackQueryInfoAsync() func(*FileIOStream, string, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xQueryInfoAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoAsync)
+	return func(StreamVar *FileIOStream, AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackQueryInfoFinish sets the callback function.
+func (x *FileIOStreamClass) SetCallbackQueryInfoFinish(cb func(*FileIOStream, AsyncResult) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfoFinish = 0
+	} else {
+		x.xQueryInfoFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(FileIOStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfoFinish gets the callback function.
+func (x *FileIOStreamClass) GetCallbackQueryInfoFinish() func(*FileIOStream, AsyncResult) *FileInfo {
+	if x.xQueryInfoFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoFinish)
+	return func(StreamVar *FileIOStream, ResultVar AsyncResult) *FileInfo {
+		rawRet := rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetEtag sets the callback function.
+func (x *FileIOStreamClass) SetCallbackGetEtag(cb func(*FileIOStream) string) {
+	if cb == nil {
+		x.xGetEtag = 0
+	} else {
+		x.xGetEtag = purego.NewCallback(func(StreamVarp uintptr) string {
+			return cb(FileIOStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackGetEtag gets the callback function.
+func (x *FileIOStreamClass) GetCallbackGetEtag() func(*FileIOStream) string {
+	if x.xGetEtag == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetEtag)
+	return func(StreamVar *FileIOStream) string {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FileIOStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FileIOStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FileIOStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FileIOStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FileIOStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FileIOStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *FileIOStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *FileIOStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *FileIOStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *FileIOStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type FileIOStreamPrivate struct {
diff --git a/v4/gio/gfilemonitor.go b/v4/gio/gfilemonitor.go
index 079ea383144f2fbda5133573c3fda774f28e9bf1..972c74d831c9b9cb3ded671e79e85ac1dbbb82f4 100644
--- a/v4/gio/gfilemonitor.go
+++ b/v4/gio/gfilemonitor.go
@@ -17,23 +17,184 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	Cancel uintptr
+	xCancel uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *FileMonitorClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *FileMonitorClass) SetCallbackChanged(cb func(*FileMonitor, File, File, FileMonitorEvent)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(MonitorVarp uintptr, FileVarp uintptr, OtherFileVarp uintptr, EventTypeVarp FileMonitorEvent) {
+			cb(FileMonitorNewFromInternalPtr(MonitorVarp), &FileBase{Ptr: FileVarp}, &FileBase{Ptr: OtherFileVarp}, EventTypeVarp)
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *FileMonitorClass) GetCallbackChanged() func(*FileMonitor, File, File, FileMonitorEvent) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(MonitorVarp uintptr, FileVarp uintptr, OtherFileVarp uintptr, EventTypeVarp FileMonitorEvent)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(MonitorVar *FileMonitor, FileVar File, OtherFileVar File, EventTypeVar FileMonitorEvent) {
+		rawCallback(MonitorVar.GoPointer(), FileVar.GoPointer(), OtherFileVar.GoPointer(), EventTypeVar)
+	}
+}
+
+// SetCallbackCancel sets the callback function.
+func (x *FileMonitorClass) SetCallbackCancel(cb func(*FileMonitor) bool) {
+	if cb == nil {
+		x.xCancel = 0
+	} else {
+		x.xCancel = purego.NewCallback(func(MonitorVarp uintptr) bool {
+			return cb(FileMonitorNewFromInternalPtr(MonitorVarp))
+		})
+	}
+}
+
+// GetCallbackCancel gets the callback function.
+func (x *FileMonitorClass) GetCallbackCancel() func(*FileMonitor) bool {
+	if x.xCancel == 0 {
+		return nil
+	}
+	var rawCallback func(MonitorVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCancel)
+	return func(MonitorVar *FileMonitor) bool {
+		return rawCallback(MonitorVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FileMonitorClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FileMonitorClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FileMonitorClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FileMonitorClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FileMonitorClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FileMonitorClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *FileMonitorClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *FileMonitorClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *FileMonitorClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *FileMonitorClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type FileMonitorPrivate struct {
diff --git a/v4/gio/gfilenamecompleter.go b/v4/gio/gfilenamecompleter.go
index 09e0f22f670eb95cc5771703c0e265ea0532fa4b..f3f0a9a0c7b26bd411668ab11f32b4651fb0c8b7 100644
--- a/v4/gio/gfilenamecompleter.go
+++ b/v4/gio/gfilenamecompleter.go
@@ -17,17 +17,109 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GotCompletionData uintptr
+	xGotCompletionData uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 }
 
 func (x *FilenameCompleterClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGotCompletionData sets the callback function.
+func (x *FilenameCompleterClass) SetCallbackGotCompletionData(cb func(*FilenameCompleter)) {
+	if cb == nil {
+		x.xGotCompletionData = 0
+	} else {
+		x.xGotCompletionData = purego.NewCallback(func(FilenameCompleterVarp uintptr) {
+			cb(FilenameCompleterNewFromInternalPtr(FilenameCompleterVarp))
+		})
+	}
+}
+
+// GetCallbackGotCompletionData gets the callback function.
+func (x *FilenameCompleterClass) GetCallbackGotCompletionData() func(*FilenameCompleter) {
+	if x.xGotCompletionData == 0 {
+		return nil
+	}
+	var rawCallback func(FilenameCompleterVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xGotCompletionData)
+	return func(FilenameCompleterVar *FilenameCompleter) {
+		rawCallback(FilenameCompleterVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FilenameCompleterClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FilenameCompleterClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FilenameCompleterClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FilenameCompleterClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FilenameCompleterClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FilenameCompleterClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
 }
 
 // Completes partial file and directory names given a partial string by
diff --git a/v4/gio/gfileoutputstream.go b/v4/gio/gfileoutputstream.go
index 9e5d523387c8aef0a75072df266ef683cd7de7d3..118a3d0df91d5ebd6b1727371401162b453e4d9d 100644
--- a/v4/gio/gfileoutputstream.go
+++ b/v4/gio/gfileoutputstream.go
@@ -16,37 +16,379 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Tell uintptr
+	xTell uintptr
 
-	CanSeek uintptr
+	xCanSeek uintptr
 
-	Seek uintptr
+	xSeek uintptr
 
-	CanTruncate uintptr
+	xCanTruncate uintptr
 
-	TruncateFn uintptr
+	xTruncateFn uintptr
 
-	QueryInfo uintptr
+	xQueryInfo uintptr
 
-	QueryInfoAsync uintptr
+	xQueryInfoAsync uintptr
 
-	QueryInfoFinish uintptr
+	xQueryInfoFinish uintptr
 
-	GetEtag uintptr
+	xGetEtag uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *FileOutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackTell sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackTell(cb func(*FileOutputStream) int64) {
+	if cb == nil {
+		x.xTell = 0
+	} else {
+		x.xTell = purego.NewCallback(func(StreamVarp uintptr) int64 {
+			return cb(FileOutputStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackTell gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackTell() func(*FileOutputStream) int64 {
+	if x.xTell == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) int64
+	purego.RegisterFunc(&rawCallback, x.xTell)
+	return func(StreamVar *FileOutputStream) int64 {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackCanSeek sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackCanSeek(cb func(*FileOutputStream) bool) {
+	if cb == nil {
+		x.xCanSeek = 0
+	} else {
+		x.xCanSeek = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(FileOutputStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackCanSeek gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackCanSeek() func(*FileOutputStream) bool {
+	if x.xCanSeek == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanSeek)
+	return func(StreamVar *FileOutputStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackSeek sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackSeek(cb func(*FileOutputStream, int64, glib.SeekType, *Cancellable) bool) {
+	if cb == nil {
+		x.xSeek = 0
+	} else {
+		x.xSeek = purego.NewCallback(func(StreamVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool {
+			return cb(FileOutputStreamNewFromInternalPtr(StreamVarp), OffsetVarp, TypeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSeek gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackSeek() func(*FileOutputStream, int64, glib.SeekType, *Cancellable) bool {
+	if x.xSeek == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSeek)
+	return func(StreamVar *FileOutputStream, OffsetVar int64, TypeVar glib.SeekType, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), OffsetVar, TypeVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCanTruncate sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackCanTruncate(cb func(*FileOutputStream) bool) {
+	if cb == nil {
+		x.xCanTruncate = 0
+	} else {
+		x.xCanTruncate = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(FileOutputStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackCanTruncate gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackCanTruncate() func(*FileOutputStream) bool {
+	if x.xCanTruncate == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanTruncate)
+	return func(StreamVar *FileOutputStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackTruncateFn sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackTruncateFn(cb func(*FileOutputStream, int64, *Cancellable) bool) {
+	if cb == nil {
+		x.xTruncateFn = 0
+	} else {
+		x.xTruncateFn = purego.NewCallback(func(StreamVarp uintptr, SizeVarp int64, CancellableVarp uintptr) bool {
+			return cb(FileOutputStreamNewFromInternalPtr(StreamVarp), SizeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackTruncateFn gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackTruncateFn() func(*FileOutputStream, int64, *Cancellable) bool {
+	if x.xTruncateFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, SizeVarp int64, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xTruncateFn)
+	return func(StreamVar *FileOutputStream, SizeVar int64, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), SizeVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackQueryInfo sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackQueryInfo(cb func(*FileOutputStream, string, *Cancellable) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfo = 0
+	} else {
+		x.xQueryInfo = purego.NewCallback(func(StreamVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr {
+			ret := cb(FileOutputStreamNewFromInternalPtr(StreamVarp), AttributesVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfo gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackQueryInfo() func(*FileOutputStream, string, *Cancellable) *FileInfo {
+	if x.xQueryInfo == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, AttributesVarp string, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfo)
+	return func(StreamVar *FileOutputStream, AttributesVar string, CancellableVar *Cancellable) *FileInfo {
+		rawRet := rawCallback(StreamVar.GoPointer(), AttributesVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackQueryInfoAsync sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackQueryInfoAsync(cb func(*FileOutputStream, string, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xQueryInfoAsync = 0
+	} else {
+		x.xQueryInfoAsync = purego.NewCallback(func(StreamVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(FileOutputStreamNewFromInternalPtr(StreamVarp), AttributesVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackQueryInfoAsync gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackQueryInfoAsync() func(*FileOutputStream, string, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xQueryInfoAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, AttributesVarp string, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoAsync)
+	return func(StreamVar *FileOutputStream, AttributesVar string, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), AttributesVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackQueryInfoFinish sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackQueryInfoFinish(cb func(*FileOutputStream, AsyncResult) *FileInfo) {
+	if cb == nil {
+		x.xQueryInfoFinish = 0
+	} else {
+		x.xQueryInfoFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(FileOutputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackQueryInfoFinish gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackQueryInfoFinish() func(*FileOutputStream, AsyncResult) *FileInfo {
+	if x.xQueryInfoFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xQueryInfoFinish)
+	return func(StreamVar *FileOutputStream, ResultVar AsyncResult) *FileInfo {
+		rawRet := rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileInfo{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetEtag sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackGetEtag(cb func(*FileOutputStream) string) {
+	if cb == nil {
+		x.xGetEtag = 0
+	} else {
+		x.xGetEtag = purego.NewCallback(func(StreamVarp uintptr) string {
+			return cb(FileOutputStreamNewFromInternalPtr(StreamVarp))
+		})
+	}
+}
+
+// GetCallbackGetEtag gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackGetEtag() func(*FileOutputStream) string {
+	if x.xGetEtag == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetEtag)
+	return func(StreamVar *FileOutputStream) string {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *FileOutputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *FileOutputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type FileOutputStreamPrivate struct {
diff --git a/v4/gio/gfilterinputstream.go b/v4/gio/gfilterinputstream.go
index db3e384e2430f3a727a179f103a3a52cf1e68f04..fccd9e5b47d76fedb692b1bbcc05ca7d0db415d9 100644
--- a/v4/gio/gfilterinputstream.go
+++ b/v4/gio/gfilterinputstream.go
@@ -16,15 +16,84 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 }
 
 func (x *FilterInputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FilterInputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FilterInputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FilterInputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FilterInputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FilterInputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FilterInputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
 }
 
 // Base class for input stream implementations that perform some
diff --git a/v4/gio/gfilteroutputstream.go b/v4/gio/gfilteroutputstream.go
index 37888c9d29cb2510fb5f177be61639100ba640c3..868b5cea238a724b4401cf5d15b4c3f2b053bd8b 100644
--- a/v4/gio/gfilteroutputstream.go
+++ b/v4/gio/gfilteroutputstream.go
@@ -16,15 +16,84 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 }
 
 func (x *FilterOutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *FilterOutputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *FilterOutputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *FilterOutputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *FilterOutputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *FilterOutputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *FilterOutputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
 }
 
 // Base class for output stream implementations that perform some
diff --git a/v4/gio/gicon.go b/v4/gio/gicon.go
index dfc29771bb8912f9241db819498f99abcd45418a..8b72b35391747c47a29de5443f2489f3d79896e4 100644
--- a/v4/gio/gicon.go
+++ b/v4/gio/gicon.go
@@ -19,19 +19,144 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Hash uintptr
+	xHash uintptr
 
-	Equal uintptr
+	xEqual uintptr
 
-	ToTokens uintptr
+	xToTokens uintptr
 
-	FromTokens uintptr
+	xFromTokens uintptr
 
-	Serialize uintptr
+	xSerialize uintptr
 }
 
 func (x *IconIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackHash sets the callback function.
+func (x *IconIface) SetCallbackHash(cb func(Icon) uint) {
+	if cb == nil {
+		x.xHash = 0
+	} else {
+		x.xHash = purego.NewCallback(func(IconVarp uintptr) uint {
+			return cb(&IconBase{Ptr: IconVarp})
+		})
+	}
+}
+
+// GetCallbackHash gets the callback function.
+func (x *IconIface) GetCallbackHash() func(Icon) uint {
+	if x.xHash == 0 {
+		return nil
+	}
+	var rawCallback func(IconVarp uintptr) uint
+	purego.RegisterFunc(&rawCallback, x.xHash)
+	return func(IconVar Icon) uint {
+		return rawCallback(IconVar.GoPointer())
+	}
+}
+
+// SetCallbackEqual sets the callback function.
+func (x *IconIface) SetCallbackEqual(cb func(Icon, Icon) bool) {
+	if cb == nil {
+		x.xEqual = 0
+	} else {
+		x.xEqual = purego.NewCallback(func(Icon1Varp uintptr, Icon2Varp uintptr) bool {
+			return cb(&IconBase{Ptr: Icon1Varp}, &IconBase{Ptr: Icon2Varp})
+		})
+	}
+}
+
+// GetCallbackEqual gets the callback function.
+func (x *IconIface) GetCallbackEqual() func(Icon, Icon) bool {
+	if x.xEqual == 0 {
+		return nil
+	}
+	var rawCallback func(Icon1Varp uintptr, Icon2Varp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEqual)
+	return func(Icon1Var Icon, Icon2Var Icon) bool {
+		return rawCallback(Icon1Var.GoPointer(), Icon2Var.GoPointer())
+	}
+}
+
+// SetCallbackToTokens sets the callback function.
+func (x *IconIface) SetCallbackToTokens(cb func(Icon, []uintptr, int) bool) {
+	if cb == nil {
+		x.xToTokens = 0
+	} else {
+		x.xToTokens = purego.NewCallback(func(IconVarp uintptr, TokensVarp []uintptr, OutVersionVarp int) bool {
+			return cb(&IconBase{Ptr: IconVarp}, TokensVarp, OutVersionVarp)
+		})
+	}
+}
+
+// GetCallbackToTokens gets the callback function.
+func (x *IconIface) GetCallbackToTokens() func(Icon, []uintptr, int) bool {
+	if x.xToTokens == 0 {
+		return nil
+	}
+	var rawCallback func(IconVarp uintptr, TokensVarp []uintptr, OutVersionVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xToTokens)
+	return func(IconVar Icon, TokensVar []uintptr, OutVersionVar int) bool {
+		return rawCallback(IconVar.GoPointer(), TokensVar, OutVersionVar)
+	}
+}
+
+// SetCallbackFromTokens sets the callback function.
+func (x *IconIface) SetCallbackFromTokens(cb func(string, int, int) *IconBase) {
+	if cb == nil {
+		x.xFromTokens = 0
+	} else {
+		x.xFromTokens = purego.NewCallback(func(TokensVarp string, NumTokensVarp int, VersionVarp int) uintptr {
+			ret := cb(TokensVarp, NumTokensVarp, VersionVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackFromTokens gets the callback function.
+func (x *IconIface) GetCallbackFromTokens() func(string, int, int) *IconBase {
+	if x.xFromTokens == 0 {
+		return nil
+	}
+	var rawCallback func(TokensVarp string, NumTokensVarp int, VersionVarp int) uintptr
+	purego.RegisterFunc(&rawCallback, x.xFromTokens)
+	return func(TokensVar string, NumTokensVar int, VersionVar int) *IconBase {
+		rawRet := rawCallback(TokensVar, NumTokensVar, VersionVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSerialize sets the callback function.
+func (x *IconIface) SetCallbackSerialize(cb func(Icon) *glib.Variant) {
+	if cb == nil {
+		x.xSerialize = 0
+	} else {
+		x.xSerialize = purego.NewCallback(func(IconVarp uintptr) *glib.Variant {
+			return cb(&IconBase{Ptr: IconVarp})
+		})
+	}
+}
+
+// GetCallbackSerialize gets the callback function.
+func (x *IconIface) GetCallbackSerialize() func(Icon) *glib.Variant {
+	if x.xSerialize == 0 {
+		return nil
+	}
+	var rawCallback func(IconVarp uintptr) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xSerialize)
+	return func(IconVar Icon) *glib.Variant {
+		return rawCallback(IconVar.GoPointer())
+	}
 }
 
 // #GIcon is a very minimal interface for icons. It provides functions
diff --git a/v4/gio/ginetaddress.go b/v4/gio/ginetaddress.go
index 242f2cdb9d2da2bb05c6664bd331ab6443c2d528..5058a1e99e7de9df4125f12ba034b8bca2bf6fc6 100644
--- a/v4/gio/ginetaddress.go
+++ b/v4/gio/ginetaddress.go
@@ -16,13 +16,59 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ToString uintptr
+	xToString uintptr
 
-	ToBytes uintptr
+	xToBytes uintptr
 }
 
 func (x *InetAddressClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackToString sets the callback function.
+func (x *InetAddressClass) SetCallbackToString(cb func(*InetAddress) string) {
+	if cb == nil {
+		x.xToString = 0
+	} else {
+		x.xToString = purego.NewCallback(func(AddressVarp uintptr) string {
+			return cb(InetAddressNewFromInternalPtr(AddressVarp))
+		})
+	}
+}
+
+// GetCallbackToString gets the callback function.
+func (x *InetAddressClass) GetCallbackToString() func(*InetAddress) string {
+	if x.xToString == 0 {
+		return nil
+	}
+	var rawCallback func(AddressVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xToString)
+	return func(AddressVar *InetAddress) string {
+		return rawCallback(AddressVar.GoPointer())
+	}
+}
+
+// SetCallbackToBytes sets the callback function.
+func (x *InetAddressClass) SetCallbackToBytes(cb func(*InetAddress) byte) {
+	if cb == nil {
+		x.xToBytes = 0
+	} else {
+		x.xToBytes = purego.NewCallback(func(AddressVarp uintptr) byte {
+			return cb(InetAddressNewFromInternalPtr(AddressVarp))
+		})
+	}
+}
+
+// GetCallbackToBytes gets the callback function.
+func (x *InetAddressClass) GetCallbackToBytes() func(*InetAddress) byte {
+	if x.xToBytes == 0 {
+		return nil
+	}
+	var rawCallback func(AddressVarp uintptr) byte
+	purego.RegisterFunc(&rawCallback, x.xToBytes)
+	return func(AddressVar *InetAddress) byte {
+		return rawCallback(AddressVar.GoPointer())
+	}
 }
 
 type InetAddressPrivate struct {
diff --git a/v4/gio/ginitable.go b/v4/gio/ginitable.go
index b2b70b54501bb49a71b702ac677c169bb5e5669c..9d3040b7a07b82370e27f4b2e5928ce29ddb14d2 100644
--- a/v4/gio/ginitable.go
+++ b/v4/gio/ginitable.go
@@ -19,11 +19,34 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Init uintptr
+	xInit uintptr
 }
 
 func (x *InitableIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackInit sets the callback function.
+func (x *InitableIface) SetCallbackInit(cb func(Initable, *Cancellable) bool) {
+	if cb == nil {
+		x.xInit = 0
+	} else {
+		x.xInit = purego.NewCallback(func(InitableVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(&InitableBase{Ptr: InitableVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackInit gets the callback function.
+func (x *InitableIface) GetCallbackInit() func(Initable, *Cancellable) bool {
+	if x.xInit == 0 {
+		return nil
+	}
+	var rawCallback func(InitableVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xInit)
+	return func(InitableVar Initable, CancellableVar *Cancellable) bool {
+		return rawCallback(InitableVar.GoPointer(), CancellableVar.GoPointer())
+	}
 }
 
 // #GInitable is implemented by objects that can fail during
@@ -53,7 +76,7 @@ // an exception on failure.
 type Initable interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	Init(CancellableVar *Cancellable) bool
+	Init(CancellableVar *Cancellable) (bool, error)
 }
 
 var xInitableGLibType func() types.GType
diff --git a/v4/gio/ginputstream.go b/v4/gio/ginputstream.go
index e31965376d893639afa0273c694ad83c2749d6e5..8fb7af3d47b2b9eaf601a71fc4d1e660d3b7a6bb 100644
--- a/v4/gio/ginputstream.go
+++ b/v4/gio/ginputstream.go
@@ -17,37 +17,359 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ReadFn uintptr
+	xReadFn uintptr
 
-	Skip uintptr
+	xSkip uintptr
 
-	CloseFn uintptr
+	xCloseFn uintptr
 
-	ReadAsync uintptr
+	xReadAsync uintptr
 
-	ReadFinish uintptr
+	xReadFinish uintptr
 
-	SkipAsync uintptr
+	xSkipAsync uintptr
 
-	SkipFinish uintptr
+	xSkipFinish uintptr
 
-	CloseAsync uintptr
+	xCloseAsync uintptr
 
-	CloseFinish uintptr
+	xCloseFinish uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *InputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackReadFn sets the callback function.
+func (x *InputStreamClass) SetCallbackReadFn(cb func(*InputStream, uintptr, uint, *Cancellable) int) {
+	if cb == nil {
+		x.xReadFn = 0
+	} else {
+		x.xReadFn = purego.NewCallback(func(StreamVarp uintptr, BufferVarp uintptr, CountVarp uint, CancellableVarp uintptr) int {
+			return cb(InputStreamNewFromInternalPtr(StreamVarp), BufferVarp, CountVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackReadFn gets the callback function.
+func (x *InputStreamClass) GetCallbackReadFn() func(*InputStream, uintptr, uint, *Cancellable) int {
+	if x.xReadFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, BufferVarp uintptr, CountVarp uint, CancellableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xReadFn)
+	return func(StreamVar *InputStream, BufferVar uintptr, CountVar uint, CancellableVar *Cancellable) int {
+		return rawCallback(StreamVar.GoPointer(), BufferVar, CountVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackSkip sets the callback function.
+func (x *InputStreamClass) SetCallbackSkip(cb func(*InputStream, uint, *Cancellable) int) {
+	if cb == nil {
+		x.xSkip = 0
+	} else {
+		x.xSkip = purego.NewCallback(func(StreamVarp uintptr, CountVarp uint, CancellableVarp uintptr) int {
+			return cb(InputStreamNewFromInternalPtr(StreamVarp), CountVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSkip gets the callback function.
+func (x *InputStreamClass) GetCallbackSkip() func(*InputStream, uint, *Cancellable) int {
+	if x.xSkip == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CountVarp uint, CancellableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xSkip)
+	return func(StreamVar *InputStream, CountVar uint, CancellableVar *Cancellable) int {
+		return rawCallback(StreamVar.GoPointer(), CountVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCloseFn sets the callback function.
+func (x *InputStreamClass) SetCallbackCloseFn(cb func(*InputStream, *Cancellable) bool) {
+	if cb == nil {
+		x.xCloseFn = 0
+	} else {
+		x.xCloseFn = purego.NewCallback(func(StreamVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(InputStreamNewFromInternalPtr(StreamVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCloseFn gets the callback function.
+func (x *InputStreamClass) GetCallbackCloseFn() func(*InputStream, *Cancellable) bool {
+	if x.xCloseFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFn)
+	return func(StreamVar *InputStream, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackReadAsync sets the callback function.
+func (x *InputStreamClass) SetCallbackReadAsync(cb func(*InputStream, []byte, uint, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xReadAsync = 0
+	} else {
+		x.xReadAsync = purego.NewCallback(func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(InputStreamNewFromInternalPtr(StreamVarp), BufferVarp, CountVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackReadAsync gets the callback function.
+func (x *InputStreamClass) GetCallbackReadAsync() func(*InputStream, []byte, uint, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xReadAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReadAsync)
+	return func(StreamVar *InputStream, BufferVar []byte, CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackReadFinish sets the callback function.
+func (x *InputStreamClass) SetCallbackReadFinish(cb func(*InputStream, AsyncResult) int) {
+	if cb == nil {
+		x.xReadFinish = 0
+	} else {
+		x.xReadFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) int {
+			return cb(InputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackReadFinish gets the callback function.
+func (x *InputStreamClass) GetCallbackReadFinish() func(*InputStream, AsyncResult) int {
+	if x.xReadFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xReadFinish)
+	return func(StreamVar *InputStream, ResultVar AsyncResult) int {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackSkipAsync sets the callback function.
+func (x *InputStreamClass) SetCallbackSkipAsync(cb func(*InputStream, uint, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xSkipAsync = 0
+	} else {
+		x.xSkipAsync = purego.NewCallback(func(StreamVarp uintptr, CountVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(InputStreamNewFromInternalPtr(StreamVarp), CountVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackSkipAsync gets the callback function.
+func (x *InputStreamClass) GetCallbackSkipAsync() func(*InputStream, uint, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xSkipAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CountVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSkipAsync)
+	return func(StreamVar *InputStream, CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackSkipFinish sets the callback function.
+func (x *InputStreamClass) SetCallbackSkipFinish(cb func(*InputStream, AsyncResult) int) {
+	if cb == nil {
+		x.xSkipFinish = 0
+	} else {
+		x.xSkipFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) int {
+			return cb(InputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackSkipFinish gets the callback function.
+func (x *InputStreamClass) GetCallbackSkipFinish() func(*InputStream, AsyncResult) int {
+	if x.xSkipFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xSkipFinish)
+	return func(StreamVar *InputStream, ResultVar AsyncResult) int {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackCloseAsync sets the callback function.
+func (x *InputStreamClass) SetCallbackCloseAsync(cb func(*InputStream, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCloseAsync = 0
+	} else {
+		x.xCloseAsync = purego.NewCallback(func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(InputStreamNewFromInternalPtr(StreamVarp), IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCloseAsync gets the callback function.
+func (x *InputStreamClass) GetCallbackCloseAsync() func(*InputStream, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xCloseAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCloseAsync)
+	return func(StreamVar *InputStream, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCloseFinish sets the callback function.
+func (x *InputStreamClass) SetCallbackCloseFinish(cb func(*InputStream, AsyncResult) bool) {
+	if cb == nil {
+		x.xCloseFinish = 0
+	} else {
+		x.xCloseFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) bool {
+			return cb(InputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackCloseFinish gets the callback function.
+func (x *InputStreamClass) GetCallbackCloseFinish() func(*InputStream, AsyncResult) bool {
+	if x.xCloseFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFinish)
+	return func(StreamVar *InputStream, ResultVar AsyncResult) bool {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *InputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *InputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *InputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *InputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *InputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *InputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *InputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *InputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *InputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *InputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type InputStreamPrivate struct {
diff --git a/v4/gio/gio-2.0.go b/v4/gio/gio-2.0.go
index 2bb10f198a90c53cb66e3ff4c6aa2a47a9d0585c..674f025accada3f4f5e3d54a275216d448846c26 100644
--- a/v4/gio/gio-2.0.go
+++ b/v4/gio/gio-2.0.go
@@ -1136,7 +1136,7 @@ 	xDBusConnectionCallWithUnixFdList(x.GoPointer(), BusNameVar, ObjectPathVar, InterfaceNameVar, MethodNameVar, ParametersVar, ReplyTypeVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
-var xDBusConnectionCallWithUnixFdListFinish func(uintptr, *uintptr, uintptr, **glib.Error) *glib.Variant
+var xDBusConnectionCallWithUnixFdListFinish func(uintptr, uintptr, uintptr, **glib.Error) *glib.Variant
 
 // Finishes an operation started with g_dbus_connection_call_with_unix_fd_list().
 //
@@ -1153,7 +1153,7 @@ // value of type %G_VARIANT_TYPE_HANDLE in the body of the message.
 func (x *DBusConnection) CallWithUnixFdListFinish(OutFdListVar **UnixFDList, ResVar AsyncResult) (*glib.Variant, error) {
 	var cerr *glib.Error
 
-	cret := xDBusConnectionCallWithUnixFdListFinish(x.GoPointer(), gobject.ConvertPtr(OutFdListVar), ResVar.GoPointer(), &cerr)
+	cret := xDBusConnectionCallWithUnixFdListFinish(x.GoPointer(), *gobject.ConvertPtr(OutFdListVar), ResVar.GoPointer(), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -1161,7 +1161,7 @@ 	return cret, cerr
 
 }
 
-var xDBusConnectionCallWithUnixFdListSync func(uintptr, string, string, string, string, *glib.Variant, *glib.VariantType, DBusCallFlags, int, uintptr, *uintptr, uintptr, **glib.Error) *glib.Variant
+var xDBusConnectionCallWithUnixFdListSync func(uintptr, string, string, string, string, *glib.Variant, *glib.VariantType, DBusCallFlags, int, uintptr, uintptr, uintptr, **glib.Error) *glib.Variant
 
 // Like g_dbus_connection_call_sync() but also takes and returns #GUnixFDList objects.
 // See g_dbus_connection_call_with_unix_fd_list() and
@@ -1171,7 +1171,7 @@ // This method is only available on UNIX.
 func (x *DBusConnection) CallWithUnixFdListSync(BusNameVar string, ObjectPathVar string, InterfaceNameVar string, MethodNameVar string, ParametersVar *glib.Variant, ReplyTypeVar *glib.VariantType, FlagsVar DBusCallFlags, TimeoutMsecVar int, FdListVar *UnixFDList, OutFdListVar **UnixFDList, CancellableVar *Cancellable) (*glib.Variant, error) {
 	var cerr *glib.Error
 
-	cret := xDBusConnectionCallWithUnixFdListSync(x.GoPointer(), BusNameVar, ObjectPathVar, InterfaceNameVar, MethodNameVar, ParametersVar, ReplyTypeVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), gobject.ConvertPtr(OutFdListVar), CancellableVar.GoPointer(), &cerr)
+	cret := xDBusConnectionCallWithUnixFdListSync(x.GoPointer(), BusNameVar, ObjectPathVar, InterfaceNameVar, MethodNameVar, ParametersVar, ReplyTypeVar, FlagsVar, TimeoutMsecVar, FdListVar.GoPointer(), *gobject.ConvertPtr(OutFdListVar), CancellableVar.GoPointer(), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
diff --git a/v4/gio/giostream.go b/v4/gio/giostream.go
index 1a771131b2d2d91619ecca1260bcfcec8620784c..659ed0da0cbba25e15f3033bbca58b9be5fd36d9 100644
--- a/v4/gio/giostream.go
+++ b/v4/gio/giostream.go
@@ -17,39 +17,404 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetInputStream uintptr
+	xGetInputStream uintptr
 
-	GetOutputStream uintptr
+	xGetOutputStream uintptr
 
-	CloseFn uintptr
+	xCloseFn uintptr
 
-	CloseAsync uintptr
+	xCloseAsync uintptr
 
-	CloseFinish uintptr
+	xCloseFinish uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 
-	GReserved7 uintptr
+	xGReserved7 uintptr
 
-	GReserved8 uintptr
+	xGReserved8 uintptr
 
-	GReserved9 uintptr
+	xGReserved9 uintptr
 
-	GReserved10 uintptr
+	xGReserved10 uintptr
 }
 
 func (x *IOStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetInputStream sets the callback function.
+func (x *IOStreamClass) SetCallbackGetInputStream(cb func(*IOStream) *InputStream) {
+	if cb == nil {
+		x.xGetInputStream = 0
+	} else {
+		x.xGetInputStream = purego.NewCallback(func(StreamVarp uintptr) uintptr {
+			ret := cb(IOStreamNewFromInternalPtr(StreamVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetInputStream gets the callback function.
+func (x *IOStreamClass) GetCallbackGetInputStream() func(*IOStream) *InputStream {
+	if x.xGetInputStream == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetInputStream)
+	return func(StreamVar *IOStream) *InputStream {
+		rawRet := rawCallback(StreamVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &InputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetOutputStream sets the callback function.
+func (x *IOStreamClass) SetCallbackGetOutputStream(cb func(*IOStream) *OutputStream) {
+	if cb == nil {
+		x.xGetOutputStream = 0
+	} else {
+		x.xGetOutputStream = purego.NewCallback(func(StreamVarp uintptr) uintptr {
+			ret := cb(IOStreamNewFromInternalPtr(StreamVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetOutputStream gets the callback function.
+func (x *IOStreamClass) GetCallbackGetOutputStream() func(*IOStream) *OutputStream {
+	if x.xGetOutputStream == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetOutputStream)
+	return func(StreamVar *IOStream) *OutputStream {
+		rawRet := rawCallback(StreamVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &OutputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCloseFn sets the callback function.
+func (x *IOStreamClass) SetCallbackCloseFn(cb func(*IOStream, *Cancellable) bool) {
+	if cb == nil {
+		x.xCloseFn = 0
+	} else {
+		x.xCloseFn = purego.NewCallback(func(StreamVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(IOStreamNewFromInternalPtr(StreamVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCloseFn gets the callback function.
+func (x *IOStreamClass) GetCallbackCloseFn() func(*IOStream, *Cancellable) bool {
+	if x.xCloseFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFn)
+	return func(StreamVar *IOStream, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCloseAsync sets the callback function.
+func (x *IOStreamClass) SetCallbackCloseAsync(cb func(*IOStream, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCloseAsync = 0
+	} else {
+		x.xCloseAsync = purego.NewCallback(func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(IOStreamNewFromInternalPtr(StreamVarp), IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCloseAsync gets the callback function.
+func (x *IOStreamClass) GetCallbackCloseAsync() func(*IOStream, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xCloseAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCloseAsync)
+	return func(StreamVar *IOStream, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCloseFinish sets the callback function.
+func (x *IOStreamClass) SetCallbackCloseFinish(cb func(*IOStream, AsyncResult) bool) {
+	if cb == nil {
+		x.xCloseFinish = 0
+	} else {
+		x.xCloseFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) bool {
+			return cb(IOStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackCloseFinish gets the callback function.
+func (x *IOStreamClass) GetCallbackCloseFinish() func(*IOStream, AsyncResult) bool {
+	if x.xCloseFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFinish)
+	return func(StreamVar *IOStream, ResultVar AsyncResult) bool {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved7 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved7(cb func()) {
+	if cb == nil {
+		x.xGReserved7 = 0
+	} else {
+		x.xGReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved7 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved7() func() {
+	if x.xGReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved8 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved8(cb func()) {
+	if cb == nil {
+		x.xGReserved8 = 0
+	} else {
+		x.xGReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved8 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved8() func() {
+	if x.xGReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved8)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved9 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved9(cb func()) {
+	if cb == nil {
+		x.xGReserved9 = 0
+	} else {
+		x.xGReserved9 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved9 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved9() func() {
+	if x.xGReserved9 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved9)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved10 sets the callback function.
+func (x *IOStreamClass) SetCallbackGReserved10(cb func()) {
+	if cb == nil {
+		x.xGReserved10 = 0
+	} else {
+		x.xGReserved10 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved10 gets the callback function.
+func (x *IOStreamClass) GetCallbackGReserved10() func() {
+	if x.xGReserved10 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved10)
+	return func() {
+		rawCallback()
+	}
 }
 
 type IOStreamPrivate struct {
diff --git a/v4/gio/glistmodel.go b/v4/gio/glistmodel.go
index 7aa8b3bee10989e77a73366e8c2b43bc43b3766f..9578dee6c968960e4169112a17ef4aeddd4f78f0 100644
--- a/v4/gio/glistmodel.go
+++ b/v4/gio/glistmodel.go
@@ -17,15 +17,94 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	GetItemType uintptr
+	xGetItemType uintptr
 
-	GetNItems uintptr
+	xGetNItems uintptr
 
-	GetItem uintptr
+	xGetItem uintptr
 }
 
 func (x *ListModelInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetItemType sets the callback function.
+func (x *ListModelInterface) SetCallbackGetItemType(cb func(ListModel) types.GType) {
+	if cb == nil {
+		x.xGetItemType = 0
+	} else {
+		x.xGetItemType = purego.NewCallback(func(ListVarp uintptr) types.GType {
+			return cb(&ListModelBase{Ptr: ListVarp})
+		})
+	}
+}
+
+// GetCallbackGetItemType gets the callback function.
+func (x *ListModelInterface) GetCallbackGetItemType() func(ListModel) types.GType {
+	if x.xGetItemType == 0 {
+		return nil
+	}
+	var rawCallback func(ListVarp uintptr) types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetItemType)
+	return func(ListVar ListModel) types.GType {
+		return rawCallback(ListVar.GoPointer())
+	}
+}
+
+// SetCallbackGetNItems sets the callback function.
+func (x *ListModelInterface) SetCallbackGetNItems(cb func(ListModel) uint) {
+	if cb == nil {
+		x.xGetNItems = 0
+	} else {
+		x.xGetNItems = purego.NewCallback(func(ListVarp uintptr) uint {
+			return cb(&ListModelBase{Ptr: ListVarp})
+		})
+	}
+}
+
+// GetCallbackGetNItems gets the callback function.
+func (x *ListModelInterface) GetCallbackGetNItems() func(ListModel) uint {
+	if x.xGetNItems == 0 {
+		return nil
+	}
+	var rawCallback func(ListVarp uintptr) uint
+	purego.RegisterFunc(&rawCallback, x.xGetNItems)
+	return func(ListVar ListModel) uint {
+		return rawCallback(ListVar.GoPointer())
+	}
+}
+
+// SetCallbackGetItem sets the callback function.
+func (x *ListModelInterface) SetCallbackGetItem(cb func(ListModel, uint) *gobject.Object) {
+	if cb == nil {
+		x.xGetItem = 0
+	} else {
+		x.xGetItem = purego.NewCallback(func(ListVarp uintptr, PositionVarp uint) uintptr {
+			ret := cb(&ListModelBase{Ptr: ListVarp}, PositionVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetItem gets the callback function.
+func (x *ListModelInterface) GetCallbackGetItem() func(ListModel, uint) *gobject.Object {
+	if x.xGetItem == 0 {
+		return nil
+	}
+	var rawCallback func(ListVarp uintptr, PositionVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetItem)
+	return func(ListVar ListModel, PositionVar uint) *gobject.Object {
+		rawRet := rawCallback(ListVar.GoPointer(), PositionVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &gobject.Object{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // #GListModel is an interface that represents a mutable list of
diff --git a/v4/gio/gloadableicon.go b/v4/gio/gloadableicon.go
index 048b894c08b5f1aab317fb29b66a984ecfbc96e7..4c7b8c61e6883ed196f6945eec63d3a88850e14b 100644
--- a/v4/gio/gloadableicon.go
+++ b/v4/gio/gloadableicon.go
@@ -17,25 +17,114 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Load uintptr
+	xLoad uintptr
 
-	LoadAsync uintptr
+	xLoadAsync uintptr
 
-	LoadFinish uintptr
+	xLoadFinish uintptr
 }
 
 func (x *LoadableIconIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackLoad sets the callback function.
+func (x *LoadableIconIface) SetCallbackLoad(cb func(LoadableIcon, int, string, *Cancellable) *InputStream) {
+	if cb == nil {
+		x.xLoad = 0
+	} else {
+		x.xLoad = purego.NewCallback(func(IconVarp uintptr, SizeVarp int, TypeVarp string, CancellableVarp uintptr) uintptr {
+			ret := cb(&LoadableIconBase{Ptr: IconVarp}, SizeVarp, TypeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLoad gets the callback function.
+func (x *LoadableIconIface) GetCallbackLoad() func(LoadableIcon, int, string, *Cancellable) *InputStream {
+	if x.xLoad == 0 {
+		return nil
+	}
+	var rawCallback func(IconVarp uintptr, SizeVarp int, TypeVarp string, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLoad)
+	return func(IconVar LoadableIcon, SizeVar int, TypeVar string, CancellableVar *Cancellable) *InputStream {
+		rawRet := rawCallback(IconVar.GoPointer(), SizeVar, TypeVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &InputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackLoadAsync sets the callback function.
+func (x *LoadableIconIface) SetCallbackLoadAsync(cb func(LoadableIcon, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLoadAsync = 0
+	} else {
+		x.xLoadAsync = purego.NewCallback(func(IconVarp uintptr, SizeVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&LoadableIconBase{Ptr: IconVarp}, SizeVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLoadAsync gets the callback function.
+func (x *LoadableIconIface) GetCallbackLoadAsync() func(LoadableIcon, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLoadAsync == 0 {
+		return nil
+	}
+	var rawCallback func(IconVarp uintptr, SizeVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLoadAsync)
+	return func(IconVar LoadableIcon, SizeVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(IconVar.GoPointer(), SizeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLoadFinish sets the callback function.
+func (x *LoadableIconIface) SetCallbackLoadFinish(cb func(LoadableIcon, AsyncResult, string) *InputStream) {
+	if cb == nil {
+		x.xLoadFinish = 0
+	} else {
+		x.xLoadFinish = purego.NewCallback(func(IconVarp uintptr, ResVarp uintptr, TypeVarp string) uintptr {
+			ret := cb(&LoadableIconBase{Ptr: IconVarp}, &AsyncResultBase{Ptr: ResVarp}, TypeVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLoadFinish gets the callback function.
+func (x *LoadableIconIface) GetCallbackLoadFinish() func(LoadableIcon, AsyncResult, string) *InputStream {
+	if x.xLoadFinish == 0 {
+		return nil
+	}
+	var rawCallback func(IconVarp uintptr, ResVarp uintptr, TypeVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLoadFinish)
+	return func(IconVar LoadableIcon, ResVar AsyncResult, TypeVar string) *InputStream {
+		rawRet := rawCallback(IconVar.GoPointer(), ResVar.GoPointer(), TypeVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &InputStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
 // Extends the #GIcon interface and adds the ability to
 // load icons from streams.
 type LoadableIcon interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	Load(SizeVar int, TypeVar string, CancellableVar *Cancellable) *InputStream
+	Load(SizeVar int, TypeVar string, CancellableVar *Cancellable) (*InputStream, error)
 	LoadAsync(SizeVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	LoadFinish(ResVar AsyncResult, TypeVar string) *InputStream
+	LoadFinish(ResVar AsyncResult, TypeVar string) (*InputStream, error)
 }
 
 var xLoadableIconGLibType func() types.GType
diff --git a/v4/gio/gmemoryinputstream.go b/v4/gio/gmemoryinputstream.go
index 109cb38577189eaed96ea9abe44f104b5e1062ba..da09fa819af869aaa0d51bd184883d176cce2c0c 100644
--- a/v4/gio/gmemoryinputstream.go
+++ b/v4/gio/gmemoryinputstream.go
@@ -16,19 +16,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *MemoryInputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *MemoryInputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *MemoryInputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *MemoryInputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *MemoryInputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *MemoryInputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *MemoryInputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *MemoryInputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *MemoryInputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *MemoryInputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *MemoryInputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type MemoryInputStreamPrivate struct {
diff --git a/v4/gio/gmemorymonitor.go b/v4/gio/gmemorymonitor.go
index 41dcedc193c15d84955f2742ec61a2fdc4401984..c0084e0310495149b5afdfc855eccb48e8b9cc10 100644
--- a/v4/gio/gmemorymonitor.go
+++ b/v4/gio/gmemorymonitor.go
@@ -16,11 +16,34 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	LowMemoryWarning uintptr
+	xLowMemoryWarning uintptr
 }
 
 func (x *MemoryMonitorInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackLowMemoryWarning sets the callback function.
+func (x *MemoryMonitorInterface) SetCallbackLowMemoryWarning(cb func(MemoryMonitor, MemoryMonitorWarningLevel)) {
+	if cb == nil {
+		x.xLowMemoryWarning = 0
+	} else {
+		x.xLowMemoryWarning = purego.NewCallback(func(MonitorVarp uintptr, LevelVarp MemoryMonitorWarningLevel) {
+			cb(&MemoryMonitorBase{Ptr: MonitorVarp}, LevelVarp)
+		})
+	}
+}
+
+// GetCallbackLowMemoryWarning gets the callback function.
+func (x *MemoryMonitorInterface) GetCallbackLowMemoryWarning() func(MemoryMonitor, MemoryMonitorWarningLevel) {
+	if x.xLowMemoryWarning == 0 {
+		return nil
+	}
+	var rawCallback func(MonitorVarp uintptr, LevelVarp MemoryMonitorWarningLevel)
+	purego.RegisterFunc(&rawCallback, x.xLowMemoryWarning)
+	return func(MonitorVar MemoryMonitor, LevelVar MemoryMonitorWarningLevel) {
+		rawCallback(MonitorVar.GoPointer(), LevelVar)
+	}
 }
 
 // #GMemoryMonitor will monitor system memory and suggest to the application
diff --git a/v4/gio/gmemoryoutputstream.go b/v4/gio/gmemoryoutputstream.go
index ee10bdbbadf52e97e8749cd4d617973dad37625d..ef27ba4acb34ba5b9e834ddee142784815036285 100644
--- a/v4/gio/gmemoryoutputstream.go
+++ b/v4/gio/gmemoryoutputstream.go
@@ -22,19 +22,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *MemoryOutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *MemoryOutputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *MemoryOutputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *MemoryOutputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *MemoryOutputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *MemoryOutputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *MemoryOutputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *MemoryOutputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *MemoryOutputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *MemoryOutputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *MemoryOutputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type MemoryOutputStreamPrivate struct {
diff --git a/v4/gio/gmenumodel.go b/v4/gio/gmenumodel.go
index 23e9b74095df1a237ca7d9e1ff55ea8150792744..210ab3f291f8ab56a58e18e9b3dec1f81353ff12 100644
--- a/v4/gio/gmenumodel.go
+++ b/v4/gio/gmenumodel.go
@@ -17,13 +17,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetNext uintptr
+	xGetNext uintptr
 }
 
 func (x *MenuAttributeIterClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackGetNext sets the callback function.
+func (x *MenuAttributeIterClass) SetCallbackGetNext(cb func(*MenuAttributeIter, string, **glib.Variant) bool) {
+	if cb == nil {
+		x.xGetNext = 0
+	} else {
+		x.xGetNext = purego.NewCallback(func(IterVarp uintptr, OutNameVarp string, ValueVarp **glib.Variant) bool {
+			return cb(MenuAttributeIterNewFromInternalPtr(IterVarp), OutNameVarp, ValueVarp)
+		})
+	}
+}
+
+// GetCallbackGetNext gets the callback function.
+func (x *MenuAttributeIterClass) GetCallbackGetNext() func(*MenuAttributeIter, string, **glib.Variant) bool {
+	if x.xGetNext == 0 {
+		return nil
+	}
+	var rawCallback func(IterVarp uintptr, OutNameVarp string, ValueVarp **glib.Variant) bool
+	purego.RegisterFunc(&rawCallback, x.xGetNext)
+	return func(IterVar *MenuAttributeIter, OutNameVar string, ValueVar **glib.Variant) bool {
+		return rawCallback(IterVar.GoPointer(), OutNameVar, ValueVar)
+	}
+}
+
 type MenuAttributeIterPrivate struct {
 	_ structs.HostLayout
 }
@@ -37,13 +60,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetNext uintptr
+	xGetNext uintptr
 }
 
 func (x *MenuLinkIterClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackGetNext sets the callback function.
+func (x *MenuLinkIterClass) SetCallbackGetNext(cb func(*MenuLinkIter, string, **MenuModel) bool) {
+	if cb == nil {
+		x.xGetNext = 0
+	} else {
+		x.xGetNext = purego.NewCallback(func(IterVarp uintptr, OutLinkVarp string, ValueVarp uintptr) bool {
+			return cb(MenuLinkIterNewFromInternalPtr(IterVarp), OutLinkVarp, (**MenuModel)(unsafe.Pointer(ValueVarp)))
+		})
+	}
+}
+
+// GetCallbackGetNext gets the callback function.
+func (x *MenuLinkIterClass) GetCallbackGetNext() func(*MenuLinkIter, string, **MenuModel) bool {
+	if x.xGetNext == 0 {
+		return nil
+	}
+	var rawCallback func(IterVarp uintptr, OutLinkVarp string, ValueVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xGetNext)
+	return func(IterVar *MenuLinkIter, OutLinkVar string, ValueVar **MenuModel) bool {
+		return rawCallback(IterVar.GoPointer(), OutLinkVar, *gobject.ConvertPtr(ValueVar))
+	}
+}
+
 type MenuLinkIterPrivate struct {
 	_ structs.HostLayout
 }
@@ -57,27 +103,241 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	IsMutable uintptr
+	xIsMutable uintptr
 
-	GetNItems uintptr
+	xGetNItems uintptr
 
-	GetItemAttributes uintptr
+	xGetItemAttributes uintptr
 
-	IterateItemAttributes uintptr
+	xIterateItemAttributes uintptr
 
-	GetItemAttributeValue uintptr
+	xGetItemAttributeValue uintptr
 
-	GetItemLinks uintptr
+	xGetItemLinks uintptr
 
-	IterateItemLinks uintptr
+	xIterateItemLinks uintptr
 
-	GetItemLink uintptr
+	xGetItemLink uintptr
 }
 
 func (x *MenuModelClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackIsMutable sets the callback function.
+func (x *MenuModelClass) SetCallbackIsMutable(cb func(*MenuModel) bool) {
+	if cb == nil {
+		x.xIsMutable = 0
+	} else {
+		x.xIsMutable = purego.NewCallback(func(ModelVarp uintptr) bool {
+			return cb(MenuModelNewFromInternalPtr(ModelVarp))
+		})
+	}
+}
+
+// GetCallbackIsMutable gets the callback function.
+func (x *MenuModelClass) GetCallbackIsMutable() func(*MenuModel) bool {
+	if x.xIsMutable == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsMutable)
+	return func(ModelVar *MenuModel) bool {
+		return rawCallback(ModelVar.GoPointer())
+	}
+}
+
+// SetCallbackGetNItems sets the callback function.
+func (x *MenuModelClass) SetCallbackGetNItems(cb func(*MenuModel) int) {
+	if cb == nil {
+		x.xGetNItems = 0
+	} else {
+		x.xGetNItems = purego.NewCallback(func(ModelVarp uintptr) int {
+			return cb(MenuModelNewFromInternalPtr(ModelVarp))
+		})
+	}
+}
+
+// GetCallbackGetNItems gets the callback function.
+func (x *MenuModelClass) GetCallbackGetNItems() func(*MenuModel) int {
+	if x.xGetNItems == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetNItems)
+	return func(ModelVar *MenuModel) int {
+		return rawCallback(ModelVar.GoPointer())
+	}
+}
+
+// SetCallbackGetItemAttributes sets the callback function.
+func (x *MenuModelClass) SetCallbackGetItemAttributes(cb func(*MenuModel, int, **glib.HashTable)) {
+	if cb == nil {
+		x.xGetItemAttributes = 0
+	} else {
+		x.xGetItemAttributes = purego.NewCallback(func(ModelVarp uintptr, ItemIndexVarp int, AttributesVarp **glib.HashTable) {
+			cb(MenuModelNewFromInternalPtr(ModelVarp), ItemIndexVarp, AttributesVarp)
+		})
+	}
+}
+
+// GetCallbackGetItemAttributes gets the callback function.
+func (x *MenuModelClass) GetCallbackGetItemAttributes() func(*MenuModel, int, **glib.HashTable) {
+	if x.xGetItemAttributes == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, ItemIndexVarp int, AttributesVarp **glib.HashTable)
+	purego.RegisterFunc(&rawCallback, x.xGetItemAttributes)
+	return func(ModelVar *MenuModel, ItemIndexVar int, AttributesVar **glib.HashTable) {
+		rawCallback(ModelVar.GoPointer(), ItemIndexVar, AttributesVar)
+	}
+}
+
+// SetCallbackIterateItemAttributes sets the callback function.
+func (x *MenuModelClass) SetCallbackIterateItemAttributes(cb func(*MenuModel, int) *MenuAttributeIter) {
+	if cb == nil {
+		x.xIterateItemAttributes = 0
+	} else {
+		x.xIterateItemAttributes = purego.NewCallback(func(ModelVarp uintptr, ItemIndexVarp int) uintptr {
+			ret := cb(MenuModelNewFromInternalPtr(ModelVarp), ItemIndexVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackIterateItemAttributes gets the callback function.
+func (x *MenuModelClass) GetCallbackIterateItemAttributes() func(*MenuModel, int) *MenuAttributeIter {
+	if x.xIterateItemAttributes == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, ItemIndexVarp int) uintptr
+	purego.RegisterFunc(&rawCallback, x.xIterateItemAttributes)
+	return func(ModelVar *MenuModel, ItemIndexVar int) *MenuAttributeIter {
+		rawRet := rawCallback(ModelVar.GoPointer(), ItemIndexVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MenuAttributeIter{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetItemAttributeValue sets the callback function.
+func (x *MenuModelClass) SetCallbackGetItemAttributeValue(cb func(*MenuModel, int, string, *glib.VariantType) *glib.Variant) {
+	if cb == nil {
+		x.xGetItemAttributeValue = 0
+	} else {
+		x.xGetItemAttributeValue = purego.NewCallback(func(ModelVarp uintptr, ItemIndexVarp int, AttributeVarp string, ExpectedTypeVarp *glib.VariantType) *glib.Variant {
+			return cb(MenuModelNewFromInternalPtr(ModelVarp), ItemIndexVarp, AttributeVarp, ExpectedTypeVarp)
+		})
+	}
+}
+
+// GetCallbackGetItemAttributeValue gets the callback function.
+func (x *MenuModelClass) GetCallbackGetItemAttributeValue() func(*MenuModel, int, string, *glib.VariantType) *glib.Variant {
+	if x.xGetItemAttributeValue == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, ItemIndexVarp int, AttributeVarp string, ExpectedTypeVarp *glib.VariantType) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xGetItemAttributeValue)
+	return func(ModelVar *MenuModel, ItemIndexVar int, AttributeVar string, ExpectedTypeVar *glib.VariantType) *glib.Variant {
+		return rawCallback(ModelVar.GoPointer(), ItemIndexVar, AttributeVar, ExpectedTypeVar)
+	}
+}
+
+// SetCallbackGetItemLinks sets the callback function.
+func (x *MenuModelClass) SetCallbackGetItemLinks(cb func(*MenuModel, int, **glib.HashTable)) {
+	if cb == nil {
+		x.xGetItemLinks = 0
+	} else {
+		x.xGetItemLinks = purego.NewCallback(func(ModelVarp uintptr, ItemIndexVarp int, LinksVarp **glib.HashTable) {
+			cb(MenuModelNewFromInternalPtr(ModelVarp), ItemIndexVarp, LinksVarp)
+		})
+	}
+}
+
+// GetCallbackGetItemLinks gets the callback function.
+func (x *MenuModelClass) GetCallbackGetItemLinks() func(*MenuModel, int, **glib.HashTable) {
+	if x.xGetItemLinks == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, ItemIndexVarp int, LinksVarp **glib.HashTable)
+	purego.RegisterFunc(&rawCallback, x.xGetItemLinks)
+	return func(ModelVar *MenuModel, ItemIndexVar int, LinksVar **glib.HashTable) {
+		rawCallback(ModelVar.GoPointer(), ItemIndexVar, LinksVar)
+	}
+}
+
+// SetCallbackIterateItemLinks sets the callback function.
+func (x *MenuModelClass) SetCallbackIterateItemLinks(cb func(*MenuModel, int) *MenuLinkIter) {
+	if cb == nil {
+		x.xIterateItemLinks = 0
+	} else {
+		x.xIterateItemLinks = purego.NewCallback(func(ModelVarp uintptr, ItemIndexVarp int) uintptr {
+			ret := cb(MenuModelNewFromInternalPtr(ModelVarp), ItemIndexVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackIterateItemLinks gets the callback function.
+func (x *MenuModelClass) GetCallbackIterateItemLinks() func(*MenuModel, int) *MenuLinkIter {
+	if x.xIterateItemLinks == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, ItemIndexVarp int) uintptr
+	purego.RegisterFunc(&rawCallback, x.xIterateItemLinks)
+	return func(ModelVar *MenuModel, ItemIndexVar int) *MenuLinkIter {
+		rawRet := rawCallback(ModelVar.GoPointer(), ItemIndexVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MenuLinkIter{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetItemLink sets the callback function.
+func (x *MenuModelClass) SetCallbackGetItemLink(cb func(*MenuModel, int, string) *MenuModel) {
+	if cb == nil {
+		x.xGetItemLink = 0
+	} else {
+		x.xGetItemLink = purego.NewCallback(func(ModelVarp uintptr, ItemIndexVarp int, LinkVarp string) uintptr {
+			ret := cb(MenuModelNewFromInternalPtr(ModelVarp), ItemIndexVarp, LinkVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetItemLink gets the callback function.
+func (x *MenuModelClass) GetCallbackGetItemLink() func(*MenuModel, int, string) *MenuModel {
+	if x.xGetItemLink == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, ItemIndexVarp int, LinkVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetItemLink)
+	return func(ModelVar *MenuModel, ItemIndexVar int, LinkVar string) *MenuModel {
+		rawRet := rawCallback(ModelVar.GoPointer(), ItemIndexVar, LinkVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MenuModel{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
 type MenuModelPrivate struct {
 	_ structs.HostLayout
 }
@@ -245,7 +505,7 @@ 	cret := xMenuLinkIterGetName(x.GoPointer())
 	return cret
 }
 
-var xMenuLinkIterGetNext func(uintptr, string, *uintptr) bool
+var xMenuLinkIterGetNext func(uintptr, string, uintptr) bool
 
 // This function combines g_menu_link_iter_next() with
 // g_menu_link_iter_get_name() and g_menu_link_iter_get_value().
@@ -263,7 +523,7 @@ // remains at the current position.  The value returned in @value must
 // be unreffed using g_object_unref() when it is no longer in use.
 func (x *MenuLinkIter) GetNext(OutLinkVar string, ValueVar **MenuModel) bool {
 
-	cret := xMenuLinkIterGetNext(x.GoPointer(), OutLinkVar, gobject.ConvertPtr(ValueVar))
+	cret := xMenuLinkIterGetNext(x.GoPointer(), OutLinkVar, *gobject.ConvertPtr(ValueVar))
 	return cret
 }
 
diff --git a/v4/gio/gmount.go b/v4/gio/gmount.go
index c2bd36f669a8eaf3bb9188c1290abe46c7e34fb2..fa84c96226ecf21defbb57a8ca46b35b591aa005 100644
--- a/v4/gio/gmount.go
+++ b/v4/gio/gmount.go
@@ -17,65 +17,746 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	Unmounted uintptr
+	xUnmounted uintptr
 
-	GetRoot uintptr
+	xGetRoot uintptr
 
-	GetName uintptr
+	xGetName uintptr
 
-	GetIcon uintptr
+	xGetIcon uintptr
 
-	GetUuid uintptr
+	xGetUuid uintptr
 
-	GetVolume uintptr
+	xGetVolume uintptr
 
-	GetDrive uintptr
+	xGetDrive uintptr
 
-	CanUnmount uintptr
+	xCanUnmount uintptr
 
-	CanEject uintptr
+	xCanEject uintptr
 
-	Unmount uintptr
+	xUnmount uintptr
 
-	UnmountFinish uintptr
+	xUnmountFinish uintptr
 
-	Eject uintptr
+	xEject uintptr
 
-	EjectFinish uintptr
+	xEjectFinish uintptr
 
-	Remount uintptr
+	xRemount uintptr
 
-	RemountFinish uintptr
+	xRemountFinish uintptr
 
-	GuessContentType uintptr
+	xGuessContentType uintptr
 
-	GuessContentTypeFinish uintptr
+	xGuessContentTypeFinish uintptr
 
-	GuessContentTypeSync uintptr
+	xGuessContentTypeSync uintptr
 
-	PreUnmount uintptr
+	xPreUnmount uintptr
 
-	UnmountWithOperation uintptr
+	xUnmountWithOperation uintptr
 
-	UnmountWithOperationFinish uintptr
+	xUnmountWithOperationFinish uintptr
 
-	EjectWithOperation uintptr
+	xEjectWithOperation uintptr
 
-	EjectWithOperationFinish uintptr
+	xEjectWithOperationFinish uintptr
 
-	GetDefaultLocation uintptr
+	xGetDefaultLocation uintptr
 
-	GetSortKey uintptr
+	xGetSortKey uintptr
 
-	GetSymbolicIcon uintptr
+	xGetSymbolicIcon uintptr
 }
 
 func (x *MountIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackChanged sets the callback function.
+func (x *MountIface) SetCallbackChanged(cb func(Mount)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(MountVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *MountIface) GetCallbackChanged() func(Mount) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(MountVar Mount) {
+		rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackUnmounted sets the callback function.
+func (x *MountIface) SetCallbackUnmounted(cb func(Mount)) {
+	if cb == nil {
+		x.xUnmounted = 0
+	} else {
+		x.xUnmounted = purego.NewCallback(func(MountVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackUnmounted gets the callback function.
+func (x *MountIface) GetCallbackUnmounted() func(Mount) {
+	if x.xUnmounted == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnmounted)
+	return func(MountVar Mount) {
+		rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackGetRoot sets the callback function.
+func (x *MountIface) SetCallbackGetRoot(cb func(Mount) *FileBase) {
+	if cb == nil {
+		x.xGetRoot = 0
+	} else {
+		x.xGetRoot = purego.NewCallback(func(MountVarp uintptr) uintptr {
+			ret := cb(&MountBase{Ptr: MountVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetRoot gets the callback function.
+func (x *MountIface) GetCallbackGetRoot() func(Mount) *FileBase {
+	if x.xGetRoot == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetRoot)
+	return func(MountVar Mount) *FileBase {
+		rawRet := rawCallback(MountVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetName sets the callback function.
+func (x *MountIface) SetCallbackGetName(cb func(Mount) string) {
+	if cb == nil {
+		x.xGetName = 0
+	} else {
+		x.xGetName = purego.NewCallback(func(MountVarp uintptr) string {
+			return cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackGetName gets the callback function.
+func (x *MountIface) GetCallbackGetName() func(Mount) string {
+	if x.xGetName == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetName)
+	return func(MountVar Mount) string {
+		return rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIcon sets the callback function.
+func (x *MountIface) SetCallbackGetIcon(cb func(Mount) *IconBase) {
+	if cb == nil {
+		x.xGetIcon = 0
+	} else {
+		x.xGetIcon = purego.NewCallback(func(MountVarp uintptr) uintptr {
+			ret := cb(&MountBase{Ptr: MountVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetIcon gets the callback function.
+func (x *MountIface) GetCallbackGetIcon() func(Mount) *IconBase {
+	if x.xGetIcon == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetIcon)
+	return func(MountVar Mount) *IconBase {
+		rawRet := rawCallback(MountVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetUuid sets the callback function.
+func (x *MountIface) SetCallbackGetUuid(cb func(Mount) string) {
+	if cb == nil {
+		x.xGetUuid = 0
+	} else {
+		x.xGetUuid = purego.NewCallback(func(MountVarp uintptr) string {
+			return cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackGetUuid gets the callback function.
+func (x *MountIface) GetCallbackGetUuid() func(Mount) string {
+	if x.xGetUuid == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetUuid)
+	return func(MountVar Mount) string {
+		return rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackGetVolume sets the callback function.
+func (x *MountIface) SetCallbackGetVolume(cb func(Mount) *VolumeBase) {
+	if cb == nil {
+		x.xGetVolume = 0
+	} else {
+		x.xGetVolume = purego.NewCallback(func(MountVarp uintptr) uintptr {
+			ret := cb(&MountBase{Ptr: MountVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetVolume gets the callback function.
+func (x *MountIface) GetCallbackGetVolume() func(Mount) *VolumeBase {
+	if x.xGetVolume == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetVolume)
+	return func(MountVar Mount) *VolumeBase {
+		rawRet := rawCallback(MountVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &VolumeBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetDrive sets the callback function.
+func (x *MountIface) SetCallbackGetDrive(cb func(Mount) *DriveBase) {
+	if cb == nil {
+		x.xGetDrive = 0
+	} else {
+		x.xGetDrive = purego.NewCallback(func(MountVarp uintptr) uintptr {
+			ret := cb(&MountBase{Ptr: MountVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetDrive gets the callback function.
+func (x *MountIface) GetCallbackGetDrive() func(Mount) *DriveBase {
+	if x.xGetDrive == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetDrive)
+	return func(MountVar Mount) *DriveBase {
+		rawRet := rawCallback(MountVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &DriveBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCanUnmount sets the callback function.
+func (x *MountIface) SetCallbackCanUnmount(cb func(Mount) bool) {
+	if cb == nil {
+		x.xCanUnmount = 0
+	} else {
+		x.xCanUnmount = purego.NewCallback(func(MountVarp uintptr) bool {
+			return cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackCanUnmount gets the callback function.
+func (x *MountIface) GetCallbackCanUnmount() func(Mount) bool {
+	if x.xCanUnmount == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanUnmount)
+	return func(MountVar Mount) bool {
+		return rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackCanEject sets the callback function.
+func (x *MountIface) SetCallbackCanEject(cb func(Mount) bool) {
+	if cb == nil {
+		x.xCanEject = 0
+	} else {
+		x.xCanEject = purego.NewCallback(func(MountVarp uintptr) bool {
+			return cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackCanEject gets the callback function.
+func (x *MountIface) GetCallbackCanEject() func(Mount) bool {
+	if x.xCanEject == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanEject)
+	return func(MountVar Mount) bool {
+		return rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackUnmount sets the callback function.
+func (x *MountIface) SetCallbackUnmount(cb func(Mount, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xUnmount = 0
+	} else {
+		x.xUnmount = purego.NewCallback(func(MountVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackUnmount gets the callback function.
+func (x *MountIface) GetCallbackUnmount() func(Mount, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xUnmount == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnmount)
+	return func(MountVar Mount, FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(MountVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackUnmountFinish sets the callback function.
+func (x *MountIface) SetCallbackUnmountFinish(cb func(Mount, AsyncResult) bool) {
+	if cb == nil {
+		x.xUnmountFinish = 0
+	} else {
+		x.xUnmountFinish = purego.NewCallback(func(MountVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&MountBase{Ptr: MountVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackUnmountFinish gets the callback function.
+func (x *MountIface) GetCallbackUnmountFinish() func(Mount, AsyncResult) bool {
+	if x.xUnmountFinish == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xUnmountFinish)
+	return func(MountVar Mount, ResultVar AsyncResult) bool {
+		return rawCallback(MountVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackEject sets the callback function.
+func (x *MountIface) SetCallbackEject(cb func(Mount, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEject = 0
+	} else {
+		x.xEject = purego.NewCallback(func(MountVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEject gets the callback function.
+func (x *MountIface) GetCallbackEject() func(Mount, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEject == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEject)
+	return func(MountVar Mount, FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(MountVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectFinish sets the callback function.
+func (x *MountIface) SetCallbackEjectFinish(cb func(Mount, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectFinish = 0
+	} else {
+		x.xEjectFinish = purego.NewCallback(func(MountVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&MountBase{Ptr: MountVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectFinish gets the callback function.
+func (x *MountIface) GetCallbackEjectFinish() func(Mount, AsyncResult) bool {
+	if x.xEjectFinish == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectFinish)
+	return func(MountVar Mount, ResultVar AsyncResult) bool {
+		return rawCallback(MountVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackRemount sets the callback function.
+func (x *MountIface) SetCallbackRemount(cb func(Mount, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xRemount = 0
+	} else {
+		x.xRemount = purego.NewCallback(func(MountVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackRemount gets the callback function.
+func (x *MountIface) GetCallbackRemount() func(Mount, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xRemount == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRemount)
+	return func(MountVar Mount, FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(MountVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackRemountFinish sets the callback function.
+func (x *MountIface) SetCallbackRemountFinish(cb func(Mount, AsyncResult) bool) {
+	if cb == nil {
+		x.xRemountFinish = 0
+	} else {
+		x.xRemountFinish = purego.NewCallback(func(MountVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&MountBase{Ptr: MountVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackRemountFinish gets the callback function.
+func (x *MountIface) GetCallbackRemountFinish() func(Mount, AsyncResult) bool {
+	if x.xRemountFinish == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xRemountFinish)
+	return func(MountVar Mount, ResultVar AsyncResult) bool {
+		return rawCallback(MountVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGuessContentType sets the callback function.
+func (x *MountIface) SetCallbackGuessContentType(cb func(Mount, bool, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xGuessContentType = 0
+	} else {
+		x.xGuessContentType = purego.NewCallback(func(MountVarp uintptr, ForceRescanVarp bool, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp}, ForceRescanVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackGuessContentType gets the callback function.
+func (x *MountIface) GetCallbackGuessContentType() func(Mount, bool, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xGuessContentType == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ForceRescanVarp bool, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xGuessContentType)
+	return func(MountVar Mount, ForceRescanVar bool, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(MountVar.GoPointer(), ForceRescanVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackGuessContentTypeFinish sets the callback function.
+func (x *MountIface) SetCallbackGuessContentTypeFinish(cb func(Mount, AsyncResult) []string) {
+	if cb == nil {
+		x.xGuessContentTypeFinish = 0
+	} else {
+		x.xGuessContentTypeFinish = purego.NewCallback(func(MountVarp uintptr, ResultVarp uintptr) []string {
+			return cb(&MountBase{Ptr: MountVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackGuessContentTypeFinish gets the callback function.
+func (x *MountIface) GetCallbackGuessContentTypeFinish() func(Mount, AsyncResult) []string {
+	if x.xGuessContentTypeFinish == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ResultVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xGuessContentTypeFinish)
+	return func(MountVar Mount, ResultVar AsyncResult) []string {
+		return rawCallback(MountVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGuessContentTypeSync sets the callback function.
+func (x *MountIface) SetCallbackGuessContentTypeSync(cb func(Mount, bool, *Cancellable) []string) {
+	if cb == nil {
+		x.xGuessContentTypeSync = 0
+	} else {
+		x.xGuessContentTypeSync = purego.NewCallback(func(MountVarp uintptr, ForceRescanVarp bool, CancellableVarp uintptr) []string {
+			return cb(&MountBase{Ptr: MountVarp}, ForceRescanVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackGuessContentTypeSync gets the callback function.
+func (x *MountIface) GetCallbackGuessContentTypeSync() func(Mount, bool, *Cancellable) []string {
+	if x.xGuessContentTypeSync == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ForceRescanVarp bool, CancellableVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xGuessContentTypeSync)
+	return func(MountVar Mount, ForceRescanVar bool, CancellableVar *Cancellable) []string {
+		return rawCallback(MountVar.GoPointer(), ForceRescanVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackPreUnmount sets the callback function.
+func (x *MountIface) SetCallbackPreUnmount(cb func(Mount)) {
+	if cb == nil {
+		x.xPreUnmount = 0
+	} else {
+		x.xPreUnmount = purego.NewCallback(func(MountVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackPreUnmount gets the callback function.
+func (x *MountIface) GetCallbackPreUnmount() func(Mount) {
+	if x.xPreUnmount == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPreUnmount)
+	return func(MountVar Mount) {
+		rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackUnmountWithOperation sets the callback function.
+func (x *MountIface) SetCallbackUnmountWithOperation(cb func(Mount, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xUnmountWithOperation = 0
+	} else {
+		x.xUnmountWithOperation = purego.NewCallback(func(MountVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackUnmountWithOperation gets the callback function.
+func (x *MountIface) GetCallbackUnmountWithOperation() func(Mount, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xUnmountWithOperation == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnmountWithOperation)
+	return func(MountVar Mount, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(MountVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackUnmountWithOperationFinish sets the callback function.
+func (x *MountIface) SetCallbackUnmountWithOperationFinish(cb func(Mount, AsyncResult) bool) {
+	if cb == nil {
+		x.xUnmountWithOperationFinish = 0
+	} else {
+		x.xUnmountWithOperationFinish = purego.NewCallback(func(MountVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&MountBase{Ptr: MountVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackUnmountWithOperationFinish gets the callback function.
+func (x *MountIface) GetCallbackUnmountWithOperationFinish() func(Mount, AsyncResult) bool {
+	if x.xUnmountWithOperationFinish == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xUnmountWithOperationFinish)
+	return func(MountVar Mount, ResultVar AsyncResult) bool {
+		return rawCallback(MountVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackEjectWithOperation sets the callback function.
+func (x *MountIface) SetCallbackEjectWithOperation(cb func(Mount, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEjectWithOperation = 0
+	} else {
+		x.xEjectWithOperation = purego.NewCallback(func(MountVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&MountBase{Ptr: MountVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEjectWithOperation gets the callback function.
+func (x *MountIface) GetCallbackEjectWithOperation() func(Mount, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEjectWithOperation == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEjectWithOperation)
+	return func(MountVar Mount, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(MountVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectWithOperationFinish sets the callback function.
+func (x *MountIface) SetCallbackEjectWithOperationFinish(cb func(Mount, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectWithOperationFinish = 0
+	} else {
+		x.xEjectWithOperationFinish = purego.NewCallback(func(MountVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&MountBase{Ptr: MountVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectWithOperationFinish gets the callback function.
+func (x *MountIface) GetCallbackEjectWithOperationFinish() func(Mount, AsyncResult) bool {
+	if x.xEjectWithOperationFinish == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectWithOperationFinish)
+	return func(MountVar Mount, ResultVar AsyncResult) bool {
+		return rawCallback(MountVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGetDefaultLocation sets the callback function.
+func (x *MountIface) SetCallbackGetDefaultLocation(cb func(Mount) *FileBase) {
+	if cb == nil {
+		x.xGetDefaultLocation = 0
+	} else {
+		x.xGetDefaultLocation = purego.NewCallback(func(MountVarp uintptr) uintptr {
+			ret := cb(&MountBase{Ptr: MountVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetDefaultLocation gets the callback function.
+func (x *MountIface) GetCallbackGetDefaultLocation() func(Mount) *FileBase {
+	if x.xGetDefaultLocation == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetDefaultLocation)
+	return func(MountVar Mount) *FileBase {
+		rawRet := rawCallback(MountVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetSortKey sets the callback function.
+func (x *MountIface) SetCallbackGetSortKey(cb func(Mount) string) {
+	if cb == nil {
+		x.xGetSortKey = 0
+	} else {
+		x.xGetSortKey = purego.NewCallback(func(MountVarp uintptr) string {
+			return cb(&MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackGetSortKey gets the callback function.
+func (x *MountIface) GetCallbackGetSortKey() func(Mount) string {
+	if x.xGetSortKey == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetSortKey)
+	return func(MountVar Mount) string {
+		return rawCallback(MountVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSymbolicIcon sets the callback function.
+func (x *MountIface) SetCallbackGetSymbolicIcon(cb func(Mount) *IconBase) {
+	if cb == nil {
+		x.xGetSymbolicIcon = 0
+	} else {
+		x.xGetSymbolicIcon = purego.NewCallback(func(MountVarp uintptr) uintptr {
+			ret := cb(&MountBase{Ptr: MountVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetSymbolicIcon gets the callback function.
+func (x *MountIface) GetCallbackGetSymbolicIcon() func(Mount) *IconBase {
+	if x.xGetSymbolicIcon == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetSymbolicIcon)
+	return func(MountVar Mount) *IconBase {
+		rawRet := rawCallback(MountVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
 // The #GMount interface represents user-visible mounts. Note, when
 // porting from GnomeVFS, #GMount is the moral equivalent of #GnomeVFSVolume.
 //
@@ -101,9 +782,9 @@ 	SetGoPointer(uintptr)
 	CanEject() bool
 	CanUnmount() bool
 	Eject(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectFinish(ResultVar AsyncResult) bool
+	EjectFinish(ResultVar AsyncResult) (bool, error)
 	EjectWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectWithOperationFinish(ResultVar AsyncResult) bool
+	EjectWithOperationFinish(ResultVar AsyncResult) (bool, error)
 	GetDefaultLocation() *FileBase
 	GetDrive() *DriveBase
 	GetIcon() *IconBase
@@ -114,16 +795,16 @@ 	GetSymbolicIcon() *IconBase
 	GetUuid() string
 	GetVolume() *VolumeBase
 	GuessContentType(ForceRescanVar bool, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	GuessContentTypeFinish(ResultVar AsyncResult) []string
-	GuessContentTypeSync(ForceRescanVar bool, CancellableVar *Cancellable) []string
+	GuessContentTypeFinish(ResultVar AsyncResult) ([]string, error)
+	GuessContentTypeSync(ForceRescanVar bool, CancellableVar *Cancellable) ([]string, error)
 	IsShadowed() bool
 	Remount(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	RemountFinish(ResultVar AsyncResult) bool
+	RemountFinish(ResultVar AsyncResult) (bool, error)
 	Shadow()
 	Unmount(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	UnmountFinish(ResultVar AsyncResult) bool
+	UnmountFinish(ResultVar AsyncResult) (bool, error)
 	UnmountWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	UnmountWithOperationFinish(ResultVar AsyncResult) bool
+	UnmountWithOperationFinish(ResultVar AsyncResult) (bool, error)
 	Unshadow()
 }
 
diff --git a/v4/gio/gmountoperation.go b/v4/gio/gmountoperation.go
index 1938f700df504a26e15826bd5e8dac017917db4a..9f3352f961289481119a20094881742d350da272 100644
--- a/v4/gio/gmountoperation.go
+++ b/v4/gio/gmountoperation.go
@@ -17,39 +17,384 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	AskPassword uintptr
+	xAskPassword uintptr
 
-	AskQuestion uintptr
+	xAskQuestion uintptr
 
-	Reply uintptr
+	xReply uintptr
 
-	Aborted uintptr
+	xAborted uintptr
 
-	ShowProcesses uintptr
+	xShowProcesses uintptr
 
-	ShowUnmountProgress uintptr
+	xShowUnmountProgress uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 
-	GReserved7 uintptr
+	xGReserved7 uintptr
 
-	GReserved8 uintptr
+	xGReserved8 uintptr
 
-	GReserved9 uintptr
+	xGReserved9 uintptr
 }
 
 func (x *MountOperationClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAskPassword sets the callback function.
+func (x *MountOperationClass) SetCallbackAskPassword(cb func(*MountOperation, string, string, string, AskPasswordFlags)) {
+	if cb == nil {
+		x.xAskPassword = 0
+	} else {
+		x.xAskPassword = purego.NewCallback(func(OpVarp uintptr, MessageVarp string, DefaultUserVarp string, DefaultDomainVarp string, FlagsVarp AskPasswordFlags) {
+			cb(MountOperationNewFromInternalPtr(OpVarp), MessageVarp, DefaultUserVarp, DefaultDomainVarp, FlagsVarp)
+		})
+	}
+}
+
+// GetCallbackAskPassword gets the callback function.
+func (x *MountOperationClass) GetCallbackAskPassword() func(*MountOperation, string, string, string, AskPasswordFlags) {
+	if x.xAskPassword == 0 {
+		return nil
+	}
+	var rawCallback func(OpVarp uintptr, MessageVarp string, DefaultUserVarp string, DefaultDomainVarp string, FlagsVarp AskPasswordFlags)
+	purego.RegisterFunc(&rawCallback, x.xAskPassword)
+	return func(OpVar *MountOperation, MessageVar string, DefaultUserVar string, DefaultDomainVar string, FlagsVar AskPasswordFlags) {
+		rawCallback(OpVar.GoPointer(), MessageVar, DefaultUserVar, DefaultDomainVar, FlagsVar)
+	}
+}
+
+// SetCallbackAskQuestion sets the callback function.
+func (x *MountOperationClass) SetCallbackAskQuestion(cb func(*MountOperation, string, []string)) {
+	if cb == nil {
+		x.xAskQuestion = 0
+	} else {
+		x.xAskQuestion = purego.NewCallback(func(OpVarp uintptr, MessageVarp string, ChoicesVarp []string) {
+			cb(MountOperationNewFromInternalPtr(OpVarp), MessageVarp, ChoicesVarp)
+		})
+	}
+}
+
+// GetCallbackAskQuestion gets the callback function.
+func (x *MountOperationClass) GetCallbackAskQuestion() func(*MountOperation, string, []string) {
+	if x.xAskQuestion == 0 {
+		return nil
+	}
+	var rawCallback func(OpVarp uintptr, MessageVarp string, ChoicesVarp []string)
+	purego.RegisterFunc(&rawCallback, x.xAskQuestion)
+	return func(OpVar *MountOperation, MessageVar string, ChoicesVar []string) {
+		rawCallback(OpVar.GoPointer(), MessageVar, ChoicesVar)
+	}
+}
+
+// SetCallbackReply sets the callback function.
+func (x *MountOperationClass) SetCallbackReply(cb func(*MountOperation, MountOperationResult)) {
+	if cb == nil {
+		x.xReply = 0
+	} else {
+		x.xReply = purego.NewCallback(func(OpVarp uintptr, ResultVarp MountOperationResult) {
+			cb(MountOperationNewFromInternalPtr(OpVarp), ResultVarp)
+		})
+	}
+}
+
+// GetCallbackReply gets the callback function.
+func (x *MountOperationClass) GetCallbackReply() func(*MountOperation, MountOperationResult) {
+	if x.xReply == 0 {
+		return nil
+	}
+	var rawCallback func(OpVarp uintptr, ResultVarp MountOperationResult)
+	purego.RegisterFunc(&rawCallback, x.xReply)
+	return func(OpVar *MountOperation, ResultVar MountOperationResult) {
+		rawCallback(OpVar.GoPointer(), ResultVar)
+	}
+}
+
+// SetCallbackAborted sets the callback function.
+func (x *MountOperationClass) SetCallbackAborted(cb func(*MountOperation)) {
+	if cb == nil {
+		x.xAborted = 0
+	} else {
+		x.xAborted = purego.NewCallback(func(OpVarp uintptr) {
+			cb(MountOperationNewFromInternalPtr(OpVarp))
+		})
+	}
+}
+
+// GetCallbackAborted gets the callback function.
+func (x *MountOperationClass) GetCallbackAborted() func(*MountOperation) {
+	if x.xAborted == 0 {
+		return nil
+	}
+	var rawCallback func(OpVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAborted)
+	return func(OpVar *MountOperation) {
+		rawCallback(OpVar.GoPointer())
+	}
+}
+
+// SetCallbackShowProcesses sets the callback function.
+func (x *MountOperationClass) SetCallbackShowProcesses(cb func(*MountOperation, string, []glib.Pid, []string)) {
+	if cb == nil {
+		x.xShowProcesses = 0
+	} else {
+		x.xShowProcesses = purego.NewCallback(func(OpVarp uintptr, MessageVarp string, ProcessesVarp []glib.Pid, ChoicesVarp []string) {
+			cb(MountOperationNewFromInternalPtr(OpVarp), MessageVarp, ProcessesVarp, ChoicesVarp)
+		})
+	}
+}
+
+// GetCallbackShowProcesses gets the callback function.
+func (x *MountOperationClass) GetCallbackShowProcesses() func(*MountOperation, string, []glib.Pid, []string) {
+	if x.xShowProcesses == 0 {
+		return nil
+	}
+	var rawCallback func(OpVarp uintptr, MessageVarp string, ProcessesVarp []glib.Pid, ChoicesVarp []string)
+	purego.RegisterFunc(&rawCallback, x.xShowProcesses)
+	return func(OpVar *MountOperation, MessageVar string, ProcessesVar []glib.Pid, ChoicesVar []string) {
+		rawCallback(OpVar.GoPointer(), MessageVar, ProcessesVar, ChoicesVar)
+	}
+}
+
+// SetCallbackShowUnmountProgress sets the callback function.
+func (x *MountOperationClass) SetCallbackShowUnmountProgress(cb func(*MountOperation, string, int64, int64)) {
+	if cb == nil {
+		x.xShowUnmountProgress = 0
+	} else {
+		x.xShowUnmountProgress = purego.NewCallback(func(OpVarp uintptr, MessageVarp string, TimeLeftVarp int64, BytesLeftVarp int64) {
+			cb(MountOperationNewFromInternalPtr(OpVarp), MessageVarp, TimeLeftVarp, BytesLeftVarp)
+		})
+	}
+}
+
+// GetCallbackShowUnmountProgress gets the callback function.
+func (x *MountOperationClass) GetCallbackShowUnmountProgress() func(*MountOperation, string, int64, int64) {
+	if x.xShowUnmountProgress == 0 {
+		return nil
+	}
+	var rawCallback func(OpVarp uintptr, MessageVarp string, TimeLeftVarp int64, BytesLeftVarp int64)
+	purego.RegisterFunc(&rawCallback, x.xShowUnmountProgress)
+	return func(OpVar *MountOperation, MessageVar string, TimeLeftVar int64, BytesLeftVar int64) {
+		rawCallback(OpVar.GoPointer(), MessageVar, TimeLeftVar, BytesLeftVar)
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved7 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved7(cb func()) {
+	if cb == nil {
+		x.xGReserved7 = 0
+	} else {
+		x.xGReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved7 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved7() func() {
+	if x.xGReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved8 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved8(cb func()) {
+	if cb == nil {
+		x.xGReserved8 = 0
+	} else {
+		x.xGReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved8 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved8() func() {
+	if x.xGReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved8)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved9 sets the callback function.
+func (x *MountOperationClass) SetCallbackGReserved9(cb func()) {
+	if cb == nil {
+		x.xGReserved9 = 0
+	} else {
+		x.xGReserved9 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved9 gets the callback function.
+func (x *MountOperationClass) GetCallbackGReserved9() func() {
+	if x.xGReserved9 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved9)
+	return func() {
+		rawCallback()
+	}
 }
 
 type MountOperationPrivate struct {
diff --git a/v4/gio/gnativevolumemonitor.go b/v4/gio/gnativevolumemonitor.go
index 65e7e57153441b9bb52fc84f88e98799ea84ee0f..e9aa82b2d79fbe501e871cd203a0edfb87f72551 100644
--- a/v4/gio/gnativevolumemonitor.go
+++ b/v4/gio/gnativevolumemonitor.go
@@ -5,6 +5,7 @@ import (
 	"structs"
 	"unsafe"
 
+	"github.com/jwijenbergh/purego"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -13,11 +14,44 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetMountForMountPath uintptr
+	xGetMountForMountPath uintptr
 }
 
 func (x *NativeVolumeMonitorClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetMountForMountPath sets the callback function.
+func (x *NativeVolumeMonitorClass) SetCallbackGetMountForMountPath(cb func(string, *Cancellable) *MountBase) {
+	if cb == nil {
+		x.xGetMountForMountPath = 0
+	} else {
+		x.xGetMountForMountPath = purego.NewCallback(func(MountPathVarp string, CancellableVarp uintptr) uintptr {
+			ret := cb(MountPathVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetMountForMountPath gets the callback function.
+func (x *NativeVolumeMonitorClass) GetCallbackGetMountForMountPath() func(string, *Cancellable) *MountBase {
+	if x.xGetMountForMountPath == 0 {
+		return nil
+	}
+	var rawCallback func(MountPathVarp string, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetMountForMountPath)
+	return func(MountPathVar string, CancellableVar *Cancellable) *MountBase {
+		rawRet := rawCallback(MountPathVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MountBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 const (
diff --git a/v4/gio/gnetworkmonitor.go b/v4/gio/gnetworkmonitor.go
index e017a4b6b2b187214e4a7c72e81e18d26252f33d..2f29970eaa415567ccae413287960ce726648e85 100644
--- a/v4/gio/gnetworkmonitor.go
+++ b/v4/gio/gnetworkmonitor.go
@@ -18,19 +18,111 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	NetworkChanged uintptr
+	xNetworkChanged uintptr
 
-	CanReach uintptr
+	xCanReach uintptr
 
-	CanReachAsync uintptr
+	xCanReachAsync uintptr
 
-	CanReachFinish uintptr
+	xCanReachFinish uintptr
 }
 
 func (x *NetworkMonitorInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackNetworkChanged sets the callback function.
+func (x *NetworkMonitorInterface) SetCallbackNetworkChanged(cb func(NetworkMonitor, bool)) {
+	if cb == nil {
+		x.xNetworkChanged = 0
+	} else {
+		x.xNetworkChanged = purego.NewCallback(func(MonitorVarp uintptr, NetworkAvailableVarp bool) {
+			cb(&NetworkMonitorBase{Ptr: MonitorVarp}, NetworkAvailableVarp)
+		})
+	}
+}
+
+// GetCallbackNetworkChanged gets the callback function.
+func (x *NetworkMonitorInterface) GetCallbackNetworkChanged() func(NetworkMonitor, bool) {
+	if x.xNetworkChanged == 0 {
+		return nil
+	}
+	var rawCallback func(MonitorVarp uintptr, NetworkAvailableVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xNetworkChanged)
+	return func(MonitorVar NetworkMonitor, NetworkAvailableVar bool) {
+		rawCallback(MonitorVar.GoPointer(), NetworkAvailableVar)
+	}
+}
+
+// SetCallbackCanReach sets the callback function.
+func (x *NetworkMonitorInterface) SetCallbackCanReach(cb func(NetworkMonitor, SocketConnectable, *Cancellable) bool) {
+	if cb == nil {
+		x.xCanReach = 0
+	} else {
+		x.xCanReach = purego.NewCallback(func(MonitorVarp uintptr, ConnectableVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(&NetworkMonitorBase{Ptr: MonitorVarp}, &SocketConnectableBase{Ptr: ConnectableVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCanReach gets the callback function.
+func (x *NetworkMonitorInterface) GetCallbackCanReach() func(NetworkMonitor, SocketConnectable, *Cancellable) bool {
+	if x.xCanReach == 0 {
+		return nil
+	}
+	var rawCallback func(MonitorVarp uintptr, ConnectableVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanReach)
+	return func(MonitorVar NetworkMonitor, ConnectableVar SocketConnectable, CancellableVar *Cancellable) bool {
+		return rawCallback(MonitorVar.GoPointer(), ConnectableVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCanReachAsync sets the callback function.
+func (x *NetworkMonitorInterface) SetCallbackCanReachAsync(cb func(NetworkMonitor, SocketConnectable, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCanReachAsync = 0
+	} else {
+		x.xCanReachAsync = purego.NewCallback(func(MonitorVarp uintptr, ConnectableVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&NetworkMonitorBase{Ptr: MonitorVarp}, &SocketConnectableBase{Ptr: ConnectableVarp}, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCanReachAsync gets the callback function.
+func (x *NetworkMonitorInterface) GetCallbackCanReachAsync() func(NetworkMonitor, SocketConnectable, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xCanReachAsync == 0 {
+		return nil
+	}
+	var rawCallback func(MonitorVarp uintptr, ConnectableVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCanReachAsync)
+	return func(MonitorVar NetworkMonitor, ConnectableVar SocketConnectable, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(MonitorVar.GoPointer(), ConnectableVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCanReachFinish sets the callback function.
+func (x *NetworkMonitorInterface) SetCallbackCanReachFinish(cb func(NetworkMonitor, AsyncResult) bool) {
+	if cb == nil {
+		x.xCanReachFinish = 0
+	} else {
+		x.xCanReachFinish = purego.NewCallback(func(MonitorVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&NetworkMonitorBase{Ptr: MonitorVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackCanReachFinish gets the callback function.
+func (x *NetworkMonitorInterface) GetCallbackCanReachFinish() func(NetworkMonitor, AsyncResult) bool {
+	if x.xCanReachFinish == 0 {
+		return nil
+	}
+	var rawCallback func(MonitorVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanReachFinish)
+	return func(MonitorVar NetworkMonitor, ResultVar AsyncResult) bool {
+		return rawCallback(MonitorVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
 // #GNetworkMonitor provides an easy-to-use cross-platform API
 // for monitoring network connectivity. On Linux, the available
 // implementations are based on the kernel's netlink interface and
@@ -40,9 +132,9 @@ // There is also an implementation for use inside Flatpak sandboxes.
 type NetworkMonitor interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	CanReach(ConnectableVar SocketConnectable, CancellableVar *Cancellable) bool
+	CanReach(ConnectableVar SocketConnectable, CancellableVar *Cancellable) (bool, error)
 	CanReachAsync(ConnectableVar SocketConnectable, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	CanReachFinish(ResultVar AsyncResult) bool
+	CanReachFinish(ResultVar AsyncResult) (bool, error)
 	GetConnectivity() NetworkConnectivity
 	GetNetworkAvailable() bool
 	GetNetworkMetered() bool
diff --git a/v4/gio/goutputstream.go b/v4/gio/goutputstream.go
index 751c5b54f64ba49e404f7862be1ee4b18a918a24..b8a84e077be900d2a56b87678f6079b568324ac3 100644
--- a/v4/gio/goutputstream.go
+++ b/v4/gio/goutputstream.go
@@ -17,49 +17,509 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	WriteFn uintptr
+	xWriteFn uintptr
 
-	Splice uintptr
+	xSplice uintptr
 
-	Flush uintptr
+	xFlush uintptr
 
-	CloseFn uintptr
+	xCloseFn uintptr
 
-	WriteAsync uintptr
+	xWriteAsync uintptr
 
-	WriteFinish uintptr
+	xWriteFinish uintptr
 
-	SpliceAsync uintptr
+	xSpliceAsync uintptr
 
-	SpliceFinish uintptr
+	xSpliceFinish uintptr
 
-	FlushAsync uintptr
+	xFlushAsync uintptr
 
-	FlushFinish uintptr
+	xFlushFinish uintptr
 
-	CloseAsync uintptr
+	xCloseAsync uintptr
 
-	CloseFinish uintptr
+	xCloseFinish uintptr
 
-	WritevFn uintptr
+	xWritevFn uintptr
 
-	WritevAsync uintptr
+	xWritevAsync uintptr
 
-	WritevFinish uintptr
+	xWritevFinish uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 
-	GReserved7 uintptr
+	xGReserved7 uintptr
 
-	GReserved8 uintptr
+	xGReserved8 uintptr
 }
 
 func (x *OutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackWriteFn sets the callback function.
+func (x *OutputStreamClass) SetCallbackWriteFn(cb func(*OutputStream, []byte, uint, *Cancellable) int) {
+	if cb == nil {
+		x.xWriteFn = 0
+	} else {
+		x.xWriteFn = purego.NewCallback(func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint, CancellableVarp uintptr) int {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), BufferVarp, CountVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackWriteFn gets the callback function.
+func (x *OutputStreamClass) GetCallbackWriteFn() func(*OutputStream, []byte, uint, *Cancellable) int {
+	if x.xWriteFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint, CancellableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xWriteFn)
+	return func(StreamVar *OutputStream, BufferVar []byte, CountVar uint, CancellableVar *Cancellable) int {
+		return rawCallback(StreamVar.GoPointer(), BufferVar, CountVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackSplice sets the callback function.
+func (x *OutputStreamClass) SetCallbackSplice(cb func(*OutputStream, *InputStream, OutputStreamSpliceFlags, *Cancellable) int) {
+	if cb == nil {
+		x.xSplice = 0
+	} else {
+		x.xSplice = purego.NewCallback(func(StreamVarp uintptr, SourceVarp uintptr, FlagsVarp OutputStreamSpliceFlags, CancellableVarp uintptr) int {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), InputStreamNewFromInternalPtr(SourceVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSplice gets the callback function.
+func (x *OutputStreamClass) GetCallbackSplice() func(*OutputStream, *InputStream, OutputStreamSpliceFlags, *Cancellable) int {
+	if x.xSplice == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, SourceVarp uintptr, FlagsVarp OutputStreamSpliceFlags, CancellableVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xSplice)
+	return func(StreamVar *OutputStream, SourceVar *InputStream, FlagsVar OutputStreamSpliceFlags, CancellableVar *Cancellable) int {
+		return rawCallback(StreamVar.GoPointer(), SourceVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackFlush sets the callback function.
+func (x *OutputStreamClass) SetCallbackFlush(cb func(*OutputStream, *Cancellable) bool) {
+	if cb == nil {
+		x.xFlush = 0
+	} else {
+		x.xFlush = purego.NewCallback(func(StreamVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackFlush gets the callback function.
+func (x *OutputStreamClass) GetCallbackFlush() func(*OutputStream, *Cancellable) bool {
+	if x.xFlush == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xFlush)
+	return func(StreamVar *OutputStream, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCloseFn sets the callback function.
+func (x *OutputStreamClass) SetCallbackCloseFn(cb func(*OutputStream, *Cancellable) bool) {
+	if cb == nil {
+		x.xCloseFn = 0
+	} else {
+		x.xCloseFn = purego.NewCallback(func(StreamVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCloseFn gets the callback function.
+func (x *OutputStreamClass) GetCallbackCloseFn() func(*OutputStream, *Cancellable) bool {
+	if x.xCloseFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFn)
+	return func(StreamVar *OutputStream, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackWriteAsync sets the callback function.
+func (x *OutputStreamClass) SetCallbackWriteAsync(cb func(*OutputStream, []byte, uint, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xWriteAsync = 0
+	} else {
+		x.xWriteAsync = purego.NewCallback(func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(OutputStreamNewFromInternalPtr(StreamVarp), BufferVarp, CountVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackWriteAsync gets the callback function.
+func (x *OutputStreamClass) GetCallbackWriteAsync() func(*OutputStream, []byte, uint, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xWriteAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xWriteAsync)
+	return func(StreamVar *OutputStream, BufferVar []byte, CountVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), BufferVar, CountVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackWriteFinish sets the callback function.
+func (x *OutputStreamClass) SetCallbackWriteFinish(cb func(*OutputStream, AsyncResult) int) {
+	if cb == nil {
+		x.xWriteFinish = 0
+	} else {
+		x.xWriteFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) int {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackWriteFinish gets the callback function.
+func (x *OutputStreamClass) GetCallbackWriteFinish() func(*OutputStream, AsyncResult) int {
+	if x.xWriteFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xWriteFinish)
+	return func(StreamVar *OutputStream, ResultVar AsyncResult) int {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackSpliceAsync sets the callback function.
+func (x *OutputStreamClass) SetCallbackSpliceAsync(cb func(*OutputStream, *InputStream, OutputStreamSpliceFlags, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xSpliceAsync = 0
+	} else {
+		x.xSpliceAsync = purego.NewCallback(func(StreamVarp uintptr, SourceVarp uintptr, FlagsVarp OutputStreamSpliceFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(OutputStreamNewFromInternalPtr(StreamVarp), InputStreamNewFromInternalPtr(SourceVarp), FlagsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackSpliceAsync gets the callback function.
+func (x *OutputStreamClass) GetCallbackSpliceAsync() func(*OutputStream, *InputStream, OutputStreamSpliceFlags, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xSpliceAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, SourceVarp uintptr, FlagsVarp OutputStreamSpliceFlags, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSpliceAsync)
+	return func(StreamVar *OutputStream, SourceVar *InputStream, FlagsVar OutputStreamSpliceFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), SourceVar.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackSpliceFinish sets the callback function.
+func (x *OutputStreamClass) SetCallbackSpliceFinish(cb func(*OutputStream, AsyncResult) int) {
+	if cb == nil {
+		x.xSpliceFinish = 0
+	} else {
+		x.xSpliceFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) int {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackSpliceFinish gets the callback function.
+func (x *OutputStreamClass) GetCallbackSpliceFinish() func(*OutputStream, AsyncResult) int {
+	if x.xSpliceFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xSpliceFinish)
+	return func(StreamVar *OutputStream, ResultVar AsyncResult) int {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackFlushAsync sets the callback function.
+func (x *OutputStreamClass) SetCallbackFlushAsync(cb func(*OutputStream, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xFlushAsync = 0
+	} else {
+		x.xFlushAsync = purego.NewCallback(func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(OutputStreamNewFromInternalPtr(StreamVarp), IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackFlushAsync gets the callback function.
+func (x *OutputStreamClass) GetCallbackFlushAsync() func(*OutputStream, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xFlushAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFlushAsync)
+	return func(StreamVar *OutputStream, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackFlushFinish sets the callback function.
+func (x *OutputStreamClass) SetCallbackFlushFinish(cb func(*OutputStream, AsyncResult) bool) {
+	if cb == nil {
+		x.xFlushFinish = 0
+	} else {
+		x.xFlushFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) bool {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackFlushFinish gets the callback function.
+func (x *OutputStreamClass) GetCallbackFlushFinish() func(*OutputStream, AsyncResult) bool {
+	if x.xFlushFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xFlushFinish)
+	return func(StreamVar *OutputStream, ResultVar AsyncResult) bool {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackCloseAsync sets the callback function.
+func (x *OutputStreamClass) SetCallbackCloseAsync(cb func(*OutputStream, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xCloseAsync = 0
+	} else {
+		x.xCloseAsync = purego.NewCallback(func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(OutputStreamNewFromInternalPtr(StreamVarp), IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackCloseAsync gets the callback function.
+func (x *OutputStreamClass) GetCallbackCloseAsync() func(*OutputStream, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xCloseAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCloseAsync)
+	return func(StreamVar *OutputStream, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackCloseFinish sets the callback function.
+func (x *OutputStreamClass) SetCallbackCloseFinish(cb func(*OutputStream, AsyncResult) bool) {
+	if cb == nil {
+		x.xCloseFinish = 0
+	} else {
+		x.xCloseFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr) bool {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackCloseFinish gets the callback function.
+func (x *OutputStreamClass) GetCallbackCloseFinish() func(*OutputStream, AsyncResult) bool {
+	if x.xCloseFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseFinish)
+	return func(StreamVar *OutputStream, ResultVar AsyncResult) bool {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackWritevFn sets the callback function.
+func (x *OutputStreamClass) SetCallbackWritevFn(cb func(*OutputStream, []OutputVector, uint, uint, *Cancellable) bool) {
+	if cb == nil {
+		x.xWritevFn = 0
+	} else {
+		x.xWritevFn = purego.NewCallback(func(StreamVarp uintptr, VectorsVarp []OutputVector, NVectorsVarp uint, BytesWrittenVarp uint, CancellableVarp uintptr) bool {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), VectorsVarp, NVectorsVarp, BytesWrittenVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackWritevFn gets the callback function.
+func (x *OutputStreamClass) GetCallbackWritevFn() func(*OutputStream, []OutputVector, uint, uint, *Cancellable) bool {
+	if x.xWritevFn == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, VectorsVarp []OutputVector, NVectorsVarp uint, BytesWrittenVarp uint, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xWritevFn)
+	return func(StreamVar *OutputStream, VectorsVar []OutputVector, NVectorsVar uint, BytesWrittenVar uint, CancellableVar *Cancellable) bool {
+		return rawCallback(StreamVar.GoPointer(), VectorsVar, NVectorsVar, BytesWrittenVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackWritevAsync sets the callback function.
+func (x *OutputStreamClass) SetCallbackWritevAsync(cb func(*OutputStream, []OutputVector, uint, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xWritevAsync = 0
+	} else {
+		x.xWritevAsync = purego.NewCallback(func(StreamVarp uintptr, VectorsVarp []OutputVector, NVectorsVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(OutputStreamNewFromInternalPtr(StreamVarp), VectorsVarp, NVectorsVarp, IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackWritevAsync gets the callback function.
+func (x *OutputStreamClass) GetCallbackWritevAsync() func(*OutputStream, []OutputVector, uint, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xWritevAsync == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, VectorsVarp []OutputVector, NVectorsVarp uint, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xWritevAsync)
+	return func(StreamVar *OutputStream, VectorsVar []OutputVector, NVectorsVar uint, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(StreamVar.GoPointer(), VectorsVar, NVectorsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackWritevFinish sets the callback function.
+func (x *OutputStreamClass) SetCallbackWritevFinish(cb func(*OutputStream, AsyncResult, uint) bool) {
+	if cb == nil {
+		x.xWritevFinish = 0
+	} else {
+		x.xWritevFinish = purego.NewCallback(func(StreamVarp uintptr, ResultVarp uintptr, BytesWrittenVarp uint) bool {
+			return cb(OutputStreamNewFromInternalPtr(StreamVarp), &AsyncResultBase{Ptr: ResultVarp}, BytesWrittenVarp)
+		})
+	}
+}
+
+// GetCallbackWritevFinish gets the callback function.
+func (x *OutputStreamClass) GetCallbackWritevFinish() func(*OutputStream, AsyncResult, uint) bool {
+	if x.xWritevFinish == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, ResultVarp uintptr, BytesWrittenVarp uint) bool
+	purego.RegisterFunc(&rawCallback, x.xWritevFinish)
+	return func(StreamVar *OutputStream, ResultVar AsyncResult, BytesWrittenVar uint) bool {
+		return rawCallback(StreamVar.GoPointer(), ResultVar.GoPointer(), BytesWrittenVar)
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *OutputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *OutputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *OutputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *OutputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *OutputStreamClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *OutputStreamClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved7 sets the callback function.
+func (x *OutputStreamClass) SetCallbackGReserved7(cb func()) {
+	if cb == nil {
+		x.xGReserved7 = 0
+	} else {
+		x.xGReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved7 gets the callback function.
+func (x *OutputStreamClass) GetCallbackGReserved7() func() {
+	if x.xGReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved8 sets the callback function.
+func (x *OutputStreamClass) SetCallbackGReserved8(cb func()) {
+	if cb == nil {
+		x.xGReserved8 = 0
+	} else {
+		x.xGReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved8 gets the callback function.
+func (x *OutputStreamClass) GetCallbackGReserved8() func() {
+	if x.xGReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved8)
+	return func() {
+		rawCallback()
+	}
 }
 
 type OutputStreamPrivate struct {
diff --git a/v4/gio/gpermission.go b/v4/gio/gpermission.go
index 07111fb403e03e51e67c21edd399ad938c15d62a..c2eea6ca1379997b794fca3ad09ee4a6ccf6a8cd 100644
--- a/v4/gio/gpermission.go
+++ b/v4/gio/gpermission.go
@@ -17,23 +17,161 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Acquire uintptr
+	xAcquire uintptr
 
-	AcquireAsync uintptr
+	xAcquireAsync uintptr
 
-	AcquireFinish uintptr
+	xAcquireFinish uintptr
 
-	Release uintptr
+	xRelease uintptr
 
-	ReleaseAsync uintptr
+	xReleaseAsync uintptr
 
-	ReleaseFinish uintptr
+	xReleaseFinish uintptr
 
 	Reserved [16]uintptr
 }
 
 func (x *PermissionClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAcquire sets the callback function.
+func (x *PermissionClass) SetCallbackAcquire(cb func(*Permission, *Cancellable) bool) {
+	if cb == nil {
+		x.xAcquire = 0
+	} else {
+		x.xAcquire = purego.NewCallback(func(PermissionVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(PermissionNewFromInternalPtr(PermissionVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackAcquire gets the callback function.
+func (x *PermissionClass) GetCallbackAcquire() func(*Permission, *Cancellable) bool {
+	if x.xAcquire == 0 {
+		return nil
+	}
+	var rawCallback func(PermissionVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xAcquire)
+	return func(PermissionVar *Permission, CancellableVar *Cancellable) bool {
+		return rawCallback(PermissionVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackAcquireAsync sets the callback function.
+func (x *PermissionClass) SetCallbackAcquireAsync(cb func(*Permission, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xAcquireAsync = 0
+	} else {
+		x.xAcquireAsync = purego.NewCallback(func(PermissionVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(PermissionNewFromInternalPtr(PermissionVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackAcquireAsync gets the callback function.
+func (x *PermissionClass) GetCallbackAcquireAsync() func(*Permission, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xAcquireAsync == 0 {
+		return nil
+	}
+	var rawCallback func(PermissionVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAcquireAsync)
+	return func(PermissionVar *Permission, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(PermissionVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackAcquireFinish sets the callback function.
+func (x *PermissionClass) SetCallbackAcquireFinish(cb func(*Permission, AsyncResult) bool) {
+	if cb == nil {
+		x.xAcquireFinish = 0
+	} else {
+		x.xAcquireFinish = purego.NewCallback(func(PermissionVarp uintptr, ResultVarp uintptr) bool {
+			return cb(PermissionNewFromInternalPtr(PermissionVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackAcquireFinish gets the callback function.
+func (x *PermissionClass) GetCallbackAcquireFinish() func(*Permission, AsyncResult) bool {
+	if x.xAcquireFinish == 0 {
+		return nil
+	}
+	var rawCallback func(PermissionVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xAcquireFinish)
+	return func(PermissionVar *Permission, ResultVar AsyncResult) bool {
+		return rawCallback(PermissionVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackRelease sets the callback function.
+func (x *PermissionClass) SetCallbackRelease(cb func(*Permission, *Cancellable) bool) {
+	if cb == nil {
+		x.xRelease = 0
+	} else {
+		x.xRelease = purego.NewCallback(func(PermissionVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(PermissionNewFromInternalPtr(PermissionVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackRelease gets the callback function.
+func (x *PermissionClass) GetCallbackRelease() func(*Permission, *Cancellable) bool {
+	if x.xRelease == 0 {
+		return nil
+	}
+	var rawCallback func(PermissionVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xRelease)
+	return func(PermissionVar *Permission, CancellableVar *Cancellable) bool {
+		return rawCallback(PermissionVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackReleaseAsync sets the callback function.
+func (x *PermissionClass) SetCallbackReleaseAsync(cb func(*Permission, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xReleaseAsync = 0
+	} else {
+		x.xReleaseAsync = purego.NewCallback(func(PermissionVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(PermissionNewFromInternalPtr(PermissionVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackReleaseAsync gets the callback function.
+func (x *PermissionClass) GetCallbackReleaseAsync() func(*Permission, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xReleaseAsync == 0 {
+		return nil
+	}
+	var rawCallback func(PermissionVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReleaseAsync)
+	return func(PermissionVar *Permission, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(PermissionVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackReleaseFinish sets the callback function.
+func (x *PermissionClass) SetCallbackReleaseFinish(cb func(*Permission, AsyncResult) bool) {
+	if cb == nil {
+		x.xReleaseFinish = 0
+	} else {
+		x.xReleaseFinish = purego.NewCallback(func(PermissionVarp uintptr, ResultVarp uintptr) bool {
+			return cb(PermissionNewFromInternalPtr(PermissionVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackReleaseFinish gets the callback function.
+func (x *PermissionClass) GetCallbackReleaseFinish() func(*Permission, AsyncResult) bool {
+	if x.xReleaseFinish == 0 {
+		return nil
+	}
+	var rawCallback func(PermissionVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xReleaseFinish)
+	return func(PermissionVar *Permission, ResultVar AsyncResult) bool {
+		return rawCallback(PermissionVar.GoPointer(), ResultVar.GoPointer())
+	}
 }
 
 type PermissionPrivate struct {
diff --git a/v4/gio/gpollableinputstream.go b/v4/gio/gpollableinputstream.go
index c3a2aaa55a8159217cdfcb1a3fbd5dc71bae0c3d..12b95e0f4f0c23fa8092a94430f6241ef0cb5034 100644
--- a/v4/gio/gpollableinputstream.go
+++ b/v4/gio/gpollableinputstream.go
@@ -26,19 +26,111 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	CanPoll uintptr
+	xCanPoll uintptr
 
-	IsReadable uintptr
+	xIsReadable uintptr
 
-	CreateSource uintptr
+	xCreateSource uintptr
 
-	ReadNonblocking uintptr
+	xReadNonblocking uintptr
 }
 
 func (x *PollableInputStreamInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackCanPoll sets the callback function.
+func (x *PollableInputStreamInterface) SetCallbackCanPoll(cb func(PollableInputStream) bool) {
+	if cb == nil {
+		x.xCanPoll = 0
+	} else {
+		x.xCanPoll = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(&PollableInputStreamBase{Ptr: StreamVarp})
+		})
+	}
+}
+
+// GetCallbackCanPoll gets the callback function.
+func (x *PollableInputStreamInterface) GetCallbackCanPoll() func(PollableInputStream) bool {
+	if x.xCanPoll == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanPoll)
+	return func(StreamVar PollableInputStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackIsReadable sets the callback function.
+func (x *PollableInputStreamInterface) SetCallbackIsReadable(cb func(PollableInputStream) bool) {
+	if cb == nil {
+		x.xIsReadable = 0
+	} else {
+		x.xIsReadable = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(&PollableInputStreamBase{Ptr: StreamVarp})
+		})
+	}
+}
+
+// GetCallbackIsReadable gets the callback function.
+func (x *PollableInputStreamInterface) GetCallbackIsReadable() func(PollableInputStream) bool {
+	if x.xIsReadable == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsReadable)
+	return func(StreamVar PollableInputStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackCreateSource sets the callback function.
+func (x *PollableInputStreamInterface) SetCallbackCreateSource(cb func(PollableInputStream, *Cancellable) *glib.Source) {
+	if cb == nil {
+		x.xCreateSource = 0
+	} else {
+		x.xCreateSource = purego.NewCallback(func(StreamVarp uintptr, CancellableVarp uintptr) *glib.Source {
+			return cb(&PollableInputStreamBase{Ptr: StreamVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCreateSource gets the callback function.
+func (x *PollableInputStreamInterface) GetCallbackCreateSource() func(PollableInputStream, *Cancellable) *glib.Source {
+	if x.xCreateSource == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CancellableVarp uintptr) *glib.Source
+	purego.RegisterFunc(&rawCallback, x.xCreateSource)
+	return func(StreamVar PollableInputStream, CancellableVar *Cancellable) *glib.Source {
+		return rawCallback(StreamVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackReadNonblocking sets the callback function.
+func (x *PollableInputStreamInterface) SetCallbackReadNonblocking(cb func(PollableInputStream, []byte, uint) int) {
+	if cb == nil {
+		x.xReadNonblocking = 0
+	} else {
+		x.xReadNonblocking = purego.NewCallback(func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint) int {
+			return cb(&PollableInputStreamBase{Ptr: StreamVarp}, BufferVarp, CountVarp)
+		})
+	}
+}
+
+// GetCallbackReadNonblocking gets the callback function.
+func (x *PollableInputStreamInterface) GetCallbackReadNonblocking() func(PollableInputStream, []byte, uint) int {
+	if x.xReadNonblocking == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint) int
+	purego.RegisterFunc(&rawCallback, x.xReadNonblocking)
+	return func(StreamVar PollableInputStream, BufferVar []byte, CountVar uint) int {
+		return rawCallback(StreamVar.GoPointer(), BufferVar, CountVar)
+	}
+}
+
 // #GPollableInputStream is implemented by #GInputStreams that
 // can be polled for readiness to read. This can be used when
 // interfacing with a non-GIO API that expects
@@ -49,7 +141,7 @@ 	SetGoPointer(uintptr)
 	CanPoll() bool
 	CreateSource(CancellableVar *Cancellable) *glib.Source
 	IsReadable() bool
-	ReadNonblocking(BufferVar []byte, CountVar uint, CancellableVar *Cancellable) int
+	ReadNonblocking(BufferVar []byte, CountVar uint, CancellableVar *Cancellable) (int, error)
 }
 
 var xPollableInputStreamGLibType func() types.GType
diff --git a/v4/gio/gpollableoutputstream.go b/v4/gio/gpollableoutputstream.go
index 619c23d75ded2992d67c7d2d5d1829e725fa8fb9..5389b8e463f87957181f9594135b04af97223f3c 100644
--- a/v4/gio/gpollableoutputstream.go
+++ b/v4/gio/gpollableoutputstream.go
@@ -32,21 +32,136 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	CanPoll uintptr
+	xCanPoll uintptr
 
-	IsWritable uintptr
+	xIsWritable uintptr
 
-	CreateSource uintptr
+	xCreateSource uintptr
 
-	WriteNonblocking uintptr
+	xWriteNonblocking uintptr
 
-	WritevNonblocking uintptr
+	xWritevNonblocking uintptr
 }
 
 func (x *PollableOutputStreamInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackCanPoll sets the callback function.
+func (x *PollableOutputStreamInterface) SetCallbackCanPoll(cb func(PollableOutputStream) bool) {
+	if cb == nil {
+		x.xCanPoll = 0
+	} else {
+		x.xCanPoll = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(&PollableOutputStreamBase{Ptr: StreamVarp})
+		})
+	}
+}
+
+// GetCallbackCanPoll gets the callback function.
+func (x *PollableOutputStreamInterface) GetCallbackCanPoll() func(PollableOutputStream) bool {
+	if x.xCanPoll == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanPoll)
+	return func(StreamVar PollableOutputStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackIsWritable sets the callback function.
+func (x *PollableOutputStreamInterface) SetCallbackIsWritable(cb func(PollableOutputStream) bool) {
+	if cb == nil {
+		x.xIsWritable = 0
+	} else {
+		x.xIsWritable = purego.NewCallback(func(StreamVarp uintptr) bool {
+			return cb(&PollableOutputStreamBase{Ptr: StreamVarp})
+		})
+	}
+}
+
+// GetCallbackIsWritable gets the callback function.
+func (x *PollableOutputStreamInterface) GetCallbackIsWritable() func(PollableOutputStream) bool {
+	if x.xIsWritable == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsWritable)
+	return func(StreamVar PollableOutputStream) bool {
+		return rawCallback(StreamVar.GoPointer())
+	}
+}
+
+// SetCallbackCreateSource sets the callback function.
+func (x *PollableOutputStreamInterface) SetCallbackCreateSource(cb func(PollableOutputStream, *Cancellable) *glib.Source) {
+	if cb == nil {
+		x.xCreateSource = 0
+	} else {
+		x.xCreateSource = purego.NewCallback(func(StreamVarp uintptr, CancellableVarp uintptr) *glib.Source {
+			return cb(&PollableOutputStreamBase{Ptr: StreamVarp}, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackCreateSource gets the callback function.
+func (x *PollableOutputStreamInterface) GetCallbackCreateSource() func(PollableOutputStream, *Cancellable) *glib.Source {
+	if x.xCreateSource == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, CancellableVarp uintptr) *glib.Source
+	purego.RegisterFunc(&rawCallback, x.xCreateSource)
+	return func(StreamVar PollableOutputStream, CancellableVar *Cancellable) *glib.Source {
+		return rawCallback(StreamVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackWriteNonblocking sets the callback function.
+func (x *PollableOutputStreamInterface) SetCallbackWriteNonblocking(cb func(PollableOutputStream, []byte, uint) int) {
+	if cb == nil {
+		x.xWriteNonblocking = 0
+	} else {
+		x.xWriteNonblocking = purego.NewCallback(func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint) int {
+			return cb(&PollableOutputStreamBase{Ptr: StreamVarp}, BufferVarp, CountVarp)
+		})
+	}
+}
+
+// GetCallbackWriteNonblocking gets the callback function.
+func (x *PollableOutputStreamInterface) GetCallbackWriteNonblocking() func(PollableOutputStream, []byte, uint) int {
+	if x.xWriteNonblocking == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, BufferVarp []byte, CountVarp uint) int
+	purego.RegisterFunc(&rawCallback, x.xWriteNonblocking)
+	return func(StreamVar PollableOutputStream, BufferVar []byte, CountVar uint) int {
+		return rawCallback(StreamVar.GoPointer(), BufferVar, CountVar)
+	}
+}
+
+// SetCallbackWritevNonblocking sets the callback function.
+func (x *PollableOutputStreamInterface) SetCallbackWritevNonblocking(cb func(PollableOutputStream, []OutputVector, uint, uint) PollableReturn) {
+	if cb == nil {
+		x.xWritevNonblocking = 0
+	} else {
+		x.xWritevNonblocking = purego.NewCallback(func(StreamVarp uintptr, VectorsVarp []OutputVector, NVectorsVarp uint, BytesWrittenVarp uint) PollableReturn {
+			return cb(&PollableOutputStreamBase{Ptr: StreamVarp}, VectorsVarp, NVectorsVarp, BytesWrittenVarp)
+		})
+	}
+}
+
+// GetCallbackWritevNonblocking gets the callback function.
+func (x *PollableOutputStreamInterface) GetCallbackWritevNonblocking() func(PollableOutputStream, []OutputVector, uint, uint) PollableReturn {
+	if x.xWritevNonblocking == 0 {
+		return nil
+	}
+	var rawCallback func(StreamVarp uintptr, VectorsVarp []OutputVector, NVectorsVarp uint, BytesWrittenVarp uint) PollableReturn
+	purego.RegisterFunc(&rawCallback, x.xWritevNonblocking)
+	return func(StreamVar PollableOutputStream, VectorsVar []OutputVector, NVectorsVar uint, BytesWrittenVar uint) PollableReturn {
+		return rawCallback(StreamVar.GoPointer(), VectorsVar, NVectorsVar, BytesWrittenVar)
+	}
+}
+
 // #GPollableOutputStream is implemented by #GOutputStreams that
 // can be polled for readiness to write. This can be used when
 // interfacing with a non-GIO API that expects
@@ -57,8 +172,8 @@ 	SetGoPointer(uintptr)
 	CanPoll() bool
 	CreateSource(CancellableVar *Cancellable) *glib.Source
 	IsWritable() bool
-	WriteNonblocking(BufferVar []byte, CountVar uint, CancellableVar *Cancellable) int
-	WritevNonblocking(VectorsVar []OutputVector, NVectorsVar uint, BytesWrittenVar uint, CancellableVar *Cancellable) PollableReturn
+	WriteNonblocking(BufferVar []byte, CountVar uint, CancellableVar *Cancellable) (int, error)
+	WritevNonblocking(VectorsVar []OutputVector, NVectorsVar uint, BytesWrittenVar uint, CancellableVar *Cancellable) (PollableReturn, error)
 }
 
 var xPollableOutputStreamGLibType func() types.GType
diff --git a/v4/gio/gproxy.go b/v4/gio/gproxy.go
index 28e21fe1040c7d147ef02101bc52c6e16a46ecea..089d3f429efe47aac3f610352274d18234c5e330 100644
--- a/v4/gio/gproxy.go
+++ b/v4/gio/gproxy.go
@@ -17,19 +17,131 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Connect uintptr
+	xConnect uintptr
 
-	ConnectAsync uintptr
+	xConnectAsync uintptr
 
-	ConnectFinish uintptr
+	xConnectFinish uintptr
 
-	SupportsHostname uintptr
+	xSupportsHostname uintptr
 }
 
 func (x *ProxyInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackConnect sets the callback function.
+func (x *ProxyInterface) SetCallbackConnect(cb func(Proxy, *IOStream, *ProxyAddress, *Cancellable) *IOStream) {
+	if cb == nil {
+		x.xConnect = 0
+	} else {
+		x.xConnect = purego.NewCallback(func(ProxyVarp uintptr, ConnectionVarp uintptr, ProxyAddressVarp uintptr, CancellableVarp uintptr) uintptr {
+			ret := cb(&ProxyBase{Ptr: ProxyVarp}, IOStreamNewFromInternalPtr(ConnectionVarp), ProxyAddressNewFromInternalPtr(ProxyAddressVarp), CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackConnect gets the callback function.
+func (x *ProxyInterface) GetCallbackConnect() func(Proxy, *IOStream, *ProxyAddress, *Cancellable) *IOStream {
+	if x.xConnect == 0 {
+		return nil
+	}
+	var rawCallback func(ProxyVarp uintptr, ConnectionVarp uintptr, ProxyAddressVarp uintptr, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xConnect)
+	return func(ProxyVar Proxy, ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable) *IOStream {
+		rawRet := rawCallback(ProxyVar.GoPointer(), ConnectionVar.GoPointer(), ProxyAddressVar.GoPointer(), CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackConnectAsync sets the callback function.
+func (x *ProxyInterface) SetCallbackConnectAsync(cb func(Proxy, *IOStream, *ProxyAddress, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xConnectAsync = 0
+	} else {
+		x.xConnectAsync = purego.NewCallback(func(ProxyVarp uintptr, ConnectionVarp uintptr, ProxyAddressVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&ProxyBase{Ptr: ProxyVarp}, IOStreamNewFromInternalPtr(ConnectionVarp), ProxyAddressNewFromInternalPtr(ProxyAddressVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackConnectAsync gets the callback function.
+func (x *ProxyInterface) GetCallbackConnectAsync() func(Proxy, *IOStream, *ProxyAddress, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xConnectAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ProxyVarp uintptr, ConnectionVarp uintptr, ProxyAddressVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xConnectAsync)
+	return func(ProxyVar Proxy, ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ProxyVar.GoPointer(), ConnectionVar.GoPointer(), ProxyAddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackConnectFinish sets the callback function.
+func (x *ProxyInterface) SetCallbackConnectFinish(cb func(Proxy, AsyncResult) *IOStream) {
+	if cb == nil {
+		x.xConnectFinish = 0
+	} else {
+		x.xConnectFinish = purego.NewCallback(func(ProxyVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(&ProxyBase{Ptr: ProxyVarp}, &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackConnectFinish gets the callback function.
+func (x *ProxyInterface) GetCallbackConnectFinish() func(Proxy, AsyncResult) *IOStream {
+	if x.xConnectFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ProxyVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xConnectFinish)
+	return func(ProxyVar Proxy, ResultVar AsyncResult) *IOStream {
+		rawRet := rawCallback(ProxyVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IOStream{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSupportsHostname sets the callback function.
+func (x *ProxyInterface) SetCallbackSupportsHostname(cb func(Proxy) bool) {
+	if cb == nil {
+		x.xSupportsHostname = 0
+	} else {
+		x.xSupportsHostname = purego.NewCallback(func(ProxyVarp uintptr) bool {
+			return cb(&ProxyBase{Ptr: ProxyVarp})
+		})
+	}
+}
+
+// GetCallbackSupportsHostname gets the callback function.
+func (x *ProxyInterface) GetCallbackSupportsHostname() func(Proxy) bool {
+	if x.xSupportsHostname == 0 {
+		return nil
+	}
+	var rawCallback func(ProxyVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSupportsHostname)
+	return func(ProxyVar Proxy) bool {
+		return rawCallback(ProxyVar.GoPointer())
+	}
+}
+
 // A #GProxy handles connecting to a remote host via a given type of
 // proxy server. It is implemented by the 'gio-proxy' extension point.
 // The extensions are named after their proxy protocol name. As an
@@ -39,9 +151,9 @@ // g_io_extension_point_get_extension_by_name().
 type Proxy interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
-	Connect(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable) *IOStream
+	Connect(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable) (*IOStream, error)
 	ConnectAsync(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	ConnectFinish(ResultVar AsyncResult) *IOStream
+	ConnectFinish(ResultVar AsyncResult) (*IOStream, error)
 	SupportsHostname() bool
 }
 
diff --git a/v4/gio/gproxyaddressenumerator.go b/v4/gio/gproxyaddressenumerator.go
index 04ec56ff31cdebb02ce69cdb8f2686889e0ef6a9..ac9971c3d200e18d96bdec37e7fb8482f709fa11 100644
--- a/v4/gio/gproxyaddressenumerator.go
+++ b/v4/gio/gproxyaddressenumerator.go
@@ -5,6 +5,7 @@ import (
 	"structs"
 	"unsafe"
 
+	"github.com/jwijenbergh/purego"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -14,23 +15,184 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 
-	GReserved7 uintptr
+	xGReserved7 uintptr
 }
 
 func (x *ProxyAddressEnumeratorClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *ProxyAddressEnumeratorClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *ProxyAddressEnumeratorClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *ProxyAddressEnumeratorClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *ProxyAddressEnumeratorClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *ProxyAddressEnumeratorClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *ProxyAddressEnumeratorClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *ProxyAddressEnumeratorClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *ProxyAddressEnumeratorClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *ProxyAddressEnumeratorClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *ProxyAddressEnumeratorClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *ProxyAddressEnumeratorClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *ProxyAddressEnumeratorClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved7 sets the callback function.
+func (x *ProxyAddressEnumeratorClass) SetCallbackGReserved7(cb func()) {
+	if cb == nil {
+		x.xGReserved7 = 0
+	} else {
+		x.xGReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved7 gets the callback function.
+func (x *ProxyAddressEnumeratorClass) GetCallbackGReserved7() func() {
+	if x.xGReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved7)
+	return func() {
+		rawCallback()
+	}
 }
 
 type ProxyAddressEnumeratorPrivate struct {
diff --git a/v4/gio/gproxyresolver.go b/v4/gio/gproxyresolver.go
index d59476237017c88ddce2bfcc074f26fcba1d185c..9079d0dd70021e1cd08b5e879bb0ed71494637cd 100644
--- a/v4/gio/gproxyresolver.go
+++ b/v4/gio/gproxyresolver.go
@@ -18,19 +18,111 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	IsSupported uintptr
+	xIsSupported uintptr
 
-	Lookup uintptr
+	xLookup uintptr
 
-	LookupAsync uintptr
+	xLookupAsync uintptr
 
-	LookupFinish uintptr
+	xLookupFinish uintptr
 }
 
 func (x *ProxyResolverInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackIsSupported sets the callback function.
+func (x *ProxyResolverInterface) SetCallbackIsSupported(cb func(ProxyResolver) bool) {
+	if cb == nil {
+		x.xIsSupported = 0
+	} else {
+		x.xIsSupported = purego.NewCallback(func(ResolverVarp uintptr) bool {
+			return cb(&ProxyResolverBase{Ptr: ResolverVarp})
+		})
+	}
+}
+
+// GetCallbackIsSupported gets the callback function.
+func (x *ProxyResolverInterface) GetCallbackIsSupported() func(ProxyResolver) bool {
+	if x.xIsSupported == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsSupported)
+	return func(ResolverVar ProxyResolver) bool {
+		return rawCallback(ResolverVar.GoPointer())
+	}
+}
+
+// SetCallbackLookup sets the callback function.
+func (x *ProxyResolverInterface) SetCallbackLookup(cb func(ProxyResolver, string, *Cancellable) []string) {
+	if cb == nil {
+		x.xLookup = 0
+	} else {
+		x.xLookup = purego.NewCallback(func(ResolverVarp uintptr, UriVarp string, CancellableVarp uintptr) []string {
+			return cb(&ProxyResolverBase{Ptr: ResolverVarp}, UriVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLookup gets the callback function.
+func (x *ProxyResolverInterface) GetCallbackLookup() func(ProxyResolver, string, *Cancellable) []string {
+	if x.xLookup == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, UriVarp string, CancellableVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xLookup)
+	return func(ResolverVar ProxyResolver, UriVar string, CancellableVar *Cancellable) []string {
+		return rawCallback(ResolverVar.GoPointer(), UriVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupAsync sets the callback function.
+func (x *ProxyResolverInterface) SetCallbackLookupAsync(cb func(ProxyResolver, string, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupAsync = 0
+	} else {
+		x.xLookupAsync = purego.NewCallback(func(ResolverVarp uintptr, UriVarp string, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&ProxyResolverBase{Ptr: ResolverVarp}, UriVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupAsync gets the callback function.
+func (x *ProxyResolverInterface) GetCallbackLookupAsync() func(ProxyResolver, string, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, UriVarp string, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupAsync)
+	return func(ResolverVar ProxyResolver, UriVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ResolverVar.GoPointer(), UriVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupFinish sets the callback function.
+func (x *ProxyResolverInterface) SetCallbackLookupFinish(cb func(ProxyResolver, AsyncResult) []string) {
+	if cb == nil {
+		x.xLookupFinish = 0
+	} else {
+		x.xLookupFinish = purego.NewCallback(func(ResolverVarp uintptr, ResultVarp uintptr) []string {
+			return cb(&ProxyResolverBase{Ptr: ResolverVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLookupFinish gets the callback function.
+func (x *ProxyResolverInterface) GetCallbackLookupFinish() func(ProxyResolver, AsyncResult) []string {
+	if x.xLookupFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, ResultVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xLookupFinish)
+	return func(ResolverVar ProxyResolver, ResultVar AsyncResult) []string {
+		return rawCallback(ResolverVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
 // #GProxyResolver provides synchronous and asynchronous network proxy
 // resolution. #GProxyResolver is used within #GSocketClient through
 // the method g_socket_connectable_proxy_enumerate().
@@ -42,9 +134,9 @@ type ProxyResolver interface {
 	GoPointer() uintptr
 	SetGoPointer(uintptr)
 	IsSupported() bool
-	Lookup(UriVar string, CancellableVar *Cancellable) []string
+	Lookup(UriVar string, CancellableVar *Cancellable) ([]string, error)
 	LookupAsync(UriVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	LookupFinish(ResultVar AsyncResult) []string
+	LookupFinish(ResultVar AsyncResult) ([]string, error)
 }
 
 var xProxyResolverGLibType func() types.GType
diff --git a/v4/gio/gremoteactiongroup.go b/v4/gio/gremoteactiongroup.go
index fe3cfea5022864b12d5a6d4088e21c5f23c192b7..d06292f60341de3e709979b2ac2a2df40ab2b838 100644
--- a/v4/gio/gremoteactiongroup.go
+++ b/v4/gio/gremoteactiongroup.go
@@ -17,13 +17,59 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	ActivateActionFull uintptr
+	xActivateActionFull uintptr
 
-	ChangeActionStateFull uintptr
+	xChangeActionStateFull uintptr
 }
 
 func (x *RemoteActionGroupInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackActivateActionFull sets the callback function.
+func (x *RemoteActionGroupInterface) SetCallbackActivateActionFull(cb func(RemoteActionGroup, string, *glib.Variant, *glib.Variant)) {
+	if cb == nil {
+		x.xActivateActionFull = 0
+	} else {
+		x.xActivateActionFull = purego.NewCallback(func(RemoteVarp uintptr, ActionNameVarp string, ParameterVarp *glib.Variant, PlatformDataVarp *glib.Variant) {
+			cb(&RemoteActionGroupBase{Ptr: RemoteVarp}, ActionNameVarp, ParameterVarp, PlatformDataVarp)
+		})
+	}
+}
+
+// GetCallbackActivateActionFull gets the callback function.
+func (x *RemoteActionGroupInterface) GetCallbackActivateActionFull() func(RemoteActionGroup, string, *glib.Variant, *glib.Variant) {
+	if x.xActivateActionFull == 0 {
+		return nil
+	}
+	var rawCallback func(RemoteVarp uintptr, ActionNameVarp string, ParameterVarp *glib.Variant, PlatformDataVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xActivateActionFull)
+	return func(RemoteVar RemoteActionGroup, ActionNameVar string, ParameterVar *glib.Variant, PlatformDataVar *glib.Variant) {
+		rawCallback(RemoteVar.GoPointer(), ActionNameVar, ParameterVar, PlatformDataVar)
+	}
+}
+
+// SetCallbackChangeActionStateFull sets the callback function.
+func (x *RemoteActionGroupInterface) SetCallbackChangeActionStateFull(cb func(RemoteActionGroup, string, *glib.Variant, *glib.Variant)) {
+	if cb == nil {
+		x.xChangeActionStateFull = 0
+	} else {
+		x.xChangeActionStateFull = purego.NewCallback(func(RemoteVarp uintptr, ActionNameVarp string, ValueVarp *glib.Variant, PlatformDataVarp *glib.Variant) {
+			cb(&RemoteActionGroupBase{Ptr: RemoteVarp}, ActionNameVarp, ValueVarp, PlatformDataVarp)
+		})
+	}
+}
+
+// GetCallbackChangeActionStateFull gets the callback function.
+func (x *RemoteActionGroupInterface) GetCallbackChangeActionStateFull() func(RemoteActionGroup, string, *glib.Variant, *glib.Variant) {
+	if x.xChangeActionStateFull == 0 {
+		return nil
+	}
+	var rawCallback func(RemoteVarp uintptr, ActionNameVarp string, ValueVarp *glib.Variant, PlatformDataVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xChangeActionStateFull)
+	return func(RemoteVar RemoteActionGroup, ActionNameVar string, ValueVar *glib.Variant, PlatformDataVar *glib.Variant) {
+		rawCallback(RemoteVar.GoPointer(), ActionNameVar, ValueVar, PlatformDataVar)
+	}
 }
 
 // The GRemoteActionGroup interface is implemented by #GActionGroup
diff --git a/v4/gio/gresolver.go b/v4/gio/gresolver.go
index b0ab7b98eaf3dd13f735d8eaf1d1c2f4f271116a..cf5226f839b189acd28da103047f4d4196052d57 100644
--- a/v4/gio/gresolver.go
+++ b/v4/gio/gresolver.go
@@ -17,41 +17,409 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Reload uintptr
+	xReload uintptr
 
-	LookupByName uintptr
+	xLookupByName uintptr
 
-	LookupByNameAsync uintptr
+	xLookupByNameAsync uintptr
 
-	LookupByNameFinish uintptr
+	xLookupByNameFinish uintptr
 
-	LookupByAddress uintptr
+	xLookupByAddress uintptr
 
-	LookupByAddressAsync uintptr
+	xLookupByAddressAsync uintptr
 
-	LookupByAddressFinish uintptr
+	xLookupByAddressFinish uintptr
 
-	LookupService uintptr
+	xLookupService uintptr
 
-	LookupServiceAsync uintptr
+	xLookupServiceAsync uintptr
 
-	LookupServiceFinish uintptr
+	xLookupServiceFinish uintptr
 
-	LookupRecords uintptr
+	xLookupRecords uintptr
 
-	LookupRecordsAsync uintptr
+	xLookupRecordsAsync uintptr
 
-	LookupRecordsFinish uintptr
+	xLookupRecordsFinish uintptr
 
-	LookupByNameWithFlagsAsync uintptr
+	xLookupByNameWithFlagsAsync uintptr
 
-	LookupByNameWithFlagsFinish uintptr
+	xLookupByNameWithFlagsFinish uintptr
 
-	LookupByNameWithFlags uintptr
+	xLookupByNameWithFlags uintptr
 }
 
 func (x *ResolverClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackReload sets the callback function.
+func (x *ResolverClass) SetCallbackReload(cb func(*Resolver)) {
+	if cb == nil {
+		x.xReload = 0
+	} else {
+		x.xReload = purego.NewCallback(func(ResolverVarp uintptr) {
+			cb(ResolverNewFromInternalPtr(ResolverVarp))
+		})
+	}
+}
+
+// GetCallbackReload gets the callback function.
+func (x *ResolverClass) GetCallbackReload() func(*Resolver) {
+	if x.xReload == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReload)
+	return func(ResolverVar *Resolver) {
+		rawCallback(ResolverVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupByName sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByName(cb func(*Resolver, string, *Cancellable) *glib.List) {
+	if cb == nil {
+		x.xLookupByName = 0
+	} else {
+		x.xLookupByName = purego.NewCallback(func(ResolverVarp uintptr, HostnameVarp string, CancellableVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), HostnameVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLookupByName gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByName() func(*Resolver, string, *Cancellable) *glib.List {
+	if x.xLookupByName == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, HostnameVarp string, CancellableVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupByName)
+	return func(ResolverVar *Resolver, HostnameVar string, CancellableVar *Cancellable) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), HostnameVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupByNameAsync sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByNameAsync(cb func(*Resolver, string, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupByNameAsync = 0
+	} else {
+		x.xLookupByNameAsync = purego.NewCallback(func(ResolverVarp uintptr, HostnameVarp string, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(ResolverNewFromInternalPtr(ResolverVarp), HostnameVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupByNameAsync gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByNameAsync() func(*Resolver, string, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupByNameAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, HostnameVarp string, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupByNameAsync)
+	return func(ResolverVar *Resolver, HostnameVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ResolverVar.GoPointer(), HostnameVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupByNameFinish sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByNameFinish(cb func(*Resolver, AsyncResult) *glib.List) {
+	if cb == nil {
+		x.xLookupByNameFinish = 0
+	} else {
+		x.xLookupByNameFinish = purego.NewCallback(func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLookupByNameFinish gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByNameFinish() func(*Resolver, AsyncResult) *glib.List {
+	if x.xLookupByNameFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupByNameFinish)
+	return func(ResolverVar *Resolver, ResultVar AsyncResult) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupByAddress sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByAddress(cb func(*Resolver, *InetAddress, *Cancellable) string) {
+	if cb == nil {
+		x.xLookupByAddress = 0
+	} else {
+		x.xLookupByAddress = purego.NewCallback(func(ResolverVarp uintptr, AddressVarp uintptr, CancellableVarp uintptr) string {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), InetAddressNewFromInternalPtr(AddressVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLookupByAddress gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByAddress() func(*Resolver, *InetAddress, *Cancellable) string {
+	if x.xLookupByAddress == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, AddressVarp uintptr, CancellableVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xLookupByAddress)
+	return func(ResolverVar *Resolver, AddressVar *InetAddress, CancellableVar *Cancellable) string {
+		return rawCallback(ResolverVar.GoPointer(), AddressVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupByAddressAsync sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByAddressAsync(cb func(*Resolver, *InetAddress, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupByAddressAsync = 0
+	} else {
+		x.xLookupByAddressAsync = purego.NewCallback(func(ResolverVarp uintptr, AddressVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(ResolverNewFromInternalPtr(ResolverVarp), InetAddressNewFromInternalPtr(AddressVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupByAddressAsync gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByAddressAsync() func(*Resolver, *InetAddress, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupByAddressAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, AddressVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupByAddressAsync)
+	return func(ResolverVar *Resolver, AddressVar *InetAddress, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ResolverVar.GoPointer(), AddressVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupByAddressFinish sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByAddressFinish(cb func(*Resolver, AsyncResult) string) {
+	if cb == nil {
+		x.xLookupByAddressFinish = 0
+	} else {
+		x.xLookupByAddressFinish = purego.NewCallback(func(ResolverVarp uintptr, ResultVarp uintptr) string {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLookupByAddressFinish gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByAddressFinish() func(*Resolver, AsyncResult) string {
+	if x.xLookupByAddressFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, ResultVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xLookupByAddressFinish)
+	return func(ResolverVar *Resolver, ResultVar AsyncResult) string {
+		return rawCallback(ResolverVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupService sets the callback function.
+func (x *ResolverClass) SetCallbackLookupService(cb func(*Resolver, string, *Cancellable) *glib.List) {
+	if cb == nil {
+		x.xLookupService = 0
+	} else {
+		x.xLookupService = purego.NewCallback(func(ResolverVarp uintptr, RrnameVarp string, CancellableVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), RrnameVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLookupService gets the callback function.
+func (x *ResolverClass) GetCallbackLookupService() func(*Resolver, string, *Cancellable) *glib.List {
+	if x.xLookupService == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, RrnameVarp string, CancellableVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupService)
+	return func(ResolverVar *Resolver, RrnameVar string, CancellableVar *Cancellable) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), RrnameVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupServiceAsync sets the callback function.
+func (x *ResolverClass) SetCallbackLookupServiceAsync(cb func(*Resolver, string, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupServiceAsync = 0
+	} else {
+		x.xLookupServiceAsync = purego.NewCallback(func(ResolverVarp uintptr, RrnameVarp string, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(ResolverNewFromInternalPtr(ResolverVarp), RrnameVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupServiceAsync gets the callback function.
+func (x *ResolverClass) GetCallbackLookupServiceAsync() func(*Resolver, string, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupServiceAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, RrnameVarp string, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupServiceAsync)
+	return func(ResolverVar *Resolver, RrnameVar string, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ResolverVar.GoPointer(), RrnameVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupServiceFinish sets the callback function.
+func (x *ResolverClass) SetCallbackLookupServiceFinish(cb func(*Resolver, AsyncResult) *glib.List) {
+	if cb == nil {
+		x.xLookupServiceFinish = 0
+	} else {
+		x.xLookupServiceFinish = purego.NewCallback(func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLookupServiceFinish gets the callback function.
+func (x *ResolverClass) GetCallbackLookupServiceFinish() func(*Resolver, AsyncResult) *glib.List {
+	if x.xLookupServiceFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupServiceFinish)
+	return func(ResolverVar *Resolver, ResultVar AsyncResult) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupRecords sets the callback function.
+func (x *ResolverClass) SetCallbackLookupRecords(cb func(*Resolver, string, ResolverRecordType, *Cancellable) *glib.List) {
+	if cb == nil {
+		x.xLookupRecords = 0
+	} else {
+		x.xLookupRecords = purego.NewCallback(func(ResolverVarp uintptr, RrnameVarp string, RecordTypeVarp ResolverRecordType, CancellableVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), RrnameVarp, RecordTypeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLookupRecords gets the callback function.
+func (x *ResolverClass) GetCallbackLookupRecords() func(*Resolver, string, ResolverRecordType, *Cancellable) *glib.List {
+	if x.xLookupRecords == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, RrnameVarp string, RecordTypeVarp ResolverRecordType, CancellableVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupRecords)
+	return func(ResolverVar *Resolver, RrnameVar string, RecordTypeVar ResolverRecordType, CancellableVar *Cancellable) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), RrnameVar, RecordTypeVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupRecordsAsync sets the callback function.
+func (x *ResolverClass) SetCallbackLookupRecordsAsync(cb func(*Resolver, string, ResolverRecordType, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupRecordsAsync = 0
+	} else {
+		x.xLookupRecordsAsync = purego.NewCallback(func(ResolverVarp uintptr, RrnameVarp string, RecordTypeVarp ResolverRecordType, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(ResolverNewFromInternalPtr(ResolverVarp), RrnameVarp, RecordTypeVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupRecordsAsync gets the callback function.
+func (x *ResolverClass) GetCallbackLookupRecordsAsync() func(*Resolver, string, ResolverRecordType, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupRecordsAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, RrnameVarp string, RecordTypeVarp ResolverRecordType, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupRecordsAsync)
+	return func(ResolverVar *Resolver, RrnameVar string, RecordTypeVar ResolverRecordType, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ResolverVar.GoPointer(), RrnameVar, RecordTypeVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupRecordsFinish sets the callback function.
+func (x *ResolverClass) SetCallbackLookupRecordsFinish(cb func(*Resolver, AsyncResult) *glib.List) {
+	if cb == nil {
+		x.xLookupRecordsFinish = 0
+	} else {
+		x.xLookupRecordsFinish = purego.NewCallback(func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLookupRecordsFinish gets the callback function.
+func (x *ResolverClass) GetCallbackLookupRecordsFinish() func(*Resolver, AsyncResult) *glib.List {
+	if x.xLookupRecordsFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupRecordsFinish)
+	return func(ResolverVar *Resolver, ResultVar AsyncResult) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupByNameWithFlagsAsync sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByNameWithFlagsAsync(cb func(*Resolver, string, ResolverNameLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupByNameWithFlagsAsync = 0
+	} else {
+		x.xLookupByNameWithFlagsAsync = purego.NewCallback(func(ResolverVarp uintptr, HostnameVarp string, FlagsVarp ResolverNameLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(ResolverNewFromInternalPtr(ResolverVarp), HostnameVarp, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupByNameWithFlagsAsync gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByNameWithFlagsAsync() func(*Resolver, string, ResolverNameLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupByNameWithFlagsAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, HostnameVarp string, FlagsVarp ResolverNameLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupByNameWithFlagsAsync)
+	return func(ResolverVar *Resolver, HostnameVar string, FlagsVar ResolverNameLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ResolverVar.GoPointer(), HostnameVar, FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupByNameWithFlagsFinish sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByNameWithFlagsFinish(cb func(*Resolver, AsyncResult) *glib.List) {
+	if cb == nil {
+		x.xLookupByNameWithFlagsFinish = 0
+	} else {
+		x.xLookupByNameWithFlagsFinish = purego.NewCallback(func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLookupByNameWithFlagsFinish gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByNameWithFlagsFinish() func(*Resolver, AsyncResult) *glib.List {
+	if x.xLookupByNameWithFlagsFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, ResultVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupByNameWithFlagsFinish)
+	return func(ResolverVar *Resolver, ResultVar AsyncResult) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupByNameWithFlags sets the callback function.
+func (x *ResolverClass) SetCallbackLookupByNameWithFlags(cb func(*Resolver, string, ResolverNameLookupFlags, *Cancellable) *glib.List) {
+	if cb == nil {
+		x.xLookupByNameWithFlags = 0
+	} else {
+		x.xLookupByNameWithFlags = purego.NewCallback(func(ResolverVarp uintptr, HostnameVarp string, FlagsVarp ResolverNameLookupFlags, CancellableVarp uintptr) *glib.List {
+			return cb(ResolverNewFromInternalPtr(ResolverVarp), HostnameVarp, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLookupByNameWithFlags gets the callback function.
+func (x *ResolverClass) GetCallbackLookupByNameWithFlags() func(*Resolver, string, ResolverNameLookupFlags, *Cancellable) *glib.List {
+	if x.xLookupByNameWithFlags == 0 {
+		return nil
+	}
+	var rawCallback func(ResolverVarp uintptr, HostnameVarp string, FlagsVarp ResolverNameLookupFlags, CancellableVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupByNameWithFlags)
+	return func(ResolverVar *Resolver, HostnameVar string, FlagsVar ResolverNameLookupFlags, CancellableVar *Cancellable) *glib.List {
+		return rawCallback(ResolverVar.GoPointer(), HostnameVar, FlagsVar, CancellableVar.GoPointer())
+	}
 }
 
 type ResolverPrivate struct {
diff --git a/v4/gio/gseekable.go b/v4/gio/gseekable.go
index e4914f3846e5bbb3278ba82bb2fbfa87399ea06b..aafe963305cda12e539b7d2a0fa2ba6aee0763ad 100644
--- a/v4/gio/gseekable.go
+++ b/v4/gio/gseekable.go
@@ -17,21 +17,136 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Tell uintptr
+	xTell uintptr
 
-	CanSeek uintptr
+	xCanSeek uintptr
 
-	Seek uintptr
+	xSeek uintptr
 
-	CanTruncate uintptr
+	xCanTruncate uintptr
 
-	TruncateFn uintptr
+	xTruncateFn uintptr
 }
 
 func (x *SeekableIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackTell sets the callback function.
+func (x *SeekableIface) SetCallbackTell(cb func(Seekable) int64) {
+	if cb == nil {
+		x.xTell = 0
+	} else {
+		x.xTell = purego.NewCallback(func(SeekableVarp uintptr) int64 {
+			return cb(&SeekableBase{Ptr: SeekableVarp})
+		})
+	}
+}
+
+// GetCallbackTell gets the callback function.
+func (x *SeekableIface) GetCallbackTell() func(Seekable) int64 {
+	if x.xTell == 0 {
+		return nil
+	}
+	var rawCallback func(SeekableVarp uintptr) int64
+	purego.RegisterFunc(&rawCallback, x.xTell)
+	return func(SeekableVar Seekable) int64 {
+		return rawCallback(SeekableVar.GoPointer())
+	}
+}
+
+// SetCallbackCanSeek sets the callback function.
+func (x *SeekableIface) SetCallbackCanSeek(cb func(Seekable) bool) {
+	if cb == nil {
+		x.xCanSeek = 0
+	} else {
+		x.xCanSeek = purego.NewCallback(func(SeekableVarp uintptr) bool {
+			return cb(&SeekableBase{Ptr: SeekableVarp})
+		})
+	}
+}
+
+// GetCallbackCanSeek gets the callback function.
+func (x *SeekableIface) GetCallbackCanSeek() func(Seekable) bool {
+	if x.xCanSeek == 0 {
+		return nil
+	}
+	var rawCallback func(SeekableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanSeek)
+	return func(SeekableVar Seekable) bool {
+		return rawCallback(SeekableVar.GoPointer())
+	}
+}
+
+// SetCallbackSeek sets the callback function.
+func (x *SeekableIface) SetCallbackSeek(cb func(Seekable, int64, glib.SeekType, *Cancellable) bool) {
+	if cb == nil {
+		x.xSeek = 0
+	} else {
+		x.xSeek = purego.NewCallback(func(SeekableVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool {
+			return cb(&SeekableBase{Ptr: SeekableVarp}, OffsetVarp, TypeVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackSeek gets the callback function.
+func (x *SeekableIface) GetCallbackSeek() func(Seekable, int64, glib.SeekType, *Cancellable) bool {
+	if x.xSeek == 0 {
+		return nil
+	}
+	var rawCallback func(SeekableVarp uintptr, OffsetVarp int64, TypeVarp glib.SeekType, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSeek)
+	return func(SeekableVar Seekable, OffsetVar int64, TypeVar glib.SeekType, CancellableVar *Cancellable) bool {
+		return rawCallback(SeekableVar.GoPointer(), OffsetVar, TypeVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackCanTruncate sets the callback function.
+func (x *SeekableIface) SetCallbackCanTruncate(cb func(Seekable) bool) {
+	if cb == nil {
+		x.xCanTruncate = 0
+	} else {
+		x.xCanTruncate = purego.NewCallback(func(SeekableVarp uintptr) bool {
+			return cb(&SeekableBase{Ptr: SeekableVarp})
+		})
+	}
+}
+
+// GetCallbackCanTruncate gets the callback function.
+func (x *SeekableIface) GetCallbackCanTruncate() func(Seekable) bool {
+	if x.xCanTruncate == 0 {
+		return nil
+	}
+	var rawCallback func(SeekableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanTruncate)
+	return func(SeekableVar Seekable) bool {
+		return rawCallback(SeekableVar.GoPointer())
+	}
+}
+
+// SetCallbackTruncateFn sets the callback function.
+func (x *SeekableIface) SetCallbackTruncateFn(cb func(Seekable, int64, *Cancellable) bool) {
+	if cb == nil {
+		x.xTruncateFn = 0
+	} else {
+		x.xTruncateFn = purego.NewCallback(func(SeekableVarp uintptr, OffsetVarp int64, CancellableVarp uintptr) bool {
+			return cb(&SeekableBase{Ptr: SeekableVarp}, OffsetVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackTruncateFn gets the callback function.
+func (x *SeekableIface) GetCallbackTruncateFn() func(Seekable, int64, *Cancellable) bool {
+	if x.xTruncateFn == 0 {
+		return nil
+	}
+	var rawCallback func(SeekableVarp uintptr, OffsetVarp int64, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xTruncateFn)
+	return func(SeekableVar Seekable, OffsetVar int64, CancellableVar *Cancellable) bool {
+		return rawCallback(SeekableVar.GoPointer(), OffsetVar, CancellableVar.GoPointer())
+	}
+}
+
 // #GSeekable is implemented by streams (implementations of
 // #GInputStream or #GOutputStream) that support seeking.
 //
@@ -51,9 +166,9 @@ 	GoPointer() uintptr
 	SetGoPointer(uintptr)
 	CanSeek() bool
 	CanTruncate() bool
-	Seek(OffsetVar int64, TypeVar glib.SeekType, CancellableVar *Cancellable) bool
+	Seek(OffsetVar int64, TypeVar glib.SeekType, CancellableVar *Cancellable) (bool, error)
 	Tell() int64
-	Truncate(OffsetVar int64, CancellableVar *Cancellable) bool
+	Truncate(OffsetVar int64, CancellableVar *Cancellable) (bool, error)
 }
 
 var xSeekableGLibType func() types.GType
diff --git a/v4/gio/gsettings.go b/v4/gio/gsettings.go
index db958d6b431c411fdf0d0ed82f2cb73604d2390b..013c1b9a7a586eadb481a82155be8a3838f20840 100644
--- a/v4/gio/gsettings.go
+++ b/v4/gio/gsettings.go
@@ -38,19 +38,111 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	WritableChanged uintptr
+	xWritableChanged uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	WritableChangeEvent uintptr
+	xWritableChangeEvent uintptr
 
-	ChangeEvent uintptr
+	xChangeEvent uintptr
 
 	Padding [20]uintptr
 }
 
 func (x *SettingsClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackWritableChanged sets the callback function.
+func (x *SettingsClass) SetCallbackWritableChanged(cb func(*Settings, string)) {
+	if cb == nil {
+		x.xWritableChanged = 0
+	} else {
+		x.xWritableChanged = purego.NewCallback(func(SettingsVarp uintptr, KeyVarp string) {
+			cb(SettingsNewFromInternalPtr(SettingsVarp), KeyVarp)
+		})
+	}
+}
+
+// GetCallbackWritableChanged gets the callback function.
+func (x *SettingsClass) GetCallbackWritableChanged() func(*Settings, string) {
+	if x.xWritableChanged == 0 {
+		return nil
+	}
+	var rawCallback func(SettingsVarp uintptr, KeyVarp string)
+	purego.RegisterFunc(&rawCallback, x.xWritableChanged)
+	return func(SettingsVar *Settings, KeyVar string) {
+		rawCallback(SettingsVar.GoPointer(), KeyVar)
+	}
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *SettingsClass) SetCallbackChanged(cb func(*Settings, string)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(SettingsVarp uintptr, KeyVarp string) {
+			cb(SettingsNewFromInternalPtr(SettingsVarp), KeyVarp)
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *SettingsClass) GetCallbackChanged() func(*Settings, string) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(SettingsVarp uintptr, KeyVarp string)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(SettingsVar *Settings, KeyVar string) {
+		rawCallback(SettingsVar.GoPointer(), KeyVar)
+	}
+}
+
+// SetCallbackWritableChangeEvent sets the callback function.
+func (x *SettingsClass) SetCallbackWritableChangeEvent(cb func(*Settings, glib.Quark) bool) {
+	if cb == nil {
+		x.xWritableChangeEvent = 0
+	} else {
+		x.xWritableChangeEvent = purego.NewCallback(func(SettingsVarp uintptr, KeyVarp glib.Quark) bool {
+			return cb(SettingsNewFromInternalPtr(SettingsVarp), KeyVarp)
+		})
+	}
+}
+
+// GetCallbackWritableChangeEvent gets the callback function.
+func (x *SettingsClass) GetCallbackWritableChangeEvent() func(*Settings, glib.Quark) bool {
+	if x.xWritableChangeEvent == 0 {
+		return nil
+	}
+	var rawCallback func(SettingsVarp uintptr, KeyVarp glib.Quark) bool
+	purego.RegisterFunc(&rawCallback, x.xWritableChangeEvent)
+	return func(SettingsVar *Settings, KeyVar glib.Quark) bool {
+		return rawCallback(SettingsVar.GoPointer(), KeyVar)
+	}
+}
+
+// SetCallbackChangeEvent sets the callback function.
+func (x *SettingsClass) SetCallbackChangeEvent(cb func(*Settings, *glib.Quark, int) bool) {
+	if cb == nil {
+		x.xChangeEvent = 0
+	} else {
+		x.xChangeEvent = purego.NewCallback(func(SettingsVarp uintptr, KeysVarp *glib.Quark, NKeysVarp int) bool {
+			return cb(SettingsNewFromInternalPtr(SettingsVarp), KeysVarp, NKeysVarp)
+		})
+	}
+}
+
+// GetCallbackChangeEvent gets the callback function.
+func (x *SettingsClass) GetCallbackChangeEvent() func(*Settings, *glib.Quark, int) bool {
+	if x.xChangeEvent == 0 {
+		return nil
+	}
+	var rawCallback func(SettingsVarp uintptr, KeysVarp *glib.Quark, NKeysVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xChangeEvent)
+	return func(SettingsVar *Settings, KeysVar *glib.Quark, NKeysVar int) bool {
+		return rawCallback(SettingsVar.GoPointer(), KeysVar, NKeysVar)
+	}
 }
 
 type SettingsPrivate struct {
diff --git a/v4/gio/gsettingsbackend.go b/v4/gio/gsettingsbackend.go
index c3351b492d70ac2032ededc56f521da57ef3959b..52090c74e272d82c13f91972bdaf0291b9872f7b 100644
--- a/v4/gio/gsettingsbackend.go
+++ b/v4/gio/gsettingsbackend.go
@@ -18,31 +18,271 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Read uintptr
+	xRead uintptr
 
-	GetWritable uintptr
+	xGetWritable uintptr
 
-	Write uintptr
+	xWrite uintptr
 
-	WriteTree uintptr
+	xWriteTree uintptr
 
-	Reset uintptr
+	xReset uintptr
 
-	Subscribe uintptr
+	xSubscribe uintptr
 
-	Unsubscribe uintptr
+	xUnsubscribe uintptr
 
-	Sync uintptr
+	xSync uintptr
 
-	GetPermission uintptr
+	xGetPermission uintptr
 
-	ReadUserValue uintptr
+	xReadUserValue uintptr
 
 	Padding [23]uintptr
 }
 
 func (x *SettingsBackendClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackRead sets the callback function.
+func (x *SettingsBackendClass) SetCallbackRead(cb func(*SettingsBackend, string, *glib.VariantType, bool) *glib.Variant) {
+	if cb == nil {
+		x.xRead = 0
+	} else {
+		x.xRead = purego.NewCallback(func(BackendVarp uintptr, KeyVarp string, ExpectedTypeVarp *glib.VariantType, DefaultValueVarp bool) *glib.Variant {
+			return cb(SettingsBackendNewFromInternalPtr(BackendVarp), KeyVarp, ExpectedTypeVarp, DefaultValueVarp)
+		})
+	}
+}
+
+// GetCallbackRead gets the callback function.
+func (x *SettingsBackendClass) GetCallbackRead() func(*SettingsBackend, string, *glib.VariantType, bool) *glib.Variant {
+	if x.xRead == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, KeyVarp string, ExpectedTypeVarp *glib.VariantType, DefaultValueVarp bool) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xRead)
+	return func(BackendVar *SettingsBackend, KeyVar string, ExpectedTypeVar *glib.VariantType, DefaultValueVar bool) *glib.Variant {
+		return rawCallback(BackendVar.GoPointer(), KeyVar, ExpectedTypeVar, DefaultValueVar)
+	}
+}
+
+// SetCallbackGetWritable sets the callback function.
+func (x *SettingsBackendClass) SetCallbackGetWritable(cb func(*SettingsBackend, string) bool) {
+	if cb == nil {
+		x.xGetWritable = 0
+	} else {
+		x.xGetWritable = purego.NewCallback(func(BackendVarp uintptr, KeyVarp string) bool {
+			return cb(SettingsBackendNewFromInternalPtr(BackendVarp), KeyVarp)
+		})
+	}
+}
+
+// GetCallbackGetWritable gets the callback function.
+func (x *SettingsBackendClass) GetCallbackGetWritable() func(*SettingsBackend, string) bool {
+	if x.xGetWritable == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, KeyVarp string) bool
+	purego.RegisterFunc(&rawCallback, x.xGetWritable)
+	return func(BackendVar *SettingsBackend, KeyVar string) bool {
+		return rawCallback(BackendVar.GoPointer(), KeyVar)
+	}
+}
+
+// SetCallbackWrite sets the callback function.
+func (x *SettingsBackendClass) SetCallbackWrite(cb func(*SettingsBackend, string, *glib.Variant, uintptr) bool) {
+	if cb == nil {
+		x.xWrite = 0
+	} else {
+		x.xWrite = purego.NewCallback(func(BackendVarp uintptr, KeyVarp string, ValueVarp *glib.Variant, OriginTagVarp uintptr) bool {
+			return cb(SettingsBackendNewFromInternalPtr(BackendVarp), KeyVarp, ValueVarp, OriginTagVarp)
+		})
+	}
+}
+
+// GetCallbackWrite gets the callback function.
+func (x *SettingsBackendClass) GetCallbackWrite() func(*SettingsBackend, string, *glib.Variant, uintptr) bool {
+	if x.xWrite == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, KeyVarp string, ValueVarp *glib.Variant, OriginTagVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xWrite)
+	return func(BackendVar *SettingsBackend, KeyVar string, ValueVar *glib.Variant, OriginTagVar uintptr) bool {
+		return rawCallback(BackendVar.GoPointer(), KeyVar, ValueVar, OriginTagVar)
+	}
+}
+
+// SetCallbackWriteTree sets the callback function.
+func (x *SettingsBackendClass) SetCallbackWriteTree(cb func(*SettingsBackend, *glib.Tree, uintptr) bool) {
+	if cb == nil {
+		x.xWriteTree = 0
+	} else {
+		x.xWriteTree = purego.NewCallback(func(BackendVarp uintptr, TreeVarp *glib.Tree, OriginTagVarp uintptr) bool {
+			return cb(SettingsBackendNewFromInternalPtr(BackendVarp), TreeVarp, OriginTagVarp)
+		})
+	}
+}
+
+// GetCallbackWriteTree gets the callback function.
+func (x *SettingsBackendClass) GetCallbackWriteTree() func(*SettingsBackend, *glib.Tree, uintptr) bool {
+	if x.xWriteTree == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, TreeVarp *glib.Tree, OriginTagVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xWriteTree)
+	return func(BackendVar *SettingsBackend, TreeVar *glib.Tree, OriginTagVar uintptr) bool {
+		return rawCallback(BackendVar.GoPointer(), TreeVar, OriginTagVar)
+	}
+}
+
+// SetCallbackReset sets the callback function.
+func (x *SettingsBackendClass) SetCallbackReset(cb func(*SettingsBackend, string, uintptr)) {
+	if cb == nil {
+		x.xReset = 0
+	} else {
+		x.xReset = purego.NewCallback(func(BackendVarp uintptr, KeyVarp string, OriginTagVarp uintptr) {
+			cb(SettingsBackendNewFromInternalPtr(BackendVarp), KeyVarp, OriginTagVarp)
+		})
+	}
+}
+
+// GetCallbackReset gets the callback function.
+func (x *SettingsBackendClass) GetCallbackReset() func(*SettingsBackend, string, uintptr) {
+	if x.xReset == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, KeyVarp string, OriginTagVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReset)
+	return func(BackendVar *SettingsBackend, KeyVar string, OriginTagVar uintptr) {
+		rawCallback(BackendVar.GoPointer(), KeyVar, OriginTagVar)
+	}
+}
+
+// SetCallbackSubscribe sets the callback function.
+func (x *SettingsBackendClass) SetCallbackSubscribe(cb func(*SettingsBackend, string)) {
+	if cb == nil {
+		x.xSubscribe = 0
+	} else {
+		x.xSubscribe = purego.NewCallback(func(BackendVarp uintptr, NameVarp string) {
+			cb(SettingsBackendNewFromInternalPtr(BackendVarp), NameVarp)
+		})
+	}
+}
+
+// GetCallbackSubscribe gets the callback function.
+func (x *SettingsBackendClass) GetCallbackSubscribe() func(*SettingsBackend, string) {
+	if x.xSubscribe == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, NameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xSubscribe)
+	return func(BackendVar *SettingsBackend, NameVar string) {
+		rawCallback(BackendVar.GoPointer(), NameVar)
+	}
+}
+
+// SetCallbackUnsubscribe sets the callback function.
+func (x *SettingsBackendClass) SetCallbackUnsubscribe(cb func(*SettingsBackend, string)) {
+	if cb == nil {
+		x.xUnsubscribe = 0
+	} else {
+		x.xUnsubscribe = purego.NewCallback(func(BackendVarp uintptr, NameVarp string) {
+			cb(SettingsBackendNewFromInternalPtr(BackendVarp), NameVarp)
+		})
+	}
+}
+
+// GetCallbackUnsubscribe gets the callback function.
+func (x *SettingsBackendClass) GetCallbackUnsubscribe() func(*SettingsBackend, string) {
+	if x.xUnsubscribe == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, NameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xUnsubscribe)
+	return func(BackendVar *SettingsBackend, NameVar string) {
+		rawCallback(BackendVar.GoPointer(), NameVar)
+	}
+}
+
+// SetCallbackSync sets the callback function.
+func (x *SettingsBackendClass) SetCallbackSync(cb func(*SettingsBackend)) {
+	if cb == nil {
+		x.xSync = 0
+	} else {
+		x.xSync = purego.NewCallback(func(BackendVarp uintptr) {
+			cb(SettingsBackendNewFromInternalPtr(BackendVarp))
+		})
+	}
+}
+
+// GetCallbackSync gets the callback function.
+func (x *SettingsBackendClass) GetCallbackSync() func(*SettingsBackend) {
+	if x.xSync == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSync)
+	return func(BackendVar *SettingsBackend) {
+		rawCallback(BackendVar.GoPointer())
+	}
+}
+
+// SetCallbackGetPermission sets the callback function.
+func (x *SettingsBackendClass) SetCallbackGetPermission(cb func(*SettingsBackend, string) *Permission) {
+	if cb == nil {
+		x.xGetPermission = 0
+	} else {
+		x.xGetPermission = purego.NewCallback(func(BackendVarp uintptr, PathVarp string) uintptr {
+			ret := cb(SettingsBackendNewFromInternalPtr(BackendVarp), PathVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetPermission gets the callback function.
+func (x *SettingsBackendClass) GetCallbackGetPermission() func(*SettingsBackend, string) *Permission {
+	if x.xGetPermission == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, PathVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetPermission)
+	return func(BackendVar *SettingsBackend, PathVar string) *Permission {
+		rawRet := rawCallback(BackendVar.GoPointer(), PathVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Permission{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackReadUserValue sets the callback function.
+func (x *SettingsBackendClass) SetCallbackReadUserValue(cb func(*SettingsBackend, string, *glib.VariantType) *glib.Variant) {
+	if cb == nil {
+		x.xReadUserValue = 0
+	} else {
+		x.xReadUserValue = purego.NewCallback(func(BackendVarp uintptr, KeyVarp string, ExpectedTypeVarp *glib.VariantType) *glib.Variant {
+			return cb(SettingsBackendNewFromInternalPtr(BackendVarp), KeyVarp, ExpectedTypeVarp)
+		})
+	}
+}
+
+// GetCallbackReadUserValue gets the callback function.
+func (x *SettingsBackendClass) GetCallbackReadUserValue() func(*SettingsBackend, string, *glib.VariantType) *glib.Variant {
+	if x.xReadUserValue == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr, KeyVarp string, ExpectedTypeVarp *glib.VariantType) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xReadUserValue)
+	return func(BackendVar *SettingsBackend, KeyVar string, ExpectedTypeVar *glib.VariantType) *glib.Variant {
+		return rawCallback(BackendVar.GoPointer(), KeyVar, ExpectedTypeVar)
+	}
 }
 
 type SettingsBackendPrivate struct {
diff --git a/v4/gio/gsimpleproxyresolver.go b/v4/gio/gsimpleproxyresolver.go
index 9eb122fc1779d380337577f44ae82e129faf1678..917de0ca195f189e49e679ac168f6ce177894f30 100644
--- a/v4/gio/gsimpleproxyresolver.go
+++ b/v4/gio/gsimpleproxyresolver.go
@@ -17,19 +17,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *SimpleProxyResolverClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *SimpleProxyResolverClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *SimpleProxyResolverClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *SimpleProxyResolverClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *SimpleProxyResolverClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *SimpleProxyResolverClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *SimpleProxyResolverClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *SimpleProxyResolverClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *SimpleProxyResolverClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *SimpleProxyResolverClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *SimpleProxyResolverClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type SimpleProxyResolverPrivate struct {
diff --git a/v4/gio/gsocket.go b/v4/gio/gsocket.go
index c776387ecc234b3ff80222eabbfdc06d15a31533..d0be60eab93c590f57a4b39f9793cef989c776df 100644
--- a/v4/gio/gsocket.go
+++ b/v4/gio/gsocket.go
@@ -17,29 +17,259 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 
-	GReserved7 uintptr
+	xGReserved7 uintptr
 
-	GReserved8 uintptr
+	xGReserved8 uintptr
 
-	GReserved9 uintptr
+	xGReserved9 uintptr
 
-	GReserved10 uintptr
+	xGReserved10 uintptr
 }
 
 func (x *SocketClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved7 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved7(cb func()) {
+	if cb == nil {
+		x.xGReserved7 = 0
+	} else {
+		x.xGReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved7 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved7() func() {
+	if x.xGReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved8 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved8(cb func()) {
+	if cb == nil {
+		x.xGReserved8 = 0
+	} else {
+		x.xGReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved8 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved8() func() {
+	if x.xGReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved8)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved9 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved9(cb func()) {
+	if cb == nil {
+		x.xGReserved9 = 0
+	} else {
+		x.xGReserved9 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved9 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved9() func() {
+	if x.xGReserved9 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved9)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved10 sets the callback function.
+func (x *SocketClass) SetCallbackGReserved10(cb func()) {
+	if cb == nil {
+		x.xGReserved10 = 0
+	} else {
+		x.xGReserved10 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved10 gets the callback function.
+func (x *SocketClass) GetCallbackGReserved10() func() {
+	if x.xGReserved10 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved10)
+	return func() {
+		rawCallback()
+	}
 }
 
 type SocketPrivate struct {
@@ -889,7 +1119,7 @@ 	return cret, cerr
 
 }
 
-var xSocketReceiveFrom func(uintptr, *uintptr, []byte, uint, uintptr, **glib.Error) int
+var xSocketReceiveFrom func(uintptr, uintptr, []byte, uint, uintptr, **glib.Error) int
 
 // Receive data (up to @size bytes) from a socket.
 //
@@ -901,7 +1131,7 @@ // See g_socket_receive() for additional information.
 func (x *Socket) ReceiveFrom(AddressVar **SocketAddress, BufferVar []byte, SizeVar uint, CancellableVar *Cancellable) (int, error) {
 	var cerr *glib.Error
 
-	cret := xSocketReceiveFrom(x.GoPointer(), gobject.ConvertPtr(AddressVar), BufferVar, SizeVar, CancellableVar.GoPointer(), &cerr)
+	cret := xSocketReceiveFrom(x.GoPointer(), *gobject.ConvertPtr(AddressVar), BufferVar, SizeVar, CancellableVar.GoPointer(), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
@@ -909,7 +1139,7 @@ 	return cret, cerr
 
 }
 
-var xSocketReceiveMessage func(uintptr, *uintptr, []InputVector, int, uintptr, int, int, uintptr, **glib.Error) int
+var xSocketReceiveMessage func(uintptr, uintptr, []InputVector, int, uintptr, int, int, uintptr, **glib.Error) int
 
 // Receive data from a socket.  For receiving multiple messages, see
 // g_socket_receive_messages(); for easier use, see
@@ -973,7 +1203,7 @@ // On error -1 is returned and @error is set accordingly.
 func (x *Socket) ReceiveMessage(AddressVar **SocketAddress, VectorsVar []InputVector, NumVectorsVar int, MessagesVar uintptr, NumMessagesVar int, FlagsVar int, CancellableVar *Cancellable) (int, error) {
 	var cerr *glib.Error
 
-	cret := xSocketReceiveMessage(x.GoPointer(), gobject.ConvertPtr(AddressVar), VectorsVar, NumVectorsVar, MessagesVar, NumMessagesVar, FlagsVar, CancellableVar.GoPointer(), &cerr)
+	cret := xSocketReceiveMessage(x.GoPointer(), *gobject.ConvertPtr(AddressVar), VectorsVar, NumVectorsVar, MessagesVar, NumMessagesVar, FlagsVar, CancellableVar.GoPointer(), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
diff --git a/v4/gio/gsocketaddress.go b/v4/gio/gsocketaddress.go
index 6b954f627033c5a42964e1bc144854e43096f1ec..bd8ef20e90eaddc3ba872f8eba71cce3dde5eb7e 100644
--- a/v4/gio/gsocketaddress.go
+++ b/v4/gio/gsocketaddress.go
@@ -17,15 +17,84 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetFamily uintptr
+	xGetFamily uintptr
 
-	GetNativeSize uintptr
+	xGetNativeSize uintptr
 
-	ToNative uintptr
+	xToNative uintptr
 }
 
 func (x *SocketAddressClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetFamily sets the callback function.
+func (x *SocketAddressClass) SetCallbackGetFamily(cb func(*SocketAddress) SocketFamily) {
+	if cb == nil {
+		x.xGetFamily = 0
+	} else {
+		x.xGetFamily = purego.NewCallback(func(AddressVarp uintptr) SocketFamily {
+			return cb(SocketAddressNewFromInternalPtr(AddressVarp))
+		})
+	}
+}
+
+// GetCallbackGetFamily gets the callback function.
+func (x *SocketAddressClass) GetCallbackGetFamily() func(*SocketAddress) SocketFamily {
+	if x.xGetFamily == 0 {
+		return nil
+	}
+	var rawCallback func(AddressVarp uintptr) SocketFamily
+	purego.RegisterFunc(&rawCallback, x.xGetFamily)
+	return func(AddressVar *SocketAddress) SocketFamily {
+		return rawCallback(AddressVar.GoPointer())
+	}
+}
+
+// SetCallbackGetNativeSize sets the callback function.
+func (x *SocketAddressClass) SetCallbackGetNativeSize(cb func(*SocketAddress) int) {
+	if cb == nil {
+		x.xGetNativeSize = 0
+	} else {
+		x.xGetNativeSize = purego.NewCallback(func(AddressVarp uintptr) int {
+			return cb(SocketAddressNewFromInternalPtr(AddressVarp))
+		})
+	}
+}
+
+// GetCallbackGetNativeSize gets the callback function.
+func (x *SocketAddressClass) GetCallbackGetNativeSize() func(*SocketAddress) int {
+	if x.xGetNativeSize == 0 {
+		return nil
+	}
+	var rawCallback func(AddressVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetNativeSize)
+	return func(AddressVar *SocketAddress) int {
+		return rawCallback(AddressVar.GoPointer())
+	}
+}
+
+// SetCallbackToNative sets the callback function.
+func (x *SocketAddressClass) SetCallbackToNative(cb func(*SocketAddress, uintptr, uint) bool) {
+	if cb == nil {
+		x.xToNative = 0
+	} else {
+		x.xToNative = purego.NewCallback(func(AddressVarp uintptr, DestVarp uintptr, DestlenVarp uint) bool {
+			return cb(SocketAddressNewFromInternalPtr(AddressVarp), DestVarp, DestlenVarp)
+		})
+	}
+}
+
+// GetCallbackToNative gets the callback function.
+func (x *SocketAddressClass) GetCallbackToNative() func(*SocketAddress, uintptr, uint) bool {
+	if x.xToNative == 0 {
+		return nil
+	}
+	var rawCallback func(AddressVarp uintptr, DestVarp uintptr, DestlenVarp uint) bool
+	purego.RegisterFunc(&rawCallback, x.xToNative)
+	return func(AddressVar *SocketAddress, DestVar uintptr, DestlenVar uint) bool {
+		return rawCallback(AddressVar.GoPointer(), DestVar, DestlenVar)
+	}
 }
 
 // #GSocketAddress is the equivalent of struct sockaddr in the BSD
diff --git a/v4/gio/gsocketaddressenumerator.go b/v4/gio/gsocketaddressenumerator.go
index 20dcd9689ccb8eaec81185f0b25c67fe2c94cd3d..5ab7e8dd4594b182b3acd477596e917b25b3a200 100644
--- a/v4/gio/gsocketaddressenumerator.go
+++ b/v4/gio/gsocketaddressenumerator.go
@@ -18,15 +18,104 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Next uintptr
+	xNext uintptr
 
-	NextAsync uintptr
+	xNextAsync uintptr
 
-	NextFinish uintptr
+	xNextFinish uintptr
 }
 
 func (x *SocketAddressEnumeratorClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackNext sets the callback function.
+func (x *SocketAddressEnumeratorClass) SetCallbackNext(cb func(*SocketAddressEnumerator, *Cancellable) *SocketAddress) {
+	if cb == nil {
+		x.xNext = 0
+	} else {
+		x.xNext = purego.NewCallback(func(EnumeratorVarp uintptr, CancellableVarp uintptr) uintptr {
+			ret := cb(SocketAddressEnumeratorNewFromInternalPtr(EnumeratorVarp), CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackNext gets the callback function.
+func (x *SocketAddressEnumeratorClass) GetCallbackNext() func(*SocketAddressEnumerator, *Cancellable) *SocketAddress {
+	if x.xNext == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xNext)
+	return func(EnumeratorVar *SocketAddressEnumerator, CancellableVar *Cancellable) *SocketAddress {
+		rawRet := rawCallback(EnumeratorVar.GoPointer(), CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &SocketAddress{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackNextAsync sets the callback function.
+func (x *SocketAddressEnumeratorClass) SetCallbackNextAsync(cb func(*SocketAddressEnumerator, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xNextAsync = 0
+	} else {
+		x.xNextAsync = purego.NewCallback(func(EnumeratorVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(SocketAddressEnumeratorNewFromInternalPtr(EnumeratorVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackNextAsync gets the callback function.
+func (x *SocketAddressEnumeratorClass) GetCallbackNextAsync() func(*SocketAddressEnumerator, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xNextAsync == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xNextAsync)
+	return func(EnumeratorVar *SocketAddressEnumerator, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(EnumeratorVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackNextFinish sets the callback function.
+func (x *SocketAddressEnumeratorClass) SetCallbackNextFinish(cb func(*SocketAddressEnumerator, AsyncResult) *SocketAddress) {
+	if cb == nil {
+		x.xNextFinish = 0
+	} else {
+		x.xNextFinish = purego.NewCallback(func(EnumeratorVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(SocketAddressEnumeratorNewFromInternalPtr(EnumeratorVarp), &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackNextFinish gets the callback function.
+func (x *SocketAddressEnumeratorClass) GetCallbackNextFinish() func(*SocketAddressEnumerator, AsyncResult) *SocketAddress {
+	if x.xNextFinish == 0 {
+		return nil
+	}
+	var rawCallback func(EnumeratorVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xNextFinish)
+	return func(EnumeratorVar *SocketAddressEnumerator, ResultVar AsyncResult) *SocketAddress {
+		rawRet := rawCallback(EnumeratorVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &SocketAddress{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // #GSocketAddressEnumerator is an enumerator type for #GSocketAddress
diff --git a/v4/gio/gsocketclient.go b/v4/gio/gsocketclient.go
index b2bea0cce8dd040de08b96d3049fdac2341c1d82..e0a1a5fa66426a72618773f9ce257a7216824542 100644
--- a/v4/gio/gsocketclient.go
+++ b/v4/gio/gsocketclient.go
@@ -17,19 +17,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Event uintptr
+	xEvent uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 }
 
 func (x *SocketClientClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackEvent sets the callback function.
+func (x *SocketClientClass) SetCallbackEvent(cb func(*SocketClient, SocketClientEvent, SocketConnectable, *IOStream)) {
+	if cb == nil {
+		x.xEvent = 0
+	} else {
+		x.xEvent = purego.NewCallback(func(ClientVarp uintptr, EventVarp SocketClientEvent, ConnectableVarp uintptr, ConnectionVarp uintptr) {
+			cb(SocketClientNewFromInternalPtr(ClientVarp), EventVarp, &SocketConnectableBase{Ptr: ConnectableVarp}, IOStreamNewFromInternalPtr(ConnectionVarp))
+		})
+	}
+}
+
+// GetCallbackEvent gets the callback function.
+func (x *SocketClientClass) GetCallbackEvent() func(*SocketClient, SocketClientEvent, SocketConnectable, *IOStream) {
+	if x.xEvent == 0 {
+		return nil
+	}
+	var rawCallback func(ClientVarp uintptr, EventVarp SocketClientEvent, ConnectableVarp uintptr, ConnectionVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEvent)
+	return func(ClientVar *SocketClient, EventVar SocketClientEvent, ConnectableVar SocketConnectable, ConnectionVar *IOStream) {
+		rawCallback(ClientVar.GoPointer(), EventVar, ConnectableVar.GoPointer(), ConnectionVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *SocketClientClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *SocketClientClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *SocketClientClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *SocketClientClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *SocketClientClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *SocketClientClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *SocketClientClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *SocketClientClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 type SocketClientPrivate struct {
diff --git a/v4/gio/gsocketconnectable.go b/v4/gio/gsocketconnectable.go
index 9f403a064e577d893669f0510d435405b59c233b..10ad5f8a2a355e3bb0191552e7789f2e05f0ff3c 100644
--- a/v4/gio/gsocketconnectable.go
+++ b/v4/gio/gsocketconnectable.go
@@ -17,15 +17,104 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Enumerate uintptr
+	xEnumerate uintptr
 
-	ProxyEnumerate uintptr
+	xProxyEnumerate uintptr
 
-	ToString uintptr
+	xToString uintptr
 }
 
 func (x *SocketConnectableIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackEnumerate sets the callback function.
+func (x *SocketConnectableIface) SetCallbackEnumerate(cb func(SocketConnectable) *SocketAddressEnumerator) {
+	if cb == nil {
+		x.xEnumerate = 0
+	} else {
+		x.xEnumerate = purego.NewCallback(func(ConnectableVarp uintptr) uintptr {
+			ret := cb(&SocketConnectableBase{Ptr: ConnectableVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackEnumerate gets the callback function.
+func (x *SocketConnectableIface) GetCallbackEnumerate() func(SocketConnectable) *SocketAddressEnumerator {
+	if x.xEnumerate == 0 {
+		return nil
+	}
+	var rawCallback func(ConnectableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xEnumerate)
+	return func(ConnectableVar SocketConnectable) *SocketAddressEnumerator {
+		rawRet := rawCallback(ConnectableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &SocketAddressEnumerator{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackProxyEnumerate sets the callback function.
+func (x *SocketConnectableIface) SetCallbackProxyEnumerate(cb func(SocketConnectable) *SocketAddressEnumerator) {
+	if cb == nil {
+		x.xProxyEnumerate = 0
+	} else {
+		x.xProxyEnumerate = purego.NewCallback(func(ConnectableVarp uintptr) uintptr {
+			ret := cb(&SocketConnectableBase{Ptr: ConnectableVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackProxyEnumerate gets the callback function.
+func (x *SocketConnectableIface) GetCallbackProxyEnumerate() func(SocketConnectable) *SocketAddressEnumerator {
+	if x.xProxyEnumerate == 0 {
+		return nil
+	}
+	var rawCallback func(ConnectableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xProxyEnumerate)
+	return func(ConnectableVar SocketConnectable) *SocketAddressEnumerator {
+		rawRet := rawCallback(ConnectableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &SocketAddressEnumerator{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackToString sets the callback function.
+func (x *SocketConnectableIface) SetCallbackToString(cb func(SocketConnectable) string) {
+	if cb == nil {
+		x.xToString = 0
+	} else {
+		x.xToString = purego.NewCallback(func(ConnectableVarp uintptr) string {
+			return cb(&SocketConnectableBase{Ptr: ConnectableVarp})
+		})
+	}
+}
+
+// GetCallbackToString gets the callback function.
+func (x *SocketConnectableIface) GetCallbackToString() func(SocketConnectable) string {
+	if x.xToString == 0 {
+		return nil
+	}
+	var rawCallback func(ConnectableVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xToString)
+	return func(ConnectableVar SocketConnectable) string {
+		return rawCallback(ConnectableVar.GoPointer())
+	}
 }
 
 // Objects that describe one or more potential socket endpoints
diff --git a/v4/gio/gsocketconnection.go b/v4/gio/gsocketconnection.go
index bd7ec0c9c841361489e9c254913bda98e5bd053f..5a613638127c62df8ecf77085288411b4e2acf9a 100644
--- a/v4/gio/gsocketconnection.go
+++ b/v4/gio/gsocketconnection.go
@@ -17,21 +17,159 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 }
 
 func (x *SocketConnectionClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *SocketConnectionClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *SocketConnectionClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *SocketConnectionClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *SocketConnectionClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *SocketConnectionClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *SocketConnectionClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *SocketConnectionClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *SocketConnectionClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *SocketConnectionClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *SocketConnectionClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *SocketConnectionClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *SocketConnectionClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
 }
 
 type SocketConnectionPrivate struct {
diff --git a/v4/gio/gsocketcontrolmessage.go b/v4/gio/gsocketcontrolmessage.go
index a28b39a450233d1129e95c6279b1d070b403a450..1075dfccd5fd390030d7cab7a441457148ac26fb 100644
--- a/v4/gio/gsocketcontrolmessage.go
+++ b/v4/gio/gsocketcontrolmessage.go
@@ -17,29 +17,269 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetSize uintptr
+	xGetSize uintptr
 
-	GetLevel uintptr
+	xGetLevel uintptr
 
-	GetType uintptr
+	xGetType uintptr
 
-	Serialize uintptr
+	xSerialize uintptr
 
-	Deserialize uintptr
+	xDeserialize uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *SocketControlMessageClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetSize sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGetSize(cb func(*SocketControlMessage) uint) {
+	if cb == nil {
+		x.xGetSize = 0
+	} else {
+		x.xGetSize = purego.NewCallback(func(MessageVarp uintptr) uint {
+			return cb(SocketControlMessageNewFromInternalPtr(MessageVarp))
+		})
+	}
+}
+
+// GetCallbackGetSize gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGetSize() func(*SocketControlMessage) uint {
+	if x.xGetSize == 0 {
+		return nil
+	}
+	var rawCallback func(MessageVarp uintptr) uint
+	purego.RegisterFunc(&rawCallback, x.xGetSize)
+	return func(MessageVar *SocketControlMessage) uint {
+		return rawCallback(MessageVar.GoPointer())
+	}
+}
+
+// SetCallbackGetLevel sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGetLevel(cb func(*SocketControlMessage) int) {
+	if cb == nil {
+		x.xGetLevel = 0
+	} else {
+		x.xGetLevel = purego.NewCallback(func(MessageVarp uintptr) int {
+			return cb(SocketControlMessageNewFromInternalPtr(MessageVarp))
+		})
+	}
+}
+
+// GetCallbackGetLevel gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGetLevel() func(*SocketControlMessage) int {
+	if x.xGetLevel == 0 {
+		return nil
+	}
+	var rawCallback func(MessageVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetLevel)
+	return func(MessageVar *SocketControlMessage) int {
+		return rawCallback(MessageVar.GoPointer())
+	}
+}
+
+// SetCallbackGetType sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGetType(cb func(*SocketControlMessage) int) {
+	if cb == nil {
+		x.xGetType = 0
+	} else {
+		x.xGetType = purego.NewCallback(func(MessageVarp uintptr) int {
+			return cb(SocketControlMessageNewFromInternalPtr(MessageVarp))
+		})
+	}
+}
+
+// GetCallbackGetType gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGetType() func(*SocketControlMessage) int {
+	if x.xGetType == 0 {
+		return nil
+	}
+	var rawCallback func(MessageVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetType)
+	return func(MessageVar *SocketControlMessage) int {
+		return rawCallback(MessageVar.GoPointer())
+	}
+}
+
+// SetCallbackSerialize sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackSerialize(cb func(*SocketControlMessage, uintptr)) {
+	if cb == nil {
+		x.xSerialize = 0
+	} else {
+		x.xSerialize = purego.NewCallback(func(MessageVarp uintptr, DataVarp uintptr) {
+			cb(SocketControlMessageNewFromInternalPtr(MessageVarp), DataVarp)
+		})
+	}
+}
+
+// GetCallbackSerialize gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackSerialize() func(*SocketControlMessage, uintptr) {
+	if x.xSerialize == 0 {
+		return nil
+	}
+	var rawCallback func(MessageVarp uintptr, DataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSerialize)
+	return func(MessageVar *SocketControlMessage, DataVar uintptr) {
+		rawCallback(MessageVar.GoPointer(), DataVar)
+	}
+}
+
+// SetCallbackDeserialize sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackDeserialize(cb func(int, int, uint, uintptr) *SocketControlMessage) {
+	if cb == nil {
+		x.xDeserialize = 0
+	} else {
+		x.xDeserialize = purego.NewCallback(func(LevelVarp int, TypeVarp int, SizeVarp uint, DataVarp uintptr) uintptr {
+			ret := cb(LevelVarp, TypeVarp, SizeVarp, DataVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackDeserialize gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackDeserialize() func(int, int, uint, uintptr) *SocketControlMessage {
+	if x.xDeserialize == 0 {
+		return nil
+	}
+	var rawCallback func(LevelVarp int, TypeVarp int, SizeVarp uint, DataVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xDeserialize)
+	return func(LevelVar int, TypeVar int, SizeVar uint, DataVar uintptr) *SocketControlMessage {
+		rawRet := rawCallback(LevelVar, TypeVar, SizeVar, DataVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &SocketControlMessage{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *SocketControlMessageClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *SocketControlMessageClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type SocketControlMessagePrivate struct {
diff --git a/v4/gio/gsocketlistener.go b/v4/gio/gsocketlistener.go
index d00f6723f1234fca5853d58e7870c443b27d2793..9154564d275c88efb92a7e51505a852f976a42f4 100644
--- a/v4/gio/gsocketlistener.go
+++ b/v4/gio/gsocketlistener.go
@@ -18,25 +18,186 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	Event uintptr
+	xEvent uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 }
 
 func (x *SocketListenerClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackChanged sets the callback function.
+func (x *SocketListenerClass) SetCallbackChanged(cb func(*SocketListener)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(ListenerVarp uintptr) {
+			cb(SocketListenerNewFromInternalPtr(ListenerVarp))
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *SocketListenerClass) GetCallbackChanged() func(*SocketListener) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ListenerVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(ListenerVar *SocketListener) {
+		rawCallback(ListenerVar.GoPointer())
+	}
+}
+
+// SetCallbackEvent sets the callback function.
+func (x *SocketListenerClass) SetCallbackEvent(cb func(*SocketListener, SocketListenerEvent, *Socket)) {
+	if cb == nil {
+		x.xEvent = 0
+	} else {
+		x.xEvent = purego.NewCallback(func(ListenerVarp uintptr, EventVarp SocketListenerEvent, SocketVarp uintptr) {
+			cb(SocketListenerNewFromInternalPtr(ListenerVarp), EventVarp, SocketNewFromInternalPtr(SocketVarp))
+		})
+	}
+}
+
+// GetCallbackEvent gets the callback function.
+func (x *SocketListenerClass) GetCallbackEvent() func(*SocketListener, SocketListenerEvent, *Socket) {
+	if x.xEvent == 0 {
+		return nil
+	}
+	var rawCallback func(ListenerVarp uintptr, EventVarp SocketListenerEvent, SocketVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEvent)
+	return func(ListenerVar *SocketListener, EventVar SocketListenerEvent, SocketVar *Socket) {
+		rawCallback(ListenerVar.GoPointer(), EventVar, SocketVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *SocketListenerClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *SocketListenerClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *SocketListenerClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *SocketListenerClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *SocketListenerClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *SocketListenerClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *SocketListenerClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *SocketListenerClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *SocketListenerClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *SocketListenerClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
 type SocketListenerPrivate struct {
 	_ structs.HostLayout
 }
@@ -93,7 +254,7 @@ 	cls.Ptr = cret
 	return cls
 }
 
-var xSocketListenerAccept func(uintptr, *uintptr, uintptr, **glib.Error) uintptr
+var xSocketListenerAccept func(uintptr, uintptr, uintptr, **glib.Error) uintptr
 
 // Blocks waiting for a client to connect to any of the sockets added
 // to the listener. Returns a #GSocketConnection for the socket that was
@@ -110,7 +271,7 @@ func (x *SocketListener) Accept(SourceObjectVar **gobject.Object, CancellableVar *Cancellable) (*SocketConnection, error) {
 	var cls *SocketConnection
 	var cerr *glib.Error
 
-	cret := xSocketListenerAccept(x.GoPointer(), gobject.ConvertPtr(SourceObjectVar), CancellableVar.GoPointer(), &cerr)
+	cret := xSocketListenerAccept(x.GoPointer(), *gobject.ConvertPtr(SourceObjectVar), CancellableVar.GoPointer(), &cerr)
 
 	if cret == 0 {
 		return nil, cerr
@@ -137,14 +298,14 @@ 	xSocketListenerAcceptAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
-var xSocketListenerAcceptFinish func(uintptr, uintptr, *uintptr, **glib.Error) uintptr
+var xSocketListenerAcceptFinish func(uintptr, uintptr, uintptr, **glib.Error) uintptr
 
 // Finishes an async accept operation. See g_socket_listener_accept_async()
 func (x *SocketListener) AcceptFinish(ResultVar AsyncResult, SourceObjectVar **gobject.Object) (*SocketConnection, error) {
 	var cls *SocketConnection
 	var cerr *glib.Error
 
-	cret := xSocketListenerAcceptFinish(x.GoPointer(), ResultVar.GoPointer(), gobject.ConvertPtr(SourceObjectVar), &cerr)
+	cret := xSocketListenerAcceptFinish(x.GoPointer(), ResultVar.GoPointer(), *gobject.ConvertPtr(SourceObjectVar), &cerr)
 
 	if cret == 0 {
 		return nil, cerr
@@ -158,7 +319,7 @@ 	return cls, cerr
 
 }
 
-var xSocketListenerAcceptSocket func(uintptr, *uintptr, uintptr, **glib.Error) uintptr
+var xSocketListenerAcceptSocket func(uintptr, uintptr, uintptr, **glib.Error) uintptr
 
 // Blocks waiting for a client to connect to any of the sockets added
 // to the listener. Returns the #GSocket that was accepted.
@@ -178,7 +339,7 @@ func (x *SocketListener) AcceptSocket(SourceObjectVar **gobject.Object, CancellableVar *Cancellable) (*Socket, error) {
 	var cls *Socket
 	var cerr *glib.Error
 
-	cret := xSocketListenerAcceptSocket(x.GoPointer(), gobject.ConvertPtr(SourceObjectVar), CancellableVar.GoPointer(), &cerr)
+	cret := xSocketListenerAcceptSocket(x.GoPointer(), *gobject.ConvertPtr(SourceObjectVar), CancellableVar.GoPointer(), &cerr)
 
 	if cret == 0 {
 		return nil, cerr
@@ -205,14 +366,14 @@ 	xSocketListenerAcceptSocketAsync(x.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
 
 }
 
-var xSocketListenerAcceptSocketFinish func(uintptr, uintptr, *uintptr, **glib.Error) uintptr
+var xSocketListenerAcceptSocketFinish func(uintptr, uintptr, uintptr, **glib.Error) uintptr
 
 // Finishes an async accept operation. See g_socket_listener_accept_socket_async()
 func (x *SocketListener) AcceptSocketFinish(ResultVar AsyncResult, SourceObjectVar **gobject.Object) (*Socket, error) {
 	var cls *Socket
 	var cerr *glib.Error
 
-	cret := xSocketListenerAcceptSocketFinish(x.GoPointer(), ResultVar.GoPointer(), gobject.ConvertPtr(SourceObjectVar), &cerr)
+	cret := xSocketListenerAcceptSocketFinish(x.GoPointer(), ResultVar.GoPointer(), *gobject.ConvertPtr(SourceObjectVar), &cerr)
 
 	if cret == 0 {
 		return nil, cerr
@@ -226,7 +387,7 @@ 	return cls, cerr
 
 }
 
-var xSocketListenerAddAddress func(uintptr, uintptr, SocketType, SocketProtocol, uintptr, *uintptr, **glib.Error) bool
+var xSocketListenerAddAddress func(uintptr, uintptr, SocketType, SocketProtocol, uintptr, uintptr, **glib.Error) bool
 
 // Creates a socket of type @type and protocol @protocol, binds
 // it to @address and adds it to the set of sockets we're accepting
@@ -254,7 +415,7 @@ // references may be held internally.
 func (x *SocketListener) AddAddress(AddressVar *SocketAddress, TypeVar SocketType, ProtocolVar SocketProtocol, SourceObjectVar *gobject.Object, EffectiveAddressVar **SocketAddress) (bool, error) {
 	var cerr *glib.Error
 
-	cret := xSocketListenerAddAddress(x.GoPointer(), AddressVar.GoPointer(), TypeVar, ProtocolVar, SourceObjectVar.GoPointer(), gobject.ConvertPtr(EffectiveAddressVar), &cerr)
+	cret := xSocketListenerAddAddress(x.GoPointer(), AddressVar.GoPointer(), TypeVar, ProtocolVar, SourceObjectVar.GoPointer(), *gobject.ConvertPtr(EffectiveAddressVar), &cerr)
 	if cerr == nil {
 		return cret, nil
 	}
diff --git a/v4/gio/gsocketservice.go b/v4/gio/gsocketservice.go
index f7a842f74077f83c5cb7047c3a365d6a071614f4..b4c329f0dce9c912b6343f28a4b457c73292d803 100644
--- a/v4/gio/gsocketservice.go
+++ b/v4/gio/gsocketservice.go
@@ -18,23 +18,184 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Incoming uintptr
+	xIncoming uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 }
 
 func (x *SocketServiceClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackIncoming sets the callback function.
+func (x *SocketServiceClass) SetCallbackIncoming(cb func(*SocketService, *SocketConnection, *gobject.Object) bool) {
+	if cb == nil {
+		x.xIncoming = 0
+	} else {
+		x.xIncoming = purego.NewCallback(func(ServiceVarp uintptr, ConnectionVarp uintptr, SourceObjectVarp uintptr) bool {
+			return cb(SocketServiceNewFromInternalPtr(ServiceVarp), SocketConnectionNewFromInternalPtr(ConnectionVarp), gobject.ObjectNewFromInternalPtr(SourceObjectVarp))
+		})
+	}
+}
+
+// GetCallbackIncoming gets the callback function.
+func (x *SocketServiceClass) GetCallbackIncoming() func(*SocketService, *SocketConnection, *gobject.Object) bool {
+	if x.xIncoming == 0 {
+		return nil
+	}
+	var rawCallback func(ServiceVarp uintptr, ConnectionVarp uintptr, SourceObjectVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIncoming)
+	return func(ServiceVar *SocketService, ConnectionVar *SocketConnection, SourceObjectVar *gobject.Object) bool {
+		return rawCallback(ServiceVar.GoPointer(), ConnectionVar.GoPointer(), SourceObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *SocketServiceClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *SocketServiceClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *SocketServiceClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *SocketServiceClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *SocketServiceClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *SocketServiceClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *SocketServiceClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *SocketServiceClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *SocketServiceClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *SocketServiceClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *SocketServiceClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *SocketServiceClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
 }
 
 type SocketServicePrivate struct {
diff --git a/v4/gio/gthreadedsocketservice.go b/v4/gio/gthreadedsocketservice.go
index b5605ddc86d8e6c19101887cff3e0733fb5ad1ef..81a6d9f7def41e60677f3211addc4b64bf6d2193 100644
--- a/v4/gio/gthreadedsocketservice.go
+++ b/v4/gio/gthreadedsocketservice.go
@@ -17,21 +17,159 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Run uintptr
+	xRun uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *ThreadedSocketServiceClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackRun sets the callback function.
+func (x *ThreadedSocketServiceClass) SetCallbackRun(cb func(*ThreadedSocketService, *SocketConnection, *gobject.Object) bool) {
+	if cb == nil {
+		x.xRun = 0
+	} else {
+		x.xRun = purego.NewCallback(func(ServiceVarp uintptr, ConnectionVarp uintptr, SourceObjectVarp uintptr) bool {
+			return cb(ThreadedSocketServiceNewFromInternalPtr(ServiceVarp), SocketConnectionNewFromInternalPtr(ConnectionVarp), gobject.ObjectNewFromInternalPtr(SourceObjectVarp))
+		})
+	}
+}
+
+// GetCallbackRun gets the callback function.
+func (x *ThreadedSocketServiceClass) GetCallbackRun() func(*ThreadedSocketService, *SocketConnection, *gobject.Object) bool {
+	if x.xRun == 0 {
+		return nil
+	}
+	var rawCallback func(ServiceVarp uintptr, ConnectionVarp uintptr, SourceObjectVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xRun)
+	return func(ServiceVar *ThreadedSocketService, ConnectionVar *SocketConnection, SourceObjectVar *gobject.Object) bool {
+		return rawCallback(ServiceVar.GoPointer(), ConnectionVar.GoPointer(), SourceObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *ThreadedSocketServiceClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *ThreadedSocketServiceClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *ThreadedSocketServiceClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *ThreadedSocketServiceClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *ThreadedSocketServiceClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *ThreadedSocketServiceClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *ThreadedSocketServiceClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *ThreadedSocketServiceClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *ThreadedSocketServiceClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *ThreadedSocketServiceClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type ThreadedSocketServicePrivate struct {
diff --git a/v4/gio/gtlsbackend.go b/v4/gio/gtlsbackend.go
index 626e6a923106bd13053b7e2d5efd339546b1671b..da29fde8c8a46466e08d8586906ca8f04593aaff 100644
--- a/v4/gio/gtlsbackend.go
+++ b/v4/gio/gtlsbackend.go
@@ -17,27 +17,244 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	SupportsTls uintptr
+	xSupportsTls uintptr
 
-	GetCertificateType uintptr
+	xGetCertificateType uintptr
 
-	GetClientConnectionType uintptr
+	xGetClientConnectionType uintptr
 
-	GetServerConnectionType uintptr
+	xGetServerConnectionType uintptr
 
-	GetFileDatabaseType uintptr
+	xGetFileDatabaseType uintptr
 
-	GetDefaultDatabase uintptr
+	xGetDefaultDatabase uintptr
 
-	SupportsDtls uintptr
+	xSupportsDtls uintptr
 
-	GetDtlsClientConnectionType uintptr
+	xGetDtlsClientConnectionType uintptr
 
-	GetDtlsServerConnectionType uintptr
+	xGetDtlsServerConnectionType uintptr
 }
 
 func (x *TlsBackendInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackSupportsTls sets the callback function.
+func (x *TlsBackendInterface) SetCallbackSupportsTls(cb func(TlsBackend) bool) {
+	if cb == nil {
+		x.xSupportsTls = 0
+	} else {
+		x.xSupportsTls = purego.NewCallback(func(BackendVarp uintptr) bool {
+			return cb(&TlsBackendBase{Ptr: BackendVarp})
+		})
+	}
+}
+
+// GetCallbackSupportsTls gets the callback function.
+func (x *TlsBackendInterface) GetCallbackSupportsTls() func(TlsBackend) bool {
+	if x.xSupportsTls == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSupportsTls)
+	return func(BackendVar TlsBackend) bool {
+		return rawCallback(BackendVar.GoPointer())
+	}
+}
+
+// SetCallbackGetCertificateType sets the callback function.
+func (x *TlsBackendInterface) SetCallbackGetCertificateType(cb func() types.GType) {
+	if cb == nil {
+		x.xGetCertificateType = 0
+	} else {
+		x.xGetCertificateType = purego.NewCallback(func() types.GType {
+			return cb()
+		})
+	}
+}
+
+// GetCallbackGetCertificateType gets the callback function.
+func (x *TlsBackendInterface) GetCallbackGetCertificateType() func() types.GType {
+	if x.xGetCertificateType == 0 {
+		return nil
+	}
+	var rawCallback func() types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetCertificateType)
+	return func() types.GType {
+		return rawCallback()
+	}
+}
+
+// SetCallbackGetClientConnectionType sets the callback function.
+func (x *TlsBackendInterface) SetCallbackGetClientConnectionType(cb func() types.GType) {
+	if cb == nil {
+		x.xGetClientConnectionType = 0
+	} else {
+		x.xGetClientConnectionType = purego.NewCallback(func() types.GType {
+			return cb()
+		})
+	}
+}
+
+// GetCallbackGetClientConnectionType gets the callback function.
+func (x *TlsBackendInterface) GetCallbackGetClientConnectionType() func() types.GType {
+	if x.xGetClientConnectionType == 0 {
+		return nil
+	}
+	var rawCallback func() types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetClientConnectionType)
+	return func() types.GType {
+		return rawCallback()
+	}
+}
+
+// SetCallbackGetServerConnectionType sets the callback function.
+func (x *TlsBackendInterface) SetCallbackGetServerConnectionType(cb func() types.GType) {
+	if cb == nil {
+		x.xGetServerConnectionType = 0
+	} else {
+		x.xGetServerConnectionType = purego.NewCallback(func() types.GType {
+			return cb()
+		})
+	}
+}
+
+// GetCallbackGetServerConnectionType gets the callback function.
+func (x *TlsBackendInterface) GetCallbackGetServerConnectionType() func() types.GType {
+	if x.xGetServerConnectionType == 0 {
+		return nil
+	}
+	var rawCallback func() types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetServerConnectionType)
+	return func() types.GType {
+		return rawCallback()
+	}
+}
+
+// SetCallbackGetFileDatabaseType sets the callback function.
+func (x *TlsBackendInterface) SetCallbackGetFileDatabaseType(cb func() types.GType) {
+	if cb == nil {
+		x.xGetFileDatabaseType = 0
+	} else {
+		x.xGetFileDatabaseType = purego.NewCallback(func() types.GType {
+			return cb()
+		})
+	}
+}
+
+// GetCallbackGetFileDatabaseType gets the callback function.
+func (x *TlsBackendInterface) GetCallbackGetFileDatabaseType() func() types.GType {
+	if x.xGetFileDatabaseType == 0 {
+		return nil
+	}
+	var rawCallback func() types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetFileDatabaseType)
+	return func() types.GType {
+		return rawCallback()
+	}
+}
+
+// SetCallbackGetDefaultDatabase sets the callback function.
+func (x *TlsBackendInterface) SetCallbackGetDefaultDatabase(cb func(TlsBackend) *TlsDatabase) {
+	if cb == nil {
+		x.xGetDefaultDatabase = 0
+	} else {
+		x.xGetDefaultDatabase = purego.NewCallback(func(BackendVarp uintptr) uintptr {
+			ret := cb(&TlsBackendBase{Ptr: BackendVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetDefaultDatabase gets the callback function.
+func (x *TlsBackendInterface) GetCallbackGetDefaultDatabase() func(TlsBackend) *TlsDatabase {
+	if x.xGetDefaultDatabase == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetDefaultDatabase)
+	return func(BackendVar TlsBackend) *TlsDatabase {
+		rawRet := rawCallback(BackendVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &TlsDatabase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSupportsDtls sets the callback function.
+func (x *TlsBackendInterface) SetCallbackSupportsDtls(cb func(TlsBackend) bool) {
+	if cb == nil {
+		x.xSupportsDtls = 0
+	} else {
+		x.xSupportsDtls = purego.NewCallback(func(BackendVarp uintptr) bool {
+			return cb(&TlsBackendBase{Ptr: BackendVarp})
+		})
+	}
+}
+
+// GetCallbackSupportsDtls gets the callback function.
+func (x *TlsBackendInterface) GetCallbackSupportsDtls() func(TlsBackend) bool {
+	if x.xSupportsDtls == 0 {
+		return nil
+	}
+	var rawCallback func(BackendVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSupportsDtls)
+	return func(BackendVar TlsBackend) bool {
+		return rawCallback(BackendVar.GoPointer())
+	}
+}
+
+// SetCallbackGetDtlsClientConnectionType sets the callback function.
+func (x *TlsBackendInterface) SetCallbackGetDtlsClientConnectionType(cb func() types.GType) {
+	if cb == nil {
+		x.xGetDtlsClientConnectionType = 0
+	} else {
+		x.xGetDtlsClientConnectionType = purego.NewCallback(func() types.GType {
+			return cb()
+		})
+	}
+}
+
+// GetCallbackGetDtlsClientConnectionType gets the callback function.
+func (x *TlsBackendInterface) GetCallbackGetDtlsClientConnectionType() func() types.GType {
+	if x.xGetDtlsClientConnectionType == 0 {
+		return nil
+	}
+	var rawCallback func() types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetDtlsClientConnectionType)
+	return func() types.GType {
+		return rawCallback()
+	}
+}
+
+// SetCallbackGetDtlsServerConnectionType sets the callback function.
+func (x *TlsBackendInterface) SetCallbackGetDtlsServerConnectionType(cb func() types.GType) {
+	if cb == nil {
+		x.xGetDtlsServerConnectionType = 0
+	} else {
+		x.xGetDtlsServerConnectionType = purego.NewCallback(func() types.GType {
+			return cb()
+		})
+	}
+}
+
+// GetCallbackGetDtlsServerConnectionType gets the callback function.
+func (x *TlsBackendInterface) GetCallbackGetDtlsServerConnectionType() func() types.GType {
+	if x.xGetDtlsServerConnectionType == 0 {
+		return nil
+	}
+	var rawCallback func() types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetDtlsServerConnectionType)
+	return func() types.GType {
+		return rawCallback()
+	}
 }
 
 // TLS (Transport Layer Security, aka SSL) and DTLS backend.
diff --git a/v4/gio/gtlscertificate.go b/v4/gio/gtlscertificate.go
index 422c66dd6e08f142835858fed36af25ed6e96a76..b4e97ab7936c8ae8375c8d297e902d142cb2a71e 100644
--- a/v4/gio/gtlscertificate.go
+++ b/v4/gio/gtlscertificate.go
@@ -17,13 +17,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Verify uintptr
+	xVerify uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *TlsCertificateClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackVerify sets the callback function.
+func (x *TlsCertificateClass) SetCallbackVerify(cb func(*TlsCertificate, SocketConnectable, *TlsCertificate) TlsCertificateFlags) {
+	if cb == nil {
+		x.xVerify = 0
+	} else {
+		x.xVerify = purego.NewCallback(func(CertVarp uintptr, IdentityVarp uintptr, TrustedCaVarp uintptr) TlsCertificateFlags {
+			return cb(TlsCertificateNewFromInternalPtr(CertVarp), &SocketConnectableBase{Ptr: IdentityVarp}, TlsCertificateNewFromInternalPtr(TrustedCaVarp))
+		})
+	}
+}
+
+// GetCallbackVerify gets the callback function.
+func (x *TlsCertificateClass) GetCallbackVerify() func(*TlsCertificate, SocketConnectable, *TlsCertificate) TlsCertificateFlags {
+	if x.xVerify == 0 {
+		return nil
+	}
+	var rawCallback func(CertVarp uintptr, IdentityVarp uintptr, TrustedCaVarp uintptr) TlsCertificateFlags
+	purego.RegisterFunc(&rawCallback, x.xVerify)
+	return func(CertVar *TlsCertificate, IdentityVar SocketConnectable, TrustedCaVar *TlsCertificate) TlsCertificateFlags {
+		return rawCallback(CertVar.GoPointer(), IdentityVar.GoPointer(), TrustedCaVar.GoPointer())
+	}
 }
 
 type TlsCertificatePrivate struct {
diff --git a/v4/gio/gtlsclientconnection.go b/v4/gio/gtlsclientconnection.go
index 605d7f62814f12c5c08684531f5f648f5d6bf9bd..ba51f63d9b4d50703ff9de877983f0cdcd1c0369 100644
--- a/v4/gio/gtlsclientconnection.go
+++ b/v4/gio/gtlsclientconnection.go
@@ -18,11 +18,34 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	CopySessionState uintptr
+	xCopySessionState uintptr
 }
 
 func (x *TlsClientConnectionInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackCopySessionState sets the callback function.
+func (x *TlsClientConnectionInterface) SetCallbackCopySessionState(cb func(TlsClientConnection, TlsClientConnection)) {
+	if cb == nil {
+		x.xCopySessionState = 0
+	} else {
+		x.xCopySessionState = purego.NewCallback(func(ConnVarp uintptr, SourceVarp uintptr) {
+			cb(&TlsClientConnectionBase{Ptr: ConnVarp}, &TlsClientConnectionBase{Ptr: SourceVarp})
+		})
+	}
+}
+
+// GetCallbackCopySessionState gets the callback function.
+func (x *TlsClientConnectionInterface) GetCallbackCopySessionState() func(TlsClientConnection, TlsClientConnection) {
+	if x.xCopySessionState == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, SourceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCopySessionState)
+	return func(ConnVar TlsClientConnection, SourceVar TlsClientConnection) {
+		rawCallback(ConnVar.GoPointer(), SourceVar.GoPointer())
+	}
 }
 
 // #GTlsClientConnection is the client-side subclass of
diff --git a/v4/gio/gtlsconnection.go b/v4/gio/gtlsconnection.go
index 35bc205d53aaad3499295134f03f3a7984fe65d5..4c49648e5c8015ffad6b030a50e0a9b026caea2b 100644
--- a/v4/gio/gtlsconnection.go
+++ b/v4/gio/gtlsconnection.go
@@ -18,23 +18,161 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	AcceptCertificate uintptr
+	xAcceptCertificate uintptr
 
-	Handshake uintptr
+	xHandshake uintptr
 
-	HandshakeAsync uintptr
+	xHandshakeAsync uintptr
 
-	HandshakeFinish uintptr
+	xHandshakeFinish uintptr
 
-	GetBindingData uintptr
+	xGetBindingData uintptr
 
-	GetNegotiatedProtocol uintptr
+	xGetNegotiatedProtocol uintptr
 
 	Padding [6]uintptr
 }
 
 func (x *TlsConnectionClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAcceptCertificate sets the callback function.
+func (x *TlsConnectionClass) SetCallbackAcceptCertificate(cb func(*TlsConnection, *TlsCertificate, TlsCertificateFlags) bool) {
+	if cb == nil {
+		x.xAcceptCertificate = 0
+	} else {
+		x.xAcceptCertificate = purego.NewCallback(func(ConnectionVarp uintptr, PeerCertVarp uintptr, ErrorsVarp TlsCertificateFlags) bool {
+			return cb(TlsConnectionNewFromInternalPtr(ConnectionVarp), TlsCertificateNewFromInternalPtr(PeerCertVarp), ErrorsVarp)
+		})
+	}
+}
+
+// GetCallbackAcceptCertificate gets the callback function.
+func (x *TlsConnectionClass) GetCallbackAcceptCertificate() func(*TlsConnection, *TlsCertificate, TlsCertificateFlags) bool {
+	if x.xAcceptCertificate == 0 {
+		return nil
+	}
+	var rawCallback func(ConnectionVarp uintptr, PeerCertVarp uintptr, ErrorsVarp TlsCertificateFlags) bool
+	purego.RegisterFunc(&rawCallback, x.xAcceptCertificate)
+	return func(ConnectionVar *TlsConnection, PeerCertVar *TlsCertificate, ErrorsVar TlsCertificateFlags) bool {
+		return rawCallback(ConnectionVar.GoPointer(), PeerCertVar.GoPointer(), ErrorsVar)
+	}
+}
+
+// SetCallbackHandshake sets the callback function.
+func (x *TlsConnectionClass) SetCallbackHandshake(cb func(*TlsConnection, *Cancellable) bool) {
+	if cb == nil {
+		x.xHandshake = 0
+	} else {
+		x.xHandshake = purego.NewCallback(func(ConnVarp uintptr, CancellableVarp uintptr) bool {
+			return cb(TlsConnectionNewFromInternalPtr(ConnVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackHandshake gets the callback function.
+func (x *TlsConnectionClass) GetCallbackHandshake() func(*TlsConnection, *Cancellable) bool {
+	if x.xHandshake == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xHandshake)
+	return func(ConnVar *TlsConnection, CancellableVar *Cancellable) bool {
+		return rawCallback(ConnVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackHandshakeAsync sets the callback function.
+func (x *TlsConnectionClass) SetCallbackHandshakeAsync(cb func(*TlsConnection, int, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xHandshakeAsync = 0
+	} else {
+		x.xHandshakeAsync = purego.NewCallback(func(ConnVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(TlsConnectionNewFromInternalPtr(ConnVarp), IoPriorityVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackHandshakeAsync gets the callback function.
+func (x *TlsConnectionClass) GetCallbackHandshakeAsync() func(*TlsConnection, int, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xHandshakeAsync == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, IoPriorityVarp int, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xHandshakeAsync)
+	return func(ConnVar *TlsConnection, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(ConnVar.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackHandshakeFinish sets the callback function.
+func (x *TlsConnectionClass) SetCallbackHandshakeFinish(cb func(*TlsConnection, AsyncResult) bool) {
+	if cb == nil {
+		x.xHandshakeFinish = 0
+	} else {
+		x.xHandshakeFinish = purego.NewCallback(func(ConnVarp uintptr, ResultVarp uintptr) bool {
+			return cb(TlsConnectionNewFromInternalPtr(ConnVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackHandshakeFinish gets the callback function.
+func (x *TlsConnectionClass) GetCallbackHandshakeFinish() func(*TlsConnection, AsyncResult) bool {
+	if x.xHandshakeFinish == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xHandshakeFinish)
+	return func(ConnVar *TlsConnection, ResultVar AsyncResult) bool {
+		return rawCallback(ConnVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGetBindingData sets the callback function.
+func (x *TlsConnectionClass) SetCallbackGetBindingData(cb func(*TlsConnection, TlsChannelBindingType, []byte) bool) {
+	if cb == nil {
+		x.xGetBindingData = 0
+	} else {
+		x.xGetBindingData = purego.NewCallback(func(ConnVarp uintptr, TypeVarp TlsChannelBindingType, DataVarp []byte) bool {
+			return cb(TlsConnectionNewFromInternalPtr(ConnVarp), TypeVarp, DataVarp)
+		})
+	}
+}
+
+// GetCallbackGetBindingData gets the callback function.
+func (x *TlsConnectionClass) GetCallbackGetBindingData() func(*TlsConnection, TlsChannelBindingType, []byte) bool {
+	if x.xGetBindingData == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr, TypeVarp TlsChannelBindingType, DataVarp []byte) bool
+	purego.RegisterFunc(&rawCallback, x.xGetBindingData)
+	return func(ConnVar *TlsConnection, TypeVar TlsChannelBindingType, DataVar []byte) bool {
+		return rawCallback(ConnVar.GoPointer(), TypeVar, DataVar)
+	}
+}
+
+// SetCallbackGetNegotiatedProtocol sets the callback function.
+func (x *TlsConnectionClass) SetCallbackGetNegotiatedProtocol(cb func(*TlsConnection) string) {
+	if cb == nil {
+		x.xGetNegotiatedProtocol = 0
+	} else {
+		x.xGetNegotiatedProtocol = purego.NewCallback(func(ConnVarp uintptr) string {
+			return cb(TlsConnectionNewFromInternalPtr(ConnVarp))
+		})
+	}
+}
+
+// GetCallbackGetNegotiatedProtocol gets the callback function.
+func (x *TlsConnectionClass) GetCallbackGetNegotiatedProtocol() func(*TlsConnection) string {
+	if x.xGetNegotiatedProtocol == 0 {
+		return nil
+	}
+	var rawCallback func(ConnVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetNegotiatedProtocol)
+	return func(ConnVar *TlsConnection) string {
+		return rawCallback(ConnVar.GoPointer())
+	}
 }
 
 type TlsConnectionPrivate struct {
diff --git a/v4/gio/gtlsdatabase.go b/v4/gio/gtlsdatabase.go
index c7e30dbe92fc4e1a01f995cf3941413b74b4fd3b..98a91fd056701adfc327ba054d6c74c247776d1d 100644
--- a/v4/gio/gtlsdatabase.go
+++ b/v4/gio/gtlsdatabase.go
@@ -20,37 +20,376 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	VerifyChain uintptr
+	xVerifyChain uintptr
 
-	VerifyChainAsync uintptr
+	xVerifyChainAsync uintptr
 
-	VerifyChainFinish uintptr
+	xVerifyChainFinish uintptr
 
-	CreateCertificateHandle uintptr
+	xCreateCertificateHandle uintptr
 
-	LookupCertificateForHandle uintptr
+	xLookupCertificateForHandle uintptr
 
-	LookupCertificateForHandleAsync uintptr
+	xLookupCertificateForHandleAsync uintptr
 
-	LookupCertificateForHandleFinish uintptr
+	xLookupCertificateForHandleFinish uintptr
 
-	LookupCertificateIssuer uintptr
+	xLookupCertificateIssuer uintptr
 
-	LookupCertificateIssuerAsync uintptr
+	xLookupCertificateIssuerAsync uintptr
 
-	LookupCertificateIssuerFinish uintptr
+	xLookupCertificateIssuerFinish uintptr
 
-	LookupCertificatesIssuedBy uintptr
+	xLookupCertificatesIssuedBy uintptr
 
-	LookupCertificatesIssuedByAsync uintptr
+	xLookupCertificatesIssuedByAsync uintptr
 
-	LookupCertificatesIssuedByFinish uintptr
+	xLookupCertificatesIssuedByFinish uintptr
 
 	Padding [16]uintptr
 }
 
 func (x *TlsDatabaseClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackVerifyChain sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackVerifyChain(cb func(*TlsDatabase, *TlsCertificate, string, SocketConnectable, *TlsInteraction, TlsDatabaseVerifyFlags, *Cancellable) TlsCertificateFlags) {
+	if cb == nil {
+		x.xVerifyChain = 0
+	} else {
+		x.xVerifyChain = purego.NewCallback(func(SelfVarp uintptr, ChainVarp uintptr, PurposeVarp string, IdentityVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseVerifyFlags, CancellableVarp uintptr) TlsCertificateFlags {
+			return cb(TlsDatabaseNewFromInternalPtr(SelfVarp), TlsCertificateNewFromInternalPtr(ChainVarp), PurposeVarp, &SocketConnectableBase{Ptr: IdentityVarp}, TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackVerifyChain gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackVerifyChain() func(*TlsDatabase, *TlsCertificate, string, SocketConnectable, *TlsInteraction, TlsDatabaseVerifyFlags, *Cancellable) TlsCertificateFlags {
+	if x.xVerifyChain == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ChainVarp uintptr, PurposeVarp string, IdentityVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseVerifyFlags, CancellableVarp uintptr) TlsCertificateFlags
+	purego.RegisterFunc(&rawCallback, x.xVerifyChain)
+	return func(SelfVar *TlsDatabase, ChainVar *TlsCertificate, PurposeVar string, IdentityVar SocketConnectable, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseVerifyFlags, CancellableVar *Cancellable) TlsCertificateFlags {
+		return rawCallback(SelfVar.GoPointer(), ChainVar.GoPointer(), PurposeVar, IdentityVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackVerifyChainAsync sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackVerifyChainAsync(cb func(*TlsDatabase, *TlsCertificate, string, SocketConnectable, *TlsInteraction, TlsDatabaseVerifyFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xVerifyChainAsync = 0
+	} else {
+		x.xVerifyChainAsync = purego.NewCallback(func(SelfVarp uintptr, ChainVarp uintptr, PurposeVarp string, IdentityVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseVerifyFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(TlsDatabaseNewFromInternalPtr(SelfVarp), TlsCertificateNewFromInternalPtr(ChainVarp), PurposeVarp, &SocketConnectableBase{Ptr: IdentityVarp}, TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackVerifyChainAsync gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackVerifyChainAsync() func(*TlsDatabase, *TlsCertificate, string, SocketConnectable, *TlsInteraction, TlsDatabaseVerifyFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xVerifyChainAsync == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ChainVarp uintptr, PurposeVarp string, IdentityVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseVerifyFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xVerifyChainAsync)
+	return func(SelfVar *TlsDatabase, ChainVar *TlsCertificate, PurposeVar string, IdentityVar SocketConnectable, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseVerifyFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(SelfVar.GoPointer(), ChainVar.GoPointer(), PurposeVar, IdentityVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackVerifyChainFinish sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackVerifyChainFinish(cb func(*TlsDatabase, AsyncResult) TlsCertificateFlags) {
+	if cb == nil {
+		x.xVerifyChainFinish = 0
+	} else {
+		x.xVerifyChainFinish = purego.NewCallback(func(SelfVarp uintptr, ResultVarp uintptr) TlsCertificateFlags {
+			return cb(TlsDatabaseNewFromInternalPtr(SelfVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackVerifyChainFinish gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackVerifyChainFinish() func(*TlsDatabase, AsyncResult) TlsCertificateFlags {
+	if x.xVerifyChainFinish == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ResultVarp uintptr) TlsCertificateFlags
+	purego.RegisterFunc(&rawCallback, x.xVerifyChainFinish)
+	return func(SelfVar *TlsDatabase, ResultVar AsyncResult) TlsCertificateFlags {
+		return rawCallback(SelfVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackCreateCertificateHandle sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackCreateCertificateHandle(cb func(*TlsDatabase, *TlsCertificate) string) {
+	if cb == nil {
+		x.xCreateCertificateHandle = 0
+	} else {
+		x.xCreateCertificateHandle = purego.NewCallback(func(SelfVarp uintptr, CertificateVarp uintptr) string {
+			return cb(TlsDatabaseNewFromInternalPtr(SelfVarp), TlsCertificateNewFromInternalPtr(CertificateVarp))
+		})
+	}
+}
+
+// GetCallbackCreateCertificateHandle gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackCreateCertificateHandle() func(*TlsDatabase, *TlsCertificate) string {
+	if x.xCreateCertificateHandle == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, CertificateVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xCreateCertificateHandle)
+	return func(SelfVar *TlsDatabase, CertificateVar *TlsCertificate) string {
+		return rawCallback(SelfVar.GoPointer(), CertificateVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupCertificateForHandle sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificateForHandle(cb func(*TlsDatabase, string, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable) *TlsCertificate) {
+	if cb == nil {
+		x.xLookupCertificateForHandle = 0
+	} else {
+		x.xLookupCertificateForHandle = purego.NewCallback(func(SelfVarp uintptr, HandleVarp string, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(TlsDatabaseNewFromInternalPtr(SelfVarp), HandleVarp, TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLookupCertificateForHandle gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificateForHandle() func(*TlsDatabase, string, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable) *TlsCertificate {
+	if x.xLookupCertificateForHandle == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, HandleVarp string, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificateForHandle)
+	return func(SelfVar *TlsDatabase, HandleVar string, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable) *TlsCertificate {
+		rawRet := rawCallback(SelfVar.GoPointer(), HandleVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &TlsCertificate{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackLookupCertificateForHandleAsync sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificateForHandleAsync(cb func(*TlsDatabase, string, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupCertificateForHandleAsync = 0
+	} else {
+		x.xLookupCertificateForHandleAsync = purego.NewCallback(func(SelfVarp uintptr, HandleVarp string, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(TlsDatabaseNewFromInternalPtr(SelfVarp), HandleVarp, TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupCertificateForHandleAsync gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificateForHandleAsync() func(*TlsDatabase, string, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupCertificateForHandleAsync == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, HandleVarp string, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificateForHandleAsync)
+	return func(SelfVar *TlsDatabase, HandleVar string, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(SelfVar.GoPointer(), HandleVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupCertificateForHandleFinish sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificateForHandleFinish(cb func(*TlsDatabase, AsyncResult) *TlsCertificate) {
+	if cb == nil {
+		x.xLookupCertificateForHandleFinish = 0
+	} else {
+		x.xLookupCertificateForHandleFinish = purego.NewCallback(func(SelfVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(TlsDatabaseNewFromInternalPtr(SelfVarp), &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLookupCertificateForHandleFinish gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificateForHandleFinish() func(*TlsDatabase, AsyncResult) *TlsCertificate {
+	if x.xLookupCertificateForHandleFinish == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificateForHandleFinish)
+	return func(SelfVar *TlsDatabase, ResultVar AsyncResult) *TlsCertificate {
+		rawRet := rawCallback(SelfVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &TlsCertificate{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackLookupCertificateIssuer sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificateIssuer(cb func(*TlsDatabase, *TlsCertificate, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable) *TlsCertificate) {
+	if cb == nil {
+		x.xLookupCertificateIssuer = 0
+	} else {
+		x.xLookupCertificateIssuer = purego.NewCallback(func(SelfVarp uintptr, CertificateVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr) uintptr {
+			ret := cb(TlsDatabaseNewFromInternalPtr(SelfVarp), TlsCertificateNewFromInternalPtr(CertificateVarp), TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLookupCertificateIssuer gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificateIssuer() func(*TlsDatabase, *TlsCertificate, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable) *TlsCertificate {
+	if x.xLookupCertificateIssuer == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, CertificateVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificateIssuer)
+	return func(SelfVar *TlsDatabase, CertificateVar *TlsCertificate, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable) *TlsCertificate {
+		rawRet := rawCallback(SelfVar.GoPointer(), CertificateVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &TlsCertificate{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackLookupCertificateIssuerAsync sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificateIssuerAsync(cb func(*TlsDatabase, *TlsCertificate, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupCertificateIssuerAsync = 0
+	} else {
+		x.xLookupCertificateIssuerAsync = purego.NewCallback(func(SelfVarp uintptr, CertificateVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(TlsDatabaseNewFromInternalPtr(SelfVarp), TlsCertificateNewFromInternalPtr(CertificateVarp), TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupCertificateIssuerAsync gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificateIssuerAsync() func(*TlsDatabase, *TlsCertificate, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupCertificateIssuerAsync == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, CertificateVarp uintptr, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificateIssuerAsync)
+	return func(SelfVar *TlsDatabase, CertificateVar *TlsCertificate, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(SelfVar.GoPointer(), CertificateVar.GoPointer(), InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupCertificateIssuerFinish sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificateIssuerFinish(cb func(*TlsDatabase, AsyncResult) *TlsCertificate) {
+	if cb == nil {
+		x.xLookupCertificateIssuerFinish = 0
+	} else {
+		x.xLookupCertificateIssuerFinish = purego.NewCallback(func(SelfVarp uintptr, ResultVarp uintptr) uintptr {
+			ret := cb(TlsDatabaseNewFromInternalPtr(SelfVarp), &AsyncResultBase{Ptr: ResultVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLookupCertificateIssuerFinish gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificateIssuerFinish() func(*TlsDatabase, AsyncResult) *TlsCertificate {
+	if x.xLookupCertificateIssuerFinish == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ResultVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificateIssuerFinish)
+	return func(SelfVar *TlsDatabase, ResultVar AsyncResult) *TlsCertificate {
+		rawRet := rawCallback(SelfVar.GoPointer(), ResultVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &TlsCertificate{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackLookupCertificatesIssuedBy sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificatesIssuedBy(cb func(*TlsDatabase, []byte, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable) *glib.List) {
+	if cb == nil {
+		x.xLookupCertificatesIssuedBy = 0
+	} else {
+		x.xLookupCertificatesIssuedBy = purego.NewCallback(func(SelfVarp uintptr, IssuerRawDnVarp []byte, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr) *glib.List {
+			return cb(TlsDatabaseNewFromInternalPtr(SelfVarp), IssuerRawDnVarp, TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLookupCertificatesIssuedBy gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificatesIssuedBy() func(*TlsDatabase, []byte, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable) *glib.List {
+	if x.xLookupCertificatesIssuedBy == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, IssuerRawDnVarp []byte, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificatesIssuedBy)
+	return func(SelfVar *TlsDatabase, IssuerRawDnVar []byte, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable) *glib.List {
+		return rawCallback(SelfVar.GoPointer(), IssuerRawDnVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackLookupCertificatesIssuedByAsync sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificatesIssuedByAsync(cb func(*TlsDatabase, []byte, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xLookupCertificatesIssuedByAsync = 0
+	} else {
+		x.xLookupCertificatesIssuedByAsync = purego.NewCallback(func(SelfVarp uintptr, IssuerRawDnVarp []byte, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(TlsDatabaseNewFromInternalPtr(SelfVarp), IssuerRawDnVarp, TlsInteractionNewFromInternalPtr(InteractionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackLookupCertificatesIssuedByAsync gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificatesIssuedByAsync() func(*TlsDatabase, []byte, *TlsInteraction, TlsDatabaseLookupFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xLookupCertificatesIssuedByAsync == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, IssuerRawDnVarp []byte, InteractionVarp uintptr, FlagsVarp TlsDatabaseLookupFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificatesIssuedByAsync)
+	return func(SelfVar *TlsDatabase, IssuerRawDnVar []byte, InteractionVar *TlsInteraction, FlagsVar TlsDatabaseLookupFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(SelfVar.GoPointer(), IssuerRawDnVar, InteractionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackLookupCertificatesIssuedByFinish sets the callback function.
+func (x *TlsDatabaseClass) SetCallbackLookupCertificatesIssuedByFinish(cb func(*TlsDatabase, AsyncResult) *glib.List) {
+	if cb == nil {
+		x.xLookupCertificatesIssuedByFinish = 0
+	} else {
+		x.xLookupCertificatesIssuedByFinish = purego.NewCallback(func(SelfVarp uintptr, ResultVarp uintptr) *glib.List {
+			return cb(TlsDatabaseNewFromInternalPtr(SelfVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackLookupCertificatesIssuedByFinish gets the callback function.
+func (x *TlsDatabaseClass) GetCallbackLookupCertificatesIssuedByFinish() func(*TlsDatabase, AsyncResult) *glib.List {
+	if x.xLookupCertificatesIssuedByFinish == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ResultVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xLookupCertificatesIssuedByFinish)
+	return func(SelfVar *TlsDatabase, ResultVar AsyncResult) *glib.List {
+		return rawCallback(SelfVar.GoPointer(), ResultVar.GoPointer())
+	}
 }
 
 type TlsDatabasePrivate struct {
diff --git a/v4/gio/gtlsinteraction.go b/v4/gio/gtlsinteraction.go
index 5efb93422d844362ac043dab82cf07f45dc9cba9..6bbfc07706de3b9df0c0d5774d8e5031f89129c1 100644
--- a/v4/gio/gtlsinteraction.go
+++ b/v4/gio/gtlsinteraction.go
@@ -31,23 +31,161 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	AskPassword uintptr
+	xAskPassword uintptr
 
-	AskPasswordAsync uintptr
+	xAskPasswordAsync uintptr
 
-	AskPasswordFinish uintptr
+	xAskPasswordFinish uintptr
 
-	RequestCertificate uintptr
+	xRequestCertificate uintptr
 
-	RequestCertificateAsync uintptr
+	xRequestCertificateAsync uintptr
 
-	RequestCertificateFinish uintptr
+	xRequestCertificateFinish uintptr
 
 	Padding [21]uintptr
 }
 
 func (x *TlsInteractionClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAskPassword sets the callback function.
+func (x *TlsInteractionClass) SetCallbackAskPassword(cb func(*TlsInteraction, *TlsPassword, *Cancellable) TlsInteractionResult) {
+	if cb == nil {
+		x.xAskPassword = 0
+	} else {
+		x.xAskPassword = purego.NewCallback(func(InteractionVarp uintptr, PasswordVarp uintptr, CancellableVarp uintptr) TlsInteractionResult {
+			return cb(TlsInteractionNewFromInternalPtr(InteractionVarp), TlsPasswordNewFromInternalPtr(PasswordVarp), CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackAskPassword gets the callback function.
+func (x *TlsInteractionClass) GetCallbackAskPassword() func(*TlsInteraction, *TlsPassword, *Cancellable) TlsInteractionResult {
+	if x.xAskPassword == 0 {
+		return nil
+	}
+	var rawCallback func(InteractionVarp uintptr, PasswordVarp uintptr, CancellableVarp uintptr) TlsInteractionResult
+	purego.RegisterFunc(&rawCallback, x.xAskPassword)
+	return func(InteractionVar *TlsInteraction, PasswordVar *TlsPassword, CancellableVar *Cancellable) TlsInteractionResult {
+		return rawCallback(InteractionVar.GoPointer(), PasswordVar.GoPointer(), CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackAskPasswordAsync sets the callback function.
+func (x *TlsInteractionClass) SetCallbackAskPasswordAsync(cb func(*TlsInteraction, *TlsPassword, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xAskPasswordAsync = 0
+	} else {
+		x.xAskPasswordAsync = purego.NewCallback(func(InteractionVarp uintptr, PasswordVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(TlsInteractionNewFromInternalPtr(InteractionVarp), TlsPasswordNewFromInternalPtr(PasswordVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackAskPasswordAsync gets the callback function.
+func (x *TlsInteractionClass) GetCallbackAskPasswordAsync() func(*TlsInteraction, *TlsPassword, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xAskPasswordAsync == 0 {
+		return nil
+	}
+	var rawCallback func(InteractionVarp uintptr, PasswordVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAskPasswordAsync)
+	return func(InteractionVar *TlsInteraction, PasswordVar *TlsPassword, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(InteractionVar.GoPointer(), PasswordVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackAskPasswordFinish sets the callback function.
+func (x *TlsInteractionClass) SetCallbackAskPasswordFinish(cb func(*TlsInteraction, AsyncResult) TlsInteractionResult) {
+	if cb == nil {
+		x.xAskPasswordFinish = 0
+	} else {
+		x.xAskPasswordFinish = purego.NewCallback(func(InteractionVarp uintptr, ResultVarp uintptr) TlsInteractionResult {
+			return cb(TlsInteractionNewFromInternalPtr(InteractionVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackAskPasswordFinish gets the callback function.
+func (x *TlsInteractionClass) GetCallbackAskPasswordFinish() func(*TlsInteraction, AsyncResult) TlsInteractionResult {
+	if x.xAskPasswordFinish == 0 {
+		return nil
+	}
+	var rawCallback func(InteractionVarp uintptr, ResultVarp uintptr) TlsInteractionResult
+	purego.RegisterFunc(&rawCallback, x.xAskPasswordFinish)
+	return func(InteractionVar *TlsInteraction, ResultVar AsyncResult) TlsInteractionResult {
+		return rawCallback(InteractionVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackRequestCertificate sets the callback function.
+func (x *TlsInteractionClass) SetCallbackRequestCertificate(cb func(*TlsInteraction, *TlsConnection, TlsCertificateRequestFlags, *Cancellable) TlsInteractionResult) {
+	if cb == nil {
+		x.xRequestCertificate = 0
+	} else {
+		x.xRequestCertificate = purego.NewCallback(func(InteractionVarp uintptr, ConnectionVarp uintptr, FlagsVarp TlsCertificateRequestFlags, CancellableVarp uintptr) TlsInteractionResult {
+			return cb(TlsInteractionNewFromInternalPtr(InteractionVarp), TlsConnectionNewFromInternalPtr(ConnectionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackRequestCertificate gets the callback function.
+func (x *TlsInteractionClass) GetCallbackRequestCertificate() func(*TlsInteraction, *TlsConnection, TlsCertificateRequestFlags, *Cancellable) TlsInteractionResult {
+	if x.xRequestCertificate == 0 {
+		return nil
+	}
+	var rawCallback func(InteractionVarp uintptr, ConnectionVarp uintptr, FlagsVarp TlsCertificateRequestFlags, CancellableVarp uintptr) TlsInteractionResult
+	purego.RegisterFunc(&rawCallback, x.xRequestCertificate)
+	return func(InteractionVar *TlsInteraction, ConnectionVar *TlsConnection, FlagsVar TlsCertificateRequestFlags, CancellableVar *Cancellable) TlsInteractionResult {
+		return rawCallback(InteractionVar.GoPointer(), ConnectionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackRequestCertificateAsync sets the callback function.
+func (x *TlsInteractionClass) SetCallbackRequestCertificateAsync(cb func(*TlsInteraction, *TlsConnection, TlsCertificateRequestFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xRequestCertificateAsync = 0
+	} else {
+		x.xRequestCertificateAsync = purego.NewCallback(func(InteractionVarp uintptr, ConnectionVarp uintptr, FlagsVarp TlsCertificateRequestFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(TlsInteractionNewFromInternalPtr(InteractionVarp), TlsConnectionNewFromInternalPtr(ConnectionVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackRequestCertificateAsync gets the callback function.
+func (x *TlsInteractionClass) GetCallbackRequestCertificateAsync() func(*TlsInteraction, *TlsConnection, TlsCertificateRequestFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xRequestCertificateAsync == 0 {
+		return nil
+	}
+	var rawCallback func(InteractionVarp uintptr, ConnectionVarp uintptr, FlagsVarp TlsCertificateRequestFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRequestCertificateAsync)
+	return func(InteractionVar *TlsInteraction, ConnectionVar *TlsConnection, FlagsVar TlsCertificateRequestFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(InteractionVar.GoPointer(), ConnectionVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackRequestCertificateFinish sets the callback function.
+func (x *TlsInteractionClass) SetCallbackRequestCertificateFinish(cb func(*TlsInteraction, AsyncResult) TlsInteractionResult) {
+	if cb == nil {
+		x.xRequestCertificateFinish = 0
+	} else {
+		x.xRequestCertificateFinish = purego.NewCallback(func(InteractionVarp uintptr, ResultVarp uintptr) TlsInteractionResult {
+			return cb(TlsInteractionNewFromInternalPtr(InteractionVarp), &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackRequestCertificateFinish gets the callback function.
+func (x *TlsInteractionClass) GetCallbackRequestCertificateFinish() func(*TlsInteraction, AsyncResult) TlsInteractionResult {
+	if x.xRequestCertificateFinish == 0 {
+		return nil
+	}
+	var rawCallback func(InteractionVarp uintptr, ResultVarp uintptr) TlsInteractionResult
+	purego.RegisterFunc(&rawCallback, x.xRequestCertificateFinish)
+	return func(InteractionVar *TlsInteraction, ResultVar AsyncResult) TlsInteractionResult {
+		return rawCallback(InteractionVar.GoPointer(), ResultVar.GoPointer())
+	}
 }
 
 type TlsInteractionPrivate struct {
diff --git a/v4/gio/gtlspassword.go b/v4/gio/gtlspassword.go
index 9cc5a4da547100bf538f0284f302f3bdc7e9b2b6..e80835dc9f4cd31fabf6677b11f5442e95fe0c8f 100644
--- a/v4/gio/gtlspassword.go
+++ b/v4/gio/gtlspassword.go
@@ -18,17 +18,86 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetValue uintptr
+	xGetValue uintptr
 
-	SetValue uintptr
+	xSetValue uintptr
 
-	GetDefaultWarning uintptr
+	xGetDefaultWarning uintptr
 
 	Padding [4]uintptr
 }
 
 func (x *TlsPasswordClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetValue sets the callback function.
+func (x *TlsPasswordClass) SetCallbackGetValue(cb func(*TlsPassword, uint) uintptr) {
+	if cb == nil {
+		x.xGetValue = 0
+	} else {
+		x.xGetValue = purego.NewCallback(func(PasswordVarp uintptr, LengthVarp uint) uintptr {
+			return cb(TlsPasswordNewFromInternalPtr(PasswordVarp), LengthVarp)
+		})
+	}
+}
+
+// GetCallbackGetValue gets the callback function.
+func (x *TlsPasswordClass) GetCallbackGetValue() func(*TlsPassword, uint) uintptr {
+	if x.xGetValue == 0 {
+		return nil
+	}
+	var rawCallback func(PasswordVarp uintptr, LengthVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetValue)
+	return func(PasswordVar *TlsPassword, LengthVar uint) uintptr {
+		return rawCallback(PasswordVar.GoPointer(), LengthVar)
+	}
+}
+
+// SetCallbackSetValue sets the callback function.
+func (x *TlsPasswordClass) SetCallbackSetValue(cb func(*TlsPassword, []byte, int, *glib.DestroyNotify)) {
+	if cb == nil {
+		x.xSetValue = 0
+	} else {
+		x.xSetValue = purego.NewCallback(func(PasswordVarp uintptr, ValueVarp []byte, LengthVarp int, DestroyVarp uintptr) {
+			cb(TlsPasswordNewFromInternalPtr(PasswordVarp), ValueVarp, LengthVarp, (*glib.DestroyNotify)(unsafe.Pointer(DestroyVarp)))
+		})
+	}
+}
+
+// GetCallbackSetValue gets the callback function.
+func (x *TlsPasswordClass) GetCallbackSetValue() func(*TlsPassword, []byte, int, *glib.DestroyNotify) {
+	if x.xSetValue == 0 {
+		return nil
+	}
+	var rawCallback func(PasswordVarp uintptr, ValueVarp []byte, LengthVarp int, DestroyVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetValue)
+	return func(PasswordVar *TlsPassword, ValueVar []byte, LengthVar int, DestroyVar *glib.DestroyNotify) {
+		rawCallback(PasswordVar.GoPointer(), ValueVar, LengthVar, glib.NewCallbackNullable(DestroyVar))
+	}
+}
+
+// SetCallbackGetDefaultWarning sets the callback function.
+func (x *TlsPasswordClass) SetCallbackGetDefaultWarning(cb func(*TlsPassword) string) {
+	if cb == nil {
+		x.xGetDefaultWarning = 0
+	} else {
+		x.xGetDefaultWarning = purego.NewCallback(func(PasswordVarp uintptr) string {
+			return cb(TlsPasswordNewFromInternalPtr(PasswordVarp))
+		})
+	}
+}
+
+// GetCallbackGetDefaultWarning gets the callback function.
+func (x *TlsPasswordClass) GetCallbackGetDefaultWarning() func(*TlsPassword) string {
+	if x.xGetDefaultWarning == 0 {
+		return nil
+	}
+	var rawCallback func(PasswordVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetDefaultWarning)
+	return func(PasswordVar *TlsPassword) string {
+		return rawCallback(PasswordVar.GoPointer())
+	}
 }
 
 type TlsPasswordPrivate struct {
diff --git a/v4/gio/gunixcredentialsmessage.go b/v4/gio/gunixcredentialsmessage.go
index e162dc3af08d6d7dfebeb18dd515df27c58e8a85..2ba92583b735e4e1542b2ae2fc15aec5964c8b82 100644
--- a/v4/gio/gunixcredentialsmessage.go
+++ b/v4/gio/gunixcredentialsmessage.go
@@ -17,13 +17,59 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 }
 
 func (x *UnixCredentialsMessageClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *UnixCredentialsMessageClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *UnixCredentialsMessageClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *UnixCredentialsMessageClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *UnixCredentialsMessageClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
 }
 
 type UnixCredentialsMessagePrivate struct {
diff --git a/v4/gio/gunixfdlist.go b/v4/gio/gunixfdlist.go
index 980c347d9d2da9723b4245f919c4fef11d0802dc..ce1af6f01060e81492561d9dae2e9cf58d0447d7 100644
--- a/v4/gio/gunixfdlist.go
+++ b/v4/gio/gunixfdlist.go
@@ -17,19 +17,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *UnixFDListClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *UnixFDListClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *UnixFDListClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *UnixFDListClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *UnixFDListClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *UnixFDListClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *UnixFDListClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *UnixFDListClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *UnixFDListClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *UnixFDListClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *UnixFDListClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type UnixFDListPrivate struct {
diff --git a/v4/gio/gunixfdmessage.go b/v4/gio/gunixfdmessage.go
index 3281f38ac1db26e23a5246f52ab17ccdf1f7371d..bb0d3fe256c7d73ca9bca31e658013c850b808d6 100644
--- a/v4/gio/gunixfdmessage.go
+++ b/v4/gio/gunixfdmessage.go
@@ -17,13 +17,59 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 }
 
 func (x *UnixFDMessageClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *UnixFDMessageClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *UnixFDMessageClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *UnixFDMessageClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *UnixFDMessageClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
 }
 
 type UnixFDMessagePrivate struct {
diff --git a/v4/gio/gunixinputstream.go b/v4/gio/gunixinputstream.go
index 3eef9cffb653c0900c10f1d054210595862bfb38..764490d83b958dbbd3229fd99fdf4a644514ef08 100644
--- a/v4/gio/gunixinputstream.go
+++ b/v4/gio/gunixinputstream.go
@@ -16,19 +16,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *UnixInputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *UnixInputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *UnixInputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *UnixInputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *UnixInputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *UnixInputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *UnixInputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *UnixInputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *UnixInputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *UnixInputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *UnixInputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type UnixInputStreamPrivate struct {
diff --git a/v4/gio/gunixoutputstream.go b/v4/gio/gunixoutputstream.go
index 2e4c9e8c6c8a4cd88feda583743629ec0871146b..bbc2279c3a678f9e0f09bc5ff203b3c8777167a7 100644
--- a/v4/gio/gunixoutputstream.go
+++ b/v4/gio/gunixoutputstream.go
@@ -16,19 +16,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 }
 
 func (x *UnixOutputStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *UnixOutputStreamClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *UnixOutputStreamClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *UnixOutputStreamClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *UnixOutputStreamClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *UnixOutputStreamClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *UnixOutputStreamClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *UnixOutputStreamClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *UnixOutputStreamClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *UnixOutputStreamClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *UnixOutputStreamClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 type UnixOutputStreamPrivate struct {
diff --git a/v4/gio/gvfs.go b/v4/gio/gvfs.go
index 9ca9f858f79cad8808854c0733839d2350585187..32a8353b04eca6a876ca519109f78e3233864c46 100644
--- a/v4/gio/gvfs.go
+++ b/v4/gio/gvfs.go
@@ -25,43 +25,474 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	IsActive uintptr
+	xIsActive uintptr
 
-	GetFileForPath uintptr
+	xGetFileForPath uintptr
 
-	GetFileForUri uintptr
+	xGetFileForUri uintptr
 
-	GetSupportedUriSchemes uintptr
+	xGetSupportedUriSchemes uintptr
 
-	ParseName uintptr
+	xParseName uintptr
 
-	LocalFileAddInfo uintptr
+	xLocalFileAddInfo uintptr
 
-	AddWritableNamespaces uintptr
+	xAddWritableNamespaces uintptr
 
-	LocalFileSetAttributes uintptr
+	xLocalFileSetAttributes uintptr
 
-	LocalFileRemoved uintptr
+	xLocalFileRemoved uintptr
 
-	LocalFileMoved uintptr
+	xLocalFileMoved uintptr
 
-	DeserializeIcon uintptr
+	xDeserializeIcon uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 }
 
 func (x *VfsClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackIsActive sets the callback function.
+func (x *VfsClass) SetCallbackIsActive(cb func(*Vfs) bool) {
+	if cb == nil {
+		x.xIsActive = 0
+	} else {
+		x.xIsActive = purego.NewCallback(func(VfsVarp uintptr) bool {
+			return cb(VfsNewFromInternalPtr(VfsVarp))
+		})
+	}
+}
+
+// GetCallbackIsActive gets the callback function.
+func (x *VfsClass) GetCallbackIsActive() func(*Vfs) bool {
+	if x.xIsActive == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsActive)
+	return func(VfsVar *Vfs) bool {
+		return rawCallback(VfsVar.GoPointer())
+	}
+}
+
+// SetCallbackGetFileForPath sets the callback function.
+func (x *VfsClass) SetCallbackGetFileForPath(cb func(*Vfs, string) *FileBase) {
+	if cb == nil {
+		x.xGetFileForPath = 0
+	} else {
+		x.xGetFileForPath = purego.NewCallback(func(VfsVarp uintptr, PathVarp string) uintptr {
+			ret := cb(VfsNewFromInternalPtr(VfsVarp), PathVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFileForPath gets the callback function.
+func (x *VfsClass) GetCallbackGetFileForPath() func(*Vfs, string) *FileBase {
+	if x.xGetFileForPath == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, PathVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFileForPath)
+	return func(VfsVar *Vfs, PathVar string) *FileBase {
+		rawRet := rawCallback(VfsVar.GoPointer(), PathVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetFileForUri sets the callback function.
+func (x *VfsClass) SetCallbackGetFileForUri(cb func(*Vfs, string) *FileBase) {
+	if cb == nil {
+		x.xGetFileForUri = 0
+	} else {
+		x.xGetFileForUri = purego.NewCallback(func(VfsVarp uintptr, UriVarp string) uintptr {
+			ret := cb(VfsNewFromInternalPtr(VfsVarp), UriVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFileForUri gets the callback function.
+func (x *VfsClass) GetCallbackGetFileForUri() func(*Vfs, string) *FileBase {
+	if x.xGetFileForUri == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, UriVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFileForUri)
+	return func(VfsVar *Vfs, UriVar string) *FileBase {
+		rawRet := rawCallback(VfsVar.GoPointer(), UriVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetSupportedUriSchemes sets the callback function.
+func (x *VfsClass) SetCallbackGetSupportedUriSchemes(cb func(*Vfs) []string) {
+	if cb == nil {
+		x.xGetSupportedUriSchemes = 0
+	} else {
+		x.xGetSupportedUriSchemes = purego.NewCallback(func(VfsVarp uintptr) []string {
+			return cb(VfsNewFromInternalPtr(VfsVarp))
+		})
+	}
+}
+
+// GetCallbackGetSupportedUriSchemes gets the callback function.
+func (x *VfsClass) GetCallbackGetSupportedUriSchemes() func(*Vfs) []string {
+	if x.xGetSupportedUriSchemes == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xGetSupportedUriSchemes)
+	return func(VfsVar *Vfs) []string {
+		return rawCallback(VfsVar.GoPointer())
+	}
+}
+
+// SetCallbackParseName sets the callback function.
+func (x *VfsClass) SetCallbackParseName(cb func(*Vfs, string) *FileBase) {
+	if cb == nil {
+		x.xParseName = 0
+	} else {
+		x.xParseName = purego.NewCallback(func(VfsVarp uintptr, ParseNameVarp string) uintptr {
+			ret := cb(VfsNewFromInternalPtr(VfsVarp), ParseNameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackParseName gets the callback function.
+func (x *VfsClass) GetCallbackParseName() func(*Vfs, string) *FileBase {
+	if x.xParseName == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, ParseNameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xParseName)
+	return func(VfsVar *Vfs, ParseNameVar string) *FileBase {
+		rawRet := rawCallback(VfsVar.GoPointer(), ParseNameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackLocalFileAddInfo sets the callback function.
+func (x *VfsClass) SetCallbackLocalFileAddInfo(cb func(*Vfs, string, uint64, *FileAttributeMatcher, *FileInfo, *Cancellable, uintptr, *glib.DestroyNotify)) {
+	if cb == nil {
+		x.xLocalFileAddInfo = 0
+	} else {
+		x.xLocalFileAddInfo = purego.NewCallback(func(VfsVarp uintptr, FilenameVarp string, DeviceVarp uint64, AttributeMatcherVarp *FileAttributeMatcher, InfoVarp uintptr, CancellableVarp uintptr, ExtraDataVarp uintptr, FreeExtraDataVarp uintptr) {
+			cb(VfsNewFromInternalPtr(VfsVarp), FilenameVarp, DeviceVarp, AttributeMatcherVarp, FileInfoNewFromInternalPtr(InfoVarp), CancellableNewFromInternalPtr(CancellableVarp), ExtraDataVarp, (*glib.DestroyNotify)(unsafe.Pointer(FreeExtraDataVarp)))
+		})
+	}
+}
+
+// GetCallbackLocalFileAddInfo gets the callback function.
+func (x *VfsClass) GetCallbackLocalFileAddInfo() func(*Vfs, string, uint64, *FileAttributeMatcher, *FileInfo, *Cancellable, uintptr, *glib.DestroyNotify) {
+	if x.xLocalFileAddInfo == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, FilenameVarp string, DeviceVarp uint64, AttributeMatcherVarp *FileAttributeMatcher, InfoVarp uintptr, CancellableVarp uintptr, ExtraDataVarp uintptr, FreeExtraDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xLocalFileAddInfo)
+	return func(VfsVar *Vfs, FilenameVar string, DeviceVar uint64, AttributeMatcherVar *FileAttributeMatcher, InfoVar *FileInfo, CancellableVar *Cancellable, ExtraDataVar uintptr, FreeExtraDataVar *glib.DestroyNotify) {
+		rawCallback(VfsVar.GoPointer(), FilenameVar, DeviceVar, AttributeMatcherVar, InfoVar.GoPointer(), CancellableVar.GoPointer(), ExtraDataVar, glib.NewCallback(FreeExtraDataVar))
+	}
+}
+
+// SetCallbackAddWritableNamespaces sets the callback function.
+func (x *VfsClass) SetCallbackAddWritableNamespaces(cb func(*Vfs, *FileAttributeInfoList)) {
+	if cb == nil {
+		x.xAddWritableNamespaces = 0
+	} else {
+		x.xAddWritableNamespaces = purego.NewCallback(func(VfsVarp uintptr, ListVarp *FileAttributeInfoList) {
+			cb(VfsNewFromInternalPtr(VfsVarp), ListVarp)
+		})
+	}
+}
+
+// GetCallbackAddWritableNamespaces gets the callback function.
+func (x *VfsClass) GetCallbackAddWritableNamespaces() func(*Vfs, *FileAttributeInfoList) {
+	if x.xAddWritableNamespaces == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, ListVarp *FileAttributeInfoList)
+	purego.RegisterFunc(&rawCallback, x.xAddWritableNamespaces)
+	return func(VfsVar *Vfs, ListVar *FileAttributeInfoList) {
+		rawCallback(VfsVar.GoPointer(), ListVar)
+	}
+}
+
+// SetCallbackLocalFileSetAttributes sets the callback function.
+func (x *VfsClass) SetCallbackLocalFileSetAttributes(cb func(*Vfs, string, *FileInfo, FileQueryInfoFlags, *Cancellable) bool) {
+	if cb == nil {
+		x.xLocalFileSetAttributes = 0
+	} else {
+		x.xLocalFileSetAttributes = purego.NewCallback(func(VfsVarp uintptr, FilenameVarp string, InfoVarp uintptr, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) bool {
+			return cb(VfsNewFromInternalPtr(VfsVarp), FilenameVarp, FileInfoNewFromInternalPtr(InfoVarp), FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp))
+		})
+	}
+}
+
+// GetCallbackLocalFileSetAttributes gets the callback function.
+func (x *VfsClass) GetCallbackLocalFileSetAttributes() func(*Vfs, string, *FileInfo, FileQueryInfoFlags, *Cancellable) bool {
+	if x.xLocalFileSetAttributes == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, FilenameVarp string, InfoVarp uintptr, FlagsVarp FileQueryInfoFlags, CancellableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xLocalFileSetAttributes)
+	return func(VfsVar *Vfs, FilenameVar string, InfoVar *FileInfo, FlagsVar FileQueryInfoFlags, CancellableVar *Cancellable) bool {
+		return rawCallback(VfsVar.GoPointer(), FilenameVar, InfoVar.GoPointer(), FlagsVar, CancellableVar.GoPointer())
+	}
+}
+
+// SetCallbackLocalFileRemoved sets the callback function.
+func (x *VfsClass) SetCallbackLocalFileRemoved(cb func(*Vfs, string)) {
+	if cb == nil {
+		x.xLocalFileRemoved = 0
+	} else {
+		x.xLocalFileRemoved = purego.NewCallback(func(VfsVarp uintptr, FilenameVarp string) {
+			cb(VfsNewFromInternalPtr(VfsVarp), FilenameVarp)
+		})
+	}
+}
+
+// GetCallbackLocalFileRemoved gets the callback function.
+func (x *VfsClass) GetCallbackLocalFileRemoved() func(*Vfs, string) {
+	if x.xLocalFileRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, FilenameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xLocalFileRemoved)
+	return func(VfsVar *Vfs, FilenameVar string) {
+		rawCallback(VfsVar.GoPointer(), FilenameVar)
+	}
+}
+
+// SetCallbackLocalFileMoved sets the callback function.
+func (x *VfsClass) SetCallbackLocalFileMoved(cb func(*Vfs, string, string)) {
+	if cb == nil {
+		x.xLocalFileMoved = 0
+	} else {
+		x.xLocalFileMoved = purego.NewCallback(func(VfsVarp uintptr, SourceVarp string, DestVarp string) {
+			cb(VfsNewFromInternalPtr(VfsVarp), SourceVarp, DestVarp)
+		})
+	}
+}
+
+// GetCallbackLocalFileMoved gets the callback function.
+func (x *VfsClass) GetCallbackLocalFileMoved() func(*Vfs, string, string) {
+	if x.xLocalFileMoved == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, SourceVarp string, DestVarp string)
+	purego.RegisterFunc(&rawCallback, x.xLocalFileMoved)
+	return func(VfsVar *Vfs, SourceVar string, DestVar string) {
+		rawCallback(VfsVar.GoPointer(), SourceVar, DestVar)
+	}
+}
+
+// SetCallbackDeserializeIcon sets the callback function.
+func (x *VfsClass) SetCallbackDeserializeIcon(cb func(*Vfs, *glib.Variant) *IconBase) {
+	if cb == nil {
+		x.xDeserializeIcon = 0
+	} else {
+		x.xDeserializeIcon = purego.NewCallback(func(VfsVarp uintptr, ValueVarp *glib.Variant) uintptr {
+			ret := cb(VfsNewFromInternalPtr(VfsVarp), ValueVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackDeserializeIcon gets the callback function.
+func (x *VfsClass) GetCallbackDeserializeIcon() func(*Vfs, *glib.Variant) *IconBase {
+	if x.xDeserializeIcon == 0 {
+		return nil
+	}
+	var rawCallback func(VfsVarp uintptr, ValueVarp *glib.Variant) uintptr
+	purego.RegisterFunc(&rawCallback, x.xDeserializeIcon)
+	return func(VfsVar *Vfs, ValueVar *glib.Variant) *IconBase {
+		rawRet := rawCallback(VfsVar.GoPointer(), ValueVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *VfsClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *VfsClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *VfsClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *VfsClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *VfsClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *VfsClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *VfsClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *VfsClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *VfsClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *VfsClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *VfsClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *VfsClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
 }
 
 const (
diff --git a/v4/gio/gvolume.go b/v4/gio/gvolume.go
index 7c37407ae3586369e5161d6f18b70533a90d33a4..41c3c40db19276ee79be8f334c801d7a00a01dfd 100644
--- a/v4/gio/gvolume.go
+++ b/v4/gio/gvolume.go
@@ -17,53 +17,586 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	Removed uintptr
+	xRemoved uintptr
 
-	GetName uintptr
+	xGetName uintptr
 
-	GetIcon uintptr
+	xGetIcon uintptr
 
-	GetUuid uintptr
+	xGetUuid uintptr
 
-	GetDrive uintptr
+	xGetDrive uintptr
 
-	GetMount uintptr
+	xGetMount uintptr
 
-	CanMount uintptr
+	xCanMount uintptr
 
-	CanEject uintptr
+	xCanEject uintptr
 
-	MountFn uintptr
+	xMountFn uintptr
 
-	MountFinish uintptr
+	xMountFinish uintptr
 
-	Eject uintptr
+	xEject uintptr
 
-	EjectFinish uintptr
+	xEjectFinish uintptr
 
-	GetIdentifier uintptr
+	xGetIdentifier uintptr
 
-	EnumerateIdentifiers uintptr
+	xEnumerateIdentifiers uintptr
 
-	ShouldAutomount uintptr
+	xShouldAutomount uintptr
 
-	GetActivationRoot uintptr
+	xGetActivationRoot uintptr
 
-	EjectWithOperation uintptr
+	xEjectWithOperation uintptr
 
-	EjectWithOperationFinish uintptr
+	xEjectWithOperationFinish uintptr
 
-	GetSortKey uintptr
+	xGetSortKey uintptr
 
-	GetSymbolicIcon uintptr
+	xGetSymbolicIcon uintptr
 }
 
 func (x *VolumeIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackChanged sets the callback function.
+func (x *VolumeIface) SetCallbackChanged(cb func(Volume)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(VolumeVarp uintptr) {
+			cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *VolumeIface) GetCallbackChanged() func(Volume) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(VolumeVar Volume) {
+		rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackRemoved sets the callback function.
+func (x *VolumeIface) SetCallbackRemoved(cb func(Volume)) {
+	if cb == nil {
+		x.xRemoved = 0
+	} else {
+		x.xRemoved = purego.NewCallback(func(VolumeVarp uintptr) {
+			cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackRemoved gets the callback function.
+func (x *VolumeIface) GetCallbackRemoved() func(Volume) {
+	if x.xRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRemoved)
+	return func(VolumeVar Volume) {
+		rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackGetName sets the callback function.
+func (x *VolumeIface) SetCallbackGetName(cb func(Volume) string) {
+	if cb == nil {
+		x.xGetName = 0
+	} else {
+		x.xGetName = purego.NewCallback(func(VolumeVarp uintptr) string {
+			return cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackGetName gets the callback function.
+func (x *VolumeIface) GetCallbackGetName() func(Volume) string {
+	if x.xGetName == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetName)
+	return func(VolumeVar Volume) string {
+		return rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIcon sets the callback function.
+func (x *VolumeIface) SetCallbackGetIcon(cb func(Volume) *IconBase) {
+	if cb == nil {
+		x.xGetIcon = 0
+	} else {
+		x.xGetIcon = purego.NewCallback(func(VolumeVarp uintptr) uintptr {
+			ret := cb(&VolumeBase{Ptr: VolumeVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetIcon gets the callback function.
+func (x *VolumeIface) GetCallbackGetIcon() func(Volume) *IconBase {
+	if x.xGetIcon == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetIcon)
+	return func(VolumeVar Volume) *IconBase {
+		rawRet := rawCallback(VolumeVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetUuid sets the callback function.
+func (x *VolumeIface) SetCallbackGetUuid(cb func(Volume) string) {
+	if cb == nil {
+		x.xGetUuid = 0
+	} else {
+		x.xGetUuid = purego.NewCallback(func(VolumeVarp uintptr) string {
+			return cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackGetUuid gets the callback function.
+func (x *VolumeIface) GetCallbackGetUuid() func(Volume) string {
+	if x.xGetUuid == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetUuid)
+	return func(VolumeVar Volume) string {
+		return rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackGetDrive sets the callback function.
+func (x *VolumeIface) SetCallbackGetDrive(cb func(Volume) *DriveBase) {
+	if cb == nil {
+		x.xGetDrive = 0
+	} else {
+		x.xGetDrive = purego.NewCallback(func(VolumeVarp uintptr) uintptr {
+			ret := cb(&VolumeBase{Ptr: VolumeVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetDrive gets the callback function.
+func (x *VolumeIface) GetCallbackGetDrive() func(Volume) *DriveBase {
+	if x.xGetDrive == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetDrive)
+	return func(VolumeVar Volume) *DriveBase {
+		rawRet := rawCallback(VolumeVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &DriveBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetMount sets the callback function.
+func (x *VolumeIface) SetCallbackGetMount(cb func(Volume) *MountBase) {
+	if cb == nil {
+		x.xGetMount = 0
+	} else {
+		x.xGetMount = purego.NewCallback(func(VolumeVarp uintptr) uintptr {
+			ret := cb(&VolumeBase{Ptr: VolumeVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetMount gets the callback function.
+func (x *VolumeIface) GetCallbackGetMount() func(Volume) *MountBase {
+	if x.xGetMount == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetMount)
+	return func(VolumeVar Volume) *MountBase {
+		rawRet := rawCallback(VolumeVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MountBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCanMount sets the callback function.
+func (x *VolumeIface) SetCallbackCanMount(cb func(Volume) bool) {
+	if cb == nil {
+		x.xCanMount = 0
+	} else {
+		x.xCanMount = purego.NewCallback(func(VolumeVarp uintptr) bool {
+			return cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackCanMount gets the callback function.
+func (x *VolumeIface) GetCallbackCanMount() func(Volume) bool {
+	if x.xCanMount == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanMount)
+	return func(VolumeVar Volume) bool {
+		return rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackCanEject sets the callback function.
+func (x *VolumeIface) SetCallbackCanEject(cb func(Volume) bool) {
+	if cb == nil {
+		x.xCanEject = 0
+	} else {
+		x.xCanEject = purego.NewCallback(func(VolumeVarp uintptr) bool {
+			return cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackCanEject gets the callback function.
+func (x *VolumeIface) GetCallbackCanEject() func(Volume) bool {
+	if x.xCanEject == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCanEject)
+	return func(VolumeVar Volume) bool {
+		return rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackMountFn sets the callback function.
+func (x *VolumeIface) SetCallbackMountFn(cb func(Volume, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xMountFn = 0
+	} else {
+		x.xMountFn = purego.NewCallback(func(VolumeVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&VolumeBase{Ptr: VolumeVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackMountFn gets the callback function.
+func (x *VolumeIface) GetCallbackMountFn() func(Volume, MountMountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xMountFn == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr, FlagsVarp MountMountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMountFn)
+	return func(VolumeVar Volume, FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(VolumeVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackMountFinish sets the callback function.
+func (x *VolumeIface) SetCallbackMountFinish(cb func(Volume, AsyncResult) bool) {
+	if cb == nil {
+		x.xMountFinish = 0
+	} else {
+		x.xMountFinish = purego.NewCallback(func(VolumeVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&VolumeBase{Ptr: VolumeVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackMountFinish gets the callback function.
+func (x *VolumeIface) GetCallbackMountFinish() func(Volume, AsyncResult) bool {
+	if x.xMountFinish == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMountFinish)
+	return func(VolumeVar Volume, ResultVar AsyncResult) bool {
+		return rawCallback(VolumeVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackEject sets the callback function.
+func (x *VolumeIface) SetCallbackEject(cb func(Volume, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEject = 0
+	} else {
+		x.xEject = purego.NewCallback(func(VolumeVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&VolumeBase{Ptr: VolumeVarp}, FlagsVarp, CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEject gets the callback function.
+func (x *VolumeIface) GetCallbackEject() func(Volume, MountUnmountFlags, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEject == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr, FlagsVarp MountUnmountFlags, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEject)
+	return func(VolumeVar Volume, FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(VolumeVar.GoPointer(), FlagsVar, CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectFinish sets the callback function.
+func (x *VolumeIface) SetCallbackEjectFinish(cb func(Volume, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectFinish = 0
+	} else {
+		x.xEjectFinish = purego.NewCallback(func(VolumeVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&VolumeBase{Ptr: VolumeVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectFinish gets the callback function.
+func (x *VolumeIface) GetCallbackEjectFinish() func(Volume, AsyncResult) bool {
+	if x.xEjectFinish == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectFinish)
+	return func(VolumeVar Volume, ResultVar AsyncResult) bool {
+		return rawCallback(VolumeVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGetIdentifier sets the callback function.
+func (x *VolumeIface) SetCallbackGetIdentifier(cb func(Volume, string) string) {
+	if cb == nil {
+		x.xGetIdentifier = 0
+	} else {
+		x.xGetIdentifier = purego.NewCallback(func(VolumeVarp uintptr, KindVarp string) string {
+			return cb(&VolumeBase{Ptr: VolumeVarp}, KindVarp)
+		})
+	}
+}
+
+// GetCallbackGetIdentifier gets the callback function.
+func (x *VolumeIface) GetCallbackGetIdentifier() func(Volume, string) string {
+	if x.xGetIdentifier == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr, KindVarp string) string
+	purego.RegisterFunc(&rawCallback, x.xGetIdentifier)
+	return func(VolumeVar Volume, KindVar string) string {
+		return rawCallback(VolumeVar.GoPointer(), KindVar)
+	}
+}
+
+// SetCallbackEnumerateIdentifiers sets the callback function.
+func (x *VolumeIface) SetCallbackEnumerateIdentifiers(cb func(Volume) []string) {
+	if cb == nil {
+		x.xEnumerateIdentifiers = 0
+	} else {
+		x.xEnumerateIdentifiers = purego.NewCallback(func(VolumeVarp uintptr) []string {
+			return cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackEnumerateIdentifiers gets the callback function.
+func (x *VolumeIface) GetCallbackEnumerateIdentifiers() func(Volume) []string {
+	if x.xEnumerateIdentifiers == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) []string
+	purego.RegisterFunc(&rawCallback, x.xEnumerateIdentifiers)
+	return func(VolumeVar Volume) []string {
+		return rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackShouldAutomount sets the callback function.
+func (x *VolumeIface) SetCallbackShouldAutomount(cb func(Volume) bool) {
+	if cb == nil {
+		x.xShouldAutomount = 0
+	} else {
+		x.xShouldAutomount = purego.NewCallback(func(VolumeVarp uintptr) bool {
+			return cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackShouldAutomount gets the callback function.
+func (x *VolumeIface) GetCallbackShouldAutomount() func(Volume) bool {
+	if x.xShouldAutomount == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xShouldAutomount)
+	return func(VolumeVar Volume) bool {
+		return rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackGetActivationRoot sets the callback function.
+func (x *VolumeIface) SetCallbackGetActivationRoot(cb func(Volume) *FileBase) {
+	if cb == nil {
+		x.xGetActivationRoot = 0
+	} else {
+		x.xGetActivationRoot = purego.NewCallback(func(VolumeVarp uintptr) uintptr {
+			ret := cb(&VolumeBase{Ptr: VolumeVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetActivationRoot gets the callback function.
+func (x *VolumeIface) GetCallbackGetActivationRoot() func(Volume) *FileBase {
+	if x.xGetActivationRoot == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetActivationRoot)
+	return func(VolumeVar Volume) *FileBase {
+		rawRet := rawCallback(VolumeVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FileBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackEjectWithOperation sets the callback function.
+func (x *VolumeIface) SetCallbackEjectWithOperation(cb func(Volume, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr)) {
+	if cb == nil {
+		x.xEjectWithOperation = 0
+	} else {
+		x.xEjectWithOperation = purego.NewCallback(func(VolumeVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr) {
+			cb(&VolumeBase{Ptr: VolumeVarp}, FlagsVarp, MountOperationNewFromInternalPtr(MountOperationVarp), CancellableNewFromInternalPtr(CancellableVarp), (*AsyncReadyCallback)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEjectWithOperation gets the callback function.
+func (x *VolumeIface) GetCallbackEjectWithOperation() func(Volume, MountUnmountFlags, *MountOperation, *Cancellable, *AsyncReadyCallback, uintptr) {
+	if x.xEjectWithOperation == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr, FlagsVarp MountUnmountFlags, MountOperationVarp uintptr, CancellableVarp uintptr, CallbackVarp uintptr, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEjectWithOperation)
+	return func(VolumeVar Volume, FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {
+		rawCallback(VolumeVar.GoPointer(), FlagsVar, MountOperationVar.GoPointer(), CancellableVar.GoPointer(), glib.NewCallbackNullable(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackEjectWithOperationFinish sets the callback function.
+func (x *VolumeIface) SetCallbackEjectWithOperationFinish(cb func(Volume, AsyncResult) bool) {
+	if cb == nil {
+		x.xEjectWithOperationFinish = 0
+	} else {
+		x.xEjectWithOperationFinish = purego.NewCallback(func(VolumeVarp uintptr, ResultVarp uintptr) bool {
+			return cb(&VolumeBase{Ptr: VolumeVarp}, &AsyncResultBase{Ptr: ResultVarp})
+		})
+	}
+}
+
+// GetCallbackEjectWithOperationFinish gets the callback function.
+func (x *VolumeIface) GetCallbackEjectWithOperationFinish() func(Volume, AsyncResult) bool {
+	if x.xEjectWithOperationFinish == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr, ResultVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xEjectWithOperationFinish)
+	return func(VolumeVar Volume, ResultVar AsyncResult) bool {
+		return rawCallback(VolumeVar.GoPointer(), ResultVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSortKey sets the callback function.
+func (x *VolumeIface) SetCallbackGetSortKey(cb func(Volume) string) {
+	if cb == nil {
+		x.xGetSortKey = 0
+	} else {
+		x.xGetSortKey = purego.NewCallback(func(VolumeVarp uintptr) string {
+			return cb(&VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackGetSortKey gets the callback function.
+func (x *VolumeIface) GetCallbackGetSortKey() func(Volume) string {
+	if x.xGetSortKey == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetSortKey)
+	return func(VolumeVar Volume) string {
+		return rawCallback(VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSymbolicIcon sets the callback function.
+func (x *VolumeIface) SetCallbackGetSymbolicIcon(cb func(Volume) *IconBase) {
+	if cb == nil {
+		x.xGetSymbolicIcon = 0
+	} else {
+		x.xGetSymbolicIcon = purego.NewCallback(func(VolumeVarp uintptr) uintptr {
+			ret := cb(&VolumeBase{Ptr: VolumeVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetSymbolicIcon gets the callback function.
+func (x *VolumeIface) GetCallbackGetSymbolicIcon() func(Volume) *IconBase {
+	if x.xGetSymbolicIcon == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetSymbolicIcon)
+	return func(VolumeVar Volume) *IconBase {
+		rawRet := rawCallback(VolumeVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &IconBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
 // The #GVolume interface represents user-visible objects that can be
 // mounted. Note, when porting from GnomeVFS, #GVolume is the moral
 // equivalent of #GnomeVFSDrive.
@@ -110,9 +643,9 @@ 	SetGoPointer(uintptr)
 	CanEject() bool
 	CanMount() bool
 	Eject(FlagsVar MountUnmountFlags, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectFinish(ResultVar AsyncResult) bool
+	EjectFinish(ResultVar AsyncResult) (bool, error)
 	EjectWithOperation(FlagsVar MountUnmountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	EjectWithOperationFinish(ResultVar AsyncResult) bool
+	EjectWithOperationFinish(ResultVar AsyncResult) (bool, error)
 	EnumerateIdentifiers() []string
 	GetActivationRoot() *FileBase
 	GetDrive() *DriveBase
@@ -124,7 +657,7 @@ 	GetSortKey() string
 	GetSymbolicIcon() *IconBase
 	GetUuid() string
 	Mount(FlagsVar MountMountFlags, MountOperationVar *MountOperation, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr)
-	MountFinish(ResultVar AsyncResult) bool
+	MountFinish(ResultVar AsyncResult) (bool, error)
 	ShouldAutomount() bool
 }
 
diff --git a/v4/gio/gvolumemonitor.go b/v4/gio/gvolumemonitor.go
index 7c97d9adb7297103bda570ef727597089717a4db..0a2042be616109730711996f40aa70b4fe21a87c 100644
--- a/v4/gio/gvolumemonitor.go
+++ b/v4/gio/gvolumemonitor.go
@@ -17,59 +17,664 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	VolumeAdded uintptr
+	xVolumeAdded uintptr
 
-	VolumeRemoved uintptr
+	xVolumeRemoved uintptr
 
-	VolumeChanged uintptr
+	xVolumeChanged uintptr
 
-	MountAdded uintptr
+	xMountAdded uintptr
 
-	MountRemoved uintptr
+	xMountRemoved uintptr
 
-	MountPreUnmount uintptr
+	xMountPreUnmount uintptr
 
-	MountChanged uintptr
+	xMountChanged uintptr
 
-	DriveConnected uintptr
+	xDriveConnected uintptr
 
-	DriveDisconnected uintptr
+	xDriveDisconnected uintptr
 
-	DriveChanged uintptr
+	xDriveChanged uintptr
 
-	IsSupported uintptr
+	xIsSupported uintptr
 
-	GetConnectedDrives uintptr
+	xGetConnectedDrives uintptr
 
-	GetVolumes uintptr
+	xGetVolumes uintptr
 
-	GetMounts uintptr
+	xGetMounts uintptr
 
-	GetVolumeForUuid uintptr
+	xGetVolumeForUuid uintptr
 
-	GetMountForUuid uintptr
+	xGetMountForUuid uintptr
 
-	AdoptOrphanMount uintptr
+	xAdoptOrphanMount uintptr
 
-	DriveEjectButton uintptr
+	xDriveEjectButton uintptr
 
-	DriveStopButton uintptr
+	xDriveStopButton uintptr
 
-	GReserved1 uintptr
+	xGReserved1 uintptr
 
-	GReserved2 uintptr
+	xGReserved2 uintptr
 
-	GReserved3 uintptr
+	xGReserved3 uintptr
 
-	GReserved4 uintptr
+	xGReserved4 uintptr
 
-	GReserved5 uintptr
+	xGReserved5 uintptr
 
-	GReserved6 uintptr
+	xGReserved6 uintptr
 }
 
 func (x *VolumeMonitorClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackVolumeAdded sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackVolumeAdded(cb func(*VolumeMonitor, Volume)) {
+	if cb == nil {
+		x.xVolumeAdded = 0
+	} else {
+		x.xVolumeAdded = purego.NewCallback(func(VolumeMonitorVarp uintptr, VolumeVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackVolumeAdded gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackVolumeAdded() func(*VolumeMonitor, Volume) {
+	if x.xVolumeAdded == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, VolumeVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xVolumeAdded)
+	return func(VolumeMonitorVar *VolumeMonitor, VolumeVar Volume) {
+		rawCallback(VolumeMonitorVar.GoPointer(), VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackVolumeRemoved sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackVolumeRemoved(cb func(*VolumeMonitor, Volume)) {
+	if cb == nil {
+		x.xVolumeRemoved = 0
+	} else {
+		x.xVolumeRemoved = purego.NewCallback(func(VolumeMonitorVarp uintptr, VolumeVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackVolumeRemoved gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackVolumeRemoved() func(*VolumeMonitor, Volume) {
+	if x.xVolumeRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, VolumeVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xVolumeRemoved)
+	return func(VolumeMonitorVar *VolumeMonitor, VolumeVar Volume) {
+		rawCallback(VolumeMonitorVar.GoPointer(), VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackVolumeChanged sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackVolumeChanged(cb func(*VolumeMonitor, Volume)) {
+	if cb == nil {
+		x.xVolumeChanged = 0
+	} else {
+		x.xVolumeChanged = purego.NewCallback(func(VolumeMonitorVarp uintptr, VolumeVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &VolumeBase{Ptr: VolumeVarp})
+		})
+	}
+}
+
+// GetCallbackVolumeChanged gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackVolumeChanged() func(*VolumeMonitor, Volume) {
+	if x.xVolumeChanged == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, VolumeVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xVolumeChanged)
+	return func(VolumeMonitorVar *VolumeMonitor, VolumeVar Volume) {
+		rawCallback(VolumeMonitorVar.GoPointer(), VolumeVar.GoPointer())
+	}
+}
+
+// SetCallbackMountAdded sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackMountAdded(cb func(*VolumeMonitor, Mount)) {
+	if cb == nil {
+		x.xMountAdded = 0
+	} else {
+		x.xMountAdded = purego.NewCallback(func(VolumeMonitorVarp uintptr, MountVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackMountAdded gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackMountAdded() func(*VolumeMonitor, Mount) {
+	if x.xMountAdded == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, MountVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMountAdded)
+	return func(VolumeMonitorVar *VolumeMonitor, MountVar Mount) {
+		rawCallback(VolumeMonitorVar.GoPointer(), MountVar.GoPointer())
+	}
+}
+
+// SetCallbackMountRemoved sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackMountRemoved(cb func(*VolumeMonitor, Mount)) {
+	if cb == nil {
+		x.xMountRemoved = 0
+	} else {
+		x.xMountRemoved = purego.NewCallback(func(VolumeMonitorVarp uintptr, MountVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackMountRemoved gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackMountRemoved() func(*VolumeMonitor, Mount) {
+	if x.xMountRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, MountVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMountRemoved)
+	return func(VolumeMonitorVar *VolumeMonitor, MountVar Mount) {
+		rawCallback(VolumeMonitorVar.GoPointer(), MountVar.GoPointer())
+	}
+}
+
+// SetCallbackMountPreUnmount sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackMountPreUnmount(cb func(*VolumeMonitor, Mount)) {
+	if cb == nil {
+		x.xMountPreUnmount = 0
+	} else {
+		x.xMountPreUnmount = purego.NewCallback(func(VolumeMonitorVarp uintptr, MountVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackMountPreUnmount gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackMountPreUnmount() func(*VolumeMonitor, Mount) {
+	if x.xMountPreUnmount == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, MountVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMountPreUnmount)
+	return func(VolumeMonitorVar *VolumeMonitor, MountVar Mount) {
+		rawCallback(VolumeMonitorVar.GoPointer(), MountVar.GoPointer())
+	}
+}
+
+// SetCallbackMountChanged sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackMountChanged(cb func(*VolumeMonitor, Mount)) {
+	if cb == nil {
+		x.xMountChanged = 0
+	} else {
+		x.xMountChanged = purego.NewCallback(func(VolumeMonitorVarp uintptr, MountVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &MountBase{Ptr: MountVarp})
+		})
+	}
+}
+
+// GetCallbackMountChanged gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackMountChanged() func(*VolumeMonitor, Mount) {
+	if x.xMountChanged == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, MountVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMountChanged)
+	return func(VolumeMonitorVar *VolumeMonitor, MountVar Mount) {
+		rawCallback(VolumeMonitorVar.GoPointer(), MountVar.GoPointer())
+	}
+}
+
+// SetCallbackDriveConnected sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackDriveConnected(cb func(*VolumeMonitor, Drive)) {
+	if cb == nil {
+		x.xDriveConnected = 0
+	} else {
+		x.xDriveConnected = purego.NewCallback(func(VolumeMonitorVarp uintptr, DriveVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackDriveConnected gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackDriveConnected() func(*VolumeMonitor, Drive) {
+	if x.xDriveConnected == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDriveConnected)
+	return func(VolumeMonitorVar *VolumeMonitor, DriveVar Drive) {
+		rawCallback(VolumeMonitorVar.GoPointer(), DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackDriveDisconnected sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackDriveDisconnected(cb func(*VolumeMonitor, Drive)) {
+	if cb == nil {
+		x.xDriveDisconnected = 0
+	} else {
+		x.xDriveDisconnected = purego.NewCallback(func(VolumeMonitorVarp uintptr, DriveVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackDriveDisconnected gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackDriveDisconnected() func(*VolumeMonitor, Drive) {
+	if x.xDriveDisconnected == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDriveDisconnected)
+	return func(VolumeMonitorVar *VolumeMonitor, DriveVar Drive) {
+		rawCallback(VolumeMonitorVar.GoPointer(), DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackDriveChanged sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackDriveChanged(cb func(*VolumeMonitor, Drive)) {
+	if cb == nil {
+		x.xDriveChanged = 0
+	} else {
+		x.xDriveChanged = purego.NewCallback(func(VolumeMonitorVarp uintptr, DriveVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackDriveChanged gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackDriveChanged() func(*VolumeMonitor, Drive) {
+	if x.xDriveChanged == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDriveChanged)
+	return func(VolumeMonitorVar *VolumeMonitor, DriveVar Drive) {
+		rawCallback(VolumeMonitorVar.GoPointer(), DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackIsSupported sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackIsSupported(cb func() bool) {
+	if cb == nil {
+		x.xIsSupported = 0
+	} else {
+		x.xIsSupported = purego.NewCallback(func() bool {
+			return cb()
+		})
+	}
+}
+
+// GetCallbackIsSupported gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackIsSupported() func() bool {
+	if x.xIsSupported == 0 {
+		return nil
+	}
+	var rawCallback func() bool
+	purego.RegisterFunc(&rawCallback, x.xIsSupported)
+	return func() bool {
+		return rawCallback()
+	}
+}
+
+// SetCallbackGetConnectedDrives sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGetConnectedDrives(cb func(*VolumeMonitor) *glib.List) {
+	if cb == nil {
+		x.xGetConnectedDrives = 0
+	} else {
+		x.xGetConnectedDrives = purego.NewCallback(func(VolumeMonitorVarp uintptr) *glib.List {
+			return cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp))
+		})
+	}
+}
+
+// GetCallbackGetConnectedDrives gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGetConnectedDrives() func(*VolumeMonitor) *glib.List {
+	if x.xGetConnectedDrives == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xGetConnectedDrives)
+	return func(VolumeMonitorVar *VolumeMonitor) *glib.List {
+		return rawCallback(VolumeMonitorVar.GoPointer())
+	}
+}
+
+// SetCallbackGetVolumes sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGetVolumes(cb func(*VolumeMonitor) *glib.List) {
+	if cb == nil {
+		x.xGetVolumes = 0
+	} else {
+		x.xGetVolumes = purego.NewCallback(func(VolumeMonitorVarp uintptr) *glib.List {
+			return cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp))
+		})
+	}
+}
+
+// GetCallbackGetVolumes gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGetVolumes() func(*VolumeMonitor) *glib.List {
+	if x.xGetVolumes == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xGetVolumes)
+	return func(VolumeMonitorVar *VolumeMonitor) *glib.List {
+		return rawCallback(VolumeMonitorVar.GoPointer())
+	}
+}
+
+// SetCallbackGetMounts sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGetMounts(cb func(*VolumeMonitor) *glib.List) {
+	if cb == nil {
+		x.xGetMounts = 0
+	} else {
+		x.xGetMounts = purego.NewCallback(func(VolumeMonitorVarp uintptr) *glib.List {
+			return cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp))
+		})
+	}
+}
+
+// GetCallbackGetMounts gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGetMounts() func(*VolumeMonitor) *glib.List {
+	if x.xGetMounts == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xGetMounts)
+	return func(VolumeMonitorVar *VolumeMonitor) *glib.List {
+		return rawCallback(VolumeMonitorVar.GoPointer())
+	}
+}
+
+// SetCallbackGetVolumeForUuid sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGetVolumeForUuid(cb func(*VolumeMonitor, string) *VolumeBase) {
+	if cb == nil {
+		x.xGetVolumeForUuid = 0
+	} else {
+		x.xGetVolumeForUuid = purego.NewCallback(func(VolumeMonitorVarp uintptr, UuidVarp string) uintptr {
+			ret := cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), UuidVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetVolumeForUuid gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGetVolumeForUuid() func(*VolumeMonitor, string) *VolumeBase {
+	if x.xGetVolumeForUuid == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, UuidVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetVolumeForUuid)
+	return func(VolumeMonitorVar *VolumeMonitor, UuidVar string) *VolumeBase {
+		rawRet := rawCallback(VolumeMonitorVar.GoPointer(), UuidVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &VolumeBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetMountForUuid sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGetMountForUuid(cb func(*VolumeMonitor, string) *MountBase) {
+	if cb == nil {
+		x.xGetMountForUuid = 0
+	} else {
+		x.xGetMountForUuid = purego.NewCallback(func(VolumeMonitorVarp uintptr, UuidVarp string) uintptr {
+			ret := cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), UuidVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetMountForUuid gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGetMountForUuid() func(*VolumeMonitor, string) *MountBase {
+	if x.xGetMountForUuid == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, UuidVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetMountForUuid)
+	return func(VolumeMonitorVar *VolumeMonitor, UuidVar string) *MountBase {
+		rawRet := rawCallback(VolumeMonitorVar.GoPointer(), UuidVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &MountBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackAdoptOrphanMount sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackAdoptOrphanMount(cb func(Mount, *VolumeMonitor) *VolumeBase) {
+	if cb == nil {
+		x.xAdoptOrphanMount = 0
+	} else {
+		x.xAdoptOrphanMount = purego.NewCallback(func(MountVarp uintptr, VolumeMonitorVarp uintptr) uintptr {
+			ret := cb(&MountBase{Ptr: MountVarp}, VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackAdoptOrphanMount gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackAdoptOrphanMount() func(Mount, *VolumeMonitor) *VolumeBase {
+	if x.xAdoptOrphanMount == 0 {
+		return nil
+	}
+	var rawCallback func(MountVarp uintptr, VolumeMonitorVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xAdoptOrphanMount)
+	return func(MountVar Mount, VolumeMonitorVar *VolumeMonitor) *VolumeBase {
+		rawRet := rawCallback(MountVar.GoPointer(), VolumeMonitorVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &VolumeBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackDriveEjectButton sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackDriveEjectButton(cb func(*VolumeMonitor, Drive)) {
+	if cb == nil {
+		x.xDriveEjectButton = 0
+	} else {
+		x.xDriveEjectButton = purego.NewCallback(func(VolumeMonitorVarp uintptr, DriveVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackDriveEjectButton gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackDriveEjectButton() func(*VolumeMonitor, Drive) {
+	if x.xDriveEjectButton == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDriveEjectButton)
+	return func(VolumeMonitorVar *VolumeMonitor, DriveVar Drive) {
+		rawCallback(VolumeMonitorVar.GoPointer(), DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackDriveStopButton sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackDriveStopButton(cb func(*VolumeMonitor, Drive)) {
+	if cb == nil {
+		x.xDriveStopButton = 0
+	} else {
+		x.xDriveStopButton = purego.NewCallback(func(VolumeMonitorVarp uintptr, DriveVarp uintptr) {
+			cb(VolumeMonitorNewFromInternalPtr(VolumeMonitorVarp), &DriveBase{Ptr: DriveVarp})
+		})
+	}
+}
+
+// GetCallbackDriveStopButton gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackDriveStopButton() func(*VolumeMonitor, Drive) {
+	if x.xDriveStopButton == 0 {
+		return nil
+	}
+	var rawCallback func(VolumeMonitorVarp uintptr, DriveVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDriveStopButton)
+	return func(VolumeMonitorVar *VolumeMonitor, DriveVar Drive) {
+		rawCallback(VolumeMonitorVar.GoPointer(), DriveVar.GoPointer())
+	}
+}
+
+// SetCallbackGReserved1 sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGReserved1(cb func()) {
+	if cb == nil {
+		x.xGReserved1 = 0
+	} else {
+		x.xGReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved1 gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGReserved1() func() {
+	if x.xGReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved2 sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGReserved2(cb func()) {
+	if cb == nil {
+		x.xGReserved2 = 0
+	} else {
+		x.xGReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved2 gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGReserved2() func() {
+	if x.xGReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved3 sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGReserved3(cb func()) {
+	if cb == nil {
+		x.xGReserved3 = 0
+	} else {
+		x.xGReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved3 gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGReserved3() func() {
+	if x.xGReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved4 sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGReserved4(cb func()) {
+	if cb == nil {
+		x.xGReserved4 = 0
+	} else {
+		x.xGReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved4 gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGReserved4() func() {
+	if x.xGReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved5 sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGReserved5(cb func()) {
+	if cb == nil {
+		x.xGReserved5 = 0
+	} else {
+		x.xGReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved5 gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGReserved5() func() {
+	if x.xGReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGReserved6 sets the callback function.
+func (x *VolumeMonitorClass) SetCallbackGReserved6(cb func()) {
+	if cb == nil {
+		x.xGReserved6 = 0
+	} else {
+		x.xGReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGReserved6 gets the callback function.
+func (x *VolumeMonitorClass) GetCallbackGReserved6() func() {
+	if x.xGReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGReserved6)
+	return func() {
+		rawCallback()
+	}
 }
 
 const (
diff --git a/v4/glib/giochannel.go b/v4/glib/giochannel.go
index 10ab016a4dc44e4099fe87b764a512bb800f0839..ba85ddd8d1def5afc54b9f74c04a70eb8513536c 100644
--- a/v4/glib/giochannel.go
+++ b/v4/glib/giochannel.go
@@ -560,25 +560,209 @@ // in a generic way.
 type IOFuncs struct {
 	_ structs.HostLayout
 
-	IoRead uintptr
+	xIoRead uintptr
 
-	IoWrite uintptr
+	xIoWrite uintptr
 
-	IoSeek uintptr
+	xIoSeek uintptr
 
-	IoClose uintptr
+	xIoClose uintptr
 
-	IoCreateWatch uintptr
+	xIoCreateWatch uintptr
 
-	IoFree uintptr
+	xIoFree uintptr
 
-	IoSetFlags uintptr
+	xIoSetFlags uintptr
 
-	IoGetFlags uintptr
+	xIoGetFlags uintptr
 }
 
 func (x *IOFuncs) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackIoRead sets the callback function.
+func (x *IOFuncs) SetCallbackIoRead(cb func(*IOChannel, string, uint, uint) IOStatus) {
+	if cb == nil {
+		x.xIoRead = 0
+	} else {
+		x.xIoRead = purego.NewCallback(func(ChannelVarp *IOChannel, BufVarp string, CountVarp uint, BytesReadVarp uint) IOStatus {
+			return cb(ChannelVarp, BufVarp, CountVarp, BytesReadVarp)
+		})
+	}
+}
+
+// GetCallbackIoRead gets the callback function.
+func (x *IOFuncs) GetCallbackIoRead() func(*IOChannel, string, uint, uint) IOStatus {
+	if x.xIoRead == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel, BufVarp string, CountVarp uint, BytesReadVarp uint) IOStatus
+	purego.RegisterFunc(&rawCallback, x.xIoRead)
+	return func(ChannelVar *IOChannel, BufVar string, CountVar uint, BytesReadVar uint) IOStatus {
+		return rawCallback(ChannelVar, BufVar, CountVar, BytesReadVar)
+	}
+}
+
+// SetCallbackIoWrite sets the callback function.
+func (x *IOFuncs) SetCallbackIoWrite(cb func(*IOChannel, string, uint, uint) IOStatus) {
+	if cb == nil {
+		x.xIoWrite = 0
+	} else {
+		x.xIoWrite = purego.NewCallback(func(ChannelVarp *IOChannel, BufVarp string, CountVarp uint, BytesWrittenVarp uint) IOStatus {
+			return cb(ChannelVarp, BufVarp, CountVarp, BytesWrittenVarp)
+		})
+	}
+}
+
+// GetCallbackIoWrite gets the callback function.
+func (x *IOFuncs) GetCallbackIoWrite() func(*IOChannel, string, uint, uint) IOStatus {
+	if x.xIoWrite == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel, BufVarp string, CountVarp uint, BytesWrittenVarp uint) IOStatus
+	purego.RegisterFunc(&rawCallback, x.xIoWrite)
+	return func(ChannelVar *IOChannel, BufVar string, CountVar uint, BytesWrittenVar uint) IOStatus {
+		return rawCallback(ChannelVar, BufVar, CountVar, BytesWrittenVar)
+	}
+}
+
+// SetCallbackIoSeek sets the callback function.
+func (x *IOFuncs) SetCallbackIoSeek(cb func(*IOChannel, int64, SeekType) IOStatus) {
+	if cb == nil {
+		x.xIoSeek = 0
+	} else {
+		x.xIoSeek = purego.NewCallback(func(ChannelVarp *IOChannel, OffsetVarp int64, TypeVarp SeekType) IOStatus {
+			return cb(ChannelVarp, OffsetVarp, TypeVarp)
+		})
+	}
+}
+
+// GetCallbackIoSeek gets the callback function.
+func (x *IOFuncs) GetCallbackIoSeek() func(*IOChannel, int64, SeekType) IOStatus {
+	if x.xIoSeek == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel, OffsetVarp int64, TypeVarp SeekType) IOStatus
+	purego.RegisterFunc(&rawCallback, x.xIoSeek)
+	return func(ChannelVar *IOChannel, OffsetVar int64, TypeVar SeekType) IOStatus {
+		return rawCallback(ChannelVar, OffsetVar, TypeVar)
+	}
+}
+
+// SetCallbackIoClose sets the callback function.
+func (x *IOFuncs) SetCallbackIoClose(cb func(*IOChannel) IOStatus) {
+	if cb == nil {
+		x.xIoClose = 0
+	} else {
+		x.xIoClose = purego.NewCallback(func(ChannelVarp *IOChannel) IOStatus {
+			return cb(ChannelVarp)
+		})
+	}
+}
+
+// GetCallbackIoClose gets the callback function.
+func (x *IOFuncs) GetCallbackIoClose() func(*IOChannel) IOStatus {
+	if x.xIoClose == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel) IOStatus
+	purego.RegisterFunc(&rawCallback, x.xIoClose)
+	return func(ChannelVar *IOChannel) IOStatus {
+		return rawCallback(ChannelVar)
+	}
+}
+
+// SetCallbackIoCreateWatch sets the callback function.
+func (x *IOFuncs) SetCallbackIoCreateWatch(cb func(*IOChannel, IOCondition) *Source) {
+	if cb == nil {
+		x.xIoCreateWatch = 0
+	} else {
+		x.xIoCreateWatch = purego.NewCallback(func(ChannelVarp *IOChannel, ConditionVarp IOCondition) *Source {
+			return cb(ChannelVarp, ConditionVarp)
+		})
+	}
+}
+
+// GetCallbackIoCreateWatch gets the callback function.
+func (x *IOFuncs) GetCallbackIoCreateWatch() func(*IOChannel, IOCondition) *Source {
+	if x.xIoCreateWatch == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel, ConditionVarp IOCondition) *Source
+	purego.RegisterFunc(&rawCallback, x.xIoCreateWatch)
+	return func(ChannelVar *IOChannel, ConditionVar IOCondition) *Source {
+		return rawCallback(ChannelVar, ConditionVar)
+	}
+}
+
+// SetCallbackIoFree sets the callback function.
+func (x *IOFuncs) SetCallbackIoFree(cb func(*IOChannel)) {
+	if cb == nil {
+		x.xIoFree = 0
+	} else {
+		x.xIoFree = purego.NewCallback(func(ChannelVarp *IOChannel) {
+			cb(ChannelVarp)
+		})
+	}
+}
+
+// GetCallbackIoFree gets the callback function.
+func (x *IOFuncs) GetCallbackIoFree() func(*IOChannel) {
+	if x.xIoFree == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel)
+	purego.RegisterFunc(&rawCallback, x.xIoFree)
+	return func(ChannelVar *IOChannel) {
+		rawCallback(ChannelVar)
+	}
+}
+
+// SetCallbackIoSetFlags sets the callback function.
+func (x *IOFuncs) SetCallbackIoSetFlags(cb func(*IOChannel, IOFlags) IOStatus) {
+	if cb == nil {
+		x.xIoSetFlags = 0
+	} else {
+		x.xIoSetFlags = purego.NewCallback(func(ChannelVarp *IOChannel, FlagsVarp IOFlags) IOStatus {
+			return cb(ChannelVarp, FlagsVarp)
+		})
+	}
+}
+
+// GetCallbackIoSetFlags gets the callback function.
+func (x *IOFuncs) GetCallbackIoSetFlags() func(*IOChannel, IOFlags) IOStatus {
+	if x.xIoSetFlags == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel, FlagsVarp IOFlags) IOStatus
+	purego.RegisterFunc(&rawCallback, x.xIoSetFlags)
+	return func(ChannelVar *IOChannel, FlagsVar IOFlags) IOStatus {
+		return rawCallback(ChannelVar, FlagsVar)
+	}
+}
+
+// SetCallbackIoGetFlags sets the callback function.
+func (x *IOFuncs) SetCallbackIoGetFlags(cb func(*IOChannel) IOFlags) {
+	if cb == nil {
+		x.xIoGetFlags = 0
+	} else {
+		x.xIoGetFlags = purego.NewCallback(func(ChannelVarp *IOChannel) IOFlags {
+			return cb(ChannelVarp)
+		})
+	}
+}
+
+// GetCallbackIoGetFlags gets the callback function.
+func (x *IOFuncs) GetCallbackIoGetFlags() func(*IOChannel) IOFlags {
+	if x.xIoGetFlags == 0 {
+		return nil
+	}
+	var rawCallback func(ChannelVarp *IOChannel) IOFlags
+	purego.RegisterFunc(&rawCallback, x.xIoGetFlags)
+	return func(ChannelVar *IOChannel) IOFlags {
+		return rawCallback(ChannelVar)
+	}
 }
 
 const (
diff --git a/v4/glib/gmain.go b/v4/glib/gmain.go
index 772f7b3b9990b1535b8bc03f85ab15799a267836..5d0a0696dddf0f94665858c98483011e8e0813d1 100644
--- a/v4/glib/gmain.go
+++ b/v4/glib/gmain.go
@@ -1181,17 +1181,86 @@ // functions for managing callback objects.
 type SourceCallbackFuncs struct {
 	_ structs.HostLayout
 
-	Ref uintptr
+	xRef uintptr
 
-	Unref uintptr
+	xUnref uintptr
 
-	Get uintptr
+	xGet uintptr
 }
 
 func (x *SourceCallbackFuncs) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackRef sets the callback function.
+func (x *SourceCallbackFuncs) SetCallbackRef(cb func(uintptr)) {
+	if cb == nil {
+		x.xRef = 0
+	} else {
+		x.xRef = purego.NewCallback(func(CbDataVarp uintptr) {
+			cb(CbDataVarp)
+		})
+	}
+}
+
+// GetCallbackRef gets the callback function.
+func (x *SourceCallbackFuncs) GetCallbackRef() func(uintptr) {
+	if x.xRef == 0 {
+		return nil
+	}
+	var rawCallback func(CbDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRef)
+	return func(CbDataVar uintptr) {
+		rawCallback(CbDataVar)
+	}
+}
+
+// SetCallbackUnref sets the callback function.
+func (x *SourceCallbackFuncs) SetCallbackUnref(cb func(uintptr)) {
+	if cb == nil {
+		x.xUnref = 0
+	} else {
+		x.xUnref = purego.NewCallback(func(CbDataVarp uintptr) {
+			cb(CbDataVarp)
+		})
+	}
+}
+
+// GetCallbackUnref gets the callback function.
+func (x *SourceCallbackFuncs) GetCallbackUnref() func(uintptr) {
+	if x.xUnref == 0 {
+		return nil
+	}
+	var rawCallback func(CbDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnref)
+	return func(CbDataVar uintptr) {
+		rawCallback(CbDataVar)
+	}
+}
+
+// SetCallbackGet sets the callback function.
+func (x *SourceCallbackFuncs) SetCallbackGet(cb func(uintptr, *Source, *SourceFunc, uintptr)) {
+	if cb == nil {
+		x.xGet = 0
+	} else {
+		x.xGet = purego.NewCallback(func(CbDataVarp uintptr, SourceVarp *Source, FuncVarp uintptr, DataVarp uintptr) {
+			cb(CbDataVarp, SourceVarp, (*SourceFunc)(unsafe.Pointer(FuncVarp)), DataVarp)
+		})
+	}
+}
+
+// GetCallbackGet gets the callback function.
+func (x *SourceCallbackFuncs) GetCallbackGet() func(uintptr, *Source, *SourceFunc, uintptr) {
+	if x.xGet == 0 {
+		return nil
+	}
+	var rawCallback func(CbDataVarp uintptr, SourceVarp *Source, FuncVarp uintptr, DataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xGet)
+	return func(CbDataVar uintptr, SourceVar *Source, FuncVar *SourceFunc, DataVar uintptr) {
+		rawCallback(CbDataVar, SourceVar, NewCallback(FuncVar), DataVar)
+	}
+}
+
 // The `GSourceFuncs` struct contains a table of
 // functions used to handle event sources in a generic manner.
 //
@@ -1215,13 +1284,13 @@ // required condition has been met, and returns %TRUE if so.
 type SourceFuncs struct {
 	_ structs.HostLayout
 
-	Prepare uintptr
+	xPrepare uintptr
 
-	Check uintptr
+	xCheck uintptr
 
-	Dispatch uintptr
+	xDispatch uintptr
 
-	Finalize uintptr
+	xFinalize uintptr
 
 	ClosureCallback SourceFunc
 
@@ -1230,6 +1299,98 @@ }
 
 func (x *SourceFuncs) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackPrepare sets the callback function.
+func (x *SourceFuncs) SetCallbackPrepare(cb func(*Source, int) bool) {
+	if cb == nil {
+		x.xPrepare = 0
+	} else {
+		x.xPrepare = purego.NewCallback(func(SourceVarp *Source, TimeoutVarp int) bool {
+			return cb(SourceVarp, TimeoutVarp)
+		})
+	}
+}
+
+// GetCallbackPrepare gets the callback function.
+func (x *SourceFuncs) GetCallbackPrepare() func(*Source, int) bool {
+	if x.xPrepare == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp *Source, TimeoutVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xPrepare)
+	return func(SourceVar *Source, TimeoutVar int) bool {
+		return rawCallback(SourceVar, TimeoutVar)
+	}
+}
+
+// SetCallbackCheck sets the callback function.
+func (x *SourceFuncs) SetCallbackCheck(cb func(*Source) bool) {
+	if cb == nil {
+		x.xCheck = 0
+	} else {
+		x.xCheck = purego.NewCallback(func(SourceVarp *Source) bool {
+			return cb(SourceVarp)
+		})
+	}
+}
+
+// GetCallbackCheck gets the callback function.
+func (x *SourceFuncs) GetCallbackCheck() func(*Source) bool {
+	if x.xCheck == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp *Source) bool
+	purego.RegisterFunc(&rawCallback, x.xCheck)
+	return func(SourceVar *Source) bool {
+		return rawCallback(SourceVar)
+	}
+}
+
+// SetCallbackDispatch sets the callback function.
+func (x *SourceFuncs) SetCallbackDispatch(cb func(*Source, *SourceFunc, uintptr) bool) {
+	if cb == nil {
+		x.xDispatch = 0
+	} else {
+		x.xDispatch = purego.NewCallback(func(SourceVarp *Source, CallbackVarp uintptr, UserDataVarp uintptr) bool {
+			return cb(SourceVarp, (*SourceFunc)(unsafe.Pointer(CallbackVarp)), UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackDispatch gets the callback function.
+func (x *SourceFuncs) GetCallbackDispatch() func(*Source, *SourceFunc, uintptr) bool {
+	if x.xDispatch == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp *Source, CallbackVarp uintptr, UserDataVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xDispatch)
+	return func(SourceVar *Source, CallbackVar *SourceFunc, UserDataVar uintptr) bool {
+		return rawCallback(SourceVar, NewCallback(CallbackVar), UserDataVar)
+	}
+}
+
+// SetCallbackFinalize sets the callback function.
+func (x *SourceFuncs) SetCallbackFinalize(cb func(*Source)) {
+	if cb == nil {
+		x.xFinalize = 0
+	} else {
+		x.xFinalize = purego.NewCallback(func(SourceVarp *Source) {
+			cb(SourceVarp)
+		})
+	}
+}
+
+// GetCallbackFinalize gets the callback function.
+func (x *SourceFuncs) GetCallbackFinalize() func(*Source) {
+	if x.xFinalize == 0 {
+		return nil
+	}
+	var rawCallback func(SourceVarp *Source)
+	purego.RegisterFunc(&rawCallback, x.xFinalize)
+	return func(SourceVar *Source) {
+		rawCallback(SourceVar)
+	}
 }
 
 type SourcePrivate struct {
diff --git a/v4/glib/gmarkup.go b/v4/glib/gmarkup.go
index 8981cc40ac2e2736936f2ab15b901c116bb66603..5e00f7061440166ef097e1b445de30b794c27e19 100644
--- a/v4/glib/gmarkup.go
+++ b/v4/glib/gmarkup.go
@@ -337,19 +337,134 @@ // back to its caller.
 type MarkupParser struct {
 	_ structs.HostLayout
 
-	StartElement uintptr
+	xStartElement uintptr
 
-	EndElement uintptr
+	xEndElement uintptr
 
-	Text uintptr
+	xText uintptr
 
-	Passthrough uintptr
+	xPassthrough uintptr
 
-	Error uintptr
+	xError uintptr
 }
 
 func (x *MarkupParser) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackStartElement sets the callback function.
+func (x *MarkupParser) SetCallbackStartElement(cb func(*MarkupParseContext, string, string, string, uintptr)) {
+	if cb == nil {
+		x.xStartElement = 0
+	} else {
+		x.xStartElement = purego.NewCallback(func(ContextVarp *MarkupParseContext, ElementNameVarp string, AttributeNamesVarp string, AttributeValuesVarp string, UserDataVarp uintptr) {
+			cb(ContextVarp, ElementNameVarp, AttributeNamesVarp, AttributeValuesVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackStartElement gets the callback function.
+func (x *MarkupParser) GetCallbackStartElement() func(*MarkupParseContext, string, string, string, uintptr) {
+	if x.xStartElement == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *MarkupParseContext, ElementNameVarp string, AttributeNamesVarp string, AttributeValuesVarp string, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStartElement)
+	return func(ContextVar *MarkupParseContext, ElementNameVar string, AttributeNamesVar string, AttributeValuesVar string, UserDataVar uintptr) {
+		rawCallback(ContextVar, ElementNameVar, AttributeNamesVar, AttributeValuesVar, UserDataVar)
+	}
+}
+
+// SetCallbackEndElement sets the callback function.
+func (x *MarkupParser) SetCallbackEndElement(cb func(*MarkupParseContext, string, uintptr)) {
+	if cb == nil {
+		x.xEndElement = 0
+	} else {
+		x.xEndElement = purego.NewCallback(func(ContextVarp *MarkupParseContext, ElementNameVarp string, UserDataVarp uintptr) {
+			cb(ContextVarp, ElementNameVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEndElement gets the callback function.
+func (x *MarkupParser) GetCallbackEndElement() func(*MarkupParseContext, string, uintptr) {
+	if x.xEndElement == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *MarkupParseContext, ElementNameVarp string, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEndElement)
+	return func(ContextVar *MarkupParseContext, ElementNameVar string, UserDataVar uintptr) {
+		rawCallback(ContextVar, ElementNameVar, UserDataVar)
+	}
+}
+
+// SetCallbackText sets the callback function.
+func (x *MarkupParser) SetCallbackText(cb func(*MarkupParseContext, string, uint, uintptr)) {
+	if cb == nil {
+		x.xText = 0
+	} else {
+		x.xText = purego.NewCallback(func(ContextVarp *MarkupParseContext, TextVarp string, TextLenVarp uint, UserDataVarp uintptr) {
+			cb(ContextVarp, TextVarp, TextLenVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackText gets the callback function.
+func (x *MarkupParser) GetCallbackText() func(*MarkupParseContext, string, uint, uintptr) {
+	if x.xText == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *MarkupParseContext, TextVarp string, TextLenVarp uint, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xText)
+	return func(ContextVar *MarkupParseContext, TextVar string, TextLenVar uint, UserDataVar uintptr) {
+		rawCallback(ContextVar, TextVar, TextLenVar, UserDataVar)
+	}
+}
+
+// SetCallbackPassthrough sets the callback function.
+func (x *MarkupParser) SetCallbackPassthrough(cb func(*MarkupParseContext, string, uint, uintptr)) {
+	if cb == nil {
+		x.xPassthrough = 0
+	} else {
+		x.xPassthrough = purego.NewCallback(func(ContextVarp *MarkupParseContext, PassthroughTextVarp string, TextLenVarp uint, UserDataVarp uintptr) {
+			cb(ContextVarp, PassthroughTextVarp, TextLenVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackPassthrough gets the callback function.
+func (x *MarkupParser) GetCallbackPassthrough() func(*MarkupParseContext, string, uint, uintptr) {
+	if x.xPassthrough == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *MarkupParseContext, PassthroughTextVarp string, TextLenVarp uint, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPassthrough)
+	return func(ContextVar *MarkupParseContext, PassthroughTextVar string, TextLenVar uint, UserDataVar uintptr) {
+		rawCallback(ContextVar, PassthroughTextVar, TextLenVar, UserDataVar)
+	}
+}
+
+// SetCallbackError sets the callback function.
+func (x *MarkupParser) SetCallbackError(cb func(*MarkupParseContext, *Error, uintptr)) {
+	if cb == nil {
+		x.xError = 0
+	} else {
+		x.xError = purego.NewCallback(func(ContextVarp *MarkupParseContext, ErrorVarp *Error, UserDataVarp uintptr) {
+			cb(ContextVarp, ErrorVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackError gets the callback function.
+func (x *MarkupParser) GetCallbackError() func(*MarkupParseContext, *Error, uintptr) {
+	if x.xError == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *MarkupParseContext, ErrorVarp *Error, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xError)
+	return func(ContextVar *MarkupParseContext, ErrorVar *Error, UserDataVar uintptr) {
+		rawCallback(ContextVar, ErrorVar, UserDataVar)
+	}
 }
 
 // A mixed enumerated type and flags field. You must specify one type
diff --git a/v4/glib/gmem.go b/v4/glib/gmem.go
index c0359f48856d42e0047aafa960706d32b30bb426..709b3438836d3a899649a9bbd96e47b1581eb005 100644
--- a/v4/glib/gmem.go
+++ b/v4/glib/gmem.go
@@ -17,21 +17,159 @@ // This functions related to this has been deprecated in 2.46, and no longer work.
 type MemVTable struct {
 	_ structs.HostLayout
 
-	Malloc uintptr
+	xMalloc uintptr
 
-	Realloc uintptr
+	xRealloc uintptr
 
-	Free uintptr
+	xFree uintptr
 
-	Calloc uintptr
+	xCalloc uintptr
 
-	TryMalloc uintptr
+	xTryMalloc uintptr
 
-	TryRealloc uintptr
+	xTryRealloc uintptr
 }
 
 func (x *MemVTable) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackMalloc sets the callback function.
+func (x *MemVTable) SetCallbackMalloc(cb func(uint) uintptr) {
+	if cb == nil {
+		x.xMalloc = 0
+	} else {
+		x.xMalloc = purego.NewCallback(func(NBytesVarp uint) uintptr {
+			return cb(NBytesVarp)
+		})
+	}
+}
+
+// GetCallbackMalloc gets the callback function.
+func (x *MemVTable) GetCallbackMalloc() func(uint) uintptr {
+	if x.xMalloc == 0 {
+		return nil
+	}
+	var rawCallback func(NBytesVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xMalloc)
+	return func(NBytesVar uint) uintptr {
+		return rawCallback(NBytesVar)
+	}
+}
+
+// SetCallbackRealloc sets the callback function.
+func (x *MemVTable) SetCallbackRealloc(cb func(uintptr, uint) uintptr) {
+	if cb == nil {
+		x.xRealloc = 0
+	} else {
+		x.xRealloc = purego.NewCallback(func(MemVarp uintptr, NBytesVarp uint) uintptr {
+			return cb(MemVarp, NBytesVarp)
+		})
+	}
+}
+
+// GetCallbackRealloc gets the callback function.
+func (x *MemVTable) GetCallbackRealloc() func(uintptr, uint) uintptr {
+	if x.xRealloc == 0 {
+		return nil
+	}
+	var rawCallback func(MemVarp uintptr, NBytesVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xRealloc)
+	return func(MemVar uintptr, NBytesVar uint) uintptr {
+		return rawCallback(MemVar, NBytesVar)
+	}
+}
+
+// SetCallbackFree sets the callback function.
+func (x *MemVTable) SetCallbackFree(cb func(uintptr)) {
+	if cb == nil {
+		x.xFree = 0
+	} else {
+		x.xFree = purego.NewCallback(func(MemVarp uintptr) {
+			cb(MemVarp)
+		})
+	}
+}
+
+// GetCallbackFree gets the callback function.
+func (x *MemVTable) GetCallbackFree() func(uintptr) {
+	if x.xFree == 0 {
+		return nil
+	}
+	var rawCallback func(MemVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFree)
+	return func(MemVar uintptr) {
+		rawCallback(MemVar)
+	}
+}
+
+// SetCallbackCalloc sets the callback function.
+func (x *MemVTable) SetCallbackCalloc(cb func(uint, uint) uintptr) {
+	if cb == nil {
+		x.xCalloc = 0
+	} else {
+		x.xCalloc = purego.NewCallback(func(NBlocksVarp uint, NBlockBytesVarp uint) uintptr {
+			return cb(NBlocksVarp, NBlockBytesVarp)
+		})
+	}
+}
+
+// GetCallbackCalloc gets the callback function.
+func (x *MemVTable) GetCallbackCalloc() func(uint, uint) uintptr {
+	if x.xCalloc == 0 {
+		return nil
+	}
+	var rawCallback func(NBlocksVarp uint, NBlockBytesVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCalloc)
+	return func(NBlocksVar uint, NBlockBytesVar uint) uintptr {
+		return rawCallback(NBlocksVar, NBlockBytesVar)
+	}
+}
+
+// SetCallbackTryMalloc sets the callback function.
+func (x *MemVTable) SetCallbackTryMalloc(cb func(uint) uintptr) {
+	if cb == nil {
+		x.xTryMalloc = 0
+	} else {
+		x.xTryMalloc = purego.NewCallback(func(NBytesVarp uint) uintptr {
+			return cb(NBytesVarp)
+		})
+	}
+}
+
+// GetCallbackTryMalloc gets the callback function.
+func (x *MemVTable) GetCallbackTryMalloc() func(uint) uintptr {
+	if x.xTryMalloc == 0 {
+		return nil
+	}
+	var rawCallback func(NBytesVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xTryMalloc)
+	return func(NBytesVar uint) uintptr {
+		return rawCallback(NBytesVar)
+	}
+}
+
+// SetCallbackTryRealloc sets the callback function.
+func (x *MemVTable) SetCallbackTryRealloc(cb func(uintptr, uint) uintptr) {
+	if cb == nil {
+		x.xTryRealloc = 0
+	} else {
+		x.xTryRealloc = purego.NewCallback(func(MemVarp uintptr, NBytesVarp uint) uintptr {
+			return cb(MemVarp, NBytesVarp)
+		})
+	}
+}
+
+// GetCallbackTryRealloc gets the callback function.
+func (x *MemVTable) GetCallbackTryRealloc() func(uintptr, uint) uintptr {
+	if x.xTryRealloc == 0 {
+		return nil
+	}
+	var rawCallback func(MemVarp uintptr, NBytesVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xTryRealloc)
+	return func(MemVar uintptr, NBytesVar uint) uintptr {
+		return rawCallback(MemVar, NBytesVar)
+	}
 }
 
 var xAlignedAlloc func(uint, uint, uint) uintptr
diff --git a/v4/gobject/gclosure.go b/v4/gobject/gclosure.go
index 0b4ece292ac40dc28d6e71d122542293379a3653..20f60e7033178d51064f19df187efc852c0777a5 100644
--- a/v4/gobject/gclosure.go
+++ b/v4/gobject/gclosure.go
@@ -113,7 +113,7 @@ 	InMarshal uint
 
 	IsInvalid uint
 
-	Marshal uintptr
+	xMarshal uintptr
 
 	Data uintptr
 
@@ -409,6 +409,29 @@ func (x *Closure) Unref() {
 
 	xClosureUnref(x.GoPointer())
 
+}
+
+// SetCallbackMarshal sets the callback function.
+func (x *Closure) SetCallbackMarshal(cb func(*Closure, *Value, uint, *Value, uintptr, uintptr)) {
+	if cb == nil {
+		x.xMarshal = 0
+	} else {
+		x.xMarshal = purego.NewCallback(func(ClosureVarp *Closure, ReturnValueVarp *Value, NParamValuesVarp uint, ParamValuesVarp *Value, InvocationHintVarp uintptr, MarshalDataVarp uintptr) {
+			cb(ClosureVarp, ReturnValueVarp, NParamValuesVarp, ParamValuesVarp, InvocationHintVarp, MarshalDataVarp)
+		})
+	}
+}
+
+// GetCallbackMarshal gets the callback function.
+func (x *Closure) GetCallbackMarshal() func(*Closure, *Value, uint, *Value, uintptr, uintptr) {
+	if x.xMarshal == 0 {
+		return nil
+	}
+	var rawCallback func(ClosureVarp *Closure, ReturnValueVarp *Value, NParamValuesVarp uint, ParamValuesVarp *Value, InvocationHintVarp uintptr, MarshalDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMarshal)
+	return func(ClosureVar *Closure, ReturnValueVar *Value, NParamValuesVar uint, ParamValuesVar *Value, InvocationHintVar uintptr, MarshalDataVar uintptr) {
+		rawCallback(ClosureVar, ReturnValueVar, NParamValuesVar, ParamValuesVar, InvocationHintVar, MarshalDataVar)
+	}
 }
 
 type ClosureNotifyData struct {
diff --git a/v4/gobject/gobject.go b/v4/gobject/gobject.go
index 93123b4447e265e34223fc2651b1fabbdb4bac09..ca076c949fe3a61db2e50e160234e07700155c20 100644
--- a/v4/gobject/gobject.go
+++ b/v4/gobject/gobject.go
@@ -47,21 +47,21 @@ 	GTypeClass uintptr
 
 	ConstructProperties *glib.SList
 
-	Constructor uintptr
+	xConstructor uintptr
 
-	SetProperty uintptr
+	xSetProperty uintptr
 
-	GetProperty uintptr
+	xGetProperty uintptr
 
-	Dispose uintptr
+	xDispose uintptr
 
-	Finalize uintptr
+	xFinalize uintptr
 
-	DispatchPropertiesChanged uintptr
+	xDispatchPropertiesChanged uintptr
 
-	Notify uintptr
+	xNotify uintptr
 
-	Constructed uintptr
+	xConstructed uintptr
 
 	Flags uint
 
@@ -72,6 +72,200 @@ func (x *InitiallyUnownedClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackConstructor sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackConstructor(cb func(types.GType, uint, *ObjectConstructParam) *Object) {
+	if cb == nil {
+		x.xConstructor = 0
+	} else {
+		x.xConstructor = purego.NewCallback(func(TypeVarp types.GType, NConstructPropertiesVarp uint, ConstructPropertiesVarp *ObjectConstructParam) uintptr {
+			ret := cb(TypeVarp, NConstructPropertiesVarp, ConstructPropertiesVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackConstructor gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackConstructor() func(types.GType, uint, *ObjectConstructParam) *Object {
+	if x.xConstructor == 0 {
+		return nil
+	}
+	var rawCallback func(TypeVarp types.GType, NConstructPropertiesVarp uint, ConstructPropertiesVarp *ObjectConstructParam) uintptr
+	purego.RegisterFunc(&rawCallback, x.xConstructor)
+	return func(TypeVar types.GType, NConstructPropertiesVar uint, ConstructPropertiesVar *ObjectConstructParam) *Object {
+		rawRet := rawCallback(TypeVar, NConstructPropertiesVar, ConstructPropertiesVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Object{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSetProperty sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackSetProperty(cb func(*Object, uint, *Value, *ParamSpec)) {
+	if cb == nil {
+		x.xSetProperty = 0
+	} else {
+		x.xSetProperty = purego.NewCallback(func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), PropertyIdVarp, ValueVarp, ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackSetProperty gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackSetProperty() func(*Object, uint, *Value, *ParamSpec) {
+	if x.xSetProperty == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetProperty)
+	return func(ObjectVar *Object, PropertyIdVar uint, ValueVar *Value, PspecVar *ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), PropertyIdVar, ValueVar, PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackGetProperty sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackGetProperty(cb func(*Object, uint, *Value, *ParamSpec)) {
+	if cb == nil {
+		x.xGetProperty = 0
+	} else {
+		x.xGetProperty = purego.NewCallback(func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), PropertyIdVarp, ValueVarp, ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackGetProperty gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackGetProperty() func(*Object, uint, *Value, *ParamSpec) {
+	if x.xGetProperty == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xGetProperty)
+	return func(ObjectVar *Object, PropertyIdVar uint, ValueVar *Value, PspecVar *ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), PropertyIdVar, ValueVar, PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackDispose sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackDispose(cb func(*Object)) {
+	if cb == nil {
+		x.xDispose = 0
+	} else {
+		x.xDispose = purego.NewCallback(func(ObjectVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp))
+		})
+	}
+}
+
+// GetCallbackDispose gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackDispose() func(*Object) {
+	if x.xDispose == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDispose)
+	return func(ObjectVar *Object) {
+		rawCallback(ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackFinalize sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackFinalize(cb func(*Object)) {
+	if cb == nil {
+		x.xFinalize = 0
+	} else {
+		x.xFinalize = purego.NewCallback(func(ObjectVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp))
+		})
+	}
+}
+
+// GetCallbackFinalize gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackFinalize() func(*Object) {
+	if x.xFinalize == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFinalize)
+	return func(ObjectVar *Object) {
+		rawCallback(ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackDispatchPropertiesChanged sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackDispatchPropertiesChanged(cb func(*Object, uint, **ParamSpec)) {
+	if cb == nil {
+		x.xDispatchPropertiesChanged = 0
+	} else {
+		x.xDispatchPropertiesChanged = purego.NewCallback(func(ObjectVarp uintptr, NPspecsVarp uint, PspecsVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), NPspecsVarp, (**ParamSpec)(unsafe.Pointer(PspecsVarp)))
+		})
+	}
+}
+
+// GetCallbackDispatchPropertiesChanged gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackDispatchPropertiesChanged() func(*Object, uint, **ParamSpec) {
+	if x.xDispatchPropertiesChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, NPspecsVarp uint, PspecsVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDispatchPropertiesChanged)
+	return func(ObjectVar *Object, NPspecsVar uint, PspecsVar **ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), NPspecsVar, *ConvertPtr(PspecsVar))
+	}
+}
+
+// SetCallbackNotify sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackNotify(cb func(*Object, *ParamSpec)) {
+	if cb == nil {
+		x.xNotify = 0
+	} else {
+		x.xNotify = purego.NewCallback(func(ObjectVarp uintptr, PspecVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackNotify gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackNotify() func(*Object, *ParamSpec) {
+	if x.xNotify == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xNotify)
+	return func(ObjectVar *Object, PspecVar *ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackConstructed sets the callback function.
+func (x *InitiallyUnownedClass) SetCallbackConstructed(cb func(*Object)) {
+	if cb == nil {
+		x.xConstructed = 0
+	} else {
+		x.xConstructed = purego.NewCallback(func(ObjectVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp))
+		})
+	}
+}
+
+// GetCallbackConstructed gets the callback function.
+func (x *InitiallyUnownedClass) GetCallbackConstructed() func(*Object) {
+	if x.xConstructed == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xConstructed)
+	return func(ObjectVar *Object) {
+		rawCallback(ObjectVar.GoPointer())
+	}
+}
+
 // The class structure for the GObject type.
 //
 // |[&lt;!-- language="C" --&gt;
@@ -108,21 +302,21 @@ 	GTypeClass uintptr
 
 	ConstructProperties *glib.SList
 
-	Constructor uintptr
+	xConstructor uintptr
 
-	SetProperty uintptr
+	xSetProperty uintptr
 
-	GetProperty uintptr
+	xGetProperty uintptr
 
-	Dispose uintptr
+	xDispose uintptr
 
-	Finalize uintptr
+	xFinalize uintptr
 
-	DispatchPropertiesChanged uintptr
+	xDispatchPropertiesChanged uintptr
 
-	Notify uintptr
+	xNotify uintptr
 
-	Constructed uintptr
+	xConstructed uintptr
 
 	Flags uint
 
@@ -275,6 +469,206 @@ 	xObjectClassOverrideProperty(x.GoPointer(), PropertyIdVar, NameVar)
 
 }
 
+// SetCallbackConstructor sets the callback function.
+func (x *ObjectClass) SetCallbackConstructor(cb func(types.GType, uint, *ObjectConstructParam) *Object) {
+	if cb == nil {
+		x.xConstructor = 0
+	} else {
+		x.xConstructor = purego.NewCallback(func(TypeVarp types.GType, NConstructPropertiesVarp uint, ConstructPropertiesVarp *ObjectConstructParam) uintptr {
+			ret := cb(TypeVarp, NConstructPropertiesVarp, ConstructPropertiesVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackConstructor gets the callback function.
+func (x *ObjectClass) GetCallbackConstructor() func(types.GType, uint, *ObjectConstructParam) *Object {
+	if x.xConstructor == 0 {
+		return nil
+	}
+	var rawCallback func(TypeVarp types.GType, NConstructPropertiesVarp uint, ConstructPropertiesVarp *ObjectConstructParam) uintptr
+	purego.RegisterFunc(&rawCallback, x.xConstructor)
+	return func(TypeVar types.GType, NConstructPropertiesVar uint, ConstructPropertiesVar *ObjectConstructParam) *Object {
+		rawRet := rawCallback(TypeVar, NConstructPropertiesVar, ConstructPropertiesVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Object{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSetProperty sets the callback function.
+// The type of the @set_property function of #GObjectClass.
+func (x *ObjectClass) SetCallbackSetProperty(cb func(*Object, uint, *Value, *ParamSpec)) {
+	if cb == nil {
+		x.xSetProperty = 0
+	} else {
+		x.xSetProperty = purego.NewCallback(func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), PropertyIdVarp, ValueVarp, ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackSetProperty gets the callback function.
+// The type of the @set_property function of #GObjectClass.
+func (x *ObjectClass) GetCallbackSetProperty() func(*Object, uint, *Value, *ParamSpec) {
+	if x.xSetProperty == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetProperty)
+	return func(ObjectVar *Object, PropertyIdVar uint, ValueVar *Value, PspecVar *ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), PropertyIdVar, ValueVar, PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackGetProperty sets the callback function.
+// The type of the @get_property function of #GObjectClass.
+func (x *ObjectClass) SetCallbackGetProperty(cb func(*Object, uint, *Value, *ParamSpec)) {
+	if cb == nil {
+		x.xGetProperty = 0
+	} else {
+		x.xGetProperty = purego.NewCallback(func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), PropertyIdVarp, ValueVarp, ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackGetProperty gets the callback function.
+// The type of the @get_property function of #GObjectClass.
+func (x *ObjectClass) GetCallbackGetProperty() func(*Object, uint, *Value, *ParamSpec) {
+	if x.xGetProperty == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, PropertyIdVarp uint, ValueVarp *Value, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xGetProperty)
+	return func(ObjectVar *Object, PropertyIdVar uint, ValueVar *Value, PspecVar *ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), PropertyIdVar, ValueVar, PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackDispose sets the callback function.
+func (x *ObjectClass) SetCallbackDispose(cb func(*Object)) {
+	if cb == nil {
+		x.xDispose = 0
+	} else {
+		x.xDispose = purego.NewCallback(func(ObjectVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp))
+		})
+	}
+}
+
+// GetCallbackDispose gets the callback function.
+func (x *ObjectClass) GetCallbackDispose() func(*Object) {
+	if x.xDispose == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDispose)
+	return func(ObjectVar *Object) {
+		rawCallback(ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackFinalize sets the callback function.
+// The type of the @finalize function of #GObjectClass.
+func (x *ObjectClass) SetCallbackFinalize(cb func(*Object)) {
+	if cb == nil {
+		x.xFinalize = 0
+	} else {
+		x.xFinalize = purego.NewCallback(func(ObjectVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp))
+		})
+	}
+}
+
+// GetCallbackFinalize gets the callback function.
+// The type of the @finalize function of #GObjectClass.
+func (x *ObjectClass) GetCallbackFinalize() func(*Object) {
+	if x.xFinalize == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFinalize)
+	return func(ObjectVar *Object) {
+		rawCallback(ObjectVar.GoPointer())
+	}
+}
+
+// SetCallbackDispatchPropertiesChanged sets the callback function.
+func (x *ObjectClass) SetCallbackDispatchPropertiesChanged(cb func(*Object, uint, **ParamSpec)) {
+	if cb == nil {
+		x.xDispatchPropertiesChanged = 0
+	} else {
+		x.xDispatchPropertiesChanged = purego.NewCallback(func(ObjectVarp uintptr, NPspecsVarp uint, PspecsVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), NPspecsVarp, (**ParamSpec)(unsafe.Pointer(PspecsVarp)))
+		})
+	}
+}
+
+// GetCallbackDispatchPropertiesChanged gets the callback function.
+func (x *ObjectClass) GetCallbackDispatchPropertiesChanged() func(*Object, uint, **ParamSpec) {
+	if x.xDispatchPropertiesChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, NPspecsVarp uint, PspecsVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xDispatchPropertiesChanged)
+	return func(ObjectVar *Object, NPspecsVar uint, PspecsVar **ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), NPspecsVar, *ConvertPtr(PspecsVar))
+	}
+}
+
+// SetCallbackNotify sets the callback function.
+func (x *ObjectClass) SetCallbackNotify(cb func(*Object, *ParamSpec)) {
+	if cb == nil {
+		x.xNotify = 0
+	} else {
+		x.xNotify = purego.NewCallback(func(ObjectVarp uintptr, PspecVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp), ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackNotify gets the callback function.
+func (x *ObjectClass) GetCallbackNotify() func(*Object, *ParamSpec) {
+	if x.xNotify == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xNotify)
+	return func(ObjectVar *Object, PspecVar *ParamSpec) {
+		rawCallback(ObjectVar.GoPointer(), PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackConstructed sets the callback function.
+func (x *ObjectClass) SetCallbackConstructed(cb func(*Object)) {
+	if cb == nil {
+		x.xConstructed = 0
+	} else {
+		x.xConstructed = purego.NewCallback(func(ObjectVarp uintptr) {
+			cb(ObjectNewFromInternalPtr(ObjectVarp))
+		})
+	}
+}
+
+// GetCallbackConstructed gets the callback function.
+func (x *ObjectClass) GetCallbackConstructed() func(*Object) {
+	if x.xConstructed == 0 {
+		return nil
+	}
+	var rawCallback func(ObjectVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xConstructed)
+	return func(ObjectVar *Object) {
+		rawCallback(ObjectVar.GoPointer())
+	}
+}
+
 // The GObjectConstructParam struct is an auxiliary structure used to hand
 // #GParamSpec/#GValue pairs to the @constructor of a #GObjectClass.
 type ObjectConstructParam struct {
@@ -414,7 +808,7 @@ 	cret := xCclosureNewObjectSwap(glib.NewCallback(CallbackFuncVar), ObjectVar.GoPointer())
 	return cret
 }
 
-var xClearObject func(*uintptr)
+var xClearObject func(uintptr)
 
 // Clears a reference to a #GObject.
 //
@@ -428,7 +822,7 @@ // A macro is also included that allows this function to be used without
 // pointer casts.
 func ClearObject(ObjectPtrVar **Object) {
 
-	xClearObject(ConvertPtr(ObjectPtrVar))
+	xClearObject(*ConvertPtr(ObjectPtrVar))
 
 }
 
diff --git a/v4/gobject/gparam.go b/v4/gobject/gparam.go
index c23329cad4abbe11879603f3c39680179a2761e5..64c697a9eb4bdafc2b06f4ccd366e41e3b45d25d 100644
--- a/v4/gobject/gparam.go
+++ b/v4/gobject/gparam.go
@@ -21,13 +21,13 @@ 	GTypeClass uintptr
 
 	ValueType types.GType
 
-	Finalize uintptr
+	xFinalize uintptr
 
-	ValueSetDefault uintptr
+	xValueSetDefault uintptr
 
-	ValueValidate uintptr
+	xValueValidate uintptr
 
-	ValuesCmp uintptr
+	xValuesCmp uintptr
 
 	Dummy [4]uintptr
 }
@@ -36,6 +36,98 @@ func (x *ParamSpecClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackFinalize sets the callback function.
+func (x *ParamSpecClass) SetCallbackFinalize(cb func(*ParamSpec)) {
+	if cb == nil {
+		x.xFinalize = 0
+	} else {
+		x.xFinalize = purego.NewCallback(func(PspecVarp uintptr) {
+			cb(ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackFinalize gets the callback function.
+func (x *ParamSpecClass) GetCallbackFinalize() func(*ParamSpec) {
+	if x.xFinalize == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFinalize)
+	return func(PspecVar *ParamSpec) {
+		rawCallback(PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackValueSetDefault sets the callback function.
+func (x *ParamSpecClass) SetCallbackValueSetDefault(cb func(*ParamSpec, *Value)) {
+	if cb == nil {
+		x.xValueSetDefault = 0
+	} else {
+		x.xValueSetDefault = purego.NewCallback(func(PspecVarp uintptr, ValueVarp *Value) {
+			cb(ParamSpecNewFromInternalPtr(PspecVarp), ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueSetDefault gets the callback function.
+func (x *ParamSpecClass) GetCallbackValueSetDefault() func(*ParamSpec, *Value) {
+	if x.xValueSetDefault == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr, ValueVarp *Value)
+	purego.RegisterFunc(&rawCallback, x.xValueSetDefault)
+	return func(PspecVar *ParamSpec, ValueVar *Value) {
+		rawCallback(PspecVar.GoPointer(), ValueVar)
+	}
+}
+
+// SetCallbackValueValidate sets the callback function.
+func (x *ParamSpecClass) SetCallbackValueValidate(cb func(*ParamSpec, *Value) bool) {
+	if cb == nil {
+		x.xValueValidate = 0
+	} else {
+		x.xValueValidate = purego.NewCallback(func(PspecVarp uintptr, ValueVarp *Value) bool {
+			return cb(ParamSpecNewFromInternalPtr(PspecVarp), ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueValidate gets the callback function.
+func (x *ParamSpecClass) GetCallbackValueValidate() func(*ParamSpec, *Value) bool {
+	if x.xValueValidate == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr, ValueVarp *Value) bool
+	purego.RegisterFunc(&rawCallback, x.xValueValidate)
+	return func(PspecVar *ParamSpec, ValueVar *Value) bool {
+		return rawCallback(PspecVar.GoPointer(), ValueVar)
+	}
+}
+
+// SetCallbackValuesCmp sets the callback function.
+func (x *ParamSpecClass) SetCallbackValuesCmp(cb func(*ParamSpec, *Value, *Value) int) {
+	if cb == nil {
+		x.xValuesCmp = 0
+	} else {
+		x.xValuesCmp = purego.NewCallback(func(PspecVarp uintptr, Value1Varp *Value, Value2Varp *Value) int {
+			return cb(ParamSpecNewFromInternalPtr(PspecVarp), Value1Varp, Value2Varp)
+		})
+	}
+}
+
+// GetCallbackValuesCmp gets the callback function.
+func (x *ParamSpecClass) GetCallbackValuesCmp() func(*ParamSpec, *Value, *Value) int {
+	if x.xValuesCmp == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr, Value1Varp *Value, Value2Varp *Value) int
+	purego.RegisterFunc(&rawCallback, x.xValuesCmp)
+	return func(PspecVar *ParamSpec, Value1Var *Value, Value2Var *Value) int {
+		return rawCallback(PspecVar.GoPointer(), Value1Var, Value2Var)
+	}
+}
+
 // A #GParamSpecPool maintains a collection of #GParamSpecs which can be
 // quickly accessed by owner and name.
 //
@@ -119,21 +211,136 @@ 	InstanceSize uint16
 
 	NPreallocs uint16
 
-	InstanceInit uintptr
+	xInstanceInit uintptr
 
 	ValueType types.GType
 
-	Finalize uintptr
+	xFinalize uintptr
 
-	ValueSetDefault uintptr
+	xValueSetDefault uintptr
 
-	ValueValidate uintptr
+	xValueValidate uintptr
 
-	ValuesCmp uintptr
+	xValuesCmp uintptr
 }
 
 func (x *ParamSpecTypeInfo) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackInstanceInit sets the callback function.
+func (x *ParamSpecTypeInfo) SetCallbackInstanceInit(cb func(*ParamSpec)) {
+	if cb == nil {
+		x.xInstanceInit = 0
+	} else {
+		x.xInstanceInit = purego.NewCallback(func(PspecVarp uintptr) {
+			cb(ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackInstanceInit gets the callback function.
+func (x *ParamSpecTypeInfo) GetCallbackInstanceInit() func(*ParamSpec) {
+	if x.xInstanceInit == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInstanceInit)
+	return func(PspecVar *ParamSpec) {
+		rawCallback(PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackFinalize sets the callback function.
+func (x *ParamSpecTypeInfo) SetCallbackFinalize(cb func(*ParamSpec)) {
+	if cb == nil {
+		x.xFinalize = 0
+	} else {
+		x.xFinalize = purego.NewCallback(func(PspecVarp uintptr) {
+			cb(ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackFinalize gets the callback function.
+func (x *ParamSpecTypeInfo) GetCallbackFinalize() func(*ParamSpec) {
+	if x.xFinalize == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFinalize)
+	return func(PspecVar *ParamSpec) {
+		rawCallback(PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackValueSetDefault sets the callback function.
+func (x *ParamSpecTypeInfo) SetCallbackValueSetDefault(cb func(*ParamSpec, *Value)) {
+	if cb == nil {
+		x.xValueSetDefault = 0
+	} else {
+		x.xValueSetDefault = purego.NewCallback(func(PspecVarp uintptr, ValueVarp *Value) {
+			cb(ParamSpecNewFromInternalPtr(PspecVarp), ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueSetDefault gets the callback function.
+func (x *ParamSpecTypeInfo) GetCallbackValueSetDefault() func(*ParamSpec, *Value) {
+	if x.xValueSetDefault == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr, ValueVarp *Value)
+	purego.RegisterFunc(&rawCallback, x.xValueSetDefault)
+	return func(PspecVar *ParamSpec, ValueVar *Value) {
+		rawCallback(PspecVar.GoPointer(), ValueVar)
+	}
+}
+
+// SetCallbackValueValidate sets the callback function.
+func (x *ParamSpecTypeInfo) SetCallbackValueValidate(cb func(*ParamSpec, *Value) bool) {
+	if cb == nil {
+		x.xValueValidate = 0
+	} else {
+		x.xValueValidate = purego.NewCallback(func(PspecVarp uintptr, ValueVarp *Value) bool {
+			return cb(ParamSpecNewFromInternalPtr(PspecVarp), ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueValidate gets the callback function.
+func (x *ParamSpecTypeInfo) GetCallbackValueValidate() func(*ParamSpec, *Value) bool {
+	if x.xValueValidate == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr, ValueVarp *Value) bool
+	purego.RegisterFunc(&rawCallback, x.xValueValidate)
+	return func(PspecVar *ParamSpec, ValueVar *Value) bool {
+		return rawCallback(PspecVar.GoPointer(), ValueVar)
+	}
+}
+
+// SetCallbackValuesCmp sets the callback function.
+func (x *ParamSpecTypeInfo) SetCallbackValuesCmp(cb func(*ParamSpec, *Value, *Value) int) {
+	if cb == nil {
+		x.xValuesCmp = 0
+	} else {
+		x.xValuesCmp = purego.NewCallback(func(PspecVarp uintptr, Value1Varp *Value, Value2Varp *Value) int {
+			return cb(ParamSpecNewFromInternalPtr(PspecVarp), Value1Varp, Value2Varp)
+		})
+	}
+}
+
+// GetCallbackValuesCmp gets the callback function.
+func (x *ParamSpecTypeInfo) GetCallbackValuesCmp() func(*ParamSpec, *Value, *Value) int {
+	if x.xValuesCmp == 0 {
+		return nil
+	}
+	var rawCallback func(PspecVarp uintptr, Value1Varp *Value, Value2Varp *Value) int
+	purego.RegisterFunc(&rawCallback, x.xValuesCmp)
+	return func(PspecVar *ParamSpec, Value1Var *Value, Value2Var *Value) int {
+		return rawCallback(PspecVar.GoPointer(), Value1Var, Value2Var)
+	}
 }
 
 // The GParameter struct is an auxiliary structure used
diff --git a/v4/gobject/gtype.go b/v4/gobject/gtype.go
index 3797efd66201a8ead044ad6a2cca9ce97df4e793..6fa2e55bb731e670f9836bd4203bdc542746c2bc 100644
--- a/v4/gobject/gtype.go
+++ b/v4/gobject/gtype.go
@@ -488,25 +488,163 @@ // implementation, to serve as a container for values of a type.
 type TypeValueTable struct {
 	_ structs.HostLayout
 
-	ValueInit uintptr
+	xValueInit uintptr
 
-	ValueFree uintptr
+	xValueFree uintptr
 
-	ValueCopy uintptr
+	xValueCopy uintptr
 
-	ValuePeekPointer uintptr
+	xValuePeekPointer uintptr
 
 	CollectFormat uintptr
 
-	CollectValue uintptr
+	xCollectValue uintptr
 
 	LcopyFormat uintptr
 
-	LcopyValue uintptr
+	xLcopyValue uintptr
 }
 
 func (x *TypeValueTable) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackValueInit sets the callback function.
+func (x *TypeValueTable) SetCallbackValueInit(cb func(*Value)) {
+	if cb == nil {
+		x.xValueInit = 0
+	} else {
+		x.xValueInit = purego.NewCallback(func(ValueVarp *Value) {
+			cb(ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueInit gets the callback function.
+func (x *TypeValueTable) GetCallbackValueInit() func(*Value) {
+	if x.xValueInit == 0 {
+		return nil
+	}
+	var rawCallback func(ValueVarp *Value)
+	purego.RegisterFunc(&rawCallback, x.xValueInit)
+	return func(ValueVar *Value) {
+		rawCallback(ValueVar)
+	}
+}
+
+// SetCallbackValueFree sets the callback function.
+func (x *TypeValueTable) SetCallbackValueFree(cb func(*Value)) {
+	if cb == nil {
+		x.xValueFree = 0
+	} else {
+		x.xValueFree = purego.NewCallback(func(ValueVarp *Value) {
+			cb(ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueFree gets the callback function.
+func (x *TypeValueTable) GetCallbackValueFree() func(*Value) {
+	if x.xValueFree == 0 {
+		return nil
+	}
+	var rawCallback func(ValueVarp *Value)
+	purego.RegisterFunc(&rawCallback, x.xValueFree)
+	return func(ValueVar *Value) {
+		rawCallback(ValueVar)
+	}
+}
+
+// SetCallbackValueCopy sets the callback function.
+func (x *TypeValueTable) SetCallbackValueCopy(cb func(*Value, *Value)) {
+	if cb == nil {
+		x.xValueCopy = 0
+	} else {
+		x.xValueCopy = purego.NewCallback(func(SrcValueVarp *Value, DestValueVarp *Value) {
+			cb(SrcValueVarp, DestValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueCopy gets the callback function.
+func (x *TypeValueTable) GetCallbackValueCopy() func(*Value, *Value) {
+	if x.xValueCopy == 0 {
+		return nil
+	}
+	var rawCallback func(SrcValueVarp *Value, DestValueVarp *Value)
+	purego.RegisterFunc(&rawCallback, x.xValueCopy)
+	return func(SrcValueVar *Value, DestValueVar *Value) {
+		rawCallback(SrcValueVar, DestValueVar)
+	}
+}
+
+// SetCallbackValuePeekPointer sets the callback function.
+func (x *TypeValueTable) SetCallbackValuePeekPointer(cb func(*Value) uintptr) {
+	if cb == nil {
+		x.xValuePeekPointer = 0
+	} else {
+		x.xValuePeekPointer = purego.NewCallback(func(ValueVarp *Value) uintptr {
+			return cb(ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValuePeekPointer gets the callback function.
+func (x *TypeValueTable) GetCallbackValuePeekPointer() func(*Value) uintptr {
+	if x.xValuePeekPointer == 0 {
+		return nil
+	}
+	var rawCallback func(ValueVarp *Value) uintptr
+	purego.RegisterFunc(&rawCallback, x.xValuePeekPointer)
+	return func(ValueVar *Value) uintptr {
+		return rawCallback(ValueVar)
+	}
+}
+
+// SetCallbackCollectValue sets the callback function.
+func (x *TypeValueTable) SetCallbackCollectValue(cb func(*Value, uint, *TypeCValue, uint) string) {
+	if cb == nil {
+		x.xCollectValue = 0
+	} else {
+		x.xCollectValue = purego.NewCallback(func(ValueVarp *Value, NCollectValuesVarp uint, CollectValuesVarp *TypeCValue, CollectFlagsVarp uint) string {
+			return cb(ValueVarp, NCollectValuesVarp, CollectValuesVarp, CollectFlagsVarp)
+		})
+	}
+}
+
+// GetCallbackCollectValue gets the callback function.
+func (x *TypeValueTable) GetCallbackCollectValue() func(*Value, uint, *TypeCValue, uint) string {
+	if x.xCollectValue == 0 {
+		return nil
+	}
+	var rawCallback func(ValueVarp *Value, NCollectValuesVarp uint, CollectValuesVarp *TypeCValue, CollectFlagsVarp uint) string
+	purego.RegisterFunc(&rawCallback, x.xCollectValue)
+	return func(ValueVar *Value, NCollectValuesVar uint, CollectValuesVar *TypeCValue, CollectFlagsVar uint) string {
+		return rawCallback(ValueVar, NCollectValuesVar, CollectValuesVar, CollectFlagsVar)
+	}
+}
+
+// SetCallbackLcopyValue sets the callback function.
+func (x *TypeValueTable) SetCallbackLcopyValue(cb func(*Value, uint, *TypeCValue, uint) string) {
+	if cb == nil {
+		x.xLcopyValue = 0
+	} else {
+		x.xLcopyValue = purego.NewCallback(func(ValueVarp *Value, NCollectValuesVarp uint, CollectValuesVarp *TypeCValue, CollectFlagsVarp uint) string {
+			return cb(ValueVarp, NCollectValuesVarp, CollectValuesVarp, CollectFlagsVarp)
+		})
+	}
+}
+
+// GetCallbackLcopyValue gets the callback function.
+func (x *TypeValueTable) GetCallbackLcopyValue() func(*Value, uint, *TypeCValue, uint) string {
+	if x.xLcopyValue == 0 {
+		return nil
+	}
+	var rawCallback func(ValueVarp *Value, NCollectValuesVarp uint, CollectValuesVarp *TypeCValue, CollectFlagsVarp uint) string
+	purego.RegisterFunc(&rawCallback, x.xLcopyValue)
+	return func(ValueVar *Value, NCollectValuesVar uint, CollectValuesVar *TypeCValue, CollectFlagsVar uint) string {
+		return rawCallback(ValueVar, NCollectValuesVar, CollectValuesVar, CollectFlagsVar)
+	}
 }
 
 type TypeCValue = uintptr
diff --git a/v4/gobject/gtypemodule.go b/v4/gobject/gtypemodule.go
index 677e7f7c8b95ddd9e213935b66dddafafe7bd140..3bf08a8a6f2b238c839c2b0453ec3129b0523741 100644
--- a/v4/gobject/gtypemodule.go
+++ b/v4/gobject/gtypemodule.go
@@ -17,21 +17,159 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Load uintptr
+	xLoad uintptr
 
-	Unload uintptr
+	xUnload uintptr
 
-	Reserved1 uintptr
+	xReserved1 uintptr
 
-	Reserved2 uintptr
+	xReserved2 uintptr
 
-	Reserved3 uintptr
+	xReserved3 uintptr
 
-	Reserved4 uintptr
+	xReserved4 uintptr
 }
 
 func (x *TypeModuleClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackLoad sets the callback function.
+func (x *TypeModuleClass) SetCallbackLoad(cb func(*TypeModule) bool) {
+	if cb == nil {
+		x.xLoad = 0
+	} else {
+		x.xLoad = purego.NewCallback(func(ModuleVarp uintptr) bool {
+			return cb(TypeModuleNewFromInternalPtr(ModuleVarp))
+		})
+	}
+}
+
+// GetCallbackLoad gets the callback function.
+func (x *TypeModuleClass) GetCallbackLoad() func(*TypeModule) bool {
+	if x.xLoad == 0 {
+		return nil
+	}
+	var rawCallback func(ModuleVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xLoad)
+	return func(ModuleVar *TypeModule) bool {
+		return rawCallback(ModuleVar.GoPointer())
+	}
+}
+
+// SetCallbackUnload sets the callback function.
+func (x *TypeModuleClass) SetCallbackUnload(cb func(*TypeModule)) {
+	if cb == nil {
+		x.xUnload = 0
+	} else {
+		x.xUnload = purego.NewCallback(func(ModuleVarp uintptr) {
+			cb(TypeModuleNewFromInternalPtr(ModuleVarp))
+		})
+	}
+}
+
+// GetCallbackUnload gets the callback function.
+func (x *TypeModuleClass) GetCallbackUnload() func(*TypeModule) {
+	if x.xUnload == 0 {
+		return nil
+	}
+	var rawCallback func(ModuleVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnload)
+	return func(ModuleVar *TypeModule) {
+		rawCallback(ModuleVar.GoPointer())
+	}
+}
+
+// SetCallbackReserved1 sets the callback function.
+func (x *TypeModuleClass) SetCallbackReserved1(cb func()) {
+	if cb == nil {
+		x.xReserved1 = 0
+	} else {
+		x.xReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved1 gets the callback function.
+func (x *TypeModuleClass) GetCallbackReserved1() func() {
+	if x.xReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackReserved2 sets the callback function.
+func (x *TypeModuleClass) SetCallbackReserved2(cb func()) {
+	if cb == nil {
+		x.xReserved2 = 0
+	} else {
+		x.xReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved2 gets the callback function.
+func (x *TypeModuleClass) GetCallbackReserved2() func() {
+	if x.xReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackReserved3 sets the callback function.
+func (x *TypeModuleClass) SetCallbackReserved3(cb func()) {
+	if cb == nil {
+		x.xReserved3 = 0
+	} else {
+		x.xReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved3 gets the callback function.
+func (x *TypeModuleClass) GetCallbackReserved3() func() {
+	if x.xReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackReserved4 sets the callback function.
+func (x *TypeModuleClass) SetCallbackReserved4(cb func()) {
+	if cb == nil {
+		x.xReserved4 = 0
+	} else {
+		x.xReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackReserved4 gets the callback function.
+func (x *TypeModuleClass) GetCallbackReserved4() func() {
+	if x.xReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 // #GTypeModule provides a simple implementation of the #GTypePlugin
diff --git a/v4/gtk/gtkactionable.go b/v4/gtk/gtkactionable.go
index 1e3d7896882de45543ba078eb8c59444db1dbe33..58cf00c25b8591b1f9c43a194c714089fd68d6eb 100644
--- a/v4/gtk/gtkactionable.go
+++ b/v4/gtk/gtkactionable.go
@@ -17,17 +17,109 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	GetActionName uintptr
+	xGetActionName uintptr
 
-	SetActionName uintptr
+	xSetActionName uintptr
 
-	GetActionTargetValue uintptr
+	xGetActionTargetValue uintptr
 
-	SetActionTargetValue uintptr
+	xSetActionTargetValue uintptr
 }
 
 func (x *ActionableInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetActionName sets the callback function.
+func (x *ActionableInterface) SetCallbackGetActionName(cb func(Actionable) string) {
+	if cb == nil {
+		x.xGetActionName = 0
+	} else {
+		x.xGetActionName = purego.NewCallback(func(ActionableVarp uintptr) string {
+			return cb(&ActionableBase{Ptr: ActionableVarp})
+		})
+	}
+}
+
+// GetCallbackGetActionName gets the callback function.
+func (x *ActionableInterface) GetCallbackGetActionName() func(Actionable) string {
+	if x.xGetActionName == 0 {
+		return nil
+	}
+	var rawCallback func(ActionableVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetActionName)
+	return func(ActionableVar Actionable) string {
+		return rawCallback(ActionableVar.GoPointer())
+	}
+}
+
+// SetCallbackSetActionName sets the callback function.
+func (x *ActionableInterface) SetCallbackSetActionName(cb func(Actionable, string)) {
+	if cb == nil {
+		x.xSetActionName = 0
+	} else {
+		x.xSetActionName = purego.NewCallback(func(ActionableVarp uintptr, ActionNameVarp string) {
+			cb(&ActionableBase{Ptr: ActionableVarp}, ActionNameVarp)
+		})
+	}
+}
+
+// GetCallbackSetActionName gets the callback function.
+func (x *ActionableInterface) GetCallbackSetActionName() func(Actionable, string) {
+	if x.xSetActionName == 0 {
+		return nil
+	}
+	var rawCallback func(ActionableVarp uintptr, ActionNameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xSetActionName)
+	return func(ActionableVar Actionable, ActionNameVar string) {
+		rawCallback(ActionableVar.GoPointer(), ActionNameVar)
+	}
+}
+
+// SetCallbackGetActionTargetValue sets the callback function.
+func (x *ActionableInterface) SetCallbackGetActionTargetValue(cb func(Actionable) *glib.Variant) {
+	if cb == nil {
+		x.xGetActionTargetValue = 0
+	} else {
+		x.xGetActionTargetValue = purego.NewCallback(func(ActionableVarp uintptr) *glib.Variant {
+			return cb(&ActionableBase{Ptr: ActionableVarp})
+		})
+	}
+}
+
+// GetCallbackGetActionTargetValue gets the callback function.
+func (x *ActionableInterface) GetCallbackGetActionTargetValue() func(Actionable) *glib.Variant {
+	if x.xGetActionTargetValue == 0 {
+		return nil
+	}
+	var rawCallback func(ActionableVarp uintptr) *glib.Variant
+	purego.RegisterFunc(&rawCallback, x.xGetActionTargetValue)
+	return func(ActionableVar Actionable) *glib.Variant {
+		return rawCallback(ActionableVar.GoPointer())
+	}
+}
+
+// SetCallbackSetActionTargetValue sets the callback function.
+func (x *ActionableInterface) SetCallbackSetActionTargetValue(cb func(Actionable, *glib.Variant)) {
+	if cb == nil {
+		x.xSetActionTargetValue = 0
+	} else {
+		x.xSetActionTargetValue = purego.NewCallback(func(ActionableVarp uintptr, TargetValueVarp *glib.Variant) {
+			cb(&ActionableBase{Ptr: ActionableVarp}, TargetValueVarp)
+		})
+	}
+}
+
+// GetCallbackSetActionTargetValue gets the callback function.
+func (x *ActionableInterface) GetCallbackSetActionTargetValue() func(Actionable, *glib.Variant) {
+	if x.xSetActionTargetValue == 0 {
+		return nil
+	}
+	var rawCallback func(ActionableVarp uintptr, TargetValueVarp *glib.Variant)
+	purego.RegisterFunc(&rawCallback, x.xSetActionTargetValue)
+	return func(ActionableVar Actionable, TargetValueVar *glib.Variant) {
+		rawCallback(ActionableVar.GoPointer(), TargetValueVar)
+	}
 }
 
 // The `GtkActionable` interface provides a convenient way of asscociating
diff --git a/v4/gtk/gtkadjustment.go b/v4/gtk/gtkadjustment.go
index 7c318c4d75c8bb83488082c2c0eb37c85800b03e..dabf63535391809309ef50587e054c2c783fa538 100644
--- a/v4/gtk/gtkadjustment.go
+++ b/v4/gtk/gtkadjustment.go
@@ -17,21 +17,159 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	ValueChanged uintptr
+	xValueChanged uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *AdjustmentClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *AdjustmentClass) SetCallbackChanged(cb func(*Adjustment)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(AdjustmentVarp uintptr) {
+			cb(AdjustmentNewFromInternalPtr(AdjustmentVarp))
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *AdjustmentClass) GetCallbackChanged() func(*Adjustment) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(AdjustmentVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(AdjustmentVar *Adjustment) {
+		rawCallback(AdjustmentVar.GoPointer())
+	}
+}
+
+// SetCallbackValueChanged sets the callback function.
+func (x *AdjustmentClass) SetCallbackValueChanged(cb func(*Adjustment)) {
+	if cb == nil {
+		x.xValueChanged = 0
+	} else {
+		x.xValueChanged = purego.NewCallback(func(AdjustmentVarp uintptr) {
+			cb(AdjustmentNewFromInternalPtr(AdjustmentVarp))
+		})
+	}
+}
+
+// GetCallbackValueChanged gets the callback function.
+func (x *AdjustmentClass) GetCallbackValueChanged() func(*Adjustment) {
+	if x.xValueChanged == 0 {
+		return nil
+	}
+	var rawCallback func(AdjustmentVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xValueChanged)
+	return func(AdjustmentVar *Adjustment) {
+		rawCallback(AdjustmentVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *AdjustmentClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *AdjustmentClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *AdjustmentClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *AdjustmentClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *AdjustmentClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *AdjustmentClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *AdjustmentClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *AdjustmentClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 // `GtkAdjustment` is a model for a numeric value.
diff --git a/v4/gtk/gtkapplication.go b/v4/gtk/gtkapplication.go
index 4941cd6f466eb64654c04b80aa4c7808ff4ff311..ed1de272820ae345817d7119cd67a5d69c9d11a1 100644
--- a/v4/gtk/gtkapplication.go
+++ b/v4/gtk/gtkapplication.go
@@ -18,15 +18,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	WindowAdded uintptr
+	xWindowAdded uintptr
 
-	WindowRemoved uintptr
+	xWindowRemoved uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *ApplicationClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackWindowAdded sets the callback function.
+func (x *ApplicationClass) SetCallbackWindowAdded(cb func(*Application, *Window)) {
+	if cb == nil {
+		x.xWindowAdded = 0
+	} else {
+		x.xWindowAdded = purego.NewCallback(func(ApplicationVarp uintptr, WindowVarp uintptr) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp), WindowNewFromInternalPtr(WindowVarp))
+		})
+	}
+}
+
+// GetCallbackWindowAdded gets the callback function.
+func (x *ApplicationClass) GetCallbackWindowAdded() func(*Application, *Window) {
+	if x.xWindowAdded == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, WindowVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xWindowAdded)
+	return func(ApplicationVar *Application, WindowVar *Window) {
+		rawCallback(ApplicationVar.GoPointer(), WindowVar.GoPointer())
+	}
+}
+
+// SetCallbackWindowRemoved sets the callback function.
+func (x *ApplicationClass) SetCallbackWindowRemoved(cb func(*Application, *Window)) {
+	if cb == nil {
+		x.xWindowRemoved = 0
+	} else {
+		x.xWindowRemoved = purego.NewCallback(func(ApplicationVarp uintptr, WindowVarp uintptr) {
+			cb(ApplicationNewFromInternalPtr(ApplicationVarp), WindowNewFromInternalPtr(WindowVarp))
+		})
+	}
+}
+
+// GetCallbackWindowRemoved gets the callback function.
+func (x *ApplicationClass) GetCallbackWindowRemoved() func(*Application, *Window) {
+	if x.xWindowRemoved == 0 {
+		return nil
+	}
+	var rawCallback func(ApplicationVarp uintptr, WindowVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xWindowRemoved)
+	return func(ApplicationVar *Application, WindowVar *Window) {
+		rawCallback(ApplicationVar.GoPointer(), WindowVar.GoPointer())
+	}
 }
 
 // Types of user actions that may be blocked by `GtkApplication`.
diff --git a/v4/gtk/gtkbuildable.go b/v4/gtk/gtkbuildable.go
index 3b096bd98fbfcedef50332f2409ec44f51f2b2c1..bb9034548856869c556def90eb651f5ec7002a57 100644
--- a/v4/gtk/gtkbuildable.go
+++ b/v4/gtk/gtkbuildable.go
@@ -7,6 +7,8 @@ 	"unsafe"
 
 	"github.com/jwijenbergh/purego"
 	"github.com/jwijenbergh/puregotk/pkg/core"
+	"github.com/jwijenbergh/puregotk/v4/glib"
+	"github.com/jwijenbergh/puregotk/v4/gobject"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -18,31 +20,281 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	SetId uintptr
+	xSetId uintptr
 
-	GetId uintptr
+	xGetId uintptr
 
-	AddChild uintptr
+	xAddChild uintptr
 
-	SetBuildableProperty uintptr
+	xSetBuildableProperty uintptr
 
-	ConstructChild uintptr
+	xConstructChild uintptr
 
-	CustomTagStart uintptr
+	xCustomTagStart uintptr
 
-	CustomTagEnd uintptr
+	xCustomTagEnd uintptr
 
-	CustomFinished uintptr
+	xCustomFinished uintptr
 
-	ParserFinished uintptr
+	xParserFinished uintptr
 
-	GetInternalChild uintptr
+	xGetInternalChild uintptr
 }
 
 func (x *BuildableIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackSetId sets the callback function.
+func (x *BuildableIface) SetCallbackSetId(cb func(Buildable, string)) {
+	if cb == nil {
+		x.xSetId = 0
+	} else {
+		x.xSetId = purego.NewCallback(func(BuildableVarp uintptr, IdVarp string) {
+			cb(&BuildableBase{Ptr: BuildableVarp}, IdVarp)
+		})
+	}
+}
+
+// GetCallbackSetId gets the callback function.
+func (x *BuildableIface) GetCallbackSetId() func(Buildable, string) {
+	if x.xSetId == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, IdVarp string)
+	purego.RegisterFunc(&rawCallback, x.xSetId)
+	return func(BuildableVar Buildable, IdVar string) {
+		rawCallback(BuildableVar.GoPointer(), IdVar)
+	}
+}
+
+// SetCallbackGetId sets the callback function.
+func (x *BuildableIface) SetCallbackGetId(cb func(Buildable) string) {
+	if cb == nil {
+		x.xGetId = 0
+	} else {
+		x.xGetId = purego.NewCallback(func(BuildableVarp uintptr) string {
+			return cb(&BuildableBase{Ptr: BuildableVarp})
+		})
+	}
+}
+
+// GetCallbackGetId gets the callback function.
+func (x *BuildableIface) GetCallbackGetId() func(Buildable) string {
+	if x.xGetId == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetId)
+	return func(BuildableVar Buildable) string {
+		return rawCallback(BuildableVar.GoPointer())
+	}
+}
+
+// SetCallbackAddChild sets the callback function.
+func (x *BuildableIface) SetCallbackAddChild(cb func(Buildable, *Builder, *gobject.Object, string)) {
+	if cb == nil {
+		x.xAddChild = 0
+	} else {
+		x.xAddChild = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TypeVarp string) {
+			cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp), gobject.ObjectNewFromInternalPtr(ChildVarp), TypeVarp)
+		})
+	}
+}
+
+// GetCallbackAddChild gets the callback function.
+func (x *BuildableIface) GetCallbackAddChild() func(Buildable, *Builder, *gobject.Object, string) {
+	if x.xAddChild == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TypeVarp string)
+	purego.RegisterFunc(&rawCallback, x.xAddChild)
+	return func(BuildableVar Buildable, BuilderVar *Builder, ChildVar *gobject.Object, TypeVar string) {
+		rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer(), ChildVar.GoPointer(), TypeVar)
+	}
+}
+
+// SetCallbackSetBuildableProperty sets the callback function.
+func (x *BuildableIface) SetCallbackSetBuildableProperty(cb func(Buildable, *Builder, string, *gobject.Value)) {
+	if cb == nil {
+		x.xSetBuildableProperty = 0
+	} else {
+		x.xSetBuildableProperty = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr, NameVarp string, ValueVarp *gobject.Value) {
+			cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp), NameVarp, ValueVarp)
+		})
+	}
+}
+
+// GetCallbackSetBuildableProperty gets the callback function.
+func (x *BuildableIface) GetCallbackSetBuildableProperty() func(Buildable, *Builder, string, *gobject.Value) {
+	if x.xSetBuildableProperty == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr, NameVarp string, ValueVarp *gobject.Value)
+	purego.RegisterFunc(&rawCallback, x.xSetBuildableProperty)
+	return func(BuildableVar Buildable, BuilderVar *Builder, NameVar string, ValueVar *gobject.Value) {
+		rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer(), NameVar, ValueVar)
+	}
+}
+
+// SetCallbackConstructChild sets the callback function.
+func (x *BuildableIface) SetCallbackConstructChild(cb func(Buildable, *Builder, string) *gobject.Object) {
+	if cb == nil {
+		x.xConstructChild = 0
+	} else {
+		x.xConstructChild = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr, NameVarp string) uintptr {
+			ret := cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp), NameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackConstructChild gets the callback function.
+func (x *BuildableIface) GetCallbackConstructChild() func(Buildable, *Builder, string) *gobject.Object {
+	if x.xConstructChild == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr, NameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xConstructChild)
+	return func(BuildableVar Buildable, BuilderVar *Builder, NameVar string) *gobject.Object {
+		rawRet := rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer(), NameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &gobject.Object{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCustomTagStart sets the callback function.
+func (x *BuildableIface) SetCallbackCustomTagStart(cb func(Buildable, *Builder, *gobject.Object, string, *BuildableParser, uintptr) bool) {
+	if cb == nil {
+		x.xCustomTagStart = 0
+	} else {
+		x.xCustomTagStart = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TagnameVarp string, ParserVarp *BuildableParser, DataVarp uintptr) bool {
+			return cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp), gobject.ObjectNewFromInternalPtr(ChildVarp), TagnameVarp, ParserVarp, DataVarp)
+		})
+	}
+}
+
+// GetCallbackCustomTagStart gets the callback function.
+func (x *BuildableIface) GetCallbackCustomTagStart() func(Buildable, *Builder, *gobject.Object, string, *BuildableParser, uintptr) bool {
+	if x.xCustomTagStart == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TagnameVarp string, ParserVarp *BuildableParser, DataVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCustomTagStart)
+	return func(BuildableVar Buildable, BuilderVar *Builder, ChildVar *gobject.Object, TagnameVar string, ParserVar *BuildableParser, DataVar uintptr) bool {
+		return rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer(), ChildVar.GoPointer(), TagnameVar, ParserVar, DataVar)
+	}
+}
+
+// SetCallbackCustomTagEnd sets the callback function.
+func (x *BuildableIface) SetCallbackCustomTagEnd(cb func(Buildable, *Builder, *gobject.Object, string, uintptr)) {
+	if cb == nil {
+		x.xCustomTagEnd = 0
+	} else {
+		x.xCustomTagEnd = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TagnameVarp string, DataVarp uintptr) {
+			cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp), gobject.ObjectNewFromInternalPtr(ChildVarp), TagnameVarp, DataVarp)
+		})
+	}
+}
+
+// GetCallbackCustomTagEnd gets the callback function.
+func (x *BuildableIface) GetCallbackCustomTagEnd() func(Buildable, *Builder, *gobject.Object, string, uintptr) {
+	if x.xCustomTagEnd == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TagnameVarp string, DataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCustomTagEnd)
+	return func(BuildableVar Buildable, BuilderVar *Builder, ChildVar *gobject.Object, TagnameVar string, DataVar uintptr) {
+		rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer(), ChildVar.GoPointer(), TagnameVar, DataVar)
+	}
+}
+
+// SetCallbackCustomFinished sets the callback function.
+func (x *BuildableIface) SetCallbackCustomFinished(cb func(Buildable, *Builder, *gobject.Object, string, uintptr)) {
+	if cb == nil {
+		x.xCustomFinished = 0
+	} else {
+		x.xCustomFinished = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TagnameVarp string, DataVarp uintptr) {
+			cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp), gobject.ObjectNewFromInternalPtr(ChildVarp), TagnameVarp, DataVarp)
+		})
+	}
+}
+
+// GetCallbackCustomFinished gets the callback function.
+func (x *BuildableIface) GetCallbackCustomFinished() func(Buildable, *Builder, *gobject.Object, string, uintptr) {
+	if x.xCustomFinished == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr, ChildVarp uintptr, TagnameVarp string, DataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCustomFinished)
+	return func(BuildableVar Buildable, BuilderVar *Builder, ChildVar *gobject.Object, TagnameVar string, DataVar uintptr) {
+		rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer(), ChildVar.GoPointer(), TagnameVar, DataVar)
+	}
+}
+
+// SetCallbackParserFinished sets the callback function.
+func (x *BuildableIface) SetCallbackParserFinished(cb func(Buildable, *Builder)) {
+	if cb == nil {
+		x.xParserFinished = 0
+	} else {
+		x.xParserFinished = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr) {
+			cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp))
+		})
+	}
+}
+
+// GetCallbackParserFinished gets the callback function.
+func (x *BuildableIface) GetCallbackParserFinished() func(Buildable, *Builder) {
+	if x.xParserFinished == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xParserFinished)
+	return func(BuildableVar Buildable, BuilderVar *Builder) {
+		rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer())
+	}
+}
+
+// SetCallbackGetInternalChild sets the callback function.
+func (x *BuildableIface) SetCallbackGetInternalChild(cb func(Buildable, *Builder, string) *gobject.Object) {
+	if cb == nil {
+		x.xGetInternalChild = 0
+	} else {
+		x.xGetInternalChild = purego.NewCallback(func(BuildableVarp uintptr, BuilderVarp uintptr, ChildnameVarp string) uintptr {
+			ret := cb(&BuildableBase{Ptr: BuildableVarp}, BuilderNewFromInternalPtr(BuilderVarp), ChildnameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetInternalChild gets the callback function.
+func (x *BuildableIface) GetCallbackGetInternalChild() func(Buildable, *Builder, string) *gobject.Object {
+	if x.xGetInternalChild == 0 {
+		return nil
+	}
+	var rawCallback func(BuildableVarp uintptr, BuilderVarp uintptr, ChildnameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetInternalChild)
+	return func(BuildableVar Buildable, BuilderVar *Builder, ChildnameVar string) *gobject.Object {
+		rawRet := rawCallback(BuildableVar.GoPointer(), BuilderVar.GoPointer(), ChildnameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &gobject.Object{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
 // An opaque context struct for `GtkBuildableParser`.
 type BuildableParseContext struct {
 	_ structs.HostLayout
@@ -158,19 +410,111 @@ // A sub-parser for `GtkBuildable` implementations.
 type BuildableParser struct {
 	_ structs.HostLayout
 
-	StartElement uintptr
+	xStartElement uintptr
 
-	EndElement uintptr
+	xEndElement uintptr
 
-	Text uintptr
+	xText uintptr
 
-	Error uintptr
+	xError uintptr
 
 	Padding [4]uintptr
 }
 
 func (x *BuildableParser) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackStartElement sets the callback function.
+func (x *BuildableParser) SetCallbackStartElement(cb func(*BuildableParseContext, string, string, string, uintptr)) {
+	if cb == nil {
+		x.xStartElement = 0
+	} else {
+		x.xStartElement = purego.NewCallback(func(ContextVarp *BuildableParseContext, ElementNameVarp string, AttributeNamesVarp string, AttributeValuesVarp string, UserDataVarp uintptr) {
+			cb(ContextVarp, ElementNameVarp, AttributeNamesVarp, AttributeValuesVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackStartElement gets the callback function.
+func (x *BuildableParser) GetCallbackStartElement() func(*BuildableParseContext, string, string, string, uintptr) {
+	if x.xStartElement == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *BuildableParseContext, ElementNameVarp string, AttributeNamesVarp string, AttributeValuesVarp string, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStartElement)
+	return func(ContextVar *BuildableParseContext, ElementNameVar string, AttributeNamesVar string, AttributeValuesVar string, UserDataVar uintptr) {
+		rawCallback(ContextVar, ElementNameVar, AttributeNamesVar, AttributeValuesVar, UserDataVar)
+	}
+}
+
+// SetCallbackEndElement sets the callback function.
+func (x *BuildableParser) SetCallbackEndElement(cb func(*BuildableParseContext, string, uintptr)) {
+	if cb == nil {
+		x.xEndElement = 0
+	} else {
+		x.xEndElement = purego.NewCallback(func(ContextVarp *BuildableParseContext, ElementNameVarp string, UserDataVarp uintptr) {
+			cb(ContextVarp, ElementNameVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackEndElement gets the callback function.
+func (x *BuildableParser) GetCallbackEndElement() func(*BuildableParseContext, string, uintptr) {
+	if x.xEndElement == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *BuildableParseContext, ElementNameVarp string, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEndElement)
+	return func(ContextVar *BuildableParseContext, ElementNameVar string, UserDataVar uintptr) {
+		rawCallback(ContextVar, ElementNameVar, UserDataVar)
+	}
+}
+
+// SetCallbackText sets the callback function.
+func (x *BuildableParser) SetCallbackText(cb func(*BuildableParseContext, string, uint, uintptr)) {
+	if cb == nil {
+		x.xText = 0
+	} else {
+		x.xText = purego.NewCallback(func(ContextVarp *BuildableParseContext, TextVarp string, TextLenVarp uint, UserDataVarp uintptr) {
+			cb(ContextVarp, TextVarp, TextLenVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackText gets the callback function.
+func (x *BuildableParser) GetCallbackText() func(*BuildableParseContext, string, uint, uintptr) {
+	if x.xText == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *BuildableParseContext, TextVarp string, TextLenVarp uint, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xText)
+	return func(ContextVar *BuildableParseContext, TextVar string, TextLenVar uint, UserDataVar uintptr) {
+		rawCallback(ContextVar, TextVar, TextLenVar, UserDataVar)
+	}
+}
+
+// SetCallbackError sets the callback function.
+func (x *BuildableParser) SetCallbackError(cb func(*BuildableParseContext, *glib.Error, uintptr)) {
+	if cb == nil {
+		x.xError = 0
+	} else {
+		x.xError = purego.NewCallback(func(ContextVarp *BuildableParseContext, ErrorVarp *glib.Error, UserDataVarp uintptr) {
+			cb(ContextVarp, ErrorVarp, UserDataVarp)
+		})
+	}
+}
+
+// GetCallbackError gets the callback function.
+func (x *BuildableParser) GetCallbackError() func(*BuildableParseContext, *glib.Error, uintptr) {
+	if x.xError == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp *BuildableParseContext, ErrorVarp *glib.Error, UserDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xError)
+	return func(ContextVar *BuildableParseContext, ErrorVar *glib.Error, UserDataVar uintptr) {
+		rawCallback(ContextVar, ErrorVar, UserDataVar)
+	}
 }
 
 // `GtkBuildable` allows objects to extend and customize their deserialization
diff --git a/v4/gtk/gtkbuilderscope.go b/v4/gtk/gtkbuilderscope.go
index 0627a717c62c094203c4fa08920fbd37bfd73abe..b0c224cee35a127cb795d3045009a69d4231218a 100644
--- a/v4/gtk/gtkbuilderscope.go
+++ b/v4/gtk/gtkbuilderscope.go
@@ -30,15 +30,84 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	GetTypeFromName uintptr
+	xGetTypeFromName uintptr
 
-	GetTypeFromFunction uintptr
+	xGetTypeFromFunction uintptr
 
-	CreateClosure uintptr
+	xCreateClosure uintptr
 }
 
 func (x *BuilderScopeInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetTypeFromName sets the callback function.
+func (x *BuilderScopeInterface) SetCallbackGetTypeFromName(cb func(BuilderScope, *Builder, string) types.GType) {
+	if cb == nil {
+		x.xGetTypeFromName = 0
+	} else {
+		x.xGetTypeFromName = purego.NewCallback(func(SelfVarp uintptr, BuilderVarp uintptr, TypeNameVarp string) types.GType {
+			return cb(&BuilderScopeBase{Ptr: SelfVarp}, BuilderNewFromInternalPtr(BuilderVarp), TypeNameVarp)
+		})
+	}
+}
+
+// GetCallbackGetTypeFromName gets the callback function.
+func (x *BuilderScopeInterface) GetCallbackGetTypeFromName() func(BuilderScope, *Builder, string) types.GType {
+	if x.xGetTypeFromName == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, BuilderVarp uintptr, TypeNameVarp string) types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetTypeFromName)
+	return func(SelfVar BuilderScope, BuilderVar *Builder, TypeNameVar string) types.GType {
+		return rawCallback(SelfVar.GoPointer(), BuilderVar.GoPointer(), TypeNameVar)
+	}
+}
+
+// SetCallbackGetTypeFromFunction sets the callback function.
+func (x *BuilderScopeInterface) SetCallbackGetTypeFromFunction(cb func(BuilderScope, *Builder, string) types.GType) {
+	if cb == nil {
+		x.xGetTypeFromFunction = 0
+	} else {
+		x.xGetTypeFromFunction = purego.NewCallback(func(SelfVarp uintptr, BuilderVarp uintptr, FunctionNameVarp string) types.GType {
+			return cb(&BuilderScopeBase{Ptr: SelfVarp}, BuilderNewFromInternalPtr(BuilderVarp), FunctionNameVarp)
+		})
+	}
+}
+
+// GetCallbackGetTypeFromFunction gets the callback function.
+func (x *BuilderScopeInterface) GetCallbackGetTypeFromFunction() func(BuilderScope, *Builder, string) types.GType {
+	if x.xGetTypeFromFunction == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, BuilderVarp uintptr, FunctionNameVarp string) types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetTypeFromFunction)
+	return func(SelfVar BuilderScope, BuilderVar *Builder, FunctionNameVar string) types.GType {
+		return rawCallback(SelfVar.GoPointer(), BuilderVar.GoPointer(), FunctionNameVar)
+	}
+}
+
+// SetCallbackCreateClosure sets the callback function.
+func (x *BuilderScopeInterface) SetCallbackCreateClosure(cb func(BuilderScope, *Builder, string, BuilderClosureFlags, *gobject.Object) *gobject.Closure) {
+	if cb == nil {
+		x.xCreateClosure = 0
+	} else {
+		x.xCreateClosure = purego.NewCallback(func(SelfVarp uintptr, BuilderVarp uintptr, FunctionNameVarp string, FlagsVarp BuilderClosureFlags, ObjectVarp uintptr) *gobject.Closure {
+			return cb(&BuilderScopeBase{Ptr: SelfVarp}, BuilderNewFromInternalPtr(BuilderVarp), FunctionNameVarp, FlagsVarp, gobject.ObjectNewFromInternalPtr(ObjectVarp))
+		})
+	}
+}
+
+// GetCallbackCreateClosure gets the callback function.
+func (x *BuilderScopeInterface) GetCallbackCreateClosure() func(BuilderScope, *Builder, string, BuilderClosureFlags, *gobject.Object) *gobject.Closure {
+	if x.xCreateClosure == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, BuilderVarp uintptr, FunctionNameVarp string, FlagsVarp BuilderClosureFlags, ObjectVarp uintptr) *gobject.Closure
+	purego.RegisterFunc(&rawCallback, x.xCreateClosure)
+	return func(SelfVar BuilderScope, BuilderVar *Builder, FunctionNameVar string, FlagsVar BuilderClosureFlags, ObjectVar *gobject.Object) *gobject.Closure {
+		return rawCallback(SelfVar.GoPointer(), BuilderVar.GoPointer(), FunctionNameVar, FlagsVar, ObjectVar.GoPointer())
+	}
 }
 
 // `GtkBuilderScope` is an interface to provide language binding support
diff --git a/v4/gtk/gtkbutton.go b/v4/gtk/gtkbutton.go
index 541920ad52a5f9655482fde3f94ccf788615261b..b126dd5409ecbf343681bfd81908cbf43f48b3c9 100644
--- a/v4/gtk/gtkbutton.go
+++ b/v4/gtk/gtkbutton.go
@@ -17,15 +17,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Clicked uintptr
+	xClicked uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *ButtonClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackClicked sets the callback function.
+func (x *ButtonClass) SetCallbackClicked(cb func(*Button)) {
+	if cb == nil {
+		x.xClicked = 0
+	} else {
+		x.xClicked = purego.NewCallback(func(ButtonVarp uintptr) {
+			cb(ButtonNewFromInternalPtr(ButtonVarp))
+		})
+	}
+}
+
+// GetCallbackClicked gets the callback function.
+func (x *ButtonClass) GetCallbackClicked() func(*Button) {
+	if x.xClicked == 0 {
+		return nil
+	}
+	var rawCallback func(ButtonVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClicked)
+	return func(ButtonVar *Button) {
+		rawCallback(ButtonVar.GoPointer())
+	}
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *ButtonClass) SetCallbackActivate(cb func(*Button)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(ButtonVarp uintptr) {
+			cb(ButtonNewFromInternalPtr(ButtonVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *ButtonClass) GetCallbackActivate() func(*Button) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(ButtonVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(ButtonVar *Button) {
+		rawCallback(ButtonVar.GoPointer())
+	}
 }
 
 type ButtonPrivate struct {
diff --git a/v4/gtk/gtkcellarea.go b/v4/gtk/gtkcellarea.go
index 3ec8c73bbbe9d7cfb6f59fe689b2ca0d12f420bd..3448e1d1adbf8ed58a1c34ceafa6d1a1e9a74d92 100644
--- a/v4/gtk/gtkcellarea.go
+++ b/v4/gtk/gtkcellarea.go
@@ -27,43 +27,43 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Add uintptr
+	xAdd uintptr
 
-	Remove uintptr
+	xRemove uintptr
 
-	Foreach uintptr
+	xForeach uintptr
 
-	ForeachAlloc uintptr
+	xForeachAlloc uintptr
 
-	Event uintptr
+	xEvent uintptr
 
-	Snapshot uintptr
+	xSnapshot uintptr
 
-	ApplyAttributes uintptr
+	xApplyAttributes uintptr
 
-	CreateContext uintptr
+	xCreateContext uintptr
 
-	CopyContext uintptr
+	xCopyContext uintptr
 
-	GetRequestMode uintptr
+	xGetRequestMode uintptr
 
-	GetPreferredWidth uintptr
+	xGetPreferredWidth uintptr
 
-	GetPreferredHeightForWidth uintptr
+	xGetPreferredHeightForWidth uintptr
 
-	GetPreferredHeight uintptr
+	xGetPreferredHeight uintptr
 
-	GetPreferredWidthForHeight uintptr
+	xGetPreferredWidthForHeight uintptr
 
-	SetCellProperty uintptr
+	xSetCellProperty uintptr
 
-	GetCellProperty uintptr
+	xGetCellProperty uintptr
 
-	Focus uintptr
+	xFocus uintptr
 
-	IsActivatable uintptr
+	xIsActivatable uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [8]uintptr
 }
@@ -105,6 +105,463 @@ func (x *CellAreaClass) ListCellProperties(NPropertiesVar uint) uintptr {
 
 	cret := xCellAreaClassListCellProperties(x.GoPointer(), NPropertiesVar)
 	return cret
+}
+
+// SetCallbackAdd sets the callback function.
+func (x *CellAreaClass) SetCallbackAdd(cb func(*CellArea, *CellRenderer)) {
+	if cb == nil {
+		x.xAdd = 0
+	} else {
+		x.xAdd = purego.NewCallback(func(AreaVarp uintptr, RendererVarp uintptr) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellRendererNewFromInternalPtr(RendererVarp))
+		})
+	}
+}
+
+// GetCallbackAdd gets the callback function.
+func (x *CellAreaClass) GetCallbackAdd() func(*CellArea, *CellRenderer) {
+	if x.xAdd == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, RendererVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAdd)
+	return func(AreaVar *CellArea, RendererVar *CellRenderer) {
+		rawCallback(AreaVar.GoPointer(), RendererVar.GoPointer())
+	}
+}
+
+// SetCallbackRemove sets the callback function.
+func (x *CellAreaClass) SetCallbackRemove(cb func(*CellArea, *CellRenderer)) {
+	if cb == nil {
+		x.xRemove = 0
+	} else {
+		x.xRemove = purego.NewCallback(func(AreaVarp uintptr, RendererVarp uintptr) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellRendererNewFromInternalPtr(RendererVarp))
+		})
+	}
+}
+
+// GetCallbackRemove gets the callback function.
+func (x *CellAreaClass) GetCallbackRemove() func(*CellArea, *CellRenderer) {
+	if x.xRemove == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, RendererVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRemove)
+	return func(AreaVar *CellArea, RendererVar *CellRenderer) {
+		rawCallback(AreaVar.GoPointer(), RendererVar.GoPointer())
+	}
+}
+
+// SetCallbackForeach sets the callback function.
+func (x *CellAreaClass) SetCallbackForeach(cb func(*CellArea, *CellCallback, uintptr)) {
+	if cb == nil {
+		x.xForeach = 0
+	} else {
+		x.xForeach = purego.NewCallback(func(AreaVarp uintptr, CallbackVarp uintptr, CallbackDataVarp uintptr) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), (*CellCallback)(unsafe.Pointer(CallbackVarp)), CallbackDataVarp)
+		})
+	}
+}
+
+// GetCallbackForeach gets the callback function.
+func (x *CellAreaClass) GetCallbackForeach() func(*CellArea, *CellCallback, uintptr) {
+	if x.xForeach == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, CallbackVarp uintptr, CallbackDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xForeach)
+	return func(AreaVar *CellArea, CallbackVar *CellCallback, CallbackDataVar uintptr) {
+		rawCallback(AreaVar.GoPointer(), glib.NewCallback(CallbackVar), CallbackDataVar)
+	}
+}
+
+// SetCallbackForeachAlloc sets the callback function.
+func (x *CellAreaClass) SetCallbackForeachAlloc(cb func(*CellArea, *CellAreaContext, *Widget, *gdk.Rectangle, *gdk.Rectangle, *CellAllocCallback, uintptr)) {
+	if cb == nil {
+		x.xForeachAlloc = 0
+	} else {
+		x.xForeachAlloc = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, CellAreaVarp *gdk.Rectangle, BackgroundAreaVarp *gdk.Rectangle, CallbackVarp uintptr, CallbackDataVarp uintptr) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), CellAreaVarp, BackgroundAreaVarp, (*CellAllocCallback)(unsafe.Pointer(CallbackVarp)), CallbackDataVarp)
+		})
+	}
+}
+
+// GetCallbackForeachAlloc gets the callback function.
+func (x *CellAreaClass) GetCallbackForeachAlloc() func(*CellArea, *CellAreaContext, *Widget, *gdk.Rectangle, *gdk.Rectangle, *CellAllocCallback, uintptr) {
+	if x.xForeachAlloc == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, CellAreaVarp *gdk.Rectangle, BackgroundAreaVarp *gdk.Rectangle, CallbackVarp uintptr, CallbackDataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xForeachAlloc)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, CellAreaVar *gdk.Rectangle, BackgroundAreaVar *gdk.Rectangle, CallbackVar *CellAllocCallback, CallbackDataVar uintptr) {
+		rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), CellAreaVar, BackgroundAreaVar, glib.NewCallback(CallbackVar), CallbackDataVar)
+	}
+}
+
+// SetCallbackEvent sets the callback function.
+func (x *CellAreaClass) SetCallbackEvent(cb func(*CellArea, *CellAreaContext, *Widget, *gdk.Event, *gdk.Rectangle, CellRendererState) int) {
+	if cb == nil {
+		x.xEvent = 0
+	} else {
+		x.xEvent = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, EventVarp uintptr, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState) int {
+			return cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), gdk.EventNewFromInternalPtr(EventVarp), CellAreaVarp, FlagsVarp)
+		})
+	}
+}
+
+// GetCallbackEvent gets the callback function.
+func (x *CellAreaClass) GetCallbackEvent() func(*CellArea, *CellAreaContext, *Widget, *gdk.Event, *gdk.Rectangle, CellRendererState) int {
+	if x.xEvent == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, EventVarp uintptr, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState) int
+	purego.RegisterFunc(&rawCallback, x.xEvent)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, EventVar *gdk.Event, CellAreaVar *gdk.Rectangle, FlagsVar CellRendererState) int {
+		return rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), EventVar.GoPointer(), CellAreaVar, FlagsVar)
+	}
+}
+
+// SetCallbackSnapshot sets the callback function.
+func (x *CellAreaClass) SetCallbackSnapshot(cb func(*CellArea, *CellAreaContext, *Widget, *Snapshot, *gdk.Rectangle, *gdk.Rectangle, CellRendererState, bool)) {
+	if cb == nil {
+		x.xSnapshot = 0
+	} else {
+		x.xSnapshot = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, SnapshotVarp uintptr, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState, PaintFocusVarp bool) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), SnapshotNewFromInternalPtr(SnapshotVarp), BackgroundAreaVarp, CellAreaVarp, FlagsVarp, PaintFocusVarp)
+		})
+	}
+}
+
+// GetCallbackSnapshot gets the callback function.
+func (x *CellAreaClass) GetCallbackSnapshot() func(*CellArea, *CellAreaContext, *Widget, *Snapshot, *gdk.Rectangle, *gdk.Rectangle, CellRendererState, bool) {
+	if x.xSnapshot == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, SnapshotVarp uintptr, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState, PaintFocusVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xSnapshot)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, SnapshotVar *Snapshot, BackgroundAreaVar *gdk.Rectangle, CellAreaVar *gdk.Rectangle, FlagsVar CellRendererState, PaintFocusVar bool) {
+		rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), SnapshotVar.GoPointer(), BackgroundAreaVar, CellAreaVar, FlagsVar, PaintFocusVar)
+	}
+}
+
+// SetCallbackApplyAttributes sets the callback function.
+func (x *CellAreaClass) SetCallbackApplyAttributes(cb func(*CellArea, TreeModel, *TreeIter, bool, bool)) {
+	if cb == nil {
+		x.xApplyAttributes = 0
+	} else {
+		x.xApplyAttributes = purego.NewCallback(func(AreaVarp uintptr, TreeModelVarp uintptr, IterVarp *TreeIter, IsExpanderVarp bool, IsExpandedVarp bool) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), &TreeModelBase{Ptr: TreeModelVarp}, IterVarp, IsExpanderVarp, IsExpandedVarp)
+		})
+	}
+}
+
+// GetCallbackApplyAttributes gets the callback function.
+func (x *CellAreaClass) GetCallbackApplyAttributes() func(*CellArea, TreeModel, *TreeIter, bool, bool) {
+	if x.xApplyAttributes == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, TreeModelVarp uintptr, IterVarp *TreeIter, IsExpanderVarp bool, IsExpandedVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xApplyAttributes)
+	return func(AreaVar *CellArea, TreeModelVar TreeModel, IterVar *TreeIter, IsExpanderVar bool, IsExpandedVar bool) {
+		rawCallback(AreaVar.GoPointer(), TreeModelVar.GoPointer(), IterVar, IsExpanderVar, IsExpandedVar)
+	}
+}
+
+// SetCallbackCreateContext sets the callback function.
+func (x *CellAreaClass) SetCallbackCreateContext(cb func(*CellArea) *CellAreaContext) {
+	if cb == nil {
+		x.xCreateContext = 0
+	} else {
+		x.xCreateContext = purego.NewCallback(func(AreaVarp uintptr) uintptr {
+			ret := cb(CellAreaNewFromInternalPtr(AreaVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateContext gets the callback function.
+func (x *CellAreaClass) GetCallbackCreateContext() func(*CellArea) *CellAreaContext {
+	if x.xCreateContext == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateContext)
+	return func(AreaVar *CellArea) *CellAreaContext {
+		rawRet := rawCallback(AreaVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &CellAreaContext{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCopyContext sets the callback function.
+func (x *CellAreaClass) SetCallbackCopyContext(cb func(*CellArea, *CellAreaContext) *CellAreaContext) {
+	if cb == nil {
+		x.xCopyContext = 0
+	} else {
+		x.xCopyContext = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr) uintptr {
+			ret := cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCopyContext gets the callback function.
+func (x *CellAreaClass) GetCallbackCopyContext() func(*CellArea, *CellAreaContext) *CellAreaContext {
+	if x.xCopyContext == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCopyContext)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext) *CellAreaContext {
+		rawRet := rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &CellAreaContext{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetRequestMode sets the callback function.
+func (x *CellAreaClass) SetCallbackGetRequestMode(cb func(*CellArea) SizeRequestMode) {
+	if cb == nil {
+		x.xGetRequestMode = 0
+	} else {
+		x.xGetRequestMode = purego.NewCallback(func(AreaVarp uintptr) SizeRequestMode {
+			return cb(CellAreaNewFromInternalPtr(AreaVarp))
+		})
+	}
+}
+
+// GetCallbackGetRequestMode gets the callback function.
+func (x *CellAreaClass) GetCallbackGetRequestMode() func(*CellArea) SizeRequestMode {
+	if x.xGetRequestMode == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr) SizeRequestMode
+	purego.RegisterFunc(&rawCallback, x.xGetRequestMode)
+	return func(AreaVar *CellArea) SizeRequestMode {
+		return rawCallback(AreaVar.GoPointer())
+	}
+}
+
+// SetCallbackGetPreferredWidth sets the callback function.
+func (x *CellAreaClass) SetCallbackGetPreferredWidth(cb func(*CellArea, *CellAreaContext, *Widget, int, int)) {
+	if cb == nil {
+		x.xGetPreferredWidth = 0
+	} else {
+		x.xGetPreferredWidth = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, MinimumWidthVarp int, NaturalWidthVarp int) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), MinimumWidthVarp, NaturalWidthVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredWidth gets the callback function.
+func (x *CellAreaClass) GetCallbackGetPreferredWidth() func(*CellArea, *CellAreaContext, *Widget, int, int) {
+	if x.xGetPreferredWidth == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, MinimumWidthVarp int, NaturalWidthVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredWidth)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, MinimumWidthVar int, NaturalWidthVar int) {
+		rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), MinimumWidthVar, NaturalWidthVar)
+	}
+}
+
+// SetCallbackGetPreferredHeightForWidth sets the callback function.
+func (x *CellAreaClass) SetCallbackGetPreferredHeightForWidth(cb func(*CellArea, *CellAreaContext, *Widget, int, int, int)) {
+	if cb == nil {
+		x.xGetPreferredHeightForWidth = 0
+	} else {
+		x.xGetPreferredHeightForWidth = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, WidthVarp int, MinimumHeightVarp int, NaturalHeightVarp int) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), WidthVarp, MinimumHeightVarp, NaturalHeightVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredHeightForWidth gets the callback function.
+func (x *CellAreaClass) GetCallbackGetPreferredHeightForWidth() func(*CellArea, *CellAreaContext, *Widget, int, int, int) {
+	if x.xGetPreferredHeightForWidth == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, WidthVarp int, MinimumHeightVarp int, NaturalHeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredHeightForWidth)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, WidthVar int, MinimumHeightVar int, NaturalHeightVar int) {
+		rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), WidthVar, MinimumHeightVar, NaturalHeightVar)
+	}
+}
+
+// SetCallbackGetPreferredHeight sets the callback function.
+func (x *CellAreaClass) SetCallbackGetPreferredHeight(cb func(*CellArea, *CellAreaContext, *Widget, int, int)) {
+	if cb == nil {
+		x.xGetPreferredHeight = 0
+	} else {
+		x.xGetPreferredHeight = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, MinimumHeightVarp int, NaturalHeightVarp int) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), MinimumHeightVarp, NaturalHeightVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredHeight gets the callback function.
+func (x *CellAreaClass) GetCallbackGetPreferredHeight() func(*CellArea, *CellAreaContext, *Widget, int, int) {
+	if x.xGetPreferredHeight == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, MinimumHeightVarp int, NaturalHeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredHeight)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, MinimumHeightVar int, NaturalHeightVar int) {
+		rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), MinimumHeightVar, NaturalHeightVar)
+	}
+}
+
+// SetCallbackGetPreferredWidthForHeight sets the callback function.
+func (x *CellAreaClass) SetCallbackGetPreferredWidthForHeight(cb func(*CellArea, *CellAreaContext, *Widget, int, int, int)) {
+	if cb == nil {
+		x.xGetPreferredWidthForHeight = 0
+	} else {
+		x.xGetPreferredWidthForHeight = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, HeightVarp int, MinimumWidthVarp int, NaturalWidthVarp int) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), HeightVarp, MinimumWidthVarp, NaturalWidthVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredWidthForHeight gets the callback function.
+func (x *CellAreaClass) GetCallbackGetPreferredWidthForHeight() func(*CellArea, *CellAreaContext, *Widget, int, int, int) {
+	if x.xGetPreferredWidthForHeight == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, HeightVarp int, MinimumWidthVarp int, NaturalWidthVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredWidthForHeight)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, HeightVar int, MinimumWidthVar int, NaturalWidthVar int) {
+		rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), HeightVar, MinimumWidthVar, NaturalWidthVar)
+	}
+}
+
+// SetCallbackSetCellProperty sets the callback function.
+func (x *CellAreaClass) SetCallbackSetCellProperty(cb func(*CellArea, *CellRenderer, uint, *gobject.Value, *gobject.ParamSpec)) {
+	if cb == nil {
+		x.xSetCellProperty = 0
+	} else {
+		x.xSetCellProperty = purego.NewCallback(func(AreaVarp uintptr, RendererVarp uintptr, PropertyIdVarp uint, ValueVarp *gobject.Value, PspecVarp uintptr) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellRendererNewFromInternalPtr(RendererVarp), PropertyIdVarp, ValueVarp, gobject.ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackSetCellProperty gets the callback function.
+func (x *CellAreaClass) GetCallbackSetCellProperty() func(*CellArea, *CellRenderer, uint, *gobject.Value, *gobject.ParamSpec) {
+	if x.xSetCellProperty == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, RendererVarp uintptr, PropertyIdVarp uint, ValueVarp *gobject.Value, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetCellProperty)
+	return func(AreaVar *CellArea, RendererVar *CellRenderer, PropertyIdVar uint, ValueVar *gobject.Value, PspecVar *gobject.ParamSpec) {
+		rawCallback(AreaVar.GoPointer(), RendererVar.GoPointer(), PropertyIdVar, ValueVar, PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackGetCellProperty sets the callback function.
+func (x *CellAreaClass) SetCallbackGetCellProperty(cb func(*CellArea, *CellRenderer, uint, *gobject.Value, *gobject.ParamSpec)) {
+	if cb == nil {
+		x.xGetCellProperty = 0
+	} else {
+		x.xGetCellProperty = purego.NewCallback(func(AreaVarp uintptr, RendererVarp uintptr, PropertyIdVarp uint, ValueVarp *gobject.Value, PspecVarp uintptr) {
+			cb(CellAreaNewFromInternalPtr(AreaVarp), CellRendererNewFromInternalPtr(RendererVarp), PropertyIdVarp, ValueVarp, gobject.ParamSpecNewFromInternalPtr(PspecVarp))
+		})
+	}
+}
+
+// GetCallbackGetCellProperty gets the callback function.
+func (x *CellAreaClass) GetCallbackGetCellProperty() func(*CellArea, *CellRenderer, uint, *gobject.Value, *gobject.ParamSpec) {
+	if x.xGetCellProperty == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, RendererVarp uintptr, PropertyIdVarp uint, ValueVarp *gobject.Value, PspecVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xGetCellProperty)
+	return func(AreaVar *CellArea, RendererVar *CellRenderer, PropertyIdVar uint, ValueVar *gobject.Value, PspecVar *gobject.ParamSpec) {
+		rawCallback(AreaVar.GoPointer(), RendererVar.GoPointer(), PropertyIdVar, ValueVar, PspecVar.GoPointer())
+	}
+}
+
+// SetCallbackFocus sets the callback function.
+func (x *CellAreaClass) SetCallbackFocus(cb func(*CellArea, DirectionType) bool) {
+	if cb == nil {
+		x.xFocus = 0
+	} else {
+		x.xFocus = purego.NewCallback(func(AreaVarp uintptr, DirectionVarp DirectionType) bool {
+			return cb(CellAreaNewFromInternalPtr(AreaVarp), DirectionVarp)
+		})
+	}
+}
+
+// GetCallbackFocus gets the callback function.
+func (x *CellAreaClass) GetCallbackFocus() func(*CellArea, DirectionType) bool {
+	if x.xFocus == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, DirectionVarp DirectionType) bool
+	purego.RegisterFunc(&rawCallback, x.xFocus)
+	return func(AreaVar *CellArea, DirectionVar DirectionType) bool {
+		return rawCallback(AreaVar.GoPointer(), DirectionVar)
+	}
+}
+
+// SetCallbackIsActivatable sets the callback function.
+func (x *CellAreaClass) SetCallbackIsActivatable(cb func(*CellArea) bool) {
+	if cb == nil {
+		x.xIsActivatable = 0
+	} else {
+		x.xIsActivatable = purego.NewCallback(func(AreaVarp uintptr) bool {
+			return cb(CellAreaNewFromInternalPtr(AreaVarp))
+		})
+	}
+}
+
+// GetCallbackIsActivatable gets the callback function.
+func (x *CellAreaClass) GetCallbackIsActivatable() func(*CellArea) bool {
+	if x.xIsActivatable == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsActivatable)
+	return func(AreaVar *CellArea) bool {
+		return rawCallback(AreaVar.GoPointer())
+	}
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *CellAreaClass) SetCallbackActivate(cb func(*CellArea, *CellAreaContext, *Widget, *gdk.Rectangle, CellRendererState, bool) bool) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState, EditOnlyVarp bool) bool {
+			return cb(CellAreaNewFromInternalPtr(AreaVarp), CellAreaContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp), CellAreaVarp, FlagsVarp, EditOnlyVarp)
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *CellAreaClass) GetCallbackActivate() func(*CellArea, *CellAreaContext, *Widget, *gdk.Rectangle, CellRendererState, bool) bool {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr, WidgetVarp uintptr, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState, EditOnlyVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(AreaVar *CellArea, ContextVar *CellAreaContext, WidgetVar *Widget, CellAreaVar *gdk.Rectangle, FlagsVar CellRendererState, EditOnlyVar bool) bool {
+		return rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer(), WidgetVar.GoPointer(), CellAreaVar, FlagsVar, EditOnlyVar)
+	}
 }
 
 // An abstract class for laying out `GtkCellRenderer`s
diff --git a/v4/gtk/gtkcellareacontext.go b/v4/gtk/gtkcellareacontext.go
index 0184c4dd0e5df78f1a34ba7eae1a181c54a1139e..296a8808bd54c29fba4ccb09de133c136b90cbf0 100644
--- a/v4/gtk/gtkcellareacontext.go
+++ b/v4/gtk/gtkcellareacontext.go
@@ -16,19 +16,111 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Allocate uintptr
+	xAllocate uintptr
 
-	Reset uintptr
+	xReset uintptr
 
-	GetPreferredHeightForWidth uintptr
+	xGetPreferredHeightForWidth uintptr
 
-	GetPreferredWidthForHeight uintptr
+	xGetPreferredWidthForHeight uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *CellAreaContextClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAllocate sets the callback function.
+func (x *CellAreaContextClass) SetCallbackAllocate(cb func(*CellAreaContext, int, int)) {
+	if cb == nil {
+		x.xAllocate = 0
+	} else {
+		x.xAllocate = purego.NewCallback(func(ContextVarp uintptr, WidthVarp int, HeightVarp int) {
+			cb(CellAreaContextNewFromInternalPtr(ContextVarp), WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackAllocate gets the callback function.
+func (x *CellAreaContextClass) GetCallbackAllocate() func(*CellAreaContext, int, int) {
+	if x.xAllocate == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xAllocate)
+	return func(ContextVar *CellAreaContext, WidthVar int, HeightVar int) {
+		rawCallback(ContextVar.GoPointer(), WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackReset sets the callback function.
+func (x *CellAreaContextClass) SetCallbackReset(cb func(*CellAreaContext)) {
+	if cb == nil {
+		x.xReset = 0
+	} else {
+		x.xReset = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(CellAreaContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackReset gets the callback function.
+func (x *CellAreaContextClass) GetCallbackReset() func(*CellAreaContext) {
+	if x.xReset == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReset)
+	return func(ContextVar *CellAreaContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackGetPreferredHeightForWidth sets the callback function.
+func (x *CellAreaContextClass) SetCallbackGetPreferredHeightForWidth(cb func(*CellAreaContext, int, int, int)) {
+	if cb == nil {
+		x.xGetPreferredHeightForWidth = 0
+	} else {
+		x.xGetPreferredHeightForWidth = purego.NewCallback(func(ContextVarp uintptr, WidthVarp int, MinimumHeightVarp int, NaturalHeightVarp int) {
+			cb(CellAreaContextNewFromInternalPtr(ContextVarp), WidthVarp, MinimumHeightVarp, NaturalHeightVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredHeightForWidth gets the callback function.
+func (x *CellAreaContextClass) GetCallbackGetPreferredHeightForWidth() func(*CellAreaContext, int, int, int) {
+	if x.xGetPreferredHeightForWidth == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, WidthVarp int, MinimumHeightVarp int, NaturalHeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredHeightForWidth)
+	return func(ContextVar *CellAreaContext, WidthVar int, MinimumHeightVar int, NaturalHeightVar int) {
+		rawCallback(ContextVar.GoPointer(), WidthVar, MinimumHeightVar, NaturalHeightVar)
+	}
+}
+
+// SetCallbackGetPreferredWidthForHeight sets the callback function.
+func (x *CellAreaContextClass) SetCallbackGetPreferredWidthForHeight(cb func(*CellAreaContext, int, int, int)) {
+	if cb == nil {
+		x.xGetPreferredWidthForHeight = 0
+	} else {
+		x.xGetPreferredWidthForHeight = purego.NewCallback(func(ContextVarp uintptr, HeightVarp int, MinimumWidthVarp int, NaturalWidthVarp int) {
+			cb(CellAreaContextNewFromInternalPtr(ContextVarp), HeightVarp, MinimumWidthVarp, NaturalWidthVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredWidthForHeight gets the callback function.
+func (x *CellAreaContextClass) GetCallbackGetPreferredWidthForHeight() func(*CellAreaContext, int, int, int) {
+	if x.xGetPreferredWidthForHeight == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, HeightVarp int, MinimumWidthVarp int, NaturalWidthVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredWidthForHeight)
+	return func(ContextVar *CellAreaContext, HeightVar int, MinimumWidthVar int, NaturalWidthVar int) {
+		rawCallback(ContextVar.GoPointer(), HeightVar, MinimumWidthVar, NaturalWidthVar)
+	}
 }
 
 type CellAreaContextPrivate struct {
diff --git a/v4/gtk/gtkcelleditable.go b/v4/gtk/gtkcelleditable.go
index 79315f319f49f14de075f695aad3ac4576226c0a..43135a0e043a4055ad74a65b48260a424b85717e 100644
--- a/v4/gtk/gtkcelleditable.go
+++ b/v4/gtk/gtkcelleditable.go
@@ -16,15 +16,84 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	EditingDone uintptr
+	xEditingDone uintptr
 
-	RemoveWidget uintptr
+	xRemoveWidget uintptr
 
-	StartEditing uintptr
+	xStartEditing uintptr
 }
 
 func (x *CellEditableIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackEditingDone sets the callback function.
+func (x *CellEditableIface) SetCallbackEditingDone(cb func(CellEditable)) {
+	if cb == nil {
+		x.xEditingDone = 0
+	} else {
+		x.xEditingDone = purego.NewCallback(func(CellEditableVarp uintptr) {
+			cb(&CellEditableBase{Ptr: CellEditableVarp})
+		})
+	}
+}
+
+// GetCallbackEditingDone gets the callback function.
+func (x *CellEditableIface) GetCallbackEditingDone() func(CellEditable) {
+	if x.xEditingDone == 0 {
+		return nil
+	}
+	var rawCallback func(CellEditableVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEditingDone)
+	return func(CellEditableVar CellEditable) {
+		rawCallback(CellEditableVar.GoPointer())
+	}
+}
+
+// SetCallbackRemoveWidget sets the callback function.
+func (x *CellEditableIface) SetCallbackRemoveWidget(cb func(CellEditable)) {
+	if cb == nil {
+		x.xRemoveWidget = 0
+	} else {
+		x.xRemoveWidget = purego.NewCallback(func(CellEditableVarp uintptr) {
+			cb(&CellEditableBase{Ptr: CellEditableVarp})
+		})
+	}
+}
+
+// GetCallbackRemoveWidget gets the callback function.
+func (x *CellEditableIface) GetCallbackRemoveWidget() func(CellEditable) {
+	if x.xRemoveWidget == 0 {
+		return nil
+	}
+	var rawCallback func(CellEditableVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRemoveWidget)
+	return func(CellEditableVar CellEditable) {
+		rawCallback(CellEditableVar.GoPointer())
+	}
+}
+
+// SetCallbackStartEditing sets the callback function.
+func (x *CellEditableIface) SetCallbackStartEditing(cb func(CellEditable, *gdk.Event)) {
+	if cb == nil {
+		x.xStartEditing = 0
+	} else {
+		x.xStartEditing = purego.NewCallback(func(CellEditableVarp uintptr, EventVarp uintptr) {
+			cb(&CellEditableBase{Ptr: CellEditableVarp}, gdk.EventNewFromInternalPtr(EventVarp))
+		})
+	}
+}
+
+// GetCallbackStartEditing gets the callback function.
+func (x *CellEditableIface) GetCallbackStartEditing() func(CellEditable, *gdk.Event) {
+	if x.xStartEditing == 0 {
+		return nil
+	}
+	var rawCallback func(CellEditableVarp uintptr, EventVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStartEditing)
+	return func(CellEditableVar CellEditable, EventVar *gdk.Event) {
+		rawCallback(CellEditableVar.GoPointer(), EventVar.GoPointer())
+	}
 }
 
 // Interface for widgets that can be used for editing cells
diff --git a/v4/gtk/gtkcelllayout.go b/v4/gtk/gtkcelllayout.go
index 92a4f9d0b81c89bb7a5484943d52dc40b4f783f1..36f5f89ba60982ba2d2d9111787ec9965a4f0547 100644
--- a/v4/gtk/gtkcelllayout.go
+++ b/v4/gtk/gtkcelllayout.go
@@ -21,27 +21,244 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	PackStart uintptr
+	xPackStart uintptr
 
-	PackEnd uintptr
+	xPackEnd uintptr
 
-	Clear uintptr
+	xClear uintptr
 
-	AddAttribute uintptr
+	xAddAttribute uintptr
 
-	SetCellDataFunc uintptr
+	xSetCellDataFunc uintptr
 
-	ClearAttributes uintptr
+	xClearAttributes uintptr
 
-	Reorder uintptr
+	xReorder uintptr
 
-	GetCells uintptr
+	xGetCells uintptr
 
-	GetArea uintptr
+	xGetArea uintptr
 }
 
 func (x *CellLayoutIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackPackStart sets the callback function.
+func (x *CellLayoutIface) SetCallbackPackStart(cb func(CellLayout, *CellRenderer, bool)) {
+	if cb == nil {
+		x.xPackStart = 0
+	} else {
+		x.xPackStart = purego.NewCallback(func(CellLayoutVarp uintptr, CellVarp uintptr, ExpandVarp bool) {
+			cb(&CellLayoutBase{Ptr: CellLayoutVarp}, CellRendererNewFromInternalPtr(CellVarp), ExpandVarp)
+		})
+	}
+}
+
+// GetCallbackPackStart gets the callback function.
+func (x *CellLayoutIface) GetCallbackPackStart() func(CellLayout, *CellRenderer, bool) {
+	if x.xPackStart == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr, CellVarp uintptr, ExpandVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xPackStart)
+	return func(CellLayoutVar CellLayout, CellVar *CellRenderer, ExpandVar bool) {
+		rawCallback(CellLayoutVar.GoPointer(), CellVar.GoPointer(), ExpandVar)
+	}
+}
+
+// SetCallbackPackEnd sets the callback function.
+func (x *CellLayoutIface) SetCallbackPackEnd(cb func(CellLayout, *CellRenderer, bool)) {
+	if cb == nil {
+		x.xPackEnd = 0
+	} else {
+		x.xPackEnd = purego.NewCallback(func(CellLayoutVarp uintptr, CellVarp uintptr, ExpandVarp bool) {
+			cb(&CellLayoutBase{Ptr: CellLayoutVarp}, CellRendererNewFromInternalPtr(CellVarp), ExpandVarp)
+		})
+	}
+}
+
+// GetCallbackPackEnd gets the callback function.
+func (x *CellLayoutIface) GetCallbackPackEnd() func(CellLayout, *CellRenderer, bool) {
+	if x.xPackEnd == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr, CellVarp uintptr, ExpandVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xPackEnd)
+	return func(CellLayoutVar CellLayout, CellVar *CellRenderer, ExpandVar bool) {
+		rawCallback(CellLayoutVar.GoPointer(), CellVar.GoPointer(), ExpandVar)
+	}
+}
+
+// SetCallbackClear sets the callback function.
+func (x *CellLayoutIface) SetCallbackClear(cb func(CellLayout)) {
+	if cb == nil {
+		x.xClear = 0
+	} else {
+		x.xClear = purego.NewCallback(func(CellLayoutVarp uintptr) {
+			cb(&CellLayoutBase{Ptr: CellLayoutVarp})
+		})
+	}
+}
+
+// GetCallbackClear gets the callback function.
+func (x *CellLayoutIface) GetCallbackClear() func(CellLayout) {
+	if x.xClear == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClear)
+	return func(CellLayoutVar CellLayout) {
+		rawCallback(CellLayoutVar.GoPointer())
+	}
+}
+
+// SetCallbackAddAttribute sets the callback function.
+func (x *CellLayoutIface) SetCallbackAddAttribute(cb func(CellLayout, *CellRenderer, string, int)) {
+	if cb == nil {
+		x.xAddAttribute = 0
+	} else {
+		x.xAddAttribute = purego.NewCallback(func(CellLayoutVarp uintptr, CellVarp uintptr, AttributeVarp string, ColumnVarp int) {
+			cb(&CellLayoutBase{Ptr: CellLayoutVarp}, CellRendererNewFromInternalPtr(CellVarp), AttributeVarp, ColumnVarp)
+		})
+	}
+}
+
+// GetCallbackAddAttribute gets the callback function.
+func (x *CellLayoutIface) GetCallbackAddAttribute() func(CellLayout, *CellRenderer, string, int) {
+	if x.xAddAttribute == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr, CellVarp uintptr, AttributeVarp string, ColumnVarp int)
+	purego.RegisterFunc(&rawCallback, x.xAddAttribute)
+	return func(CellLayoutVar CellLayout, CellVar *CellRenderer, AttributeVar string, ColumnVar int) {
+		rawCallback(CellLayoutVar.GoPointer(), CellVar.GoPointer(), AttributeVar, ColumnVar)
+	}
+}
+
+// SetCallbackSetCellDataFunc sets the callback function.
+func (x *CellLayoutIface) SetCallbackSetCellDataFunc(cb func(CellLayout, *CellRenderer, *CellLayoutDataFunc, uintptr, *glib.DestroyNotify)) {
+	if cb == nil {
+		x.xSetCellDataFunc = 0
+	} else {
+		x.xSetCellDataFunc = purego.NewCallback(func(CellLayoutVarp uintptr, CellVarp uintptr, FuncVarp uintptr, FuncDataVarp uintptr, DestroyVarp uintptr) {
+			cb(&CellLayoutBase{Ptr: CellLayoutVarp}, CellRendererNewFromInternalPtr(CellVarp), (*CellLayoutDataFunc)(unsafe.Pointer(FuncVarp)), FuncDataVarp, (*glib.DestroyNotify)(unsafe.Pointer(DestroyVarp)))
+		})
+	}
+}
+
+// GetCallbackSetCellDataFunc gets the callback function.
+func (x *CellLayoutIface) GetCallbackSetCellDataFunc() func(CellLayout, *CellRenderer, *CellLayoutDataFunc, uintptr, *glib.DestroyNotify) {
+	if x.xSetCellDataFunc == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr, CellVarp uintptr, FuncVarp uintptr, FuncDataVarp uintptr, DestroyVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetCellDataFunc)
+	return func(CellLayoutVar CellLayout, CellVar *CellRenderer, FuncVar *CellLayoutDataFunc, FuncDataVar uintptr, DestroyVar *glib.DestroyNotify) {
+		rawCallback(CellLayoutVar.GoPointer(), CellVar.GoPointer(), glib.NewCallbackNullable(FuncVar), FuncDataVar, glib.NewCallback(DestroyVar))
+	}
+}
+
+// SetCallbackClearAttributes sets the callback function.
+func (x *CellLayoutIface) SetCallbackClearAttributes(cb func(CellLayout, *CellRenderer)) {
+	if cb == nil {
+		x.xClearAttributes = 0
+	} else {
+		x.xClearAttributes = purego.NewCallback(func(CellLayoutVarp uintptr, CellVarp uintptr) {
+			cb(&CellLayoutBase{Ptr: CellLayoutVarp}, CellRendererNewFromInternalPtr(CellVarp))
+		})
+	}
+}
+
+// GetCallbackClearAttributes gets the callback function.
+func (x *CellLayoutIface) GetCallbackClearAttributes() func(CellLayout, *CellRenderer) {
+	if x.xClearAttributes == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr, CellVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClearAttributes)
+	return func(CellLayoutVar CellLayout, CellVar *CellRenderer) {
+		rawCallback(CellLayoutVar.GoPointer(), CellVar.GoPointer())
+	}
+}
+
+// SetCallbackReorder sets the callback function.
+func (x *CellLayoutIface) SetCallbackReorder(cb func(CellLayout, *CellRenderer, int)) {
+	if cb == nil {
+		x.xReorder = 0
+	} else {
+		x.xReorder = purego.NewCallback(func(CellLayoutVarp uintptr, CellVarp uintptr, PositionVarp int) {
+			cb(&CellLayoutBase{Ptr: CellLayoutVarp}, CellRendererNewFromInternalPtr(CellVarp), PositionVarp)
+		})
+	}
+}
+
+// GetCallbackReorder gets the callback function.
+func (x *CellLayoutIface) GetCallbackReorder() func(CellLayout, *CellRenderer, int) {
+	if x.xReorder == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr, CellVarp uintptr, PositionVarp int)
+	purego.RegisterFunc(&rawCallback, x.xReorder)
+	return func(CellLayoutVar CellLayout, CellVar *CellRenderer, PositionVar int) {
+		rawCallback(CellLayoutVar.GoPointer(), CellVar.GoPointer(), PositionVar)
+	}
+}
+
+// SetCallbackGetCells sets the callback function.
+func (x *CellLayoutIface) SetCallbackGetCells(cb func(CellLayout) *glib.List) {
+	if cb == nil {
+		x.xGetCells = 0
+	} else {
+		x.xGetCells = purego.NewCallback(func(CellLayoutVarp uintptr) *glib.List {
+			return cb(&CellLayoutBase{Ptr: CellLayoutVarp})
+		})
+	}
+}
+
+// GetCallbackGetCells gets the callback function.
+func (x *CellLayoutIface) GetCallbackGetCells() func(CellLayout) *glib.List {
+	if x.xGetCells == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr) *glib.List
+	purego.RegisterFunc(&rawCallback, x.xGetCells)
+	return func(CellLayoutVar CellLayout) *glib.List {
+		return rawCallback(CellLayoutVar.GoPointer())
+	}
+}
+
+// SetCallbackGetArea sets the callback function.
+func (x *CellLayoutIface) SetCallbackGetArea(cb func(CellLayout) *CellArea) {
+	if cb == nil {
+		x.xGetArea = 0
+	} else {
+		x.xGetArea = purego.NewCallback(func(CellLayoutVarp uintptr) uintptr {
+			ret := cb(&CellLayoutBase{Ptr: CellLayoutVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetArea gets the callback function.
+func (x *CellLayoutIface) GetCallbackGetArea() func(CellLayout) *CellArea {
+	if x.xGetArea == 0 {
+		return nil
+	}
+	var rawCallback func(CellLayoutVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetArea)
+	return func(CellLayoutVar CellLayout) *CellArea {
+		rawRet := rawCallback(CellLayoutVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &CellArea{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // An interface for packing cells
diff --git a/v4/gtk/gtkcellrenderer.go b/v4/gtk/gtkcellrenderer.go
index 05e5f0e78dd6e72fad91815cd94244ff4cb98569..1562060c4918ef5cda5c9584dbdec553bb6fd6f5 100644
--- a/v4/gtk/gtkcellrenderer.go
+++ b/v4/gtk/gtkcellrenderer.go
@@ -18,33 +18,296 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetRequestMode uintptr
+	xGetRequestMode uintptr
 
-	GetPreferredWidth uintptr
+	xGetPreferredWidth uintptr
 
-	GetPreferredHeightForWidth uintptr
+	xGetPreferredHeightForWidth uintptr
 
-	GetPreferredHeight uintptr
+	xGetPreferredHeight uintptr
 
-	GetPreferredWidthForHeight uintptr
+	xGetPreferredWidthForHeight uintptr
 
-	GetAlignedArea uintptr
+	xGetAlignedArea uintptr
 
-	Snapshot uintptr
+	xSnapshot uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
-	StartEditing uintptr
+	xStartEditing uintptr
 
-	EditingCanceled uintptr
+	xEditingCanceled uintptr
 
-	EditingStarted uintptr
+	xEditingStarted uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *CellRendererClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetRequestMode sets the callback function.
+func (x *CellRendererClass) SetCallbackGetRequestMode(cb func(*CellRenderer) SizeRequestMode) {
+	if cb == nil {
+		x.xGetRequestMode = 0
+	} else {
+		x.xGetRequestMode = purego.NewCallback(func(CellVarp uintptr) SizeRequestMode {
+			return cb(CellRendererNewFromInternalPtr(CellVarp))
+		})
+	}
+}
+
+// GetCallbackGetRequestMode gets the callback function.
+func (x *CellRendererClass) GetCallbackGetRequestMode() func(*CellRenderer) SizeRequestMode {
+	if x.xGetRequestMode == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr) SizeRequestMode
+	purego.RegisterFunc(&rawCallback, x.xGetRequestMode)
+	return func(CellVar *CellRenderer) SizeRequestMode {
+		return rawCallback(CellVar.GoPointer())
+	}
+}
+
+// SetCallbackGetPreferredWidth sets the callback function.
+func (x *CellRendererClass) SetCallbackGetPreferredWidth(cb func(*CellRenderer, *Widget, int, int)) {
+	if cb == nil {
+		x.xGetPreferredWidth = 0
+	} else {
+		x.xGetPreferredWidth = purego.NewCallback(func(CellVarp uintptr, WidgetVarp uintptr, MinimumSizeVarp int, NaturalSizeVarp int) {
+			cb(CellRendererNewFromInternalPtr(CellVarp), WidgetNewFromInternalPtr(WidgetVarp), MinimumSizeVarp, NaturalSizeVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredWidth gets the callback function.
+func (x *CellRendererClass) GetCallbackGetPreferredWidth() func(*CellRenderer, *Widget, int, int) {
+	if x.xGetPreferredWidth == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, WidgetVarp uintptr, MinimumSizeVarp int, NaturalSizeVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredWidth)
+	return func(CellVar *CellRenderer, WidgetVar *Widget, MinimumSizeVar int, NaturalSizeVar int) {
+		rawCallback(CellVar.GoPointer(), WidgetVar.GoPointer(), MinimumSizeVar, NaturalSizeVar)
+	}
+}
+
+// SetCallbackGetPreferredHeightForWidth sets the callback function.
+func (x *CellRendererClass) SetCallbackGetPreferredHeightForWidth(cb func(*CellRenderer, *Widget, int, int, int)) {
+	if cb == nil {
+		x.xGetPreferredHeightForWidth = 0
+	} else {
+		x.xGetPreferredHeightForWidth = purego.NewCallback(func(CellVarp uintptr, WidgetVarp uintptr, WidthVarp int, MinimumHeightVarp int, NaturalHeightVarp int) {
+			cb(CellRendererNewFromInternalPtr(CellVarp), WidgetNewFromInternalPtr(WidgetVarp), WidthVarp, MinimumHeightVarp, NaturalHeightVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredHeightForWidth gets the callback function.
+func (x *CellRendererClass) GetCallbackGetPreferredHeightForWidth() func(*CellRenderer, *Widget, int, int, int) {
+	if x.xGetPreferredHeightForWidth == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, WidgetVarp uintptr, WidthVarp int, MinimumHeightVarp int, NaturalHeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredHeightForWidth)
+	return func(CellVar *CellRenderer, WidgetVar *Widget, WidthVar int, MinimumHeightVar int, NaturalHeightVar int) {
+		rawCallback(CellVar.GoPointer(), WidgetVar.GoPointer(), WidthVar, MinimumHeightVar, NaturalHeightVar)
+	}
+}
+
+// SetCallbackGetPreferredHeight sets the callback function.
+func (x *CellRendererClass) SetCallbackGetPreferredHeight(cb func(*CellRenderer, *Widget, int, int)) {
+	if cb == nil {
+		x.xGetPreferredHeight = 0
+	} else {
+		x.xGetPreferredHeight = purego.NewCallback(func(CellVarp uintptr, WidgetVarp uintptr, MinimumSizeVarp int, NaturalSizeVarp int) {
+			cb(CellRendererNewFromInternalPtr(CellVarp), WidgetNewFromInternalPtr(WidgetVarp), MinimumSizeVarp, NaturalSizeVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredHeight gets the callback function.
+func (x *CellRendererClass) GetCallbackGetPreferredHeight() func(*CellRenderer, *Widget, int, int) {
+	if x.xGetPreferredHeight == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, WidgetVarp uintptr, MinimumSizeVarp int, NaturalSizeVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredHeight)
+	return func(CellVar *CellRenderer, WidgetVar *Widget, MinimumSizeVar int, NaturalSizeVar int) {
+		rawCallback(CellVar.GoPointer(), WidgetVar.GoPointer(), MinimumSizeVar, NaturalSizeVar)
+	}
+}
+
+// SetCallbackGetPreferredWidthForHeight sets the callback function.
+func (x *CellRendererClass) SetCallbackGetPreferredWidthForHeight(cb func(*CellRenderer, *Widget, int, int, int)) {
+	if cb == nil {
+		x.xGetPreferredWidthForHeight = 0
+	} else {
+		x.xGetPreferredWidthForHeight = purego.NewCallback(func(CellVarp uintptr, WidgetVarp uintptr, HeightVarp int, MinimumWidthVarp int, NaturalWidthVarp int) {
+			cb(CellRendererNewFromInternalPtr(CellVarp), WidgetNewFromInternalPtr(WidgetVarp), HeightVarp, MinimumWidthVarp, NaturalWidthVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreferredWidthForHeight gets the callback function.
+func (x *CellRendererClass) GetCallbackGetPreferredWidthForHeight() func(*CellRenderer, *Widget, int, int, int) {
+	if x.xGetPreferredWidthForHeight == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, WidgetVarp uintptr, HeightVarp int, MinimumWidthVarp int, NaturalWidthVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreferredWidthForHeight)
+	return func(CellVar *CellRenderer, WidgetVar *Widget, HeightVar int, MinimumWidthVar int, NaturalWidthVar int) {
+		rawCallback(CellVar.GoPointer(), WidgetVar.GoPointer(), HeightVar, MinimumWidthVar, NaturalWidthVar)
+	}
+}
+
+// SetCallbackGetAlignedArea sets the callback function.
+func (x *CellRendererClass) SetCallbackGetAlignedArea(cb func(*CellRenderer, *Widget, CellRendererState, *gdk.Rectangle, *gdk.Rectangle)) {
+	if cb == nil {
+		x.xGetAlignedArea = 0
+	} else {
+		x.xGetAlignedArea = purego.NewCallback(func(CellVarp uintptr, WidgetVarp uintptr, FlagsVarp CellRendererState, CellAreaVarp *gdk.Rectangle, AlignedAreaVarp *gdk.Rectangle) {
+			cb(CellRendererNewFromInternalPtr(CellVarp), WidgetNewFromInternalPtr(WidgetVarp), FlagsVarp, CellAreaVarp, AlignedAreaVarp)
+		})
+	}
+}
+
+// GetCallbackGetAlignedArea gets the callback function.
+func (x *CellRendererClass) GetCallbackGetAlignedArea() func(*CellRenderer, *Widget, CellRendererState, *gdk.Rectangle, *gdk.Rectangle) {
+	if x.xGetAlignedArea == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, WidgetVarp uintptr, FlagsVarp CellRendererState, CellAreaVarp *gdk.Rectangle, AlignedAreaVarp *gdk.Rectangle)
+	purego.RegisterFunc(&rawCallback, x.xGetAlignedArea)
+	return func(CellVar *CellRenderer, WidgetVar *Widget, FlagsVar CellRendererState, CellAreaVar *gdk.Rectangle, AlignedAreaVar *gdk.Rectangle) {
+		rawCallback(CellVar.GoPointer(), WidgetVar.GoPointer(), FlagsVar, CellAreaVar, AlignedAreaVar)
+	}
+}
+
+// SetCallbackSnapshot sets the callback function.
+func (x *CellRendererClass) SetCallbackSnapshot(cb func(*CellRenderer, *Snapshot, *Widget, *gdk.Rectangle, *gdk.Rectangle, CellRendererState)) {
+	if cb == nil {
+		x.xSnapshot = 0
+	} else {
+		x.xSnapshot = purego.NewCallback(func(CellVarp uintptr, SnapshotVarp uintptr, WidgetVarp uintptr, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState) {
+			cb(CellRendererNewFromInternalPtr(CellVarp), SnapshotNewFromInternalPtr(SnapshotVarp), WidgetNewFromInternalPtr(WidgetVarp), BackgroundAreaVarp, CellAreaVarp, FlagsVarp)
+		})
+	}
+}
+
+// GetCallbackSnapshot gets the callback function.
+func (x *CellRendererClass) GetCallbackSnapshot() func(*CellRenderer, *Snapshot, *Widget, *gdk.Rectangle, *gdk.Rectangle, CellRendererState) {
+	if x.xSnapshot == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, SnapshotVarp uintptr, WidgetVarp uintptr, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState)
+	purego.RegisterFunc(&rawCallback, x.xSnapshot)
+	return func(CellVar *CellRenderer, SnapshotVar *Snapshot, WidgetVar *Widget, BackgroundAreaVar *gdk.Rectangle, CellAreaVar *gdk.Rectangle, FlagsVar CellRendererState) {
+		rawCallback(CellVar.GoPointer(), SnapshotVar.GoPointer(), WidgetVar.GoPointer(), BackgroundAreaVar, CellAreaVar, FlagsVar)
+	}
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *CellRendererClass) SetCallbackActivate(cb func(*CellRenderer, *gdk.Event, *Widget, string, *gdk.Rectangle, *gdk.Rectangle, CellRendererState) bool) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(CellVarp uintptr, EventVarp uintptr, WidgetVarp uintptr, PathVarp string, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState) bool {
+			return cb(CellRendererNewFromInternalPtr(CellVarp), gdk.EventNewFromInternalPtr(EventVarp), WidgetNewFromInternalPtr(WidgetVarp), PathVarp, BackgroundAreaVarp, CellAreaVarp, FlagsVarp)
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *CellRendererClass) GetCallbackActivate() func(*CellRenderer, *gdk.Event, *Widget, string, *gdk.Rectangle, *gdk.Rectangle, CellRendererState) bool {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, EventVarp uintptr, WidgetVarp uintptr, PathVarp string, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState) bool
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(CellVar *CellRenderer, EventVar *gdk.Event, WidgetVar *Widget, PathVar string, BackgroundAreaVar *gdk.Rectangle, CellAreaVar *gdk.Rectangle, FlagsVar CellRendererState) bool {
+		return rawCallback(CellVar.GoPointer(), EventVar.GoPointer(), WidgetVar.GoPointer(), PathVar, BackgroundAreaVar, CellAreaVar, FlagsVar)
+	}
+}
+
+// SetCallbackStartEditing sets the callback function.
+func (x *CellRendererClass) SetCallbackStartEditing(cb func(*CellRenderer, *gdk.Event, *Widget, string, *gdk.Rectangle, *gdk.Rectangle, CellRendererState) *CellEditableBase) {
+	if cb == nil {
+		x.xStartEditing = 0
+	} else {
+		x.xStartEditing = purego.NewCallback(func(CellVarp uintptr, EventVarp uintptr, WidgetVarp uintptr, PathVarp string, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState) uintptr {
+			ret := cb(CellRendererNewFromInternalPtr(CellVarp), gdk.EventNewFromInternalPtr(EventVarp), WidgetNewFromInternalPtr(WidgetVarp), PathVarp, BackgroundAreaVarp, CellAreaVarp, FlagsVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackStartEditing gets the callback function.
+func (x *CellRendererClass) GetCallbackStartEditing() func(*CellRenderer, *gdk.Event, *Widget, string, *gdk.Rectangle, *gdk.Rectangle, CellRendererState) *CellEditableBase {
+	if x.xStartEditing == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, EventVarp uintptr, WidgetVarp uintptr, PathVarp string, BackgroundAreaVarp *gdk.Rectangle, CellAreaVarp *gdk.Rectangle, FlagsVarp CellRendererState) uintptr
+	purego.RegisterFunc(&rawCallback, x.xStartEditing)
+	return func(CellVar *CellRenderer, EventVar *gdk.Event, WidgetVar *Widget, PathVar string, BackgroundAreaVar *gdk.Rectangle, CellAreaVar *gdk.Rectangle, FlagsVar CellRendererState) *CellEditableBase {
+		rawRet := rawCallback(CellVar.GoPointer(), EventVar.GoPointer(), WidgetVar.GoPointer(), PathVar, BackgroundAreaVar, CellAreaVar, FlagsVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &CellEditableBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackEditingCanceled sets the callback function.
+func (x *CellRendererClass) SetCallbackEditingCanceled(cb func(*CellRenderer)) {
+	if cb == nil {
+		x.xEditingCanceled = 0
+	} else {
+		x.xEditingCanceled = purego.NewCallback(func(CellVarp uintptr) {
+			cb(CellRendererNewFromInternalPtr(CellVarp))
+		})
+	}
+}
+
+// GetCallbackEditingCanceled gets the callback function.
+func (x *CellRendererClass) GetCallbackEditingCanceled() func(*CellRenderer) {
+	if x.xEditingCanceled == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEditingCanceled)
+	return func(CellVar *CellRenderer) {
+		rawCallback(CellVar.GoPointer())
+	}
+}
+
+// SetCallbackEditingStarted sets the callback function.
+func (x *CellRendererClass) SetCallbackEditingStarted(cb func(*CellRenderer, CellEditable, string)) {
+	if cb == nil {
+		x.xEditingStarted = 0
+	} else {
+		x.xEditingStarted = purego.NewCallback(func(CellVarp uintptr, EditableVarp uintptr, PathVarp string) {
+			cb(CellRendererNewFromInternalPtr(CellVarp), &CellEditableBase{Ptr: EditableVarp}, PathVarp)
+		})
+	}
+}
+
+// GetCallbackEditingStarted gets the callback function.
+func (x *CellRendererClass) GetCallbackEditingStarted() func(*CellRenderer, CellEditable, string) {
+	if x.xEditingStarted == 0 {
+		return nil
+	}
+	var rawCallback func(CellVarp uintptr, EditableVarp uintptr, PathVarp string)
+	purego.RegisterFunc(&rawCallback, x.xEditingStarted)
+	return func(CellVar *CellRenderer, EditableVar CellEditable, PathVar string) {
+		rawCallback(CellVar.GoPointer(), EditableVar.GoPointer(), PathVar)
+	}
 }
 
 type CellRendererClassPrivate struct {
diff --git a/v4/gtk/gtkcellrenderertext.go b/v4/gtk/gtkcellrenderertext.go
index aa60e89c14ee60759f8e9b4b84c8937da5f71e61..dbea85497055386292eafa69a9e72230444e8c9f 100644
--- a/v4/gtk/gtkcellrenderertext.go
+++ b/v4/gtk/gtkcellrenderertext.go
@@ -17,13 +17,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Edited uintptr
+	xEdited uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *CellRendererTextClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackEdited sets the callback function.
+func (x *CellRendererTextClass) SetCallbackEdited(cb func(*CellRendererText, string, string)) {
+	if cb == nil {
+		x.xEdited = 0
+	} else {
+		x.xEdited = purego.NewCallback(func(CellRendererTextVarp uintptr, PathVarp string, NewTextVarp string) {
+			cb(CellRendererTextNewFromInternalPtr(CellRendererTextVarp), PathVarp, NewTextVarp)
+		})
+	}
+}
+
+// GetCallbackEdited gets the callback function.
+func (x *CellRendererTextClass) GetCallbackEdited() func(*CellRendererText, string, string) {
+	if x.xEdited == 0 {
+		return nil
+	}
+	var rawCallback func(CellRendererTextVarp uintptr, PathVarp string, NewTextVarp string)
+	purego.RegisterFunc(&rawCallback, x.xEdited)
+	return func(CellRendererTextVar *CellRendererText, PathVar string, NewTextVar string) {
+		rawCallback(CellRendererTextVar.GoPointer(), PathVar, NewTextVar)
+	}
 }
 
 // Renders text in a cell
diff --git a/v4/gtk/gtkcheckbutton.go b/v4/gtk/gtkcheckbutton.go
index c1eb27818fc0544860d41458ad654288a59fec61..37b904f8c657c48654f16c4103b44bb3848f461f 100644
--- a/v4/gtk/gtkcheckbutton.go
+++ b/v4/gtk/gtkcheckbutton.go
@@ -17,15 +17,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Toggled uintptr
+	xToggled uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [7]uintptr
 }
 
 func (x *CheckButtonClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackToggled sets the callback function.
+func (x *CheckButtonClass) SetCallbackToggled(cb func(*CheckButton)) {
+	if cb == nil {
+		x.xToggled = 0
+	} else {
+		x.xToggled = purego.NewCallback(func(CheckButtonVarp uintptr) {
+			cb(CheckButtonNewFromInternalPtr(CheckButtonVarp))
+		})
+	}
+}
+
+// GetCallbackToggled gets the callback function.
+func (x *CheckButtonClass) GetCallbackToggled() func(*CheckButton) {
+	if x.xToggled == 0 {
+		return nil
+	}
+	var rawCallback func(CheckButtonVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xToggled)
+	return func(CheckButtonVar *CheckButton) {
+		rawCallback(CheckButtonVar.GoPointer())
+	}
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *CheckButtonClass) SetCallbackActivate(cb func(*CheckButton)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(CheckButtonVarp uintptr) {
+			cb(CheckButtonNewFromInternalPtr(CheckButtonVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *CheckButtonClass) GetCallbackActivate() func(*CheckButton) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(CheckButtonVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(CheckButtonVar *CheckButton) {
+		rawCallback(CheckButtonVar.GoPointer())
+	}
 }
 
 // A `GtkCheckButton` places a label next to an indicator.
diff --git a/v4/gtk/gtkcolorchooser.go b/v4/gtk/gtkcolorchooser.go
index 3308cda7be99f2852faffcd91a9c16481347c11d..3cd656446580ff8b3b1ab50a84a8ea75f266ee2d 100644
--- a/v4/gtk/gtkcolorchooser.go
+++ b/v4/gtk/gtkcolorchooser.go
@@ -16,19 +16,111 @@ 	_ structs.HostLayout
 
 	BaseInterface uintptr
 
-	GetRgba uintptr
+	xGetRgba uintptr
 
-	SetRgba uintptr
+	xSetRgba uintptr
 
-	AddPalette uintptr
+	xAddPalette uintptr
 
-	ColorActivated uintptr
+	xColorActivated uintptr
 
 	Padding [12]uintptr
 }
 
 func (x *ColorChooserInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetRgba sets the callback function.
+func (x *ColorChooserInterface) SetCallbackGetRgba(cb func(ColorChooser, *gdk.RGBA)) {
+	if cb == nil {
+		x.xGetRgba = 0
+	} else {
+		x.xGetRgba = purego.NewCallback(func(ChooserVarp uintptr, ColorVarp *gdk.RGBA) {
+			cb(&ColorChooserBase{Ptr: ChooserVarp}, ColorVarp)
+		})
+	}
+}
+
+// GetCallbackGetRgba gets the callback function.
+func (x *ColorChooserInterface) GetCallbackGetRgba() func(ColorChooser, *gdk.RGBA) {
+	if x.xGetRgba == 0 {
+		return nil
+	}
+	var rawCallback func(ChooserVarp uintptr, ColorVarp *gdk.RGBA)
+	purego.RegisterFunc(&rawCallback, x.xGetRgba)
+	return func(ChooserVar ColorChooser, ColorVar *gdk.RGBA) {
+		rawCallback(ChooserVar.GoPointer(), ColorVar)
+	}
+}
+
+// SetCallbackSetRgba sets the callback function.
+func (x *ColorChooserInterface) SetCallbackSetRgba(cb func(ColorChooser, *gdk.RGBA)) {
+	if cb == nil {
+		x.xSetRgba = 0
+	} else {
+		x.xSetRgba = purego.NewCallback(func(ChooserVarp uintptr, ColorVarp *gdk.RGBA) {
+			cb(&ColorChooserBase{Ptr: ChooserVarp}, ColorVarp)
+		})
+	}
+}
+
+// GetCallbackSetRgba gets the callback function.
+func (x *ColorChooserInterface) GetCallbackSetRgba() func(ColorChooser, *gdk.RGBA) {
+	if x.xSetRgba == 0 {
+		return nil
+	}
+	var rawCallback func(ChooserVarp uintptr, ColorVarp *gdk.RGBA)
+	purego.RegisterFunc(&rawCallback, x.xSetRgba)
+	return func(ChooserVar ColorChooser, ColorVar *gdk.RGBA) {
+		rawCallback(ChooserVar.GoPointer(), ColorVar)
+	}
+}
+
+// SetCallbackAddPalette sets the callback function.
+func (x *ColorChooserInterface) SetCallbackAddPalette(cb func(ColorChooser, Orientation, int, int, []gdk.RGBA)) {
+	if cb == nil {
+		x.xAddPalette = 0
+	} else {
+		x.xAddPalette = purego.NewCallback(func(ChooserVarp uintptr, OrientationVarp Orientation, ColorsPerLineVarp int, NColorsVarp int, ColorsVarp []gdk.RGBA) {
+			cb(&ColorChooserBase{Ptr: ChooserVarp}, OrientationVarp, ColorsPerLineVarp, NColorsVarp, ColorsVarp)
+		})
+	}
+}
+
+// GetCallbackAddPalette gets the callback function.
+func (x *ColorChooserInterface) GetCallbackAddPalette() func(ColorChooser, Orientation, int, int, []gdk.RGBA) {
+	if x.xAddPalette == 0 {
+		return nil
+	}
+	var rawCallback func(ChooserVarp uintptr, OrientationVarp Orientation, ColorsPerLineVarp int, NColorsVarp int, ColorsVarp []gdk.RGBA)
+	purego.RegisterFunc(&rawCallback, x.xAddPalette)
+	return func(ChooserVar ColorChooser, OrientationVar Orientation, ColorsPerLineVar int, NColorsVar int, ColorsVar []gdk.RGBA) {
+		rawCallback(ChooserVar.GoPointer(), OrientationVar, ColorsPerLineVar, NColorsVar, ColorsVar)
+	}
+}
+
+// SetCallbackColorActivated sets the callback function.
+func (x *ColorChooserInterface) SetCallbackColorActivated(cb func(ColorChooser, *gdk.RGBA)) {
+	if cb == nil {
+		x.xColorActivated = 0
+	} else {
+		x.xColorActivated = purego.NewCallback(func(ChooserVarp uintptr, ColorVarp *gdk.RGBA) {
+			cb(&ColorChooserBase{Ptr: ChooserVarp}, ColorVarp)
+		})
+	}
+}
+
+// GetCallbackColorActivated gets the callback function.
+func (x *ColorChooserInterface) GetCallbackColorActivated() func(ColorChooser, *gdk.RGBA) {
+	if x.xColorActivated == 0 {
+		return nil
+	}
+	var rawCallback func(ChooserVarp uintptr, ColorVarp *gdk.RGBA)
+	purego.RegisterFunc(&rawCallback, x.xColorActivated)
+	return func(ChooserVar ColorChooser, ColorVar *gdk.RGBA) {
+		rawCallback(ChooserVar.GoPointer(), ColorVar)
+	}
 }
 
 // `GtkColorChooser` is an interface that is implemented by widgets
diff --git a/v4/gtk/gtkcombobox.go b/v4/gtk/gtkcombobox.go
index 36da9aecfab5672629d62d36e2bfab06089e4bea..3449a667b45cad7cb0875f49913e4576984f8264 100644
--- a/v4/gtk/gtkcombobox.go
+++ b/v4/gtk/gtkcombobox.go
@@ -18,17 +18,86 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	FormatEntryText uintptr
+	xFormatEntryText uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [7]uintptr
 }
 
 func (x *ComboBoxClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *ComboBoxClass) SetCallbackChanged(cb func(*ComboBox)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(ComboBoxVarp uintptr) {
+			cb(ComboBoxNewFromInternalPtr(ComboBoxVarp))
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *ComboBoxClass) GetCallbackChanged() func(*ComboBox) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ComboBoxVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(ComboBoxVar *ComboBox) {
+		rawCallback(ComboBoxVar.GoPointer())
+	}
+}
+
+// SetCallbackFormatEntryText sets the callback function.
+func (x *ComboBoxClass) SetCallbackFormatEntryText(cb func(*ComboBox, string) string) {
+	if cb == nil {
+		x.xFormatEntryText = 0
+	} else {
+		x.xFormatEntryText = purego.NewCallback(func(ComboBoxVarp uintptr, PathVarp string) string {
+			return cb(ComboBoxNewFromInternalPtr(ComboBoxVarp), PathVarp)
+		})
+	}
+}
+
+// GetCallbackFormatEntryText gets the callback function.
+func (x *ComboBoxClass) GetCallbackFormatEntryText() func(*ComboBox, string) string {
+	if x.xFormatEntryText == 0 {
+		return nil
+	}
+	var rawCallback func(ComboBoxVarp uintptr, PathVarp string) string
+	purego.RegisterFunc(&rawCallback, x.xFormatEntryText)
+	return func(ComboBoxVar *ComboBox, PathVar string) string {
+		return rawCallback(ComboBoxVar.GoPointer(), PathVar)
+	}
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *ComboBoxClass) SetCallbackActivate(cb func(*ComboBox)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(ComboBoxVarp uintptr) {
+			cb(ComboBoxNewFromInternalPtr(ComboBoxVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *ComboBoxClass) GetCallbackActivate() func(*ComboBox) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(ComboBoxVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(ComboBoxVar *ComboBox) {
+		rawCallback(ComboBoxVar.GoPointer())
+	}
 }
 
 // A `GtkComboBox` is a widget that allows the user to choose from a list of
diff --git a/v4/gtk/gtkdialog.go b/v4/gtk/gtkdialog.go
index ee7eb747beba7a9ad4d5258a26c9201eb837c30f..6f4aa740b6b645929d567f38c20300836a62c872 100644
--- a/v4/gtk/gtkdialog.go
+++ b/v4/gtk/gtkdialog.go
@@ -19,15 +19,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Response uintptr
+	xResponse uintptr
 
-	Close uintptr
+	xClose uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *DialogClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackResponse sets the callback function.
+func (x *DialogClass) SetCallbackResponse(cb func(*Dialog, int)) {
+	if cb == nil {
+		x.xResponse = 0
+	} else {
+		x.xResponse = purego.NewCallback(func(DialogVarp uintptr, ResponseIdVarp int) {
+			cb(DialogNewFromInternalPtr(DialogVarp), ResponseIdVarp)
+		})
+	}
+}
+
+// GetCallbackResponse gets the callback function.
+func (x *DialogClass) GetCallbackResponse() func(*Dialog, int) {
+	if x.xResponse == 0 {
+		return nil
+	}
+	var rawCallback func(DialogVarp uintptr, ResponseIdVarp int)
+	purego.RegisterFunc(&rawCallback, x.xResponse)
+	return func(DialogVar *Dialog, ResponseIdVar int) {
+		rawCallback(DialogVar.GoPointer(), ResponseIdVar)
+	}
+}
+
+// SetCallbackClose sets the callback function.
+func (x *DialogClass) SetCallbackClose(cb func(*Dialog)) {
+	if cb == nil {
+		x.xClose = 0
+	} else {
+		x.xClose = purego.NewCallback(func(DialogVarp uintptr) {
+			cb(DialogNewFromInternalPtr(DialogVarp))
+		})
+	}
+}
+
+// GetCallbackClose gets the callback function.
+func (x *DialogClass) GetCallbackClose() func(*Dialog) {
+	if x.xClose == 0 {
+		return nil
+	}
+	var rawCallback func(DialogVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClose)
+	return func(DialogVar *Dialog) {
+		rawCallback(DialogVar.GoPointer())
+	}
 }
 
 // Flags used to influence dialog construction.
diff --git a/v4/gtk/gtkdrawingarea.go b/v4/gtk/gtkdrawingarea.go
index a2728d01446fe8263c285ea0b64f17f7f193b571..b9579912d43dddcc02eaf1a2904848fd545b9ded 100644
--- a/v4/gtk/gtkdrawingarea.go
+++ b/v4/gtk/gtkdrawingarea.go
@@ -24,13 +24,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Resize uintptr
+	xResize uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *DrawingAreaClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackResize sets the callback function.
+func (x *DrawingAreaClass) SetCallbackResize(cb func(*DrawingArea, int, int)) {
+	if cb == nil {
+		x.xResize = 0
+	} else {
+		x.xResize = purego.NewCallback(func(AreaVarp uintptr, WidthVarp int, HeightVarp int) {
+			cb(DrawingAreaNewFromInternalPtr(AreaVarp), WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackResize gets the callback function.
+func (x *DrawingAreaClass) GetCallbackResize() func(*DrawingArea, int, int) {
+	if x.xResize == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xResize)
+	return func(AreaVar *DrawingArea, WidthVar int, HeightVar int) {
+		rawCallback(AreaVar.GoPointer(), WidthVar, HeightVar)
+	}
 }
 
 // `GtkDrawingArea` is a widget that allows drawing with cairo.
diff --git a/v4/gtk/gtkeditable.go b/v4/gtk/gtkeditable.go
index 9ada67f2ed6c4203e48760d7bd8638a2904c6847..97100f40fc8b992a8e5337f2982a7c60000fdde4 100644
--- a/v4/gtk/gtkeditable.go
+++ b/v4/gtk/gtkeditable.go
@@ -16,27 +16,244 @@ 	_ structs.HostLayout
 
 	BaseIface uintptr
 
-	InsertText uintptr
+	xInsertText uintptr
 
-	DeleteText uintptr
+	xDeleteText uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	GetText uintptr
+	xGetText uintptr
 
-	DoInsertText uintptr
+	xDoInsertText uintptr
 
-	DoDeleteText uintptr
+	xDoDeleteText uintptr
 
-	GetSelectionBounds uintptr
+	xGetSelectionBounds uintptr
 
-	SetSelectionBounds uintptr
+	xSetSelectionBounds uintptr
 
-	GetDelegate uintptr
+	xGetDelegate uintptr
 }
 
 func (x *EditableInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackInsertText sets the callback function.
+func (x *EditableInterface) SetCallbackInsertText(cb func(Editable, string, int, int)) {
+	if cb == nil {
+		x.xInsertText = 0
+	} else {
+		x.xInsertText = purego.NewCallback(func(EditableVarp uintptr, TextVarp string, LengthVarp int, PositionVarp int) {
+			cb(&EditableBase{Ptr: EditableVarp}, TextVarp, LengthVarp, PositionVarp)
+		})
+	}
+}
+
+// GetCallbackInsertText gets the callback function.
+func (x *EditableInterface) GetCallbackInsertText() func(Editable, string, int, int) {
+	if x.xInsertText == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr, TextVarp string, LengthVarp int, PositionVarp int)
+	purego.RegisterFunc(&rawCallback, x.xInsertText)
+	return func(EditableVar Editable, TextVar string, LengthVar int, PositionVar int) {
+		rawCallback(EditableVar.GoPointer(), TextVar, LengthVar, PositionVar)
+	}
+}
+
+// SetCallbackDeleteText sets the callback function.
+func (x *EditableInterface) SetCallbackDeleteText(cb func(Editable, int, int)) {
+	if cb == nil {
+		x.xDeleteText = 0
+	} else {
+		x.xDeleteText = purego.NewCallback(func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int) {
+			cb(&EditableBase{Ptr: EditableVarp}, StartPosVarp, EndPosVarp)
+		})
+	}
+}
+
+// GetCallbackDeleteText gets the callback function.
+func (x *EditableInterface) GetCallbackDeleteText() func(Editable, int, int) {
+	if x.xDeleteText == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDeleteText)
+	return func(EditableVar Editable, StartPosVar int, EndPosVar int) {
+		rawCallback(EditableVar.GoPointer(), StartPosVar, EndPosVar)
+	}
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *EditableInterface) SetCallbackChanged(cb func(Editable)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(EditableVarp uintptr) {
+			cb(&EditableBase{Ptr: EditableVarp})
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *EditableInterface) GetCallbackChanged() func(Editable) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(EditableVar Editable) {
+		rawCallback(EditableVar.GoPointer())
+	}
+}
+
+// SetCallbackGetText sets the callback function.
+func (x *EditableInterface) SetCallbackGetText(cb func(Editable) string) {
+	if cb == nil {
+		x.xGetText = 0
+	} else {
+		x.xGetText = purego.NewCallback(func(EditableVarp uintptr) string {
+			return cb(&EditableBase{Ptr: EditableVarp})
+		})
+	}
+}
+
+// GetCallbackGetText gets the callback function.
+func (x *EditableInterface) GetCallbackGetText() func(Editable) string {
+	if x.xGetText == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetText)
+	return func(EditableVar Editable) string {
+		return rawCallback(EditableVar.GoPointer())
+	}
+}
+
+// SetCallbackDoInsertText sets the callback function.
+func (x *EditableInterface) SetCallbackDoInsertText(cb func(Editable, string, int, int)) {
+	if cb == nil {
+		x.xDoInsertText = 0
+	} else {
+		x.xDoInsertText = purego.NewCallback(func(EditableVarp uintptr, TextVarp string, LengthVarp int, PositionVarp int) {
+			cb(&EditableBase{Ptr: EditableVarp}, TextVarp, LengthVarp, PositionVarp)
+		})
+	}
+}
+
+// GetCallbackDoInsertText gets the callback function.
+func (x *EditableInterface) GetCallbackDoInsertText() func(Editable, string, int, int) {
+	if x.xDoInsertText == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr, TextVarp string, LengthVarp int, PositionVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDoInsertText)
+	return func(EditableVar Editable, TextVar string, LengthVar int, PositionVar int) {
+		rawCallback(EditableVar.GoPointer(), TextVar, LengthVar, PositionVar)
+	}
+}
+
+// SetCallbackDoDeleteText sets the callback function.
+func (x *EditableInterface) SetCallbackDoDeleteText(cb func(Editable, int, int)) {
+	if cb == nil {
+		x.xDoDeleteText = 0
+	} else {
+		x.xDoDeleteText = purego.NewCallback(func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int) {
+			cb(&EditableBase{Ptr: EditableVarp}, StartPosVarp, EndPosVarp)
+		})
+	}
+}
+
+// GetCallbackDoDeleteText gets the callback function.
+func (x *EditableInterface) GetCallbackDoDeleteText() func(Editable, int, int) {
+	if x.xDoDeleteText == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDoDeleteText)
+	return func(EditableVar Editable, StartPosVar int, EndPosVar int) {
+		rawCallback(EditableVar.GoPointer(), StartPosVar, EndPosVar)
+	}
+}
+
+// SetCallbackGetSelectionBounds sets the callback function.
+func (x *EditableInterface) SetCallbackGetSelectionBounds(cb func(Editable, int, int) bool) {
+	if cb == nil {
+		x.xGetSelectionBounds = 0
+	} else {
+		x.xGetSelectionBounds = purego.NewCallback(func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int) bool {
+			return cb(&EditableBase{Ptr: EditableVarp}, StartPosVarp, EndPosVarp)
+		})
+	}
+}
+
+// GetCallbackGetSelectionBounds gets the callback function.
+func (x *EditableInterface) GetCallbackGetSelectionBounds() func(Editable, int, int) bool {
+	if x.xGetSelectionBounds == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xGetSelectionBounds)
+	return func(EditableVar Editable, StartPosVar int, EndPosVar int) bool {
+		return rawCallback(EditableVar.GoPointer(), StartPosVar, EndPosVar)
+	}
+}
+
+// SetCallbackSetSelectionBounds sets the callback function.
+func (x *EditableInterface) SetCallbackSetSelectionBounds(cb func(Editable, int, int)) {
+	if cb == nil {
+		x.xSetSelectionBounds = 0
+	} else {
+		x.xSetSelectionBounds = purego.NewCallback(func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int) {
+			cb(&EditableBase{Ptr: EditableVarp}, StartPosVarp, EndPosVarp)
+		})
+	}
+}
+
+// GetCallbackSetSelectionBounds gets the callback function.
+func (x *EditableInterface) GetCallbackSetSelectionBounds() func(Editable, int, int) {
+	if x.xSetSelectionBounds == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr, StartPosVarp int, EndPosVarp int)
+	purego.RegisterFunc(&rawCallback, x.xSetSelectionBounds)
+	return func(EditableVar Editable, StartPosVar int, EndPosVar int) {
+		rawCallback(EditableVar.GoPointer(), StartPosVar, EndPosVar)
+	}
+}
+
+// SetCallbackGetDelegate sets the callback function.
+func (x *EditableInterface) SetCallbackGetDelegate(cb func(Editable) *EditableBase) {
+	if cb == nil {
+		x.xGetDelegate = 0
+	} else {
+		x.xGetDelegate = purego.NewCallback(func(EditableVarp uintptr) uintptr {
+			ret := cb(&EditableBase{Ptr: EditableVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetDelegate gets the callback function.
+func (x *EditableInterface) GetCallbackGetDelegate() func(Editable) *EditableBase {
+	if x.xGetDelegate == 0 {
+		return nil
+	}
+	var rawCallback func(EditableVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetDelegate)
+	return func(EditableVar Editable) *EditableBase {
+		rawRet := rawCallback(EditableVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &EditableBase{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // `GtkEditable` is an interface for text editing widgets.
diff --git a/v4/gtk/gtkentry.go b/v4/gtk/gtkentry.go
index f4a7a8184dbb8811258c57e49b3edf05e8e35de8..2685ad5377804690275a80b133f88b6c3a3b6414 100644
--- a/v4/gtk/gtkentry.go
+++ b/v4/gtk/gtkentry.go
@@ -25,13 +25,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *EntryClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *EntryClass) SetCallbackActivate(cb func(*Entry)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(EntryVarp uintptr) {
+			cb(EntryNewFromInternalPtr(EntryVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *EntryClass) GetCallbackActivate() func(*Entry) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(EntryVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(EntryVar *Entry) {
+		rawCallback(EntryVar.GoPointer())
+	}
 }
 
 // Specifies the side of the entry at which an icon is placed.
diff --git a/v4/gtk/gtkentrybuffer.go b/v4/gtk/gtkentrybuffer.go
index 63de850208b62b7f1459c166d1dc81c0a887b09d..749d11a0a82fc27a73bf685a61a60963a1b023e3 100644
--- a/v4/gtk/gtkentrybuffer.go
+++ b/v4/gtk/gtkentrybuffer.go
@@ -17,37 +17,359 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	InsertedText uintptr
+	xInsertedText uintptr
 
-	DeletedText uintptr
+	xDeletedText uintptr
 
-	GetText uintptr
+	xGetText uintptr
 
-	GetLength uintptr
+	xGetLength uintptr
 
-	InsertText uintptr
+	xInsertText uintptr
 
-	DeleteText uintptr
+	xDeleteText uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 
-	GtkReserved5 uintptr
+	xGtkReserved5 uintptr
 
-	GtkReserved6 uintptr
+	xGtkReserved6 uintptr
 
-	GtkReserved7 uintptr
+	xGtkReserved7 uintptr
 
-	GtkReserved8 uintptr
+	xGtkReserved8 uintptr
 }
 
 func (x *EntryBufferClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackInsertedText sets the callback function.
+func (x *EntryBufferClass) SetCallbackInsertedText(cb func(*EntryBuffer, uint, string, uint)) {
+	if cb == nil {
+		x.xInsertedText = 0
+	} else {
+		x.xInsertedText = purego.NewCallback(func(BufferVarp uintptr, PositionVarp uint, CharsVarp string, NCharsVarp uint) {
+			cb(EntryBufferNewFromInternalPtr(BufferVarp), PositionVarp, CharsVarp, NCharsVarp)
+		})
+	}
+}
+
+// GetCallbackInsertedText gets the callback function.
+func (x *EntryBufferClass) GetCallbackInsertedText() func(*EntryBuffer, uint, string, uint) {
+	if x.xInsertedText == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, PositionVarp uint, CharsVarp string, NCharsVarp uint)
+	purego.RegisterFunc(&rawCallback, x.xInsertedText)
+	return func(BufferVar *EntryBuffer, PositionVar uint, CharsVar string, NCharsVar uint) {
+		rawCallback(BufferVar.GoPointer(), PositionVar, CharsVar, NCharsVar)
+	}
+}
+
+// SetCallbackDeletedText sets the callback function.
+func (x *EntryBufferClass) SetCallbackDeletedText(cb func(*EntryBuffer, uint, uint)) {
+	if cb == nil {
+		x.xDeletedText = 0
+	} else {
+		x.xDeletedText = purego.NewCallback(func(BufferVarp uintptr, PositionVarp uint, NCharsVarp uint) {
+			cb(EntryBufferNewFromInternalPtr(BufferVarp), PositionVarp, NCharsVarp)
+		})
+	}
+}
+
+// GetCallbackDeletedText gets the callback function.
+func (x *EntryBufferClass) GetCallbackDeletedText() func(*EntryBuffer, uint, uint) {
+	if x.xDeletedText == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, PositionVarp uint, NCharsVarp uint)
+	purego.RegisterFunc(&rawCallback, x.xDeletedText)
+	return func(BufferVar *EntryBuffer, PositionVar uint, NCharsVar uint) {
+		rawCallback(BufferVar.GoPointer(), PositionVar, NCharsVar)
+	}
+}
+
+// SetCallbackGetText sets the callback function.
+func (x *EntryBufferClass) SetCallbackGetText(cb func(*EntryBuffer, uint) string) {
+	if cb == nil {
+		x.xGetText = 0
+	} else {
+		x.xGetText = purego.NewCallback(func(BufferVarp uintptr, NBytesVarp uint) string {
+			return cb(EntryBufferNewFromInternalPtr(BufferVarp), NBytesVarp)
+		})
+	}
+}
+
+// GetCallbackGetText gets the callback function.
+func (x *EntryBufferClass) GetCallbackGetText() func(*EntryBuffer, uint) string {
+	if x.xGetText == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, NBytesVarp uint) string
+	purego.RegisterFunc(&rawCallback, x.xGetText)
+	return func(BufferVar *EntryBuffer, NBytesVar uint) string {
+		return rawCallback(BufferVar.GoPointer(), NBytesVar)
+	}
+}
+
+// SetCallbackGetLength sets the callback function.
+func (x *EntryBufferClass) SetCallbackGetLength(cb func(*EntryBuffer) uint) {
+	if cb == nil {
+		x.xGetLength = 0
+	} else {
+		x.xGetLength = purego.NewCallback(func(BufferVarp uintptr) uint {
+			return cb(EntryBufferNewFromInternalPtr(BufferVarp))
+		})
+	}
+}
+
+// GetCallbackGetLength gets the callback function.
+func (x *EntryBufferClass) GetCallbackGetLength() func(*EntryBuffer) uint {
+	if x.xGetLength == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr) uint
+	purego.RegisterFunc(&rawCallback, x.xGetLength)
+	return func(BufferVar *EntryBuffer) uint {
+		return rawCallback(BufferVar.GoPointer())
+	}
+}
+
+// SetCallbackInsertText sets the callback function.
+func (x *EntryBufferClass) SetCallbackInsertText(cb func(*EntryBuffer, uint, string, uint) uint) {
+	if cb == nil {
+		x.xInsertText = 0
+	} else {
+		x.xInsertText = purego.NewCallback(func(BufferVarp uintptr, PositionVarp uint, CharsVarp string, NCharsVarp uint) uint {
+			return cb(EntryBufferNewFromInternalPtr(BufferVarp), PositionVarp, CharsVarp, NCharsVarp)
+		})
+	}
+}
+
+// GetCallbackInsertText gets the callback function.
+func (x *EntryBufferClass) GetCallbackInsertText() func(*EntryBuffer, uint, string, uint) uint {
+	if x.xInsertText == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, PositionVarp uint, CharsVarp string, NCharsVarp uint) uint
+	purego.RegisterFunc(&rawCallback, x.xInsertText)
+	return func(BufferVar *EntryBuffer, PositionVar uint, CharsVar string, NCharsVar uint) uint {
+		return rawCallback(BufferVar.GoPointer(), PositionVar, CharsVar, NCharsVar)
+	}
+}
+
+// SetCallbackDeleteText sets the callback function.
+func (x *EntryBufferClass) SetCallbackDeleteText(cb func(*EntryBuffer, uint, uint) uint) {
+	if cb == nil {
+		x.xDeleteText = 0
+	} else {
+		x.xDeleteText = purego.NewCallback(func(BufferVarp uintptr, PositionVarp uint, NCharsVarp uint) uint {
+			return cb(EntryBufferNewFromInternalPtr(BufferVarp), PositionVarp, NCharsVarp)
+		})
+	}
+}
+
+// GetCallbackDeleteText gets the callback function.
+func (x *EntryBufferClass) GetCallbackDeleteText() func(*EntryBuffer, uint, uint) uint {
+	if x.xDeleteText == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, PositionVarp uint, NCharsVarp uint) uint
+	purego.RegisterFunc(&rawCallback, x.xDeleteText)
+	return func(BufferVar *EntryBuffer, PositionVar uint, NCharsVar uint) uint {
+		return rawCallback(BufferVar.GoPointer(), PositionVar, NCharsVar)
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved5 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved5(cb func()) {
+	if cb == nil {
+		x.xGtkReserved5 = 0
+	} else {
+		x.xGtkReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved5 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved5() func() {
+	if x.xGtkReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved6 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved6(cb func()) {
+	if cb == nil {
+		x.xGtkReserved6 = 0
+	} else {
+		x.xGtkReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved6 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved6() func() {
+	if x.xGtkReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved7 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved7(cb func()) {
+	if cb == nil {
+		x.xGtkReserved7 = 0
+	} else {
+		x.xGtkReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved7 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved7() func() {
+	if x.xGtkReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved8 sets the callback function.
+func (x *EntryBufferClass) SetCallbackGtkReserved8(cb func()) {
+	if cb == nil {
+		x.xGtkReserved8 = 0
+	} else {
+		x.xGtkReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved8 gets the callback function.
+func (x *EntryBufferClass) GetCallbackGtkReserved8() func() {
+	if x.xGtkReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved8)
+	return func() {
+		rawCallback()
+	}
 }
 
 // A `GtkEntryBuffer` hold the text displayed in a `GtkText` widget.
diff --git a/v4/gtk/gtkfilechooser.go b/v4/gtk/gtkfilechooser.go
index 4f98eef956e09e4aac1e8f221532e6a3de7ded7a..c815022358b4b3e91d975aed97d044e7ce166ca1 100644
--- a/v4/gtk/gtkfilechooser.go
+++ b/v4/gtk/gtkfilechooser.go
@@ -55,7 +55,7 @@ 	GoPointer() uintptr
 	SetGoPointer(uintptr)
 	AddChoice(IdVar string, LabelVar string, OptionsVar []string, OptionLabelsVar []string)
 	AddFilter(FilterVar *FileFilter)
-	AddShortcutFolder(FolderVar gio.File) bool
+	AddShortcutFolder(FolderVar gio.File) (bool, error)
 	GetAction() FileChooserAction
 	GetChoice(IdVar string) string
 	GetCreateFolders() bool
@@ -69,13 +69,13 @@ 	GetSelectMultiple() bool
 	GetShortcutFolders() *gio.ListModelBase
 	RemoveChoice(IdVar string)
 	RemoveFilter(FilterVar *FileFilter)
-	RemoveShortcutFolder(FolderVar gio.File) bool
+	RemoveShortcutFolder(FolderVar gio.File) (bool, error)
 	SetAction(ActionVar FileChooserAction)
 	SetChoice(IdVar string, OptionVar string)
 	SetCreateFolders(CreateFoldersVar bool)
-	SetCurrentFolder(FileVar gio.File) bool
+	SetCurrentFolder(FileVar gio.File) (bool, error)
 	SetCurrentName(NameVar string)
-	SetFile(FileVar gio.File) bool
+	SetFile(FileVar gio.File) (bool, error)
 	SetFilter(FilterVar *FileFilter)
 	SetSelectMultiple(SelectMultipleVar bool)
 }
diff --git a/v4/gtk/gtkfilter.go b/v4/gtk/gtkfilter.go
index 6826148e70e646d445533e38bdccaf36d0c78ef0..3a7e874addba4c65f7303b53d47b30b6e77209b3 100644
--- a/v4/gtk/gtkfilter.go
+++ b/v4/gtk/gtkfilter.go
@@ -17,29 +17,259 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Match uintptr
+	xMatch uintptr
 
-	GetStrictness uintptr
+	xGetStrictness uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 
-	GtkReserved5 uintptr
+	xGtkReserved5 uintptr
 
-	GtkReserved6 uintptr
+	xGtkReserved6 uintptr
 
-	GtkReserved7 uintptr
+	xGtkReserved7 uintptr
 
-	GtkReserved8 uintptr
+	xGtkReserved8 uintptr
 }
 
 func (x *FilterClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackMatch sets the callback function.
+func (x *FilterClass) SetCallbackMatch(cb func(*Filter, *gobject.Object) bool) {
+	if cb == nil {
+		x.xMatch = 0
+	} else {
+		x.xMatch = purego.NewCallback(func(SelfVarp uintptr, ItemVarp uintptr) bool {
+			return cb(FilterNewFromInternalPtr(SelfVarp), gobject.ObjectNewFromInternalPtr(ItemVarp))
+		})
+	}
+}
+
+// GetCallbackMatch gets the callback function.
+func (x *FilterClass) GetCallbackMatch() func(*Filter, *gobject.Object) bool {
+	if x.xMatch == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ItemVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xMatch)
+	return func(SelfVar *Filter, ItemVar *gobject.Object) bool {
+		return rawCallback(SelfVar.GoPointer(), ItemVar.GoPointer())
+	}
+}
+
+// SetCallbackGetStrictness sets the callback function.
+func (x *FilterClass) SetCallbackGetStrictness(cb func(*Filter) FilterMatch) {
+	if cb == nil {
+		x.xGetStrictness = 0
+	} else {
+		x.xGetStrictness = purego.NewCallback(func(SelfVarp uintptr) FilterMatch {
+			return cb(FilterNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackGetStrictness gets the callback function.
+func (x *FilterClass) GetCallbackGetStrictness() func(*Filter) FilterMatch {
+	if x.xGetStrictness == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr) FilterMatch
+	purego.RegisterFunc(&rawCallback, x.xGetStrictness)
+	return func(SelfVar *Filter) FilterMatch {
+		return rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved5 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved5(cb func()) {
+	if cb == nil {
+		x.xGtkReserved5 = 0
+	} else {
+		x.xGtkReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved5 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved5() func() {
+	if x.xGtkReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved6 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved6(cb func()) {
+	if cb == nil {
+		x.xGtkReserved6 = 0
+	} else {
+		x.xGtkReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved6 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved6() func() {
+	if x.xGtkReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved7 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved7(cb func()) {
+	if cb == nil {
+		x.xGtkReserved7 = 0
+	} else {
+		x.xGtkReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved7 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved7() func() {
+	if x.xGtkReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved8 sets the callback function.
+func (x *FilterClass) SetCallbackGtkReserved8(cb func()) {
+	if cb == nil {
+		x.xGtkReserved8 = 0
+	} else {
+		x.xGtkReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved8 gets the callback function.
+func (x *FilterClass) GetCallbackGtkReserved8() func() {
+	if x.xGtkReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved8)
+	return func() {
+		rawCallback()
+	}
 }
 
 // Describes changes in a filter in more detail and allows objects
diff --git a/v4/gtk/gtkflowbox.go b/v4/gtk/gtkflowbox.go
index 9f611fa57c8fedb7cff8875c95a203e1c338ad73..34fde3b6c325b848ddc524df8e7db8ce658a35ea 100644
--- a/v4/gtk/gtkflowbox.go
+++ b/v4/gtk/gtkflowbox.go
@@ -38,13 +38,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *FlowBoxChildClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *FlowBoxChildClass) SetCallbackActivate(cb func(*FlowBoxChild)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(ChildVarp uintptr) {
+			cb(FlowBoxChildNewFromInternalPtr(ChildVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *FlowBoxChildClass) GetCallbackActivate() func(*FlowBoxChild) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(ChildVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(ChildVar *FlowBoxChild) {
+		rawCallback(ChildVar.GoPointer())
+	}
 }
 
 // A `GtkFlowBox` puts child widgets in reflowing grid.
diff --git a/v4/gtk/gtkfontchooser.go b/v4/gtk/gtkfontchooser.go
index b2cd1ce56e144df83134b9546d86747bad783427..b57a1c073793d340cff29dffab0aa38277200286 100644
--- a/v4/gtk/gtkfontchooser.go
+++ b/v4/gtk/gtkfontchooser.go
@@ -24,25 +24,216 @@ 	_ structs.HostLayout
 
 	BaseIface uintptr
 
-	GetFontFamily uintptr
+	xGetFontFamily uintptr
 
-	GetFontFace uintptr
+	xGetFontFace uintptr
 
-	GetFontSize uintptr
+	xGetFontSize uintptr
 
-	SetFilterFunc uintptr
+	xSetFilterFunc uintptr
 
-	FontActivated uintptr
+	xFontActivated uintptr
 
-	SetFontMap uintptr
+	xSetFontMap uintptr
 
-	GetFontMap uintptr
+	xGetFontMap uintptr
 
 	Padding [10]uintptr
 }
 
 func (x *FontChooserIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetFontFamily sets the callback function.
+func (x *FontChooserIface) SetCallbackGetFontFamily(cb func(FontChooser) *pango.FontFamily) {
+	if cb == nil {
+		x.xGetFontFamily = 0
+	} else {
+		x.xGetFontFamily = purego.NewCallback(func(FontchooserVarp uintptr) uintptr {
+			ret := cb(&FontChooserBase{Ptr: FontchooserVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFontFamily gets the callback function.
+func (x *FontChooserIface) GetCallbackGetFontFamily() func(FontChooser) *pango.FontFamily {
+	if x.xGetFontFamily == 0 {
+		return nil
+	}
+	var rawCallback func(FontchooserVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFontFamily)
+	return func(FontchooserVar FontChooser) *pango.FontFamily {
+		rawRet := rawCallback(FontchooserVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &pango.FontFamily{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetFontFace sets the callback function.
+func (x *FontChooserIface) SetCallbackGetFontFace(cb func(FontChooser) *pango.FontFace) {
+	if cb == nil {
+		x.xGetFontFace = 0
+	} else {
+		x.xGetFontFace = purego.NewCallback(func(FontchooserVarp uintptr) uintptr {
+			ret := cb(&FontChooserBase{Ptr: FontchooserVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFontFace gets the callback function.
+func (x *FontChooserIface) GetCallbackGetFontFace() func(FontChooser) *pango.FontFace {
+	if x.xGetFontFace == 0 {
+		return nil
+	}
+	var rawCallback func(FontchooserVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFontFace)
+	return func(FontchooserVar FontChooser) *pango.FontFace {
+		rawRet := rawCallback(FontchooserVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &pango.FontFace{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetFontSize sets the callback function.
+func (x *FontChooserIface) SetCallbackGetFontSize(cb func(FontChooser) int) {
+	if cb == nil {
+		x.xGetFontSize = 0
+	} else {
+		x.xGetFontSize = purego.NewCallback(func(FontchooserVarp uintptr) int {
+			return cb(&FontChooserBase{Ptr: FontchooserVarp})
+		})
+	}
+}
+
+// GetCallbackGetFontSize gets the callback function.
+func (x *FontChooserIface) GetCallbackGetFontSize() func(FontChooser) int {
+	if x.xGetFontSize == 0 {
+		return nil
+	}
+	var rawCallback func(FontchooserVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetFontSize)
+	return func(FontchooserVar FontChooser) int {
+		return rawCallback(FontchooserVar.GoPointer())
+	}
+}
+
+// SetCallbackSetFilterFunc sets the callback function.
+func (x *FontChooserIface) SetCallbackSetFilterFunc(cb func(FontChooser, *FontFilterFunc, uintptr, *glib.DestroyNotify)) {
+	if cb == nil {
+		x.xSetFilterFunc = 0
+	} else {
+		x.xSetFilterFunc = purego.NewCallback(func(FontchooserVarp uintptr, FilterVarp uintptr, UserDataVarp uintptr, DestroyVarp uintptr) {
+			cb(&FontChooserBase{Ptr: FontchooserVarp}, (*FontFilterFunc)(unsafe.Pointer(FilterVarp)), UserDataVarp, (*glib.DestroyNotify)(unsafe.Pointer(DestroyVarp)))
+		})
+	}
+}
+
+// GetCallbackSetFilterFunc gets the callback function.
+func (x *FontChooserIface) GetCallbackSetFilterFunc() func(FontChooser, *FontFilterFunc, uintptr, *glib.DestroyNotify) {
+	if x.xSetFilterFunc == 0 {
+		return nil
+	}
+	var rawCallback func(FontchooserVarp uintptr, FilterVarp uintptr, UserDataVarp uintptr, DestroyVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetFilterFunc)
+	return func(FontchooserVar FontChooser, FilterVar *FontFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
+		rawCallback(FontchooserVar.GoPointer(), glib.NewCallbackNullable(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))
+	}
+}
+
+// SetCallbackFontActivated sets the callback function.
+func (x *FontChooserIface) SetCallbackFontActivated(cb func(FontChooser, string)) {
+	if cb == nil {
+		x.xFontActivated = 0
+	} else {
+		x.xFontActivated = purego.NewCallback(func(ChooserVarp uintptr, FontnameVarp string) {
+			cb(&FontChooserBase{Ptr: ChooserVarp}, FontnameVarp)
+		})
+	}
+}
+
+// GetCallbackFontActivated gets the callback function.
+func (x *FontChooserIface) GetCallbackFontActivated() func(FontChooser, string) {
+	if x.xFontActivated == 0 {
+		return nil
+	}
+	var rawCallback func(ChooserVarp uintptr, FontnameVarp string)
+	purego.RegisterFunc(&rawCallback, x.xFontActivated)
+	return func(ChooserVar FontChooser, FontnameVar string) {
+		rawCallback(ChooserVar.GoPointer(), FontnameVar)
+	}
+}
+
+// SetCallbackSetFontMap sets the callback function.
+func (x *FontChooserIface) SetCallbackSetFontMap(cb func(FontChooser, *pango.FontMap)) {
+	if cb == nil {
+		x.xSetFontMap = 0
+	} else {
+		x.xSetFontMap = purego.NewCallback(func(FontchooserVarp uintptr, FontmapVarp uintptr) {
+			cb(&FontChooserBase{Ptr: FontchooserVarp}, pango.FontMapNewFromInternalPtr(FontmapVarp))
+		})
+	}
+}
+
+// GetCallbackSetFontMap gets the callback function.
+func (x *FontChooserIface) GetCallbackSetFontMap() func(FontChooser, *pango.FontMap) {
+	if x.xSetFontMap == 0 {
+		return nil
+	}
+	var rawCallback func(FontchooserVarp uintptr, FontmapVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetFontMap)
+	return func(FontchooserVar FontChooser, FontmapVar *pango.FontMap) {
+		rawCallback(FontchooserVar.GoPointer(), FontmapVar.GoPointer())
+	}
+}
+
+// SetCallbackGetFontMap sets the callback function.
+func (x *FontChooserIface) SetCallbackGetFontMap(cb func(FontChooser) *pango.FontMap) {
+	if cb == nil {
+		x.xGetFontMap = 0
+	} else {
+		x.xGetFontMap = purego.NewCallback(func(FontchooserVarp uintptr) uintptr {
+			ret := cb(&FontChooserBase{Ptr: FontchooserVarp})
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFontMap gets the callback function.
+func (x *FontChooserIface) GetCallbackGetFontMap() func(FontChooser) *pango.FontMap {
+	if x.xGetFontMap == 0 {
+		return nil
+	}
+	var rawCallback func(FontchooserVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFontMap)
+	return func(FontchooserVar FontChooser) *pango.FontMap {
+		rawRet := rawCallback(FontchooserVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &pango.FontMap{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // `GtkFontChooser` is an interface that can be implemented by widgets
diff --git a/v4/gtk/gtkframe.go b/v4/gtk/gtkframe.go
index 0e33585470f1d2278cea0ad10cb40637832acb4d..277ac9a8bbcc759c2a9f045ddb6c10b1fa1871a3 100644
--- a/v4/gtk/gtkframe.go
+++ b/v4/gtk/gtkframe.go
@@ -16,13 +16,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ComputeChildAllocation uintptr
+	xComputeChildAllocation uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *FrameClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackComputeChildAllocation sets the callback function.
+func (x *FrameClass) SetCallbackComputeChildAllocation(cb func(*Frame, *Allocation)) {
+	if cb == nil {
+		x.xComputeChildAllocation = 0
+	} else {
+		x.xComputeChildAllocation = purego.NewCallback(func(FrameVarp uintptr, AllocationVarp *Allocation) {
+			cb(FrameNewFromInternalPtr(FrameVarp), AllocationVarp)
+		})
+	}
+}
+
+// GetCallbackComputeChildAllocation gets the callback function.
+func (x *FrameClass) GetCallbackComputeChildAllocation() func(*Frame, *Allocation) {
+	if x.xComputeChildAllocation == 0 {
+		return nil
+	}
+	var rawCallback func(FrameVarp uintptr, AllocationVarp *Allocation)
+	purego.RegisterFunc(&rawCallback, x.xComputeChildAllocation)
+	return func(FrameVar *Frame, AllocationVar *Allocation) {
+		rawCallback(FrameVar.GoPointer(), AllocationVar)
+	}
 }
 
 // `GtkFrame` is a widget that surrounds its child with a decorative
diff --git a/v4/gtk/gtkglarea.go b/v4/gtk/gtkglarea.go
index 30681f396b9e2477589fb0d53621d8aa77a7c3dd..0d8abb08d7c0121c2791dce117138b495367da54 100644
--- a/v4/gtk/gtkglarea.go
+++ b/v4/gtk/gtkglarea.go
@@ -19,17 +19,96 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Render uintptr
+	xRender uintptr
 
-	Resize uintptr
+	xResize uintptr
 
-	CreateContext uintptr
+	xCreateContext uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *GLAreaClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackRender sets the callback function.
+func (x *GLAreaClass) SetCallbackRender(cb func(*GLArea, *gdk.GLContext) bool) {
+	if cb == nil {
+		x.xRender = 0
+	} else {
+		x.xRender = purego.NewCallback(func(AreaVarp uintptr, ContextVarp uintptr) bool {
+			return cb(GLAreaNewFromInternalPtr(AreaVarp), gdk.GLContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackRender gets the callback function.
+func (x *GLAreaClass) GetCallbackRender() func(*GLArea, *gdk.GLContext) bool {
+	if x.xRender == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, ContextVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xRender)
+	return func(AreaVar *GLArea, ContextVar *gdk.GLContext) bool {
+		return rawCallback(AreaVar.GoPointer(), ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackResize sets the callback function.
+func (x *GLAreaClass) SetCallbackResize(cb func(*GLArea, int, int)) {
+	if cb == nil {
+		x.xResize = 0
+	} else {
+		x.xResize = purego.NewCallback(func(AreaVarp uintptr, WidthVarp int, HeightVarp int) {
+			cb(GLAreaNewFromInternalPtr(AreaVarp), WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackResize gets the callback function.
+func (x *GLAreaClass) GetCallbackResize() func(*GLArea, int, int) {
+	if x.xResize == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xResize)
+	return func(AreaVar *GLArea, WidthVar int, HeightVar int) {
+		rawCallback(AreaVar.GoPointer(), WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackCreateContext sets the callback function.
+func (x *GLAreaClass) SetCallbackCreateContext(cb func(*GLArea) *gdk.GLContext) {
+	if cb == nil {
+		x.xCreateContext = 0
+	} else {
+		x.xCreateContext = purego.NewCallback(func(AreaVarp uintptr) uintptr {
+			ret := cb(GLAreaNewFromInternalPtr(AreaVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateContext gets the callback function.
+func (x *GLAreaClass) GetCallbackCreateContext() func(*GLArea) *gdk.GLContext {
+	if x.xCreateContext == 0 {
+		return nil
+	}
+	var rawCallback func(AreaVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateContext)
+	return func(AreaVar *GLArea) *gdk.GLContext {
+		rawRet := rawCallback(AreaVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &gdk.GLContext{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // `GtkGLArea` is a widget that allows drawing with OpenGL.
diff --git a/v4/gtk/gtkiconview.go b/v4/gtk/gtkiconview.go
index ac02fb46bb8a9c14782a3cace767daeef1f8ca02..4d6a93d71941d36398d0666c36a3a7038d90fa1e 100644
--- a/v4/gtk/gtkiconview.go
+++ b/v4/gtk/gtkiconview.go
@@ -210,7 +210,7 @@ 	cret := xIconViewGetColumns(x.GoPointer())
 	return cret
 }
 
-var xIconViewGetCursor func(uintptr, **TreePath, *uintptr) bool
+var xIconViewGetCursor func(uintptr, **TreePath, uintptr) bool
 
 // Fills in @path and @cell with the current cursor path and cell.
 // If the cursor isn’t currently set, then *@path will be %NULL.
@@ -219,7 +219,7 @@ //
 // The returned `GtkTreePath` must be freed with gtk_tree_path_free().
 func (x *IconView) GetCursor(PathVar **TreePath, CellVar **CellRenderer) bool {
 
-	cret := xIconViewGetCursor(x.GoPointer(), PathVar, gobject.ConvertPtr(CellVar))
+	cret := xIconViewGetCursor(x.GoPointer(), PathVar, *gobject.ConvertPtr(CellVar))
 	return cret
 }
 
@@ -241,12 +241,12 @@ 	xIconViewGetDragDestItem(x.GoPointer(), PathVar, PosVar)
 
 }
 
-var xIconViewGetItemAtPos func(uintptr, int, int, **TreePath, *uintptr) bool
+var xIconViewGetItemAtPos func(uintptr, int, int, **TreePath, uintptr) bool
 
 // Gets the path and cell for the icon at the given position.
 func (x *IconView) GetItemAtPos(XVar int, YVar int, PathVar **TreePath, CellVar **CellRenderer) bool {
 
-	cret := xIconViewGetItemAtPos(x.GoPointer(), XVar, YVar, PathVar, gobject.ConvertPtr(CellVar))
+	cret := xIconViewGetItemAtPos(x.GoPointer(), XVar, YVar, PathVar, *gobject.ConvertPtr(CellVar))
 	return cret
 }
 
diff --git a/v4/gtk/gtkimcontext.go b/v4/gtk/gtkimcontext.go
index d47a92abad438829670ec755e3669ffe66f4b6e1..806943f9b0da5b4cfac71219677894ed7fa2defa 100644
--- a/v4/gtk/gtkimcontext.go
+++ b/v4/gtk/gtkimcontext.go
@@ -19,55 +19,584 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	PreeditStart uintptr
+	xPreeditStart uintptr
 
-	PreeditEnd uintptr
+	xPreeditEnd uintptr
 
-	PreeditChanged uintptr
+	xPreeditChanged uintptr
 
-	Commit uintptr
+	xCommit uintptr
 
-	RetrieveSurrounding uintptr
+	xRetrieveSurrounding uintptr
 
-	DeleteSurrounding uintptr
+	xDeleteSurrounding uintptr
 
-	SetClientWidget uintptr
+	xSetClientWidget uintptr
 
-	GetPreeditString uintptr
+	xGetPreeditString uintptr
 
-	FilterKeypress uintptr
+	xFilterKeypress uintptr
 
-	FocusIn uintptr
+	xFocusIn uintptr
 
-	FocusOut uintptr
+	xFocusOut uintptr
 
-	Reset uintptr
+	xReset uintptr
 
-	SetCursorLocation uintptr
+	xSetCursorLocation uintptr
 
-	SetUsePreedit uintptr
+	xSetUsePreedit uintptr
 
-	SetSurrounding uintptr
+	xSetSurrounding uintptr
 
-	GetSurrounding uintptr
+	xGetSurrounding uintptr
 
-	SetSurroundingWithSelection uintptr
+	xSetSurroundingWithSelection uintptr
 
-	GetSurroundingWithSelection uintptr
+	xGetSurroundingWithSelection uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 
-	GtkReserved5 uintptr
+	xGtkReserved5 uintptr
 }
 
 func (x *IMContextClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackPreeditStart sets the callback function.
+func (x *IMContextClass) SetCallbackPreeditStart(cb func(*IMContext)) {
+	if cb == nil {
+		x.xPreeditStart = 0
+	} else {
+		x.xPreeditStart = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(IMContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackPreeditStart gets the callback function.
+func (x *IMContextClass) GetCallbackPreeditStart() func(*IMContext) {
+	if x.xPreeditStart == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPreeditStart)
+	return func(ContextVar *IMContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackPreeditEnd sets the callback function.
+func (x *IMContextClass) SetCallbackPreeditEnd(cb func(*IMContext)) {
+	if cb == nil {
+		x.xPreeditEnd = 0
+	} else {
+		x.xPreeditEnd = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(IMContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackPreeditEnd gets the callback function.
+func (x *IMContextClass) GetCallbackPreeditEnd() func(*IMContext) {
+	if x.xPreeditEnd == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPreeditEnd)
+	return func(ContextVar *IMContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackPreeditChanged sets the callback function.
+func (x *IMContextClass) SetCallbackPreeditChanged(cb func(*IMContext)) {
+	if cb == nil {
+		x.xPreeditChanged = 0
+	} else {
+		x.xPreeditChanged = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(IMContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackPreeditChanged gets the callback function.
+func (x *IMContextClass) GetCallbackPreeditChanged() func(*IMContext) {
+	if x.xPreeditChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPreeditChanged)
+	return func(ContextVar *IMContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackCommit sets the callback function.
+func (x *IMContextClass) SetCallbackCommit(cb func(*IMContext, string)) {
+	if cb == nil {
+		x.xCommit = 0
+	} else {
+		x.xCommit = purego.NewCallback(func(ContextVarp uintptr, StrVarp string) {
+			cb(IMContextNewFromInternalPtr(ContextVarp), StrVarp)
+		})
+	}
+}
+
+// GetCallbackCommit gets the callback function.
+func (x *IMContextClass) GetCallbackCommit() func(*IMContext, string) {
+	if x.xCommit == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, StrVarp string)
+	purego.RegisterFunc(&rawCallback, x.xCommit)
+	return func(ContextVar *IMContext, StrVar string) {
+		rawCallback(ContextVar.GoPointer(), StrVar)
+	}
+}
+
+// SetCallbackRetrieveSurrounding sets the callback function.
+func (x *IMContextClass) SetCallbackRetrieveSurrounding(cb func(*IMContext) bool) {
+	if cb == nil {
+		x.xRetrieveSurrounding = 0
+	} else {
+		x.xRetrieveSurrounding = purego.NewCallback(func(ContextVarp uintptr) bool {
+			return cb(IMContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackRetrieveSurrounding gets the callback function.
+func (x *IMContextClass) GetCallbackRetrieveSurrounding() func(*IMContext) bool {
+	if x.xRetrieveSurrounding == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xRetrieveSurrounding)
+	return func(ContextVar *IMContext) bool {
+		return rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackDeleteSurrounding sets the callback function.
+func (x *IMContextClass) SetCallbackDeleteSurrounding(cb func(*IMContext, int, int) bool) {
+	if cb == nil {
+		x.xDeleteSurrounding = 0
+	} else {
+		x.xDeleteSurrounding = purego.NewCallback(func(ContextVarp uintptr, OffsetVarp int, NCharsVarp int) bool {
+			return cb(IMContextNewFromInternalPtr(ContextVarp), OffsetVarp, NCharsVarp)
+		})
+	}
+}
+
+// GetCallbackDeleteSurrounding gets the callback function.
+func (x *IMContextClass) GetCallbackDeleteSurrounding() func(*IMContext, int, int) bool {
+	if x.xDeleteSurrounding == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, OffsetVarp int, NCharsVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xDeleteSurrounding)
+	return func(ContextVar *IMContext, OffsetVar int, NCharsVar int) bool {
+		return rawCallback(ContextVar.GoPointer(), OffsetVar, NCharsVar)
+	}
+}
+
+// SetCallbackSetClientWidget sets the callback function.
+func (x *IMContextClass) SetCallbackSetClientWidget(cb func(*IMContext, *Widget)) {
+	if cb == nil {
+		x.xSetClientWidget = 0
+	} else {
+		x.xSetClientWidget = purego.NewCallback(func(ContextVarp uintptr, WidgetVarp uintptr) {
+			cb(IMContextNewFromInternalPtr(ContextVarp), WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackSetClientWidget gets the callback function.
+func (x *IMContextClass) GetCallbackSetClientWidget() func(*IMContext, *Widget) {
+	if x.xSetClientWidget == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetClientWidget)
+	return func(ContextVar *IMContext, WidgetVar *Widget) {
+		rawCallback(ContextVar.GoPointer(), WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackGetPreeditString sets the callback function.
+func (x *IMContextClass) SetCallbackGetPreeditString(cb func(*IMContext, string, **pango.AttrList, int)) {
+	if cb == nil {
+		x.xGetPreeditString = 0
+	} else {
+		x.xGetPreeditString = purego.NewCallback(func(ContextVarp uintptr, StrVarp string, AttrsVarp **pango.AttrList, CursorPosVarp int) {
+			cb(IMContextNewFromInternalPtr(ContextVarp), StrVarp, AttrsVarp, CursorPosVarp)
+		})
+	}
+}
+
+// GetCallbackGetPreeditString gets the callback function.
+func (x *IMContextClass) GetCallbackGetPreeditString() func(*IMContext, string, **pango.AttrList, int) {
+	if x.xGetPreeditString == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, StrVarp string, AttrsVarp **pango.AttrList, CursorPosVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetPreeditString)
+	return func(ContextVar *IMContext, StrVar string, AttrsVar **pango.AttrList, CursorPosVar int) {
+		rawCallback(ContextVar.GoPointer(), StrVar, AttrsVar, CursorPosVar)
+	}
+}
+
+// SetCallbackFilterKeypress sets the callback function.
+func (x *IMContextClass) SetCallbackFilterKeypress(cb func(*IMContext, *gdk.Event) bool) {
+	if cb == nil {
+		x.xFilterKeypress = 0
+	} else {
+		x.xFilterKeypress = purego.NewCallback(func(ContextVarp uintptr, EventVarp uintptr) bool {
+			return cb(IMContextNewFromInternalPtr(ContextVarp), gdk.EventNewFromInternalPtr(EventVarp))
+		})
+	}
+}
+
+// GetCallbackFilterKeypress gets the callback function.
+func (x *IMContextClass) GetCallbackFilterKeypress() func(*IMContext, *gdk.Event) bool {
+	if x.xFilterKeypress == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, EventVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xFilterKeypress)
+	return func(ContextVar *IMContext, EventVar *gdk.Event) bool {
+		return rawCallback(ContextVar.GoPointer(), EventVar.GoPointer())
+	}
+}
+
+// SetCallbackFocusIn sets the callback function.
+func (x *IMContextClass) SetCallbackFocusIn(cb func(*IMContext)) {
+	if cb == nil {
+		x.xFocusIn = 0
+	} else {
+		x.xFocusIn = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(IMContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackFocusIn gets the callback function.
+func (x *IMContextClass) GetCallbackFocusIn() func(*IMContext) {
+	if x.xFocusIn == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFocusIn)
+	return func(ContextVar *IMContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackFocusOut sets the callback function.
+func (x *IMContextClass) SetCallbackFocusOut(cb func(*IMContext)) {
+	if cb == nil {
+		x.xFocusOut = 0
+	} else {
+		x.xFocusOut = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(IMContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackFocusOut gets the callback function.
+func (x *IMContextClass) GetCallbackFocusOut() func(*IMContext) {
+	if x.xFocusOut == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xFocusOut)
+	return func(ContextVar *IMContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackReset sets the callback function.
+func (x *IMContextClass) SetCallbackReset(cb func(*IMContext)) {
+	if cb == nil {
+		x.xReset = 0
+	} else {
+		x.xReset = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(IMContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackReset gets the callback function.
+func (x *IMContextClass) GetCallbackReset() func(*IMContext) {
+	if x.xReset == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReset)
+	return func(ContextVar *IMContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackSetCursorLocation sets the callback function.
+func (x *IMContextClass) SetCallbackSetCursorLocation(cb func(*IMContext, *gdk.Rectangle)) {
+	if cb == nil {
+		x.xSetCursorLocation = 0
+	} else {
+		x.xSetCursorLocation = purego.NewCallback(func(ContextVarp uintptr, AreaVarp *gdk.Rectangle) {
+			cb(IMContextNewFromInternalPtr(ContextVarp), AreaVarp)
+		})
+	}
+}
+
+// GetCallbackSetCursorLocation gets the callback function.
+func (x *IMContextClass) GetCallbackSetCursorLocation() func(*IMContext, *gdk.Rectangle) {
+	if x.xSetCursorLocation == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, AreaVarp *gdk.Rectangle)
+	purego.RegisterFunc(&rawCallback, x.xSetCursorLocation)
+	return func(ContextVar *IMContext, AreaVar *gdk.Rectangle) {
+		rawCallback(ContextVar.GoPointer(), AreaVar)
+	}
+}
+
+// SetCallbackSetUsePreedit sets the callback function.
+func (x *IMContextClass) SetCallbackSetUsePreedit(cb func(*IMContext, bool)) {
+	if cb == nil {
+		x.xSetUsePreedit = 0
+	} else {
+		x.xSetUsePreedit = purego.NewCallback(func(ContextVarp uintptr, UsePreeditVarp bool) {
+			cb(IMContextNewFromInternalPtr(ContextVarp), UsePreeditVarp)
+		})
+	}
+}
+
+// GetCallbackSetUsePreedit gets the callback function.
+func (x *IMContextClass) GetCallbackSetUsePreedit() func(*IMContext, bool) {
+	if x.xSetUsePreedit == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, UsePreeditVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xSetUsePreedit)
+	return func(ContextVar *IMContext, UsePreeditVar bool) {
+		rawCallback(ContextVar.GoPointer(), UsePreeditVar)
+	}
+}
+
+// SetCallbackSetSurrounding sets the callback function.
+func (x *IMContextClass) SetCallbackSetSurrounding(cb func(*IMContext, string, int, int)) {
+	if cb == nil {
+		x.xSetSurrounding = 0
+	} else {
+		x.xSetSurrounding = purego.NewCallback(func(ContextVarp uintptr, TextVarp string, LenVarp int, CursorIndexVarp int) {
+			cb(IMContextNewFromInternalPtr(ContextVarp), TextVarp, LenVarp, CursorIndexVarp)
+		})
+	}
+}
+
+// GetCallbackSetSurrounding gets the callback function.
+func (x *IMContextClass) GetCallbackSetSurrounding() func(*IMContext, string, int, int) {
+	if x.xSetSurrounding == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, TextVarp string, LenVarp int, CursorIndexVarp int)
+	purego.RegisterFunc(&rawCallback, x.xSetSurrounding)
+	return func(ContextVar *IMContext, TextVar string, LenVar int, CursorIndexVar int) {
+		rawCallback(ContextVar.GoPointer(), TextVar, LenVar, CursorIndexVar)
+	}
+}
+
+// SetCallbackGetSurrounding sets the callback function.
+func (x *IMContextClass) SetCallbackGetSurrounding(cb func(*IMContext, string, int) bool) {
+	if cb == nil {
+		x.xGetSurrounding = 0
+	} else {
+		x.xGetSurrounding = purego.NewCallback(func(ContextVarp uintptr, TextVarp string, CursorIndexVarp int) bool {
+			return cb(IMContextNewFromInternalPtr(ContextVarp), TextVarp, CursorIndexVarp)
+		})
+	}
+}
+
+// GetCallbackGetSurrounding gets the callback function.
+func (x *IMContextClass) GetCallbackGetSurrounding() func(*IMContext, string, int) bool {
+	if x.xGetSurrounding == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, TextVarp string, CursorIndexVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xGetSurrounding)
+	return func(ContextVar *IMContext, TextVar string, CursorIndexVar int) bool {
+		return rawCallback(ContextVar.GoPointer(), TextVar, CursorIndexVar)
+	}
+}
+
+// SetCallbackSetSurroundingWithSelection sets the callback function.
+func (x *IMContextClass) SetCallbackSetSurroundingWithSelection(cb func(*IMContext, string, int, int, int)) {
+	if cb == nil {
+		x.xSetSurroundingWithSelection = 0
+	} else {
+		x.xSetSurroundingWithSelection = purego.NewCallback(func(ContextVarp uintptr, TextVarp string, LenVarp int, CursorIndexVarp int, AnchorIndexVarp int) {
+			cb(IMContextNewFromInternalPtr(ContextVarp), TextVarp, LenVarp, CursorIndexVarp, AnchorIndexVarp)
+		})
+	}
+}
+
+// GetCallbackSetSurroundingWithSelection gets the callback function.
+func (x *IMContextClass) GetCallbackSetSurroundingWithSelection() func(*IMContext, string, int, int, int) {
+	if x.xSetSurroundingWithSelection == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, TextVarp string, LenVarp int, CursorIndexVarp int, AnchorIndexVarp int)
+	purego.RegisterFunc(&rawCallback, x.xSetSurroundingWithSelection)
+	return func(ContextVar *IMContext, TextVar string, LenVar int, CursorIndexVar int, AnchorIndexVar int) {
+		rawCallback(ContextVar.GoPointer(), TextVar, LenVar, CursorIndexVar, AnchorIndexVar)
+	}
+}
+
+// SetCallbackGetSurroundingWithSelection sets the callback function.
+func (x *IMContextClass) SetCallbackGetSurroundingWithSelection(cb func(*IMContext, string, int, int) bool) {
+	if cb == nil {
+		x.xGetSurroundingWithSelection = 0
+	} else {
+		x.xGetSurroundingWithSelection = purego.NewCallback(func(ContextVarp uintptr, TextVarp string, CursorIndexVarp int, AnchorIndexVarp int) bool {
+			return cb(IMContextNewFromInternalPtr(ContextVarp), TextVarp, CursorIndexVarp, AnchorIndexVarp)
+		})
+	}
+}
+
+// GetCallbackGetSurroundingWithSelection gets the callback function.
+func (x *IMContextClass) GetCallbackGetSurroundingWithSelection() func(*IMContext, string, int, int) bool {
+	if x.xGetSurroundingWithSelection == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr, TextVarp string, CursorIndexVarp int, AnchorIndexVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xGetSurroundingWithSelection)
+	return func(ContextVar *IMContext, TextVar string, CursorIndexVar int, AnchorIndexVar int) bool {
+		return rawCallback(ContextVar.GoPointer(), TextVar, CursorIndexVar, AnchorIndexVar)
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *IMContextClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *IMContextClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *IMContextClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *IMContextClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *IMContextClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *IMContextClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *IMContextClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *IMContextClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved5 sets the callback function.
+func (x *IMContextClass) SetCallbackGtkReserved5(cb func()) {
+	if cb == nil {
+		x.xGtkReserved5 = 0
+	} else {
+		x.xGtkReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved5 gets the callback function.
+func (x *IMContextClass) GetCallbackGtkReserved5() func() {
+	if x.xGtkReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved5)
+	return func() {
+		rawCallback()
+	}
 }
 
 // `GtkIMContext` defines the interface for GTK input methods.
diff --git a/v4/gtk/gtkimmulticontext.go b/v4/gtk/gtkimmulticontext.go
index 5973372b7b538f789cd559b4b86e2f9efea64776..5e5b7b941ab26db2988c97134e8929e5a9015061 100644
--- a/v4/gtk/gtkimmulticontext.go
+++ b/v4/gtk/gtkimmulticontext.go
@@ -15,17 +15,109 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *IMMulticontextClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *IMMulticontextClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *IMMulticontextClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *IMMulticontextClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *IMMulticontextClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *IMMulticontextClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *IMMulticontextClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *IMMulticontextClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *IMMulticontextClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 type IMMulticontextPrivate struct {
diff --git a/v4/gtk/gtklayoutmanager.go b/v4/gtk/gtklayoutmanager.go
index 3c176dd2b1a1ace544f2d1f7f106d6978b7f077e..73ce7c3c1320edaffad281e3005f6f328b281615 100644
--- a/v4/gtk/gtklayoutmanager.go
+++ b/v4/gtk/gtklayoutmanager.go
@@ -19,25 +19,173 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetRequestMode uintptr
+	xGetRequestMode uintptr
 
-	Measure uintptr
+	xMeasure uintptr
 
-	Allocate uintptr
+	xAllocate uintptr
 
 	LayoutChildType types.GType
 
-	CreateLayoutChild uintptr
+	xCreateLayoutChild uintptr
 
-	Root uintptr
+	xRoot uintptr
 
-	Unroot uintptr
+	xUnroot uintptr
 
 	Padding [16]uintptr
 }
 
 func (x *LayoutManagerClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetRequestMode sets the callback function.
+func (x *LayoutManagerClass) SetCallbackGetRequestMode(cb func(*LayoutManager, *Widget) SizeRequestMode) {
+	if cb == nil {
+		x.xGetRequestMode = 0
+	} else {
+		x.xGetRequestMode = purego.NewCallback(func(ManagerVarp uintptr, WidgetVarp uintptr) SizeRequestMode {
+			return cb(LayoutManagerNewFromInternalPtr(ManagerVarp), WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackGetRequestMode gets the callback function.
+func (x *LayoutManagerClass) GetCallbackGetRequestMode() func(*LayoutManager, *Widget) SizeRequestMode {
+	if x.xGetRequestMode == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, WidgetVarp uintptr) SizeRequestMode
+	purego.RegisterFunc(&rawCallback, x.xGetRequestMode)
+	return func(ManagerVar *LayoutManager, WidgetVar *Widget) SizeRequestMode {
+		return rawCallback(ManagerVar.GoPointer(), WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackMeasure sets the callback function.
+func (x *LayoutManagerClass) SetCallbackMeasure(cb func(*LayoutManager, *Widget, Orientation, int, int, int, int, int)) {
+	if cb == nil {
+		x.xMeasure = 0
+	} else {
+		x.xMeasure = purego.NewCallback(func(ManagerVarp uintptr, WidgetVarp uintptr, OrientationVarp Orientation, ForSizeVarp int, MinimumVarp int, NaturalVarp int, MinimumBaselineVarp int, NaturalBaselineVarp int) {
+			cb(LayoutManagerNewFromInternalPtr(ManagerVarp), WidgetNewFromInternalPtr(WidgetVarp), OrientationVarp, ForSizeVarp, MinimumVarp, NaturalVarp, MinimumBaselineVarp, NaturalBaselineVarp)
+		})
+	}
+}
+
+// GetCallbackMeasure gets the callback function.
+func (x *LayoutManagerClass) GetCallbackMeasure() func(*LayoutManager, *Widget, Orientation, int, int, int, int, int) {
+	if x.xMeasure == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, WidgetVarp uintptr, OrientationVarp Orientation, ForSizeVarp int, MinimumVarp int, NaturalVarp int, MinimumBaselineVarp int, NaturalBaselineVarp int)
+	purego.RegisterFunc(&rawCallback, x.xMeasure)
+	return func(ManagerVar *LayoutManager, WidgetVar *Widget, OrientationVar Orientation, ForSizeVar int, MinimumVar int, NaturalVar int, MinimumBaselineVar int, NaturalBaselineVar int) {
+		rawCallback(ManagerVar.GoPointer(), WidgetVar.GoPointer(), OrientationVar, ForSizeVar, MinimumVar, NaturalVar, MinimumBaselineVar, NaturalBaselineVar)
+	}
+}
+
+// SetCallbackAllocate sets the callback function.
+func (x *LayoutManagerClass) SetCallbackAllocate(cb func(*LayoutManager, *Widget, int, int, int)) {
+	if cb == nil {
+		x.xAllocate = 0
+	} else {
+		x.xAllocate = purego.NewCallback(func(ManagerVarp uintptr, WidgetVarp uintptr, WidthVarp int, HeightVarp int, BaselineVarp int) {
+			cb(LayoutManagerNewFromInternalPtr(ManagerVarp), WidgetNewFromInternalPtr(WidgetVarp), WidthVarp, HeightVarp, BaselineVarp)
+		})
+	}
+}
+
+// GetCallbackAllocate gets the callback function.
+func (x *LayoutManagerClass) GetCallbackAllocate() func(*LayoutManager, *Widget, int, int, int) {
+	if x.xAllocate == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, WidgetVarp uintptr, WidthVarp int, HeightVarp int, BaselineVarp int)
+	purego.RegisterFunc(&rawCallback, x.xAllocate)
+	return func(ManagerVar *LayoutManager, WidgetVar *Widget, WidthVar int, HeightVar int, BaselineVar int) {
+		rawCallback(ManagerVar.GoPointer(), WidgetVar.GoPointer(), WidthVar, HeightVar, BaselineVar)
+	}
+}
+
+// SetCallbackCreateLayoutChild sets the callback function.
+func (x *LayoutManagerClass) SetCallbackCreateLayoutChild(cb func(*LayoutManager, *Widget, *Widget) *LayoutChild) {
+	if cb == nil {
+		x.xCreateLayoutChild = 0
+	} else {
+		x.xCreateLayoutChild = purego.NewCallback(func(ManagerVarp uintptr, WidgetVarp uintptr, ForChildVarp uintptr) uintptr {
+			ret := cb(LayoutManagerNewFromInternalPtr(ManagerVarp), WidgetNewFromInternalPtr(WidgetVarp), WidgetNewFromInternalPtr(ForChildVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateLayoutChild gets the callback function.
+func (x *LayoutManagerClass) GetCallbackCreateLayoutChild() func(*LayoutManager, *Widget, *Widget) *LayoutChild {
+	if x.xCreateLayoutChild == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr, WidgetVarp uintptr, ForChildVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateLayoutChild)
+	return func(ManagerVar *LayoutManager, WidgetVar *Widget, ForChildVar *Widget) *LayoutChild {
+		rawRet := rawCallback(ManagerVar.GoPointer(), WidgetVar.GoPointer(), ForChildVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &LayoutChild{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackRoot sets the callback function.
+func (x *LayoutManagerClass) SetCallbackRoot(cb func(*LayoutManager)) {
+	if cb == nil {
+		x.xRoot = 0
+	} else {
+		x.xRoot = purego.NewCallback(func(ManagerVarp uintptr) {
+			cb(LayoutManagerNewFromInternalPtr(ManagerVarp))
+		})
+	}
+}
+
+// GetCallbackRoot gets the callback function.
+func (x *LayoutManagerClass) GetCallbackRoot() func(*LayoutManager) {
+	if x.xRoot == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRoot)
+	return func(ManagerVar *LayoutManager) {
+		rawCallback(ManagerVar.GoPointer())
+	}
+}
+
+// SetCallbackUnroot sets the callback function.
+func (x *LayoutManagerClass) SetCallbackUnroot(cb func(*LayoutManager)) {
+	if cb == nil {
+		x.xUnroot = 0
+	} else {
+		x.xUnroot = purego.NewCallback(func(ManagerVarp uintptr) {
+			cb(LayoutManagerNewFromInternalPtr(ManagerVarp))
+		})
+	}
+}
+
+// GetCallbackUnroot gets the callback function.
+func (x *LayoutManagerClass) GetCallbackUnroot() func(*LayoutManager) {
+	if x.xUnroot == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnroot)
+	return func(ManagerVar *LayoutManager) {
+		rawCallback(ManagerVar.GoPointer())
+	}
 }
 
 // Layout managers are delegate classes that handle the preferred size
diff --git a/v4/gtk/gtklistbox.go b/v4/gtk/gtklistbox.go
index 5109ffac16ae4e89b5d6ba75b6d71d340915a45c..4078a0a854be67c95479a847a209efaf4e8b1e6d 100644
--- a/v4/gtk/gtklistbox.go
+++ b/v4/gtk/gtklistbox.go
@@ -44,13 +44,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Activate uintptr
+	xActivate uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *ListBoxRowClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackActivate sets the callback function.
+func (x *ListBoxRowClass) SetCallbackActivate(cb func(*ListBoxRow)) {
+	if cb == nil {
+		x.xActivate = 0
+	} else {
+		x.xActivate = purego.NewCallback(func(RowVarp uintptr) {
+			cb(ListBoxRowNewFromInternalPtr(RowVarp))
+		})
+	}
+}
+
+// GetCallbackActivate gets the callback function.
+func (x *ListBoxRowClass) GetCallbackActivate() func(*ListBoxRow) {
+	if x.xActivate == 0 {
+		return nil
+	}
+	var rawCallback func(RowVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivate)
+	return func(RowVar *ListBoxRow) {
+		rawCallback(RowVar.GoPointer())
+	}
 }
 
 // `GtkListBox` is a vertical list.
diff --git a/v4/gtk/gtkmediafile.go b/v4/gtk/gtkmediafile.go
index 26982b0d9a223384088673da796c8291f5d24e36..9bdd90d2c6539a6e4905a182874af7a867895de4 100644
--- a/v4/gtk/gtkmediafile.go
+++ b/v4/gtk/gtkmediafile.go
@@ -18,21 +18,159 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Open uintptr
+	xOpen uintptr
 
-	Close uintptr
+	xClose uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *MediaFileClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackOpen sets the callback function.
+func (x *MediaFileClass) SetCallbackOpen(cb func(*MediaFile)) {
+	if cb == nil {
+		x.xOpen = 0
+	} else {
+		x.xOpen = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(MediaFileNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackOpen gets the callback function.
+func (x *MediaFileClass) GetCallbackOpen() func(*MediaFile) {
+	if x.xOpen == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xOpen)
+	return func(SelfVar *MediaFile) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackClose sets the callback function.
+func (x *MediaFileClass) SetCallbackClose(cb func(*MediaFile)) {
+	if cb == nil {
+		x.xClose = 0
+	} else {
+		x.xClose = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(MediaFileNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackClose gets the callback function.
+func (x *MediaFileClass) GetCallbackClose() func(*MediaFile) {
+	if x.xClose == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClose)
+	return func(SelfVar *MediaFile) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *MediaFileClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *MediaFileClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *MediaFileClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *MediaFileClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *MediaFileClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *MediaFileClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *MediaFileClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *MediaFileClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 const (
diff --git a/v4/gtk/gtkmediastream.go b/v4/gtk/gtkmediastream.go
index 7c08883a6c9c2cba7bc95c32fba0366f0d4ae4e1..e432276d1359da38403fed51a52173243d9e2d7b 100644
--- a/v4/gtk/gtkmediastream.go
+++ b/v4/gtk/gtkmediastream.go
@@ -18,37 +18,359 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Play uintptr
+	xPlay uintptr
 
-	Pause uintptr
+	xPause uintptr
 
-	Seek uintptr
+	xSeek uintptr
 
-	UpdateAudio uintptr
+	xUpdateAudio uintptr
 
-	Realize uintptr
+	xRealize uintptr
 
-	Unrealize uintptr
+	xUnrealize uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 
-	GtkReserved5 uintptr
+	xGtkReserved5 uintptr
 
-	GtkReserved6 uintptr
+	xGtkReserved6 uintptr
 
-	GtkReserved7 uintptr
+	xGtkReserved7 uintptr
 
-	GtkReserved8 uintptr
+	xGtkReserved8 uintptr
 }
 
 func (x *MediaStreamClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackPlay sets the callback function.
+func (x *MediaStreamClass) SetCallbackPlay(cb func(*MediaStream) bool) {
+	if cb == nil {
+		x.xPlay = 0
+	} else {
+		x.xPlay = purego.NewCallback(func(SelfVarp uintptr) bool {
+			return cb(MediaStreamNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackPlay gets the callback function.
+func (x *MediaStreamClass) GetCallbackPlay() func(*MediaStream) bool {
+	if x.xPlay == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xPlay)
+	return func(SelfVar *MediaStream) bool {
+		return rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackPause sets the callback function.
+func (x *MediaStreamClass) SetCallbackPause(cb func(*MediaStream)) {
+	if cb == nil {
+		x.xPause = 0
+	} else {
+		x.xPause = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(MediaStreamNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackPause gets the callback function.
+func (x *MediaStreamClass) GetCallbackPause() func(*MediaStream) {
+	if x.xPause == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPause)
+	return func(SelfVar *MediaStream) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackSeek sets the callback function.
+func (x *MediaStreamClass) SetCallbackSeek(cb func(*MediaStream, int64)) {
+	if cb == nil {
+		x.xSeek = 0
+	} else {
+		x.xSeek = purego.NewCallback(func(SelfVarp uintptr, TimestampVarp int64) {
+			cb(MediaStreamNewFromInternalPtr(SelfVarp), TimestampVarp)
+		})
+	}
+}
+
+// GetCallbackSeek gets the callback function.
+func (x *MediaStreamClass) GetCallbackSeek() func(*MediaStream, int64) {
+	if x.xSeek == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, TimestampVarp int64)
+	purego.RegisterFunc(&rawCallback, x.xSeek)
+	return func(SelfVar *MediaStream, TimestampVar int64) {
+		rawCallback(SelfVar.GoPointer(), TimestampVar)
+	}
+}
+
+// SetCallbackUpdateAudio sets the callback function.
+func (x *MediaStreamClass) SetCallbackUpdateAudio(cb func(*MediaStream, bool, float64)) {
+	if cb == nil {
+		x.xUpdateAudio = 0
+	} else {
+		x.xUpdateAudio = purego.NewCallback(func(SelfVarp uintptr, MutedVarp bool, VolumeVarp float64) {
+			cb(MediaStreamNewFromInternalPtr(SelfVarp), MutedVarp, VolumeVarp)
+		})
+	}
+}
+
+// GetCallbackUpdateAudio gets the callback function.
+func (x *MediaStreamClass) GetCallbackUpdateAudio() func(*MediaStream, bool, float64) {
+	if x.xUpdateAudio == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, MutedVarp bool, VolumeVarp float64)
+	purego.RegisterFunc(&rawCallback, x.xUpdateAudio)
+	return func(SelfVar *MediaStream, MutedVar bool, VolumeVar float64) {
+		rawCallback(SelfVar.GoPointer(), MutedVar, VolumeVar)
+	}
+}
+
+// SetCallbackRealize sets the callback function.
+func (x *MediaStreamClass) SetCallbackRealize(cb func(*MediaStream, *gdk.Surface)) {
+	if cb == nil {
+		x.xRealize = 0
+	} else {
+		x.xRealize = purego.NewCallback(func(SelfVarp uintptr, SurfaceVarp uintptr) {
+			cb(MediaStreamNewFromInternalPtr(SelfVarp), gdk.SurfaceNewFromInternalPtr(SurfaceVarp))
+		})
+	}
+}
+
+// GetCallbackRealize gets the callback function.
+func (x *MediaStreamClass) GetCallbackRealize() func(*MediaStream, *gdk.Surface) {
+	if x.xRealize == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, SurfaceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRealize)
+	return func(SelfVar *MediaStream, SurfaceVar *gdk.Surface) {
+		rawCallback(SelfVar.GoPointer(), SurfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackUnrealize sets the callback function.
+func (x *MediaStreamClass) SetCallbackUnrealize(cb func(*MediaStream, *gdk.Surface)) {
+	if cb == nil {
+		x.xUnrealize = 0
+	} else {
+		x.xUnrealize = purego.NewCallback(func(SelfVarp uintptr, SurfaceVarp uintptr) {
+			cb(MediaStreamNewFromInternalPtr(SelfVarp), gdk.SurfaceNewFromInternalPtr(SurfaceVarp))
+		})
+	}
+}
+
+// GetCallbackUnrealize gets the callback function.
+func (x *MediaStreamClass) GetCallbackUnrealize() func(*MediaStream, *gdk.Surface) {
+	if x.xUnrealize == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, SurfaceVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnrealize)
+	return func(SelfVar *MediaStream, SurfaceVar *gdk.Surface) {
+		rawCallback(SelfVar.GoPointer(), SurfaceVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved5 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved5(cb func()) {
+	if cb == nil {
+		x.xGtkReserved5 = 0
+	} else {
+		x.xGtkReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved5 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved5() func() {
+	if x.xGtkReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved6 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved6(cb func()) {
+	if cb == nil {
+		x.xGtkReserved6 = 0
+	} else {
+		x.xGtkReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved6 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved6() func() {
+	if x.xGtkReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved7 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved7(cb func()) {
+	if cb == nil {
+		x.xGtkReserved7 = 0
+	} else {
+		x.xGtkReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved7 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved7() func() {
+	if x.xGtkReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved8 sets the callback function.
+func (x *MediaStreamClass) SetCallbackGtkReserved8(cb func()) {
+	if cb == nil {
+		x.xGtkReserved8 = 0
+	} else {
+		x.xGtkReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved8 gets the callback function.
+func (x *MediaStreamClass) GetCallbackGtkReserved8() func() {
+	if x.xGtkReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved8)
+	return func() {
+		rawCallback()
+	}
 }
 
 // `GtkMediaStream` is the integration point for media playback inside GTK.
diff --git a/v4/gtk/gtkmountoperation.go b/v4/gtk/gtkmountoperation.go
index 1168932e6bb44b4a56ee4bc07c3ae7c359450731..058d3df1fd15307be29217c059f83b4aee6ce841 100644
--- a/v4/gtk/gtkmountoperation.go
+++ b/v4/gtk/gtkmountoperation.go
@@ -18,17 +18,109 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *MountOperationClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *MountOperationClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *MountOperationClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *MountOperationClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *MountOperationClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *MountOperationClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *MountOperationClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *MountOperationClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *MountOperationClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 type MountOperationPrivate struct {
diff --git a/v4/gtk/gtknativedialog.go b/v4/gtk/gtknativedialog.go
index 1f4d92b81d48e6dc4fce3b7040a726b047747a34..f0b28ef5a69d3a2bdc47cdfc25531b4fc912fcca 100644
--- a/v4/gtk/gtknativedialog.go
+++ b/v4/gtk/gtknativedialog.go
@@ -18,23 +18,184 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Response uintptr
+	xResponse uintptr
 
-	Show uintptr
+	xShow uintptr
 
-	Hide uintptr
+	xHide uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *NativeDialogClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackResponse sets the callback function.
+func (x *NativeDialogClass) SetCallbackResponse(cb func(*NativeDialog, int)) {
+	if cb == nil {
+		x.xResponse = 0
+	} else {
+		x.xResponse = purego.NewCallback(func(SelfVarp uintptr, ResponseIdVarp int) {
+			cb(NativeDialogNewFromInternalPtr(SelfVarp), ResponseIdVarp)
+		})
+	}
+}
+
+// GetCallbackResponse gets the callback function.
+func (x *NativeDialogClass) GetCallbackResponse() func(*NativeDialog, int) {
+	if x.xResponse == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ResponseIdVarp int)
+	purego.RegisterFunc(&rawCallback, x.xResponse)
+	return func(SelfVar *NativeDialog, ResponseIdVar int) {
+		rawCallback(SelfVar.GoPointer(), ResponseIdVar)
+	}
+}
+
+// SetCallbackShow sets the callback function.
+func (x *NativeDialogClass) SetCallbackShow(cb func(*NativeDialog)) {
+	if cb == nil {
+		x.xShow = 0
+	} else {
+		x.xShow = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(NativeDialogNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackShow gets the callback function.
+func (x *NativeDialogClass) GetCallbackShow() func(*NativeDialog) {
+	if x.xShow == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xShow)
+	return func(SelfVar *NativeDialog) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackHide sets the callback function.
+func (x *NativeDialogClass) SetCallbackHide(cb func(*NativeDialog)) {
+	if cb == nil {
+		x.xHide = 0
+	} else {
+		x.xHide = purego.NewCallback(func(SelfVarp uintptr) {
+			cb(NativeDialogNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackHide gets the callback function.
+func (x *NativeDialogClass) GetCallbackHide() func(*NativeDialog) {
+	if x.xHide == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xHide)
+	return func(SelfVar *NativeDialog) {
+		rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *NativeDialogClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *NativeDialogClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *NativeDialogClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *NativeDialogClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *NativeDialogClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *NativeDialogClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *NativeDialogClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *NativeDialogClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 // Native dialogs are platform dialogs that don't use `GtkDialog`.
diff --git a/v4/gtk/gtkpopover.go b/v4/gtk/gtkpopover.go
index 4f0f6b74b67d9de35d10175524e2e238867eee37..685838c6d0a086e393c4a9f944644b76fe44c95e 100644
--- a/v4/gtk/gtkpopover.go
+++ b/v4/gtk/gtkpopover.go
@@ -19,15 +19,61 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Closed uintptr
+	xClosed uintptr
 
-	ActivateDefault uintptr
+	xActivateDefault uintptr
 
 	Reserved [8]uintptr
 }
 
 func (x *PopoverClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackClosed sets the callback function.
+func (x *PopoverClass) SetCallbackClosed(cb func(*Popover)) {
+	if cb == nil {
+		x.xClosed = 0
+	} else {
+		x.xClosed = purego.NewCallback(func(PopoverVarp uintptr) {
+			cb(PopoverNewFromInternalPtr(PopoverVarp))
+		})
+	}
+}
+
+// GetCallbackClosed gets the callback function.
+func (x *PopoverClass) GetCallbackClosed() func(*Popover) {
+	if x.xClosed == 0 {
+		return nil
+	}
+	var rawCallback func(PopoverVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xClosed)
+	return func(PopoverVar *Popover) {
+		rawCallback(PopoverVar.GoPointer())
+	}
+}
+
+// SetCallbackActivateDefault sets the callback function.
+func (x *PopoverClass) SetCallbackActivateDefault(cb func(*Popover)) {
+	if cb == nil {
+		x.xActivateDefault = 0
+	} else {
+		x.xActivateDefault = purego.NewCallback(func(PopoverVarp uintptr) {
+			cb(PopoverNewFromInternalPtr(PopoverVarp))
+		})
+	}
+}
+
+// GetCallbackActivateDefault gets the callback function.
+func (x *PopoverClass) GetCallbackActivateDefault() func(*Popover) {
+	if x.xActivateDefault == 0 {
+		return nil
+	}
+	var rawCallback func(PopoverVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivateDefault)
+	return func(PopoverVar *Popover) {
+		rawCallback(PopoverVar.GoPointer())
+	}
 }
 
 // `GtkPopover` is a bubble-like context popup.
diff --git a/v4/gtk/gtkprintoperation.go b/v4/gtk/gtkprintoperation.go
index 0e9628cb0f1e90c8b27be75a0ad70b9139bea765..6c121f46dcd24ec529e7fc6e0ca12580de86bf59 100644
--- a/v4/gtk/gtkprintoperation.go
+++ b/v4/gtk/gtkprintoperation.go
@@ -24,33 +24,296 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Done uintptr
+	xDone uintptr
 
-	BeginPrint uintptr
+	xBeginPrint uintptr
 
-	Paginate uintptr
+	xPaginate uintptr
 
-	RequestPageSetup uintptr
+	xRequestPageSetup uintptr
 
-	DrawPage uintptr
+	xDrawPage uintptr
 
-	EndPrint uintptr
+	xEndPrint uintptr
 
-	StatusChanged uintptr
+	xStatusChanged uintptr
 
-	CreateCustomWidget uintptr
+	xCreateCustomWidget uintptr
 
-	CustomWidgetApply uintptr
+	xCustomWidgetApply uintptr
 
-	Preview uintptr
+	xPreview uintptr
 
-	UpdateCustomWidget uintptr
+	xUpdateCustomWidget uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *PrintOperationClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackDone sets the callback function.
+func (x *PrintOperationClass) SetCallbackDone(cb func(*PrintOperation, PrintOperationResult)) {
+	if cb == nil {
+		x.xDone = 0
+	} else {
+		x.xDone = purego.NewCallback(func(OperationVarp uintptr, ResultVarp PrintOperationResult) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp), ResultVarp)
+		})
+	}
+}
+
+// GetCallbackDone gets the callback function.
+func (x *PrintOperationClass) GetCallbackDone() func(*PrintOperation, PrintOperationResult) {
+	if x.xDone == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, ResultVarp PrintOperationResult)
+	purego.RegisterFunc(&rawCallback, x.xDone)
+	return func(OperationVar *PrintOperation, ResultVar PrintOperationResult) {
+		rawCallback(OperationVar.GoPointer(), ResultVar)
+	}
+}
+
+// SetCallbackBeginPrint sets the callback function.
+func (x *PrintOperationClass) SetCallbackBeginPrint(cb func(*PrintOperation, *PrintContext)) {
+	if cb == nil {
+		x.xBeginPrint = 0
+	} else {
+		x.xBeginPrint = purego.NewCallback(func(OperationVarp uintptr, ContextVarp uintptr) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp), PrintContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackBeginPrint gets the callback function.
+func (x *PrintOperationClass) GetCallbackBeginPrint() func(*PrintOperation, *PrintContext) {
+	if x.xBeginPrint == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xBeginPrint)
+	return func(OperationVar *PrintOperation, ContextVar *PrintContext) {
+		rawCallback(OperationVar.GoPointer(), ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackPaginate sets the callback function.
+func (x *PrintOperationClass) SetCallbackPaginate(cb func(*PrintOperation, *PrintContext) bool) {
+	if cb == nil {
+		x.xPaginate = 0
+	} else {
+		x.xPaginate = purego.NewCallback(func(OperationVarp uintptr, ContextVarp uintptr) bool {
+			return cb(PrintOperationNewFromInternalPtr(OperationVarp), PrintContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackPaginate gets the callback function.
+func (x *PrintOperationClass) GetCallbackPaginate() func(*PrintOperation, *PrintContext) bool {
+	if x.xPaginate == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, ContextVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xPaginate)
+	return func(OperationVar *PrintOperation, ContextVar *PrintContext) bool {
+		return rawCallback(OperationVar.GoPointer(), ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackRequestPageSetup sets the callback function.
+func (x *PrintOperationClass) SetCallbackRequestPageSetup(cb func(*PrintOperation, *PrintContext, int, *PageSetup)) {
+	if cb == nil {
+		x.xRequestPageSetup = 0
+	} else {
+		x.xRequestPageSetup = purego.NewCallback(func(OperationVarp uintptr, ContextVarp uintptr, PageNrVarp int, SetupVarp uintptr) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp), PrintContextNewFromInternalPtr(ContextVarp), PageNrVarp, PageSetupNewFromInternalPtr(SetupVarp))
+		})
+	}
+}
+
+// GetCallbackRequestPageSetup gets the callback function.
+func (x *PrintOperationClass) GetCallbackRequestPageSetup() func(*PrintOperation, *PrintContext, int, *PageSetup) {
+	if x.xRequestPageSetup == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, ContextVarp uintptr, PageNrVarp int, SetupVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRequestPageSetup)
+	return func(OperationVar *PrintOperation, ContextVar *PrintContext, PageNrVar int, SetupVar *PageSetup) {
+		rawCallback(OperationVar.GoPointer(), ContextVar.GoPointer(), PageNrVar, SetupVar.GoPointer())
+	}
+}
+
+// SetCallbackDrawPage sets the callback function.
+func (x *PrintOperationClass) SetCallbackDrawPage(cb func(*PrintOperation, *PrintContext, int)) {
+	if cb == nil {
+		x.xDrawPage = 0
+	} else {
+		x.xDrawPage = purego.NewCallback(func(OperationVarp uintptr, ContextVarp uintptr, PageNrVarp int) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp), PrintContextNewFromInternalPtr(ContextVarp), PageNrVarp)
+		})
+	}
+}
+
+// GetCallbackDrawPage gets the callback function.
+func (x *PrintOperationClass) GetCallbackDrawPage() func(*PrintOperation, *PrintContext, int) {
+	if x.xDrawPage == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, ContextVarp uintptr, PageNrVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDrawPage)
+	return func(OperationVar *PrintOperation, ContextVar *PrintContext, PageNrVar int) {
+		rawCallback(OperationVar.GoPointer(), ContextVar.GoPointer(), PageNrVar)
+	}
+}
+
+// SetCallbackEndPrint sets the callback function.
+func (x *PrintOperationClass) SetCallbackEndPrint(cb func(*PrintOperation, *PrintContext)) {
+	if cb == nil {
+		x.xEndPrint = 0
+	} else {
+		x.xEndPrint = purego.NewCallback(func(OperationVarp uintptr, ContextVarp uintptr) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp), PrintContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackEndPrint gets the callback function.
+func (x *PrintOperationClass) GetCallbackEndPrint() func(*PrintOperation, *PrintContext) {
+	if x.xEndPrint == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEndPrint)
+	return func(OperationVar *PrintOperation, ContextVar *PrintContext) {
+		rawCallback(OperationVar.GoPointer(), ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackStatusChanged sets the callback function.
+func (x *PrintOperationClass) SetCallbackStatusChanged(cb func(*PrintOperation)) {
+	if cb == nil {
+		x.xStatusChanged = 0
+	} else {
+		x.xStatusChanged = purego.NewCallback(func(OperationVarp uintptr) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp))
+		})
+	}
+}
+
+// GetCallbackStatusChanged gets the callback function.
+func (x *PrintOperationClass) GetCallbackStatusChanged() func(*PrintOperation) {
+	if x.xStatusChanged == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xStatusChanged)
+	return func(OperationVar *PrintOperation) {
+		rawCallback(OperationVar.GoPointer())
+	}
+}
+
+// SetCallbackCreateCustomWidget sets the callback function.
+func (x *PrintOperationClass) SetCallbackCreateCustomWidget(cb func(*PrintOperation) *Widget) {
+	if cb == nil {
+		x.xCreateCustomWidget = 0
+	} else {
+		x.xCreateCustomWidget = purego.NewCallback(func(OperationVarp uintptr) uintptr {
+			ret := cb(PrintOperationNewFromInternalPtr(OperationVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateCustomWidget gets the callback function.
+func (x *PrintOperationClass) GetCallbackCreateCustomWidget() func(*PrintOperation) *Widget {
+	if x.xCreateCustomWidget == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateCustomWidget)
+	return func(OperationVar *PrintOperation) *Widget {
+		rawRet := rawCallback(OperationVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Widget{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackCustomWidgetApply sets the callback function.
+func (x *PrintOperationClass) SetCallbackCustomWidgetApply(cb func(*PrintOperation, *Widget)) {
+	if cb == nil {
+		x.xCustomWidgetApply = 0
+	} else {
+		x.xCustomWidgetApply = purego.NewCallback(func(OperationVarp uintptr, WidgetVarp uintptr) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp), WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackCustomWidgetApply gets the callback function.
+func (x *PrintOperationClass) GetCallbackCustomWidgetApply() func(*PrintOperation, *Widget) {
+	if x.xCustomWidgetApply == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCustomWidgetApply)
+	return func(OperationVar *PrintOperation, WidgetVar *Widget) {
+		rawCallback(OperationVar.GoPointer(), WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackPreview sets the callback function.
+func (x *PrintOperationClass) SetCallbackPreview(cb func(*PrintOperation, PrintOperationPreview, *PrintContext, *Window) bool) {
+	if cb == nil {
+		x.xPreview = 0
+	} else {
+		x.xPreview = purego.NewCallback(func(OperationVarp uintptr, PreviewVarp uintptr, ContextVarp uintptr, ParentVarp uintptr) bool {
+			return cb(PrintOperationNewFromInternalPtr(OperationVarp), &PrintOperationPreviewBase{Ptr: PreviewVarp}, PrintContextNewFromInternalPtr(ContextVarp), WindowNewFromInternalPtr(ParentVarp))
+		})
+	}
+}
+
+// GetCallbackPreview gets the callback function.
+func (x *PrintOperationClass) GetCallbackPreview() func(*PrintOperation, PrintOperationPreview, *PrintContext, *Window) bool {
+	if x.xPreview == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, PreviewVarp uintptr, ContextVarp uintptr, ParentVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xPreview)
+	return func(OperationVar *PrintOperation, PreviewVar PrintOperationPreview, ContextVar *PrintContext, ParentVar *Window) bool {
+		return rawCallback(OperationVar.GoPointer(), PreviewVar.GoPointer(), ContextVar.GoPointer(), ParentVar.GoPointer())
+	}
+}
+
+// SetCallbackUpdateCustomWidget sets the callback function.
+func (x *PrintOperationClass) SetCallbackUpdateCustomWidget(cb func(*PrintOperation, *Widget, *PageSetup, *PrintSettings)) {
+	if cb == nil {
+		x.xUpdateCustomWidget = 0
+	} else {
+		x.xUpdateCustomWidget = purego.NewCallback(func(OperationVarp uintptr, WidgetVarp uintptr, SetupVarp uintptr, SettingsVarp uintptr) {
+			cb(PrintOperationNewFromInternalPtr(OperationVarp), WidgetNewFromInternalPtr(WidgetVarp), PageSetupNewFromInternalPtr(SetupVarp), PrintSettingsNewFromInternalPtr(SettingsVarp))
+		})
+	}
+}
+
+// GetCallbackUpdateCustomWidget gets the callback function.
+func (x *PrintOperationClass) GetCallbackUpdateCustomWidget() func(*PrintOperation, *Widget, *PageSetup, *PrintSettings) {
+	if x.xUpdateCustomWidget == 0 {
+		return nil
+	}
+	var rawCallback func(OperationVarp uintptr, WidgetVarp uintptr, SetupVarp uintptr, SettingsVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUpdateCustomWidget)
+	return func(OperationVar *PrintOperation, WidgetVar *Widget, SetupVar *PageSetup, SettingsVar *PrintSettings) {
+		rawCallback(OperationVar.GoPointer(), WidgetVar.GoPointer(), SetupVar.GoPointer(), SettingsVar.GoPointer())
+	}
 }
 
 type PrintOperationPrivate struct {
diff --git a/v4/gtk/gtkprintoperationpreview.go b/v4/gtk/gtkprintoperationpreview.go
index a0cf39ed369e2045c1a54447ff1163bde3c4cbae..e1a19373d5315647e81f806694d1ad1e2ba30d22 100644
--- a/v4/gtk/gtkprintoperationpreview.go
+++ b/v4/gtk/gtkprintoperationpreview.go
@@ -15,35 +15,334 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	Ready uintptr
+	xReady uintptr
 
-	GotPageSize uintptr
+	xGotPageSize uintptr
 
-	RenderPage uintptr
+	xRenderPage uintptr
 
-	IsSelected uintptr
+	xIsSelected uintptr
 
-	EndPreview uintptr
+	xEndPreview uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 
-	GtkReserved5 uintptr
+	xGtkReserved5 uintptr
 
-	GtkReserved6 uintptr
+	xGtkReserved6 uintptr
 
-	GtkReserved7 uintptr
+	xGtkReserved7 uintptr
 
-	GtkReserved8 uintptr
+	xGtkReserved8 uintptr
 }
 
 func (x *PrintOperationPreviewIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackReady sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackReady(cb func(PrintOperationPreview, *PrintContext)) {
+	if cb == nil {
+		x.xReady = 0
+	} else {
+		x.xReady = purego.NewCallback(func(PreviewVarp uintptr, ContextVarp uintptr) {
+			cb(&PrintOperationPreviewBase{Ptr: PreviewVarp}, PrintContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackReady gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackReady() func(PrintOperationPreview, *PrintContext) {
+	if x.xReady == 0 {
+		return nil
+	}
+	var rawCallback func(PreviewVarp uintptr, ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xReady)
+	return func(PreviewVar PrintOperationPreview, ContextVar *PrintContext) {
+		rawCallback(PreviewVar.GoPointer(), ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackGotPageSize sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGotPageSize(cb func(PrintOperationPreview, *PrintContext, *PageSetup)) {
+	if cb == nil {
+		x.xGotPageSize = 0
+	} else {
+		x.xGotPageSize = purego.NewCallback(func(PreviewVarp uintptr, ContextVarp uintptr, PageSetupVarp uintptr) {
+			cb(&PrintOperationPreviewBase{Ptr: PreviewVarp}, PrintContextNewFromInternalPtr(ContextVarp), PageSetupNewFromInternalPtr(PageSetupVarp))
+		})
+	}
+}
+
+// GetCallbackGotPageSize gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGotPageSize() func(PrintOperationPreview, *PrintContext, *PageSetup) {
+	if x.xGotPageSize == 0 {
+		return nil
+	}
+	var rawCallback func(PreviewVarp uintptr, ContextVarp uintptr, PageSetupVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xGotPageSize)
+	return func(PreviewVar PrintOperationPreview, ContextVar *PrintContext, PageSetupVar *PageSetup) {
+		rawCallback(PreviewVar.GoPointer(), ContextVar.GoPointer(), PageSetupVar.GoPointer())
+	}
+}
+
+// SetCallbackRenderPage sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackRenderPage(cb func(PrintOperationPreview, int)) {
+	if cb == nil {
+		x.xRenderPage = 0
+	} else {
+		x.xRenderPage = purego.NewCallback(func(PreviewVarp uintptr, PageNrVarp int) {
+			cb(&PrintOperationPreviewBase{Ptr: PreviewVarp}, PageNrVarp)
+		})
+	}
+}
+
+// GetCallbackRenderPage gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackRenderPage() func(PrintOperationPreview, int) {
+	if x.xRenderPage == 0 {
+		return nil
+	}
+	var rawCallback func(PreviewVarp uintptr, PageNrVarp int)
+	purego.RegisterFunc(&rawCallback, x.xRenderPage)
+	return func(PreviewVar PrintOperationPreview, PageNrVar int) {
+		rawCallback(PreviewVar.GoPointer(), PageNrVar)
+	}
+}
+
+// SetCallbackIsSelected sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackIsSelected(cb func(PrintOperationPreview, int) bool) {
+	if cb == nil {
+		x.xIsSelected = 0
+	} else {
+		x.xIsSelected = purego.NewCallback(func(PreviewVarp uintptr, PageNrVarp int) bool {
+			return cb(&PrintOperationPreviewBase{Ptr: PreviewVarp}, PageNrVarp)
+		})
+	}
+}
+
+// GetCallbackIsSelected gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackIsSelected() func(PrintOperationPreview, int) bool {
+	if x.xIsSelected == 0 {
+		return nil
+	}
+	var rawCallback func(PreviewVarp uintptr, PageNrVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xIsSelected)
+	return func(PreviewVar PrintOperationPreview, PageNrVar int) bool {
+		return rawCallback(PreviewVar.GoPointer(), PageNrVar)
+	}
+}
+
+// SetCallbackEndPreview sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackEndPreview(cb func(PrintOperationPreview)) {
+	if cb == nil {
+		x.xEndPreview = 0
+	} else {
+		x.xEndPreview = purego.NewCallback(func(PreviewVarp uintptr) {
+			cb(&PrintOperationPreviewBase{Ptr: PreviewVarp})
+		})
+	}
+}
+
+// GetCallbackEndPreview gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackEndPreview() func(PrintOperationPreview) {
+	if x.xEndPreview == 0 {
+		return nil
+	}
+	var rawCallback func(PreviewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEndPreview)
+	return func(PreviewVar PrintOperationPreview) {
+		rawCallback(PreviewVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved5 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved5(cb func()) {
+	if cb == nil {
+		x.xGtkReserved5 = 0
+	} else {
+		x.xGtkReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved5 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved5() func() {
+	if x.xGtkReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved6 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved6(cb func()) {
+	if cb == nil {
+		x.xGtkReserved6 = 0
+	} else {
+		x.xGtkReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved6 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved6() func() {
+	if x.xGtkReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved7 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved7(cb func()) {
+	if cb == nil {
+		x.xGtkReserved7 = 0
+	} else {
+		x.xGtkReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved7 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved7() func() {
+	if x.xGtkReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved8 sets the callback function.
+func (x *PrintOperationPreviewIface) SetCallbackGtkReserved8(cb func()) {
+	if cb == nil {
+		x.xGtkReserved8 = 0
+	} else {
+		x.xGtkReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved8 gets the callback function.
+func (x *PrintOperationPreviewIface) GetCallbackGtkReserved8() func() {
+	if x.xGtkReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved8)
+	return func() {
+		rawCallback()
+	}
 }
 
 // `GtkPrintOperationPreview` is the interface that is used to
diff --git a/v4/gtk/gtkrange.go b/v4/gtk/gtkrange.go
index e6eafff7a498cbb3c9bb3dbb6a8be3f0d18f1b17..014c9a69554796e0915e965417f64692b6ddabb0 100644
--- a/v4/gtk/gtkrange.go
+++ b/v4/gtk/gtkrange.go
@@ -18,21 +18,136 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ValueChanged uintptr
+	xValueChanged uintptr
 
-	AdjustBounds uintptr
+	xAdjustBounds uintptr
 
-	MoveSlider uintptr
+	xMoveSlider uintptr
 
-	GetRangeBorder uintptr
+	xGetRangeBorder uintptr
 
-	ChangeValue uintptr
+	xChangeValue uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *RangeClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackValueChanged sets the callback function.
+func (x *RangeClass) SetCallbackValueChanged(cb func(*Range)) {
+	if cb == nil {
+		x.xValueChanged = 0
+	} else {
+		x.xValueChanged = purego.NewCallback(func(RangeVarp uintptr) {
+			cb(RangeNewFromInternalPtr(RangeVarp))
+		})
+	}
+}
+
+// GetCallbackValueChanged gets the callback function.
+func (x *RangeClass) GetCallbackValueChanged() func(*Range) {
+	if x.xValueChanged == 0 {
+		return nil
+	}
+	var rawCallback func(RangeVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xValueChanged)
+	return func(RangeVar *Range) {
+		rawCallback(RangeVar.GoPointer())
+	}
+}
+
+// SetCallbackAdjustBounds sets the callback function.
+func (x *RangeClass) SetCallbackAdjustBounds(cb func(*Range, float64)) {
+	if cb == nil {
+		x.xAdjustBounds = 0
+	} else {
+		x.xAdjustBounds = purego.NewCallback(func(RangeVarp uintptr, NewValueVarp float64) {
+			cb(RangeNewFromInternalPtr(RangeVarp), NewValueVarp)
+		})
+	}
+}
+
+// GetCallbackAdjustBounds gets the callback function.
+func (x *RangeClass) GetCallbackAdjustBounds() func(*Range, float64) {
+	if x.xAdjustBounds == 0 {
+		return nil
+	}
+	var rawCallback func(RangeVarp uintptr, NewValueVarp float64)
+	purego.RegisterFunc(&rawCallback, x.xAdjustBounds)
+	return func(RangeVar *Range, NewValueVar float64) {
+		rawCallback(RangeVar.GoPointer(), NewValueVar)
+	}
+}
+
+// SetCallbackMoveSlider sets the callback function.
+func (x *RangeClass) SetCallbackMoveSlider(cb func(*Range, ScrollType)) {
+	if cb == nil {
+		x.xMoveSlider = 0
+	} else {
+		x.xMoveSlider = purego.NewCallback(func(RangeVarp uintptr, ScrollVarp ScrollType) {
+			cb(RangeNewFromInternalPtr(RangeVarp), ScrollVarp)
+		})
+	}
+}
+
+// GetCallbackMoveSlider gets the callback function.
+func (x *RangeClass) GetCallbackMoveSlider() func(*Range, ScrollType) {
+	if x.xMoveSlider == 0 {
+		return nil
+	}
+	var rawCallback func(RangeVarp uintptr, ScrollVarp ScrollType)
+	purego.RegisterFunc(&rawCallback, x.xMoveSlider)
+	return func(RangeVar *Range, ScrollVar ScrollType) {
+		rawCallback(RangeVar.GoPointer(), ScrollVar)
+	}
+}
+
+// SetCallbackGetRangeBorder sets the callback function.
+func (x *RangeClass) SetCallbackGetRangeBorder(cb func(*Range, *Border)) {
+	if cb == nil {
+		x.xGetRangeBorder = 0
+	} else {
+		x.xGetRangeBorder = purego.NewCallback(func(RangeVarp uintptr, BorderVarp *Border) {
+			cb(RangeNewFromInternalPtr(RangeVarp), BorderVarp)
+		})
+	}
+}
+
+// GetCallbackGetRangeBorder gets the callback function.
+func (x *RangeClass) GetCallbackGetRangeBorder() func(*Range, *Border) {
+	if x.xGetRangeBorder == 0 {
+		return nil
+	}
+	var rawCallback func(RangeVarp uintptr, BorderVarp *Border)
+	purego.RegisterFunc(&rawCallback, x.xGetRangeBorder)
+	return func(RangeVar *Range, BorderVar *Border) {
+		rawCallback(RangeVar.GoPointer(), BorderVar)
+	}
+}
+
+// SetCallbackChangeValue sets the callback function.
+func (x *RangeClass) SetCallbackChangeValue(cb func(*Range, ScrollType, float64) bool) {
+	if cb == nil {
+		x.xChangeValue = 0
+	} else {
+		x.xChangeValue = purego.NewCallback(func(RangeVarp uintptr, ScrollVarp ScrollType, NewValueVarp float64) bool {
+			return cb(RangeNewFromInternalPtr(RangeVarp), ScrollVarp, NewValueVarp)
+		})
+	}
+}
+
+// GetCallbackChangeValue gets the callback function.
+func (x *RangeClass) GetCallbackChangeValue() func(*Range, ScrollType, float64) bool {
+	if x.xChangeValue == 0 {
+		return nil
+	}
+	var rawCallback func(RangeVarp uintptr, ScrollVarp ScrollType, NewValueVarp float64) bool
+	purego.RegisterFunc(&rawCallback, x.xChangeValue)
+	return func(RangeVar *Range, ScrollVar ScrollType, NewValueVar float64) bool {
+		return rawCallback(RangeVar.GoPointer(), ScrollVar, NewValueVar)
+	}
 }
 
 // `GtkRange` is the common base class for widgets which visualize an
diff --git a/v4/gtk/gtkrecentmanager.go b/v4/gtk/gtkrecentmanager.go
index 0a4ba0d6fcbc040621ecc790b77ad0c14c01cfcb..76db53e29b97ff0257d49c355bec4f592c1a22d1 100644
--- a/v4/gtk/gtkrecentmanager.go
+++ b/v4/gtk/gtkrecentmanager.go
@@ -331,19 +331,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	GtkRecent1 uintptr
+	xGtkRecent1 uintptr
 
-	GtkRecent2 uintptr
+	xGtkRecent2 uintptr
 
-	GtkRecent3 uintptr
+	xGtkRecent3 uintptr
 
-	GtkRecent4 uintptr
+	xGtkRecent4 uintptr
 }
 
 func (x *RecentManagerClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *RecentManagerClass) SetCallbackChanged(cb func(*RecentManager)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(ManagerVarp uintptr) {
+			cb(RecentManagerNewFromInternalPtr(ManagerVarp))
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *RecentManagerClass) GetCallbackChanged() func(*RecentManager) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ManagerVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(ManagerVar *RecentManager) {
+		rawCallback(ManagerVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkRecent1 sets the callback function.
+func (x *RecentManagerClass) SetCallbackGtkRecent1(cb func()) {
+	if cb == nil {
+		x.xGtkRecent1 = 0
+	} else {
+		x.xGtkRecent1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkRecent1 gets the callback function.
+func (x *RecentManagerClass) GetCallbackGtkRecent1() func() {
+	if x.xGtkRecent1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkRecent1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkRecent2 sets the callback function.
+func (x *RecentManagerClass) SetCallbackGtkRecent2(cb func()) {
+	if cb == nil {
+		x.xGtkRecent2 = 0
+	} else {
+		x.xGtkRecent2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkRecent2 gets the callback function.
+func (x *RecentManagerClass) GetCallbackGtkRecent2() func() {
+	if x.xGtkRecent2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkRecent2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkRecent3 sets the callback function.
+func (x *RecentManagerClass) SetCallbackGtkRecent3(cb func()) {
+	if cb == nil {
+		x.xGtkRecent3 = 0
+	} else {
+		x.xGtkRecent3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkRecent3 gets the callback function.
+func (x *RecentManagerClass) GetCallbackGtkRecent3() func() {
+	if x.xGtkRecent3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkRecent3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkRecent4 sets the callback function.
+func (x *RecentManagerClass) SetCallbackGtkRecent4(cb func()) {
+	if cb == nil {
+		x.xGtkRecent4 = 0
+	} else {
+		x.xGtkRecent4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkRecent4 gets the callback function.
+func (x *RecentManagerClass) GetCallbackGtkRecent4() func() {
+	if x.xGtkRecent4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkRecent4)
+	return func() {
+		rawCallback()
+	}
 }
 
 type RecentManagerPrivate struct {
diff --git a/v4/gtk/gtkscale.go b/v4/gtk/gtkscale.go
index 5fd97bdc8a053d2305ad4bc3c10b91c1bdf15a5b..7441d7e8e8666c3d451239f166f09f4575885218 100644
--- a/v4/gtk/gtkscale.go
+++ b/v4/gtk/gtkscale.go
@@ -20,13 +20,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetLayoutOffsets uintptr
+	xGetLayoutOffsets uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *ScaleClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetLayoutOffsets sets the callback function.
+func (x *ScaleClass) SetCallbackGetLayoutOffsets(cb func(*Scale, int, int)) {
+	if cb == nil {
+		x.xGetLayoutOffsets = 0
+	} else {
+		x.xGetLayoutOffsets = purego.NewCallback(func(ScaleVarp uintptr, XVarp int, YVarp int) {
+			cb(ScaleNewFromInternalPtr(ScaleVarp), XVarp, YVarp)
+		})
+	}
+}
+
+// GetCallbackGetLayoutOffsets gets the callback function.
+func (x *ScaleClass) GetCallbackGetLayoutOffsets() func(*Scale, int, int) {
+	if x.xGetLayoutOffsets == 0 {
+		return nil
+	}
+	var rawCallback func(ScaleVarp uintptr, XVarp int, YVarp int)
+	purego.RegisterFunc(&rawCallback, x.xGetLayoutOffsets)
+	return func(ScaleVar *Scale, XVar int, YVar int) {
+		rawCallback(ScaleVar.GoPointer(), XVar, YVar)
+	}
 }
 
 // A `GtkScale` is a slider control used to select a numeric value.
diff --git a/v4/gtk/gtkscalebutton.go b/v4/gtk/gtkscalebutton.go
index 3e4e2f0d20d105dd96eac4311266004a42963b9b..8fd29c0f8a3c9f654296a15d355ee479748ccfc5 100644
--- a/v4/gtk/gtkscalebutton.go
+++ b/v4/gtk/gtkscalebutton.go
@@ -17,13 +17,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ValueChanged uintptr
+	xValueChanged uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *ScaleButtonClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackValueChanged sets the callback function.
+func (x *ScaleButtonClass) SetCallbackValueChanged(cb func(*ScaleButton, float64)) {
+	if cb == nil {
+		x.xValueChanged = 0
+	} else {
+		x.xValueChanged = purego.NewCallback(func(ButtonVarp uintptr, ValueVarp float64) {
+			cb(ScaleButtonNewFromInternalPtr(ButtonVarp), ValueVarp)
+		})
+	}
+}
+
+// GetCallbackValueChanged gets the callback function.
+func (x *ScaleButtonClass) GetCallbackValueChanged() func(*ScaleButton, float64) {
+	if x.xValueChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ButtonVarp uintptr, ValueVarp float64)
+	purego.RegisterFunc(&rawCallback, x.xValueChanged)
+	return func(ButtonVar *ScaleButton, ValueVar float64) {
+		rawCallback(ButtonVar.GoPointer(), ValueVar)
+	}
 }
 
 // `GtkScaleButton` provides a button which pops up a scale widget.
diff --git a/v4/gtk/gtkscrollable.go b/v4/gtk/gtkscrollable.go
index 21a09773ac5c7386cb2b7aee0e44c6ad127dd9ed..e7d3eb98bb7e116f1b040584dbf3e71295680211 100644
--- a/v4/gtk/gtkscrollable.go
+++ b/v4/gtk/gtkscrollable.go
@@ -16,11 +16,34 @@ 	_ structs.HostLayout
 
 	BaseIface uintptr
 
-	GetBorder uintptr
+	xGetBorder uintptr
 }
 
 func (x *ScrollableInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetBorder sets the callback function.
+func (x *ScrollableInterface) SetCallbackGetBorder(cb func(Scrollable, *Border) bool) {
+	if cb == nil {
+		x.xGetBorder = 0
+	} else {
+		x.xGetBorder = purego.NewCallback(func(ScrollableVarp uintptr, BorderVarp *Border) bool {
+			return cb(&ScrollableBase{Ptr: ScrollableVarp}, BorderVarp)
+		})
+	}
+}
+
+// GetCallbackGetBorder gets the callback function.
+func (x *ScrollableInterface) GetCallbackGetBorder() func(Scrollable, *Border) bool {
+	if x.xGetBorder == 0 {
+		return nil
+	}
+	var rawCallback func(ScrollableVarp uintptr, BorderVarp *Border) bool
+	purego.RegisterFunc(&rawCallback, x.xGetBorder)
+	return func(ScrollableVar Scrollable, BorderVar *Border) bool {
+		return rawCallback(ScrollableVar.GoPointer(), BorderVar)
+	}
 }
 
 // `GtkScrollable` is an interface for widgets with native scrolling ability.
diff --git a/v4/gtk/gtkselectionmodel.go b/v4/gtk/gtkselectionmodel.go
index d0e51c5bc5077317547e235da1d7bae882cb643b..4e9485b2bf504159a06093ae6881ec8c6d01fe8d 100644
--- a/v4/gtk/gtkselectionmodel.go
+++ b/v4/gtk/gtkselectionmodel.go
@@ -27,27 +27,234 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	IsSelected uintptr
+	xIsSelected uintptr
 
-	GetSelectionInRange uintptr
+	xGetSelectionInRange uintptr
 
-	SelectItem uintptr
+	xSelectItem uintptr
 
-	UnselectItem uintptr
+	xUnselectItem uintptr
 
-	SelectRange uintptr
+	xSelectRange uintptr
 
-	UnselectRange uintptr
+	xUnselectRange uintptr
 
-	SelectAll uintptr
+	xSelectAll uintptr
 
-	UnselectAll uintptr
+	xUnselectAll uintptr
 
-	SetSelection uintptr
+	xSetSelection uintptr
 }
 
 func (x *SelectionModelInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackIsSelected sets the callback function.
+func (x *SelectionModelInterface) SetCallbackIsSelected(cb func(SelectionModel, uint) bool) {
+	if cb == nil {
+		x.xIsSelected = 0
+	} else {
+		x.xIsSelected = purego.NewCallback(func(ModelVarp uintptr, PositionVarp uint) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp}, PositionVarp)
+		})
+	}
+}
+
+// GetCallbackIsSelected gets the callback function.
+func (x *SelectionModelInterface) GetCallbackIsSelected() func(SelectionModel, uint) bool {
+	if x.xIsSelected == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, PositionVarp uint) bool
+	purego.RegisterFunc(&rawCallback, x.xIsSelected)
+	return func(ModelVar SelectionModel, PositionVar uint) bool {
+		return rawCallback(ModelVar.GoPointer(), PositionVar)
+	}
+}
+
+// SetCallbackGetSelectionInRange sets the callback function.
+func (x *SelectionModelInterface) SetCallbackGetSelectionInRange(cb func(SelectionModel, uint, uint) *Bitset) {
+	if cb == nil {
+		x.xGetSelectionInRange = 0
+	} else {
+		x.xGetSelectionInRange = purego.NewCallback(func(ModelVarp uintptr, PositionVarp uint, NItemsVarp uint) *Bitset {
+			return cb(&SelectionModelBase{Ptr: ModelVarp}, PositionVarp, NItemsVarp)
+		})
+	}
+}
+
+// GetCallbackGetSelectionInRange gets the callback function.
+func (x *SelectionModelInterface) GetCallbackGetSelectionInRange() func(SelectionModel, uint, uint) *Bitset {
+	if x.xGetSelectionInRange == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, PositionVarp uint, NItemsVarp uint) *Bitset
+	purego.RegisterFunc(&rawCallback, x.xGetSelectionInRange)
+	return func(ModelVar SelectionModel, PositionVar uint, NItemsVar uint) *Bitset {
+		return rawCallback(ModelVar.GoPointer(), PositionVar, NItemsVar)
+	}
+}
+
+// SetCallbackSelectItem sets the callback function.
+func (x *SelectionModelInterface) SetCallbackSelectItem(cb func(SelectionModel, uint, bool) bool) {
+	if cb == nil {
+		x.xSelectItem = 0
+	} else {
+		x.xSelectItem = purego.NewCallback(func(ModelVarp uintptr, PositionVarp uint, UnselectRestVarp bool) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp}, PositionVarp, UnselectRestVarp)
+		})
+	}
+}
+
+// GetCallbackSelectItem gets the callback function.
+func (x *SelectionModelInterface) GetCallbackSelectItem() func(SelectionModel, uint, bool) bool {
+	if x.xSelectItem == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, PositionVarp uint, UnselectRestVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xSelectItem)
+	return func(ModelVar SelectionModel, PositionVar uint, UnselectRestVar bool) bool {
+		return rawCallback(ModelVar.GoPointer(), PositionVar, UnselectRestVar)
+	}
+}
+
+// SetCallbackUnselectItem sets the callback function.
+func (x *SelectionModelInterface) SetCallbackUnselectItem(cb func(SelectionModel, uint) bool) {
+	if cb == nil {
+		x.xUnselectItem = 0
+	} else {
+		x.xUnselectItem = purego.NewCallback(func(ModelVarp uintptr, PositionVarp uint) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp}, PositionVarp)
+		})
+	}
+}
+
+// GetCallbackUnselectItem gets the callback function.
+func (x *SelectionModelInterface) GetCallbackUnselectItem() func(SelectionModel, uint) bool {
+	if x.xUnselectItem == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, PositionVarp uint) bool
+	purego.RegisterFunc(&rawCallback, x.xUnselectItem)
+	return func(ModelVar SelectionModel, PositionVar uint) bool {
+		return rawCallback(ModelVar.GoPointer(), PositionVar)
+	}
+}
+
+// SetCallbackSelectRange sets the callback function.
+func (x *SelectionModelInterface) SetCallbackSelectRange(cb func(SelectionModel, uint, uint, bool) bool) {
+	if cb == nil {
+		x.xSelectRange = 0
+	} else {
+		x.xSelectRange = purego.NewCallback(func(ModelVarp uintptr, PositionVarp uint, NItemsVarp uint, UnselectRestVarp bool) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp}, PositionVarp, NItemsVarp, UnselectRestVarp)
+		})
+	}
+}
+
+// GetCallbackSelectRange gets the callback function.
+func (x *SelectionModelInterface) GetCallbackSelectRange() func(SelectionModel, uint, uint, bool) bool {
+	if x.xSelectRange == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, PositionVarp uint, NItemsVarp uint, UnselectRestVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xSelectRange)
+	return func(ModelVar SelectionModel, PositionVar uint, NItemsVar uint, UnselectRestVar bool) bool {
+		return rawCallback(ModelVar.GoPointer(), PositionVar, NItemsVar, UnselectRestVar)
+	}
+}
+
+// SetCallbackUnselectRange sets the callback function.
+func (x *SelectionModelInterface) SetCallbackUnselectRange(cb func(SelectionModel, uint, uint) bool) {
+	if cb == nil {
+		x.xUnselectRange = 0
+	} else {
+		x.xUnselectRange = purego.NewCallback(func(ModelVarp uintptr, PositionVarp uint, NItemsVarp uint) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp}, PositionVarp, NItemsVarp)
+		})
+	}
+}
+
+// GetCallbackUnselectRange gets the callback function.
+func (x *SelectionModelInterface) GetCallbackUnselectRange() func(SelectionModel, uint, uint) bool {
+	if x.xUnselectRange == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, PositionVarp uint, NItemsVarp uint) bool
+	purego.RegisterFunc(&rawCallback, x.xUnselectRange)
+	return func(ModelVar SelectionModel, PositionVar uint, NItemsVar uint) bool {
+		return rawCallback(ModelVar.GoPointer(), PositionVar, NItemsVar)
+	}
+}
+
+// SetCallbackSelectAll sets the callback function.
+func (x *SelectionModelInterface) SetCallbackSelectAll(cb func(SelectionModel) bool) {
+	if cb == nil {
+		x.xSelectAll = 0
+	} else {
+		x.xSelectAll = purego.NewCallback(func(ModelVarp uintptr) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp})
+		})
+	}
+}
+
+// GetCallbackSelectAll gets the callback function.
+func (x *SelectionModelInterface) GetCallbackSelectAll() func(SelectionModel) bool {
+	if x.xSelectAll == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSelectAll)
+	return func(ModelVar SelectionModel) bool {
+		return rawCallback(ModelVar.GoPointer())
+	}
+}
+
+// SetCallbackUnselectAll sets the callback function.
+func (x *SelectionModelInterface) SetCallbackUnselectAll(cb func(SelectionModel) bool) {
+	if cb == nil {
+		x.xUnselectAll = 0
+	} else {
+		x.xUnselectAll = purego.NewCallback(func(ModelVarp uintptr) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp})
+		})
+	}
+}
+
+// GetCallbackUnselectAll gets the callback function.
+func (x *SelectionModelInterface) GetCallbackUnselectAll() func(SelectionModel) bool {
+	if x.xUnselectAll == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xUnselectAll)
+	return func(ModelVar SelectionModel) bool {
+		return rawCallback(ModelVar.GoPointer())
+	}
+}
+
+// SetCallbackSetSelection sets the callback function.
+func (x *SelectionModelInterface) SetCallbackSetSelection(cb func(SelectionModel, *Bitset, *Bitset) bool) {
+	if cb == nil {
+		x.xSetSelection = 0
+	} else {
+		x.xSetSelection = purego.NewCallback(func(ModelVarp uintptr, SelectedVarp *Bitset, MaskVarp *Bitset) bool {
+			return cb(&SelectionModelBase{Ptr: ModelVarp}, SelectedVarp, MaskVarp)
+		})
+	}
+}
+
+// GetCallbackSetSelection gets the callback function.
+func (x *SelectionModelInterface) GetCallbackSetSelection() func(SelectionModel, *Bitset, *Bitset) bool {
+	if x.xSetSelection == 0 {
+		return nil
+	}
+	var rawCallback func(ModelVarp uintptr, SelectedVarp *Bitset, MaskVarp *Bitset) bool
+	purego.RegisterFunc(&rawCallback, x.xSetSelection)
+	return func(ModelVar SelectionModel, SelectedVar *Bitset, MaskVar *Bitset) bool {
+		return rawCallback(ModelVar.GoPointer(), SelectedVar, MaskVar)
+	}
 }
 
 // `GtkSelectionModel` is an interface that add support for selection to list models.
diff --git a/v4/gtk/gtkshortcutmanager.go b/v4/gtk/gtkshortcutmanager.go
index 045c678bf9b9513b5d55c1638458b5f6efb2eb72..3d96ecc27b2e22dfc05d2182985e05e7a04e3bdb 100644
--- a/v4/gtk/gtkshortcutmanager.go
+++ b/v4/gtk/gtkshortcutmanager.go
@@ -5,6 +5,7 @@ import (
 	"structs"
 	"unsafe"
 
+	"github.com/jwijenbergh/purego"
 	"github.com/jwijenbergh/puregotk/v4/gobject/types"
 )
 
@@ -18,13 +19,59 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	AddController uintptr
+	xAddController uintptr
 
-	RemoveController uintptr
+	xRemoveController uintptr
 }
 
 func (x *ShortcutManagerInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackAddController sets the callback function.
+func (x *ShortcutManagerInterface) SetCallbackAddController(cb func(ShortcutManager, *ShortcutController)) {
+	if cb == nil {
+		x.xAddController = 0
+	} else {
+		x.xAddController = purego.NewCallback(func(SelfVarp uintptr, ControllerVarp uintptr) {
+			cb(&ShortcutManagerBase{Ptr: SelfVarp}, ShortcutControllerNewFromInternalPtr(ControllerVarp))
+		})
+	}
+}
+
+// GetCallbackAddController gets the callback function.
+func (x *ShortcutManagerInterface) GetCallbackAddController() func(ShortcutManager, *ShortcutController) {
+	if x.xAddController == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ControllerVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xAddController)
+	return func(SelfVar ShortcutManager, ControllerVar *ShortcutController) {
+		rawCallback(SelfVar.GoPointer(), ControllerVar.GoPointer())
+	}
+}
+
+// SetCallbackRemoveController sets the callback function.
+func (x *ShortcutManagerInterface) SetCallbackRemoveController(cb func(ShortcutManager, *ShortcutController)) {
+	if cb == nil {
+		x.xRemoveController = 0
+	} else {
+		x.xRemoveController = purego.NewCallback(func(SelfVarp uintptr, ControllerVarp uintptr) {
+			cb(&ShortcutManagerBase{Ptr: SelfVarp}, ShortcutControllerNewFromInternalPtr(ControllerVarp))
+		})
+	}
+}
+
+// GetCallbackRemoveController gets the callback function.
+func (x *ShortcutManagerInterface) GetCallbackRemoveController() func(ShortcutManager, *ShortcutController) {
+	if x.xRemoveController == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ControllerVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRemoveController)
+	return func(SelfVar ShortcutManager, ControllerVar *ShortcutController) {
+		rawCallback(SelfVar.GoPointer(), ControllerVar.GoPointer())
+	}
 }
 
 // The `GtkShortcutManager` interface is used to implement
diff --git a/v4/gtk/gtksorter.go b/v4/gtk/gtksorter.go
index d5c186bdb2d8ee8bf8f1ca4580a8ce26a311a093..9fefe18abd637c9f2f41f50104fac1888d69f40f 100644
--- a/v4/gtk/gtksorter.go
+++ b/v4/gtk/gtksorter.go
@@ -18,29 +18,259 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Compare uintptr
+	xCompare uintptr
 
-	GetOrder uintptr
+	xGetOrder uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 
-	GtkReserved5 uintptr
+	xGtkReserved5 uintptr
 
-	GtkReserved6 uintptr
+	xGtkReserved6 uintptr
 
-	GtkReserved7 uintptr
+	xGtkReserved7 uintptr
 
-	GtkReserved8 uintptr
+	xGtkReserved8 uintptr
 }
 
 func (x *SorterClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackCompare sets the callback function.
+func (x *SorterClass) SetCallbackCompare(cb func(*Sorter, *gobject.Object, *gobject.Object) Ordering) {
+	if cb == nil {
+		x.xCompare = 0
+	} else {
+		x.xCompare = purego.NewCallback(func(SelfVarp uintptr, Item1Varp uintptr, Item2Varp uintptr) Ordering {
+			return cb(SorterNewFromInternalPtr(SelfVarp), gobject.ObjectNewFromInternalPtr(Item1Varp), gobject.ObjectNewFromInternalPtr(Item2Varp))
+		})
+	}
+}
+
+// GetCallbackCompare gets the callback function.
+func (x *SorterClass) GetCallbackCompare() func(*Sorter, *gobject.Object, *gobject.Object) Ordering {
+	if x.xCompare == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, Item1Varp uintptr, Item2Varp uintptr) Ordering
+	purego.RegisterFunc(&rawCallback, x.xCompare)
+	return func(SelfVar *Sorter, Item1Var *gobject.Object, Item2Var *gobject.Object) Ordering {
+		return rawCallback(SelfVar.GoPointer(), Item1Var.GoPointer(), Item2Var.GoPointer())
+	}
+}
+
+// SetCallbackGetOrder sets the callback function.
+func (x *SorterClass) SetCallbackGetOrder(cb func(*Sorter) SorterOrder) {
+	if cb == nil {
+		x.xGetOrder = 0
+	} else {
+		x.xGetOrder = purego.NewCallback(func(SelfVarp uintptr) SorterOrder {
+			return cb(SorterNewFromInternalPtr(SelfVarp))
+		})
+	}
+}
+
+// GetCallbackGetOrder gets the callback function.
+func (x *SorterClass) GetCallbackGetOrder() func(*Sorter) SorterOrder {
+	if x.xGetOrder == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr) SorterOrder
+	purego.RegisterFunc(&rawCallback, x.xGetOrder)
+	return func(SelfVar *Sorter) SorterOrder {
+		return rawCallback(SelfVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved5 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved5(cb func()) {
+	if cb == nil {
+		x.xGtkReserved5 = 0
+	} else {
+		x.xGtkReserved5 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved5 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved5() func() {
+	if x.xGtkReserved5 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved5)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved6 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved6(cb func()) {
+	if cb == nil {
+		x.xGtkReserved6 = 0
+	} else {
+		x.xGtkReserved6 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved6 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved6() func() {
+	if x.xGtkReserved6 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved6)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved7 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved7(cb func()) {
+	if cb == nil {
+		x.xGtkReserved7 = 0
+	} else {
+		x.xGtkReserved7 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved7 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved7() func() {
+	if x.xGtkReserved7 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved7)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved8 sets the callback function.
+func (x *SorterClass) SetCallbackGtkReserved8(cb func()) {
+	if cb == nil {
+		x.xGtkReserved8 = 0
+	} else {
+		x.xGtkReserved8 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved8 gets the callback function.
+func (x *SorterClass) GetCallbackGtkReserved8() func() {
+	if x.xGtkReserved8 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved8)
+	return func() {
+		rawCallback()
+	}
 }
 
 // Describes changes in a sorter in more detail and allows users
diff --git a/v4/gtk/gtkstylecontext.go b/v4/gtk/gtkstylecontext.go
index 19535fa26a3660323a0288d96cb68cf53c3abc79..a4b039d4826b42e5c3387ba63be2b2b87191b2d9 100644
--- a/v4/gtk/gtkstylecontext.go
+++ b/v4/gtk/gtkstylecontext.go
@@ -17,19 +17,134 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *StyleContextClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *StyleContextClass) SetCallbackChanged(cb func(*StyleContext)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(ContextVarp uintptr) {
+			cb(StyleContextNewFromInternalPtr(ContextVarp))
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *StyleContextClass) GetCallbackChanged() func(*StyleContext) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(ContextVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(ContextVar *StyleContext) {
+		rawCallback(ContextVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *StyleContextClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *StyleContextClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *StyleContextClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *StyleContextClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *StyleContextClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *StyleContextClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *StyleContextClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *StyleContextClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 // Flags that modify the behavior of gtk_style_context_to_string().
diff --git a/v4/gtk/gtksymbolicpaintable.go b/v4/gtk/gtksymbolicpaintable.go
index 6cef9738d98d3d9ff6f052274ea34422356120ae..061d58fe46114b09420f1f35260e5c11fb8c0b17 100644
--- a/v4/gtk/gtksymbolicpaintable.go
+++ b/v4/gtk/gtksymbolicpaintable.go
@@ -18,11 +18,34 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	SnapshotSymbolic uintptr
+	xSnapshotSymbolic uintptr
 }
 
 func (x *SymbolicPaintableInterface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackSnapshotSymbolic sets the callback function.
+func (x *SymbolicPaintableInterface) SetCallbackSnapshotSymbolic(cb func(SymbolicPaintable, *gdk.Snapshot, float64, float64, []gdk.RGBA, uint)) {
+	if cb == nil {
+		x.xSnapshotSymbolic = 0
+	} else {
+		x.xSnapshotSymbolic = purego.NewCallback(func(PaintableVarp uintptr, SnapshotVarp uintptr, WidthVarp float64, HeightVarp float64, ColorsVarp []gdk.RGBA, NColorsVarp uint) {
+			cb(&SymbolicPaintableBase{Ptr: PaintableVarp}, gdk.SnapshotNewFromInternalPtr(SnapshotVarp), WidthVarp, HeightVarp, ColorsVarp, NColorsVarp)
+		})
+	}
+}
+
+// GetCallbackSnapshotSymbolic gets the callback function.
+func (x *SymbolicPaintableInterface) GetCallbackSnapshotSymbolic() func(SymbolicPaintable, *gdk.Snapshot, float64, float64, []gdk.RGBA, uint) {
+	if x.xSnapshotSymbolic == 0 {
+		return nil
+	}
+	var rawCallback func(PaintableVarp uintptr, SnapshotVarp uintptr, WidthVarp float64, HeightVarp float64, ColorsVarp []gdk.RGBA, NColorsVarp uint)
+	purego.RegisterFunc(&rawCallback, x.xSnapshotSymbolic)
+	return func(PaintableVar SymbolicPaintable, SnapshotVar *gdk.Snapshot, WidthVar float64, HeightVar float64, ColorsVar []gdk.RGBA, NColorsVar uint) {
+		rawCallback(PaintableVar.GoPointer(), SnapshotVar.GoPointer(), WidthVar, HeightVar, ColorsVar, NColorsVar)
+	}
 }
 
 // `GtkSymbolicPaintable` is an interface that support symbolic colors in
diff --git a/v4/gtk/gtktextbuffer.go b/v4/gtk/gtktextbuffer.go
index be2c2e2836c9222a0448743309c13b8989f208a5..2e70b9d2bcfd6d57da39c7807df45bcbf82970f5 100644
--- a/v4/gtk/gtktextbuffer.go
+++ b/v4/gtk/gtktextbuffer.go
@@ -19,47 +19,484 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	InsertText uintptr
+	xInsertText uintptr
 
-	InsertPaintable uintptr
+	xInsertPaintable uintptr
 
-	InsertChildAnchor uintptr
+	xInsertChildAnchor uintptr
 
-	DeleteRange uintptr
+	xDeleteRange uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	ModifiedChanged uintptr
+	xModifiedChanged uintptr
 
-	MarkSet uintptr
+	xMarkSet uintptr
 
-	MarkDeleted uintptr
+	xMarkDeleted uintptr
 
-	ApplyTag uintptr
+	xApplyTag uintptr
 
-	RemoveTag uintptr
+	xRemoveTag uintptr
 
-	BeginUserAction uintptr
+	xBeginUserAction uintptr
 
-	EndUserAction uintptr
+	xEndUserAction uintptr
 
-	PasteDone uintptr
+	xPasteDone uintptr
 
-	Undo uintptr
+	xUndo uintptr
 
-	Redo uintptr
+	xRedo uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *TextBufferClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackInsertText sets the callback function.
+func (x *TextBufferClass) SetCallbackInsertText(cb func(*TextBuffer, *TextIter, string, int)) {
+	if cb == nil {
+		x.xInsertText = 0
+	} else {
+		x.xInsertText = purego.NewCallback(func(BufferVarp uintptr, PosVarp *TextIter, NewTextVarp string, NewTextLengthVarp int) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), PosVarp, NewTextVarp, NewTextLengthVarp)
+		})
+	}
+}
+
+// GetCallbackInsertText gets the callback function.
+func (x *TextBufferClass) GetCallbackInsertText() func(*TextBuffer, *TextIter, string, int) {
+	if x.xInsertText == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, PosVarp *TextIter, NewTextVarp string, NewTextLengthVarp int)
+	purego.RegisterFunc(&rawCallback, x.xInsertText)
+	return func(BufferVar *TextBuffer, PosVar *TextIter, NewTextVar string, NewTextLengthVar int) {
+		rawCallback(BufferVar.GoPointer(), PosVar, NewTextVar, NewTextLengthVar)
+	}
+}
+
+// SetCallbackInsertPaintable sets the callback function.
+func (x *TextBufferClass) SetCallbackInsertPaintable(cb func(*TextBuffer, *TextIter, gdk.Paintable)) {
+	if cb == nil {
+		x.xInsertPaintable = 0
+	} else {
+		x.xInsertPaintable = purego.NewCallback(func(BufferVarp uintptr, IterVarp *TextIter, PaintableVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), IterVarp, &gdk.PaintableBase{Ptr: PaintableVarp})
+		})
+	}
+}
+
+// GetCallbackInsertPaintable gets the callback function.
+func (x *TextBufferClass) GetCallbackInsertPaintable() func(*TextBuffer, *TextIter, gdk.Paintable) {
+	if x.xInsertPaintable == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, IterVarp *TextIter, PaintableVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInsertPaintable)
+	return func(BufferVar *TextBuffer, IterVar *TextIter, PaintableVar gdk.Paintable) {
+		rawCallback(BufferVar.GoPointer(), IterVar, PaintableVar.GoPointer())
+	}
+}
+
+// SetCallbackInsertChildAnchor sets the callback function.
+func (x *TextBufferClass) SetCallbackInsertChildAnchor(cb func(*TextBuffer, *TextIter, *TextChildAnchor)) {
+	if cb == nil {
+		x.xInsertChildAnchor = 0
+	} else {
+		x.xInsertChildAnchor = purego.NewCallback(func(BufferVarp uintptr, IterVarp *TextIter, AnchorVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), IterVarp, TextChildAnchorNewFromInternalPtr(AnchorVarp))
+		})
+	}
+}
+
+// GetCallbackInsertChildAnchor gets the callback function.
+func (x *TextBufferClass) GetCallbackInsertChildAnchor() func(*TextBuffer, *TextIter, *TextChildAnchor) {
+	if x.xInsertChildAnchor == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, IterVarp *TextIter, AnchorVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInsertChildAnchor)
+	return func(BufferVar *TextBuffer, IterVar *TextIter, AnchorVar *TextChildAnchor) {
+		rawCallback(BufferVar.GoPointer(), IterVar, AnchorVar.GoPointer())
+	}
+}
+
+// SetCallbackDeleteRange sets the callback function.
+func (x *TextBufferClass) SetCallbackDeleteRange(cb func(*TextBuffer, *TextIter, *TextIter)) {
+	if cb == nil {
+		x.xDeleteRange = 0
+	} else {
+		x.xDeleteRange = purego.NewCallback(func(BufferVarp uintptr, StartVarp *TextIter, EndVarp *TextIter) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), StartVarp, EndVarp)
+		})
+	}
+}
+
+// GetCallbackDeleteRange gets the callback function.
+func (x *TextBufferClass) GetCallbackDeleteRange() func(*TextBuffer, *TextIter, *TextIter) {
+	if x.xDeleteRange == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, StartVarp *TextIter, EndVarp *TextIter)
+	purego.RegisterFunc(&rawCallback, x.xDeleteRange)
+	return func(BufferVar *TextBuffer, StartVar *TextIter, EndVar *TextIter) {
+		rawCallback(BufferVar.GoPointer(), StartVar, EndVar)
+	}
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *TextBufferClass) SetCallbackChanged(cb func(*TextBuffer)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(BufferVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp))
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *TextBufferClass) GetCallbackChanged() func(*TextBuffer) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(BufferVar *TextBuffer) {
+		rawCallback(BufferVar.GoPointer())
+	}
+}
+
+// SetCallbackModifiedChanged sets the callback function.
+func (x *TextBufferClass) SetCallbackModifiedChanged(cb func(*TextBuffer)) {
+	if cb == nil {
+		x.xModifiedChanged = 0
+	} else {
+		x.xModifiedChanged = purego.NewCallback(func(BufferVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp))
+		})
+	}
+}
+
+// GetCallbackModifiedChanged gets the callback function.
+func (x *TextBufferClass) GetCallbackModifiedChanged() func(*TextBuffer) {
+	if x.xModifiedChanged == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xModifiedChanged)
+	return func(BufferVar *TextBuffer) {
+		rawCallback(BufferVar.GoPointer())
+	}
+}
+
+// SetCallbackMarkSet sets the callback function.
+func (x *TextBufferClass) SetCallbackMarkSet(cb func(*TextBuffer, *TextIter, *TextMark)) {
+	if cb == nil {
+		x.xMarkSet = 0
+	} else {
+		x.xMarkSet = purego.NewCallback(func(BufferVarp uintptr, LocationVarp *TextIter, MarkVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), LocationVarp, TextMarkNewFromInternalPtr(MarkVarp))
+		})
+	}
+}
+
+// GetCallbackMarkSet gets the callback function.
+func (x *TextBufferClass) GetCallbackMarkSet() func(*TextBuffer, *TextIter, *TextMark) {
+	if x.xMarkSet == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, LocationVarp *TextIter, MarkVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMarkSet)
+	return func(BufferVar *TextBuffer, LocationVar *TextIter, MarkVar *TextMark) {
+		rawCallback(BufferVar.GoPointer(), LocationVar, MarkVar.GoPointer())
+	}
+}
+
+// SetCallbackMarkDeleted sets the callback function.
+func (x *TextBufferClass) SetCallbackMarkDeleted(cb func(*TextBuffer, *TextMark)) {
+	if cb == nil {
+		x.xMarkDeleted = 0
+	} else {
+		x.xMarkDeleted = purego.NewCallback(func(BufferVarp uintptr, MarkVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), TextMarkNewFromInternalPtr(MarkVarp))
+		})
+	}
+}
+
+// GetCallbackMarkDeleted gets the callback function.
+func (x *TextBufferClass) GetCallbackMarkDeleted() func(*TextBuffer, *TextMark) {
+	if x.xMarkDeleted == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, MarkVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMarkDeleted)
+	return func(BufferVar *TextBuffer, MarkVar *TextMark) {
+		rawCallback(BufferVar.GoPointer(), MarkVar.GoPointer())
+	}
+}
+
+// SetCallbackApplyTag sets the callback function.
+func (x *TextBufferClass) SetCallbackApplyTag(cb func(*TextBuffer, *TextTag, *TextIter, *TextIter)) {
+	if cb == nil {
+		x.xApplyTag = 0
+	} else {
+		x.xApplyTag = purego.NewCallback(func(BufferVarp uintptr, TagVarp uintptr, StartVarp *TextIter, EndVarp *TextIter) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), TextTagNewFromInternalPtr(TagVarp), StartVarp, EndVarp)
+		})
+	}
+}
+
+// GetCallbackApplyTag gets the callback function.
+func (x *TextBufferClass) GetCallbackApplyTag() func(*TextBuffer, *TextTag, *TextIter, *TextIter) {
+	if x.xApplyTag == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, TagVarp uintptr, StartVarp *TextIter, EndVarp *TextIter)
+	purego.RegisterFunc(&rawCallback, x.xApplyTag)
+	return func(BufferVar *TextBuffer, TagVar *TextTag, StartVar *TextIter, EndVar *TextIter) {
+		rawCallback(BufferVar.GoPointer(), TagVar.GoPointer(), StartVar, EndVar)
+	}
+}
+
+// SetCallbackRemoveTag sets the callback function.
+func (x *TextBufferClass) SetCallbackRemoveTag(cb func(*TextBuffer, *TextTag, *TextIter, *TextIter)) {
+	if cb == nil {
+		x.xRemoveTag = 0
+	} else {
+		x.xRemoveTag = purego.NewCallback(func(BufferVarp uintptr, TagVarp uintptr, StartVarp *TextIter, EndVarp *TextIter) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), TextTagNewFromInternalPtr(TagVarp), StartVarp, EndVarp)
+		})
+	}
+}
+
+// GetCallbackRemoveTag gets the callback function.
+func (x *TextBufferClass) GetCallbackRemoveTag() func(*TextBuffer, *TextTag, *TextIter, *TextIter) {
+	if x.xRemoveTag == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, TagVarp uintptr, StartVarp *TextIter, EndVarp *TextIter)
+	purego.RegisterFunc(&rawCallback, x.xRemoveTag)
+	return func(BufferVar *TextBuffer, TagVar *TextTag, StartVar *TextIter, EndVar *TextIter) {
+		rawCallback(BufferVar.GoPointer(), TagVar.GoPointer(), StartVar, EndVar)
+	}
+}
+
+// SetCallbackBeginUserAction sets the callback function.
+func (x *TextBufferClass) SetCallbackBeginUserAction(cb func(*TextBuffer)) {
+	if cb == nil {
+		x.xBeginUserAction = 0
+	} else {
+		x.xBeginUserAction = purego.NewCallback(func(BufferVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp))
+		})
+	}
+}
+
+// GetCallbackBeginUserAction gets the callback function.
+func (x *TextBufferClass) GetCallbackBeginUserAction() func(*TextBuffer) {
+	if x.xBeginUserAction == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xBeginUserAction)
+	return func(BufferVar *TextBuffer) {
+		rawCallback(BufferVar.GoPointer())
+	}
+}
+
+// SetCallbackEndUserAction sets the callback function.
+func (x *TextBufferClass) SetCallbackEndUserAction(cb func(*TextBuffer)) {
+	if cb == nil {
+		x.xEndUserAction = 0
+	} else {
+		x.xEndUserAction = purego.NewCallback(func(BufferVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp))
+		})
+	}
+}
+
+// GetCallbackEndUserAction gets the callback function.
+func (x *TextBufferClass) GetCallbackEndUserAction() func(*TextBuffer) {
+	if x.xEndUserAction == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEndUserAction)
+	return func(BufferVar *TextBuffer) {
+		rawCallback(BufferVar.GoPointer())
+	}
+}
+
+// SetCallbackPasteDone sets the callback function.
+func (x *TextBufferClass) SetCallbackPasteDone(cb func(*TextBuffer, *gdk.Clipboard)) {
+	if cb == nil {
+		x.xPasteDone = 0
+	} else {
+		x.xPasteDone = purego.NewCallback(func(BufferVarp uintptr, ClipboardVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp), gdk.ClipboardNewFromInternalPtr(ClipboardVarp))
+		})
+	}
+}
+
+// GetCallbackPasteDone gets the callback function.
+func (x *TextBufferClass) GetCallbackPasteDone() func(*TextBuffer, *gdk.Clipboard) {
+	if x.xPasteDone == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr, ClipboardVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPasteDone)
+	return func(BufferVar *TextBuffer, ClipboardVar *gdk.Clipboard) {
+		rawCallback(BufferVar.GoPointer(), ClipboardVar.GoPointer())
+	}
+}
+
+// SetCallbackUndo sets the callback function.
+func (x *TextBufferClass) SetCallbackUndo(cb func(*TextBuffer)) {
+	if cb == nil {
+		x.xUndo = 0
+	} else {
+		x.xUndo = purego.NewCallback(func(BufferVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp))
+		})
+	}
+}
+
+// GetCallbackUndo gets the callback function.
+func (x *TextBufferClass) GetCallbackUndo() func(*TextBuffer) {
+	if x.xUndo == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUndo)
+	return func(BufferVar *TextBuffer) {
+		rawCallback(BufferVar.GoPointer())
+	}
+}
+
+// SetCallbackRedo sets the callback function.
+func (x *TextBufferClass) SetCallbackRedo(cb func(*TextBuffer)) {
+	if cb == nil {
+		x.xRedo = 0
+	} else {
+		x.xRedo = purego.NewCallback(func(BufferVarp uintptr) {
+			cb(TextBufferNewFromInternalPtr(BufferVarp))
+		})
+	}
+}
+
+// GetCallbackRedo gets the callback function.
+func (x *TextBufferClass) GetCallbackRedo() func(*TextBuffer) {
+	if x.xRedo == 0 {
+		return nil
+	}
+	var rawCallback func(BufferVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRedo)
+	return func(BufferVar *TextBuffer) {
+		rawCallback(BufferVar.GoPointer())
+	}
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *TextBufferClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *TextBufferClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *TextBufferClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *TextBufferClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *TextBufferClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *TextBufferClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *TextBufferClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *TextBufferClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 type TextBufferPrivate struct {
diff --git a/v4/gtk/gtktextchild.go b/v4/gtk/gtktextchild.go
index b89919014b9a25f25d661e6cbaac5710db3d5175..c088c67b60e0ba41a3156fe35f04f37bfb86b795 100644
--- a/v4/gtk/gtktextchild.go
+++ b/v4/gtk/gtktextchild.go
@@ -16,17 +16,109 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *TextChildAnchorClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *TextChildAnchorClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *TextChildAnchorClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *TextChildAnchorClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *TextChildAnchorClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *TextChildAnchorClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *TextChildAnchorClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *TextChildAnchorClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *TextChildAnchorClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 // A `GtkTextChildAnchor` is a spot in a `GtkTextBuffer` where child widgets can
diff --git a/v4/gtk/gtktextview.go b/v4/gtk/gtktextview.go
index cd584e434877b7533bad32cfd732f3aa896a35a1..472b66539f89b40d4171ce3c707f902836a68bc5 100644
--- a/v4/gtk/gtktextview.go
+++ b/v4/gtk/gtktextview.go
@@ -20,37 +20,346 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	MoveCursor uintptr
+	xMoveCursor uintptr
 
-	SetAnchor uintptr
+	xSetAnchor uintptr
 
-	InsertAtCursor uintptr
+	xInsertAtCursor uintptr
 
-	DeleteFromCursor uintptr
+	xDeleteFromCursor uintptr
 
-	Backspace uintptr
+	xBackspace uintptr
 
-	CutClipboard uintptr
+	xCutClipboard uintptr
 
-	CopyClipboard uintptr
+	xCopyClipboard uintptr
 
-	PasteClipboard uintptr
+	xPasteClipboard uintptr
 
-	ToggleOverwrite uintptr
+	xToggleOverwrite uintptr
 
-	CreateBuffer uintptr
+	xCreateBuffer uintptr
 
-	SnapshotLayer uintptr
+	xSnapshotLayer uintptr
 
-	ExtendSelection uintptr
+	xExtendSelection uintptr
 
-	InsertEmoji uintptr
+	xInsertEmoji uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *TextViewClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackMoveCursor sets the callback function.
+func (x *TextViewClass) SetCallbackMoveCursor(cb func(*TextView, MovementStep, int, bool)) {
+	if cb == nil {
+		x.xMoveCursor = 0
+	} else {
+		x.xMoveCursor = purego.NewCallback(func(TextViewVarp uintptr, StepVarp MovementStep, CountVarp int, ExtendSelectionVarp bool) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp), StepVarp, CountVarp, ExtendSelectionVarp)
+		})
+	}
+}
+
+// GetCallbackMoveCursor gets the callback function.
+func (x *TextViewClass) GetCallbackMoveCursor() func(*TextView, MovementStep, int, bool) {
+	if x.xMoveCursor == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr, StepVarp MovementStep, CountVarp int, ExtendSelectionVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xMoveCursor)
+	return func(TextViewVar *TextView, StepVar MovementStep, CountVar int, ExtendSelectionVar bool) {
+		rawCallback(TextViewVar.GoPointer(), StepVar, CountVar, ExtendSelectionVar)
+	}
+}
+
+// SetCallbackSetAnchor sets the callback function.
+func (x *TextViewClass) SetCallbackSetAnchor(cb func(*TextView)) {
+	if cb == nil {
+		x.xSetAnchor = 0
+	} else {
+		x.xSetAnchor = purego.NewCallback(func(TextViewVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp))
+		})
+	}
+}
+
+// GetCallbackSetAnchor gets the callback function.
+func (x *TextViewClass) GetCallbackSetAnchor() func(*TextView) {
+	if x.xSetAnchor == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetAnchor)
+	return func(TextViewVar *TextView) {
+		rawCallback(TextViewVar.GoPointer())
+	}
+}
+
+// SetCallbackInsertAtCursor sets the callback function.
+func (x *TextViewClass) SetCallbackInsertAtCursor(cb func(*TextView, string)) {
+	if cb == nil {
+		x.xInsertAtCursor = 0
+	} else {
+		x.xInsertAtCursor = purego.NewCallback(func(TextViewVarp uintptr, StrVarp string) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp), StrVarp)
+		})
+	}
+}
+
+// GetCallbackInsertAtCursor gets the callback function.
+func (x *TextViewClass) GetCallbackInsertAtCursor() func(*TextView, string) {
+	if x.xInsertAtCursor == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr, StrVarp string)
+	purego.RegisterFunc(&rawCallback, x.xInsertAtCursor)
+	return func(TextViewVar *TextView, StrVar string) {
+		rawCallback(TextViewVar.GoPointer(), StrVar)
+	}
+}
+
+// SetCallbackDeleteFromCursor sets the callback function.
+func (x *TextViewClass) SetCallbackDeleteFromCursor(cb func(*TextView, DeleteType, int)) {
+	if cb == nil {
+		x.xDeleteFromCursor = 0
+	} else {
+		x.xDeleteFromCursor = purego.NewCallback(func(TextViewVarp uintptr, TypeVarp DeleteType, CountVarp int) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp), TypeVarp, CountVarp)
+		})
+	}
+}
+
+// GetCallbackDeleteFromCursor gets the callback function.
+func (x *TextViewClass) GetCallbackDeleteFromCursor() func(*TextView, DeleteType, int) {
+	if x.xDeleteFromCursor == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr, TypeVarp DeleteType, CountVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDeleteFromCursor)
+	return func(TextViewVar *TextView, TypeVar DeleteType, CountVar int) {
+		rawCallback(TextViewVar.GoPointer(), TypeVar, CountVar)
+	}
+}
+
+// SetCallbackBackspace sets the callback function.
+func (x *TextViewClass) SetCallbackBackspace(cb func(*TextView)) {
+	if cb == nil {
+		x.xBackspace = 0
+	} else {
+		x.xBackspace = purego.NewCallback(func(TextViewVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp))
+		})
+	}
+}
+
+// GetCallbackBackspace gets the callback function.
+func (x *TextViewClass) GetCallbackBackspace() func(*TextView) {
+	if x.xBackspace == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xBackspace)
+	return func(TextViewVar *TextView) {
+		rawCallback(TextViewVar.GoPointer())
+	}
+}
+
+// SetCallbackCutClipboard sets the callback function.
+func (x *TextViewClass) SetCallbackCutClipboard(cb func(*TextView)) {
+	if cb == nil {
+		x.xCutClipboard = 0
+	} else {
+		x.xCutClipboard = purego.NewCallback(func(TextViewVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp))
+		})
+	}
+}
+
+// GetCallbackCutClipboard gets the callback function.
+func (x *TextViewClass) GetCallbackCutClipboard() func(*TextView) {
+	if x.xCutClipboard == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCutClipboard)
+	return func(TextViewVar *TextView) {
+		rawCallback(TextViewVar.GoPointer())
+	}
+}
+
+// SetCallbackCopyClipboard sets the callback function.
+func (x *TextViewClass) SetCallbackCopyClipboard(cb func(*TextView)) {
+	if cb == nil {
+		x.xCopyClipboard = 0
+	} else {
+		x.xCopyClipboard = purego.NewCallback(func(TextViewVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp))
+		})
+	}
+}
+
+// GetCallbackCopyClipboard gets the callback function.
+func (x *TextViewClass) GetCallbackCopyClipboard() func(*TextView) {
+	if x.xCopyClipboard == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCopyClipboard)
+	return func(TextViewVar *TextView) {
+		rawCallback(TextViewVar.GoPointer())
+	}
+}
+
+// SetCallbackPasteClipboard sets the callback function.
+func (x *TextViewClass) SetCallbackPasteClipboard(cb func(*TextView)) {
+	if cb == nil {
+		x.xPasteClipboard = 0
+	} else {
+		x.xPasteClipboard = purego.NewCallback(func(TextViewVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp))
+		})
+	}
+}
+
+// GetCallbackPasteClipboard gets the callback function.
+func (x *TextViewClass) GetCallbackPasteClipboard() func(*TextView) {
+	if x.xPasteClipboard == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xPasteClipboard)
+	return func(TextViewVar *TextView) {
+		rawCallback(TextViewVar.GoPointer())
+	}
+}
+
+// SetCallbackToggleOverwrite sets the callback function.
+func (x *TextViewClass) SetCallbackToggleOverwrite(cb func(*TextView)) {
+	if cb == nil {
+		x.xToggleOverwrite = 0
+	} else {
+		x.xToggleOverwrite = purego.NewCallback(func(TextViewVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp))
+		})
+	}
+}
+
+// GetCallbackToggleOverwrite gets the callback function.
+func (x *TextViewClass) GetCallbackToggleOverwrite() func(*TextView) {
+	if x.xToggleOverwrite == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xToggleOverwrite)
+	return func(TextViewVar *TextView) {
+		rawCallback(TextViewVar.GoPointer())
+	}
+}
+
+// SetCallbackCreateBuffer sets the callback function.
+func (x *TextViewClass) SetCallbackCreateBuffer(cb func(*TextView) *TextBuffer) {
+	if cb == nil {
+		x.xCreateBuffer = 0
+	} else {
+		x.xCreateBuffer = purego.NewCallback(func(TextViewVarp uintptr) uintptr {
+			ret := cb(TextViewNewFromInternalPtr(TextViewVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackCreateBuffer gets the callback function.
+func (x *TextViewClass) GetCallbackCreateBuffer() func(*TextView) *TextBuffer {
+	if x.xCreateBuffer == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateBuffer)
+	return func(TextViewVar *TextView) *TextBuffer {
+		rawRet := rawCallback(TextViewVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &TextBuffer{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackSnapshotLayer sets the callback function.
+func (x *TextViewClass) SetCallbackSnapshotLayer(cb func(*TextView, TextViewLayer, *Snapshot)) {
+	if cb == nil {
+		x.xSnapshotLayer = 0
+	} else {
+		x.xSnapshotLayer = purego.NewCallback(func(TextViewVarp uintptr, LayerVarp TextViewLayer, SnapshotVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp), LayerVarp, SnapshotNewFromInternalPtr(SnapshotVarp))
+		})
+	}
+}
+
+// GetCallbackSnapshotLayer gets the callback function.
+func (x *TextViewClass) GetCallbackSnapshotLayer() func(*TextView, TextViewLayer, *Snapshot) {
+	if x.xSnapshotLayer == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr, LayerVarp TextViewLayer, SnapshotVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSnapshotLayer)
+	return func(TextViewVar *TextView, LayerVar TextViewLayer, SnapshotVar *Snapshot) {
+		rawCallback(TextViewVar.GoPointer(), LayerVar, SnapshotVar.GoPointer())
+	}
+}
+
+// SetCallbackExtendSelection sets the callback function.
+func (x *TextViewClass) SetCallbackExtendSelection(cb func(*TextView, TextExtendSelection, *TextIter, *TextIter, *TextIter) bool) {
+	if cb == nil {
+		x.xExtendSelection = 0
+	} else {
+		x.xExtendSelection = purego.NewCallback(func(TextViewVarp uintptr, GranularityVarp TextExtendSelection, LocationVarp *TextIter, StartVarp *TextIter, EndVarp *TextIter) bool {
+			return cb(TextViewNewFromInternalPtr(TextViewVarp), GranularityVarp, LocationVarp, StartVarp, EndVarp)
+		})
+	}
+}
+
+// GetCallbackExtendSelection gets the callback function.
+func (x *TextViewClass) GetCallbackExtendSelection() func(*TextView, TextExtendSelection, *TextIter, *TextIter, *TextIter) bool {
+	if x.xExtendSelection == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr, GranularityVarp TextExtendSelection, LocationVarp *TextIter, StartVarp *TextIter, EndVarp *TextIter) bool
+	purego.RegisterFunc(&rawCallback, x.xExtendSelection)
+	return func(TextViewVar *TextView, GranularityVar TextExtendSelection, LocationVar *TextIter, StartVar *TextIter, EndVar *TextIter) bool {
+		return rawCallback(TextViewVar.GoPointer(), GranularityVar, LocationVar, StartVar, EndVar)
+	}
+}
+
+// SetCallbackInsertEmoji sets the callback function.
+func (x *TextViewClass) SetCallbackInsertEmoji(cb func(*TextView)) {
+	if cb == nil {
+		x.xInsertEmoji = 0
+	} else {
+		x.xInsertEmoji = purego.NewCallback(func(TextViewVarp uintptr) {
+			cb(TextViewNewFromInternalPtr(TextViewVarp))
+		})
+	}
+}
+
+// GetCallbackInsertEmoji gets the callback function.
+func (x *TextViewClass) GetCallbackInsertEmoji() func(*TextView) {
+	if x.xInsertEmoji == 0 {
+		return nil
+	}
+	var rawCallback func(TextViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xInsertEmoji)
+	return func(TextViewVar *TextView) {
+		rawCallback(TextViewVar.GoPointer())
+	}
 }
 
 type TextViewPrivate struct {
diff --git a/v4/gtk/gtktogglebutton.go b/v4/gtk/gtktogglebutton.go
index 20e37b5f97ba34e8a03d741c67a148217ba2708f..72f48fae4b6b0e7dabeb11b52128d402e53507cb 100644
--- a/v4/gtk/gtktogglebutton.go
+++ b/v4/gtk/gtktogglebutton.go
@@ -17,13 +17,36 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Toggled uintptr
+	xToggled uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *ToggleButtonClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackToggled sets the callback function.
+func (x *ToggleButtonClass) SetCallbackToggled(cb func(*ToggleButton)) {
+	if cb == nil {
+		x.xToggled = 0
+	} else {
+		x.xToggled = purego.NewCallback(func(ToggleButtonVarp uintptr) {
+			cb(ToggleButtonNewFromInternalPtr(ToggleButtonVarp))
+		})
+	}
+}
+
+// GetCallbackToggled gets the callback function.
+func (x *ToggleButtonClass) GetCallbackToggled() func(*ToggleButton) {
+	if x.xToggled == 0 {
+		return nil
+	}
+	var rawCallback func(ToggleButtonVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xToggled)
+	return func(ToggleButtonVar *ToggleButton) {
+		rawCallback(ToggleButtonVar.GoPointer())
+	}
 }
 
 // A `GtkToggleButton` is a button which remains “pressed-in” when
diff --git a/v4/gtk/gtktreednd.go b/v4/gtk/gtktreednd.go
index 69cccde5dc08228153029826757295bd2f839310..028562129cf9955baa5a4723200cbdbff518f79a 100644
--- a/v4/gtk/gtktreednd.go
+++ b/v4/gtk/gtktreednd.go
@@ -17,29 +17,154 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	DragDataReceived uintptr
+	xDragDataReceived uintptr
 
-	RowDropPossible uintptr
+	xRowDropPossible uintptr
 }
 
 func (x *TreeDragDestIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackDragDataReceived sets the callback function.
+func (x *TreeDragDestIface) SetCallbackDragDataReceived(cb func(TreeDragDest, *TreePath, *gobject.Value) bool) {
+	if cb == nil {
+		x.xDragDataReceived = 0
+	} else {
+		x.xDragDataReceived = purego.NewCallback(func(DragDestVarp uintptr, DestVarp *TreePath, ValueVarp *gobject.Value) bool {
+			return cb(&TreeDragDestBase{Ptr: DragDestVarp}, DestVarp, ValueVarp)
+		})
+	}
+}
+
+// GetCallbackDragDataReceived gets the callback function.
+func (x *TreeDragDestIface) GetCallbackDragDataReceived() func(TreeDragDest, *TreePath, *gobject.Value) bool {
+	if x.xDragDataReceived == 0 {
+		return nil
+	}
+	var rawCallback func(DragDestVarp uintptr, DestVarp *TreePath, ValueVarp *gobject.Value) bool
+	purego.RegisterFunc(&rawCallback, x.xDragDataReceived)
+	return func(DragDestVar TreeDragDest, DestVar *TreePath, ValueVar *gobject.Value) bool {
+		return rawCallback(DragDestVar.GoPointer(), DestVar, ValueVar)
+	}
+}
+
+// SetCallbackRowDropPossible sets the callback function.
+func (x *TreeDragDestIface) SetCallbackRowDropPossible(cb func(TreeDragDest, *TreePath, *gobject.Value) bool) {
+	if cb == nil {
+		x.xRowDropPossible = 0
+	} else {
+		x.xRowDropPossible = purego.NewCallback(func(DragDestVarp uintptr, DestPathVarp *TreePath, ValueVarp *gobject.Value) bool {
+			return cb(&TreeDragDestBase{Ptr: DragDestVarp}, DestPathVarp, ValueVarp)
+		})
+	}
+}
+
+// GetCallbackRowDropPossible gets the callback function.
+func (x *TreeDragDestIface) GetCallbackRowDropPossible() func(TreeDragDest, *TreePath, *gobject.Value) bool {
+	if x.xRowDropPossible == 0 {
+		return nil
+	}
+	var rawCallback func(DragDestVarp uintptr, DestPathVarp *TreePath, ValueVarp *gobject.Value) bool
+	purego.RegisterFunc(&rawCallback, x.xRowDropPossible)
+	return func(DragDestVar TreeDragDest, DestPathVar *TreePath, ValueVar *gobject.Value) bool {
+		return rawCallback(DragDestVar.GoPointer(), DestPathVar, ValueVar)
+	}
+}
+
 type TreeDragSourceIface struct {
 	_ structs.HostLayout
 
 	GIface uintptr
 
-	RowDraggable uintptr
+	xRowDraggable uintptr
 
-	DragDataGet uintptr
+	xDragDataGet uintptr
 
-	DragDataDelete uintptr
+	xDragDataDelete uintptr
 }
 
 func (x *TreeDragSourceIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackRowDraggable sets the callback function.
+func (x *TreeDragSourceIface) SetCallbackRowDraggable(cb func(TreeDragSource, *TreePath) bool) {
+	if cb == nil {
+		x.xRowDraggable = 0
+	} else {
+		x.xRowDraggable = purego.NewCallback(func(DragSourceVarp uintptr, PathVarp *TreePath) bool {
+			return cb(&TreeDragSourceBase{Ptr: DragSourceVarp}, PathVarp)
+		})
+	}
+}
+
+// GetCallbackRowDraggable gets the callback function.
+func (x *TreeDragSourceIface) GetCallbackRowDraggable() func(TreeDragSource, *TreePath) bool {
+	if x.xRowDraggable == 0 {
+		return nil
+	}
+	var rawCallback func(DragSourceVarp uintptr, PathVarp *TreePath) bool
+	purego.RegisterFunc(&rawCallback, x.xRowDraggable)
+	return func(DragSourceVar TreeDragSource, PathVar *TreePath) bool {
+		return rawCallback(DragSourceVar.GoPointer(), PathVar)
+	}
+}
+
+// SetCallbackDragDataGet sets the callback function.
+func (x *TreeDragSourceIface) SetCallbackDragDataGet(cb func(TreeDragSource, *TreePath) *gdk.ContentProvider) {
+	if cb == nil {
+		x.xDragDataGet = 0
+	} else {
+		x.xDragDataGet = purego.NewCallback(func(DragSourceVarp uintptr, PathVarp *TreePath) uintptr {
+			ret := cb(&TreeDragSourceBase{Ptr: DragSourceVarp}, PathVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackDragDataGet gets the callback function.
+func (x *TreeDragSourceIface) GetCallbackDragDataGet() func(TreeDragSource, *TreePath) *gdk.ContentProvider {
+	if x.xDragDataGet == 0 {
+		return nil
+	}
+	var rawCallback func(DragSourceVarp uintptr, PathVarp *TreePath) uintptr
+	purego.RegisterFunc(&rawCallback, x.xDragDataGet)
+	return func(DragSourceVar TreeDragSource, PathVar *TreePath) *gdk.ContentProvider {
+		rawRet := rawCallback(DragSourceVar.GoPointer(), PathVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &gdk.ContentProvider{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackDragDataDelete sets the callback function.
+func (x *TreeDragSourceIface) SetCallbackDragDataDelete(cb func(TreeDragSource, *TreePath) bool) {
+	if cb == nil {
+		x.xDragDataDelete = 0
+	} else {
+		x.xDragDataDelete = purego.NewCallback(func(DragSourceVarp uintptr, PathVarp *TreePath) bool {
+			return cb(&TreeDragSourceBase{Ptr: DragSourceVarp}, PathVarp)
+		})
+	}
+}
+
+// GetCallbackDragDataDelete gets the callback function.
+func (x *TreeDragSourceIface) GetCallbackDragDataDelete() func(TreeDragSource, *TreePath) bool {
+	if x.xDragDataDelete == 0 {
+		return nil
+	}
+	var rawCallback func(DragSourceVarp uintptr, PathVarp *TreePath) bool
+	purego.RegisterFunc(&rawCallback, x.xDragDataDelete)
+	return func(DragSourceVar TreeDragSource, PathVar *TreePath) bool {
+		return rawCallback(DragSourceVar.GoPointer(), PathVar)
+	}
 }
 
 // Interface for Drag-and-Drop destinations in `GtkTreeView`.
diff --git a/v4/gtk/gtktreemodel.go b/v4/gtk/gtktreemodel.go
index 427274f44c1ccdab1b5082f15b719f8465d09be2..a1e9252a69a066923c6ee0c1d3d2370be366b0bf 100644
--- a/v4/gtk/gtktreemodel.go
+++ b/v4/gtk/gtktreemodel.go
@@ -73,49 +73,509 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	RowChanged uintptr
+	xRowChanged uintptr
 
-	RowInserted uintptr
+	xRowInserted uintptr
 
-	RowHasChildToggled uintptr
+	xRowHasChildToggled uintptr
 
-	RowDeleted uintptr
+	xRowDeleted uintptr
 
-	RowsReordered uintptr
+	xRowsReordered uintptr
 
-	GetFlags uintptr
+	xGetFlags uintptr
 
-	GetNColumns uintptr
+	xGetNColumns uintptr
 
-	GetColumnType uintptr
+	xGetColumnType uintptr
 
-	GetIter uintptr
+	xGetIter uintptr
 
-	GetPath uintptr
+	xGetPath uintptr
 
-	GetValue uintptr
+	xGetValue uintptr
 
-	IterNext uintptr
+	xIterNext uintptr
 
-	IterPrevious uintptr
+	xIterPrevious uintptr
 
-	IterChildren uintptr
+	xIterChildren uintptr
 
-	IterHasChild uintptr
+	xIterHasChild uintptr
 
-	IterNChildren uintptr
+	xIterNChildren uintptr
 
-	IterNthChild uintptr
+	xIterNthChild uintptr
 
-	IterParent uintptr
+	xIterParent uintptr
 
-	RefNode uintptr
+	xRefNode uintptr
 
-	UnrefNode uintptr
+	xUnrefNode uintptr
 }
 
 func (x *TreeModelIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackRowChanged sets the callback function.
+func (x *TreeModelIface) SetCallbackRowChanged(cb func(TreeModel, *TreePath, *TreeIter)) {
+	if cb == nil {
+		x.xRowChanged = 0
+	} else {
+		x.xRowChanged = purego.NewCallback(func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, PathVarp, IterVarp)
+		})
+	}
+}
+
+// GetCallbackRowChanged gets the callback function.
+func (x *TreeModelIface) GetCallbackRowChanged() func(TreeModel, *TreePath, *TreeIter) {
+	if x.xRowChanged == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter)
+	purego.RegisterFunc(&rawCallback, x.xRowChanged)
+	return func(TreeModelVar TreeModel, PathVar *TreePath, IterVar *TreeIter) {
+		rawCallback(TreeModelVar.GoPointer(), PathVar, IterVar)
+	}
+}
+
+// SetCallbackRowInserted sets the callback function.
+func (x *TreeModelIface) SetCallbackRowInserted(cb func(TreeModel, *TreePath, *TreeIter)) {
+	if cb == nil {
+		x.xRowInserted = 0
+	} else {
+		x.xRowInserted = purego.NewCallback(func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, PathVarp, IterVarp)
+		})
+	}
+}
+
+// GetCallbackRowInserted gets the callback function.
+func (x *TreeModelIface) GetCallbackRowInserted() func(TreeModel, *TreePath, *TreeIter) {
+	if x.xRowInserted == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter)
+	purego.RegisterFunc(&rawCallback, x.xRowInserted)
+	return func(TreeModelVar TreeModel, PathVar *TreePath, IterVar *TreeIter) {
+		rawCallback(TreeModelVar.GoPointer(), PathVar, IterVar)
+	}
+}
+
+// SetCallbackRowHasChildToggled sets the callback function.
+func (x *TreeModelIface) SetCallbackRowHasChildToggled(cb func(TreeModel, *TreePath, *TreeIter)) {
+	if cb == nil {
+		x.xRowHasChildToggled = 0
+	} else {
+		x.xRowHasChildToggled = purego.NewCallback(func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, PathVarp, IterVarp)
+		})
+	}
+}
+
+// GetCallbackRowHasChildToggled gets the callback function.
+func (x *TreeModelIface) GetCallbackRowHasChildToggled() func(TreeModel, *TreePath, *TreeIter) {
+	if x.xRowHasChildToggled == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter)
+	purego.RegisterFunc(&rawCallback, x.xRowHasChildToggled)
+	return func(TreeModelVar TreeModel, PathVar *TreePath, IterVar *TreeIter) {
+		rawCallback(TreeModelVar.GoPointer(), PathVar, IterVar)
+	}
+}
+
+// SetCallbackRowDeleted sets the callback function.
+func (x *TreeModelIface) SetCallbackRowDeleted(cb func(TreeModel, *TreePath)) {
+	if cb == nil {
+		x.xRowDeleted = 0
+	} else {
+		x.xRowDeleted = purego.NewCallback(func(TreeModelVarp uintptr, PathVarp *TreePath) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, PathVarp)
+		})
+	}
+}
+
+// GetCallbackRowDeleted gets the callback function.
+func (x *TreeModelIface) GetCallbackRowDeleted() func(TreeModel, *TreePath) {
+	if x.xRowDeleted == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, PathVarp *TreePath)
+	purego.RegisterFunc(&rawCallback, x.xRowDeleted)
+	return func(TreeModelVar TreeModel, PathVar *TreePath) {
+		rawCallback(TreeModelVar.GoPointer(), PathVar)
+	}
+}
+
+// SetCallbackRowsReordered sets the callback function.
+func (x *TreeModelIface) SetCallbackRowsReordered(cb func(TreeModel, *TreePath, *TreeIter, int)) {
+	if cb == nil {
+		x.xRowsReordered = 0
+	} else {
+		x.xRowsReordered = purego.NewCallback(func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter, NewOrderVarp int) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, PathVarp, IterVarp, NewOrderVarp)
+		})
+	}
+}
+
+// GetCallbackRowsReordered gets the callback function.
+func (x *TreeModelIface) GetCallbackRowsReordered() func(TreeModel, *TreePath, *TreeIter, int) {
+	if x.xRowsReordered == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, PathVarp *TreePath, IterVarp *TreeIter, NewOrderVarp int)
+	purego.RegisterFunc(&rawCallback, x.xRowsReordered)
+	return func(TreeModelVar TreeModel, PathVar *TreePath, IterVar *TreeIter, NewOrderVar int) {
+		rawCallback(TreeModelVar.GoPointer(), PathVar, IterVar, NewOrderVar)
+	}
+}
+
+// SetCallbackGetFlags sets the callback function.
+func (x *TreeModelIface) SetCallbackGetFlags(cb func(TreeModel) TreeModelFlags) {
+	if cb == nil {
+		x.xGetFlags = 0
+	} else {
+		x.xGetFlags = purego.NewCallback(func(TreeModelVarp uintptr) TreeModelFlags {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp})
+		})
+	}
+}
+
+// GetCallbackGetFlags gets the callback function.
+func (x *TreeModelIface) GetCallbackGetFlags() func(TreeModel) TreeModelFlags {
+	if x.xGetFlags == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr) TreeModelFlags
+	purego.RegisterFunc(&rawCallback, x.xGetFlags)
+	return func(TreeModelVar TreeModel) TreeModelFlags {
+		return rawCallback(TreeModelVar.GoPointer())
+	}
+}
+
+// SetCallbackGetNColumns sets the callback function.
+func (x *TreeModelIface) SetCallbackGetNColumns(cb func(TreeModel) int) {
+	if cb == nil {
+		x.xGetNColumns = 0
+	} else {
+		x.xGetNColumns = purego.NewCallback(func(TreeModelVarp uintptr) int {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp})
+		})
+	}
+}
+
+// GetCallbackGetNColumns gets the callback function.
+func (x *TreeModelIface) GetCallbackGetNColumns() func(TreeModel) int {
+	if x.xGetNColumns == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr) int
+	purego.RegisterFunc(&rawCallback, x.xGetNColumns)
+	return func(TreeModelVar TreeModel) int {
+		return rawCallback(TreeModelVar.GoPointer())
+	}
+}
+
+// SetCallbackGetColumnType sets the callback function.
+func (x *TreeModelIface) SetCallbackGetColumnType(cb func(TreeModel, int) types.GType) {
+	if cb == nil {
+		x.xGetColumnType = 0
+	} else {
+		x.xGetColumnType = purego.NewCallback(func(TreeModelVarp uintptr, IndexVarp int) types.GType {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IndexVarp)
+		})
+	}
+}
+
+// GetCallbackGetColumnType gets the callback function.
+func (x *TreeModelIface) GetCallbackGetColumnType() func(TreeModel, int) types.GType {
+	if x.xGetColumnType == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IndexVarp int) types.GType
+	purego.RegisterFunc(&rawCallback, x.xGetColumnType)
+	return func(TreeModelVar TreeModel, IndexVar int) types.GType {
+		return rawCallback(TreeModelVar.GoPointer(), IndexVar)
+	}
+}
+
+// SetCallbackGetIter sets the callback function.
+func (x *TreeModelIface) SetCallbackGetIter(cb func(TreeModel, *TreeIter, *TreePath) bool) {
+	if cb == nil {
+		x.xGetIter = 0
+	} else {
+		x.xGetIter = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) bool {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp, PathVarp)
+		})
+	}
+}
+
+// GetCallbackGetIter gets the callback function.
+func (x *TreeModelIface) GetCallbackGetIter() func(TreeModel, *TreeIter, *TreePath) bool {
+	if x.xGetIter == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) bool
+	purego.RegisterFunc(&rawCallback, x.xGetIter)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter, PathVar *TreePath) bool {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar, PathVar)
+	}
+}
+
+// SetCallbackGetPath sets the callback function.
+func (x *TreeModelIface) SetCallbackGetPath(cb func(TreeModel, *TreeIter) *TreePath) {
+	if cb == nil {
+		x.xGetPath = 0
+	} else {
+		x.xGetPath = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter) *TreePath {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackGetPath gets the callback function.
+func (x *TreeModelIface) GetCallbackGetPath() func(TreeModel, *TreeIter) *TreePath {
+	if x.xGetPath == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter) *TreePath
+	purego.RegisterFunc(&rawCallback, x.xGetPath)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter) *TreePath {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar)
+	}
+}
+
+// SetCallbackGetValue sets the callback function.
+func (x *TreeModelIface) SetCallbackGetValue(cb func(TreeModel, *TreeIter, int, *gobject.Value)) {
+	if cb == nil {
+		x.xGetValue = 0
+	} else {
+		x.xGetValue = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter, ColumnVarp int, ValueVarp *gobject.Value) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp, ColumnVarp, ValueVarp)
+		})
+	}
+}
+
+// GetCallbackGetValue gets the callback function.
+func (x *TreeModelIface) GetCallbackGetValue() func(TreeModel, *TreeIter, int, *gobject.Value) {
+	if x.xGetValue == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter, ColumnVarp int, ValueVarp *gobject.Value)
+	purego.RegisterFunc(&rawCallback, x.xGetValue)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter, ColumnVar int, ValueVar *gobject.Value) {
+		rawCallback(TreeModelVar.GoPointer(), IterVar, ColumnVar, ValueVar)
+	}
+}
+
+// SetCallbackIterNext sets the callback function.
+func (x *TreeModelIface) SetCallbackIterNext(cb func(TreeModel, *TreeIter) bool) {
+	if cb == nil {
+		x.xIterNext = 0
+	} else {
+		x.xIterNext = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter) bool {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackIterNext gets the callback function.
+func (x *TreeModelIface) GetCallbackIterNext() func(TreeModel, *TreeIter) bool {
+	if x.xIterNext == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter) bool
+	purego.RegisterFunc(&rawCallback, x.xIterNext)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter) bool {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar)
+	}
+}
+
+// SetCallbackIterPrevious sets the callback function.
+func (x *TreeModelIface) SetCallbackIterPrevious(cb func(TreeModel, *TreeIter) bool) {
+	if cb == nil {
+		x.xIterPrevious = 0
+	} else {
+		x.xIterPrevious = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter) bool {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackIterPrevious gets the callback function.
+func (x *TreeModelIface) GetCallbackIterPrevious() func(TreeModel, *TreeIter) bool {
+	if x.xIterPrevious == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter) bool
+	purego.RegisterFunc(&rawCallback, x.xIterPrevious)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter) bool {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar)
+	}
+}
+
+// SetCallbackIterChildren sets the callback function.
+func (x *TreeModelIface) SetCallbackIterChildren(cb func(TreeModel, *TreeIter, *TreeIter) bool) {
+	if cb == nil {
+		x.xIterChildren = 0
+	} else {
+		x.xIterChildren = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter, ParentVarp *TreeIter) bool {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp, ParentVarp)
+		})
+	}
+}
+
+// GetCallbackIterChildren gets the callback function.
+func (x *TreeModelIface) GetCallbackIterChildren() func(TreeModel, *TreeIter, *TreeIter) bool {
+	if x.xIterChildren == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter, ParentVarp *TreeIter) bool
+	purego.RegisterFunc(&rawCallback, x.xIterChildren)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter, ParentVar *TreeIter) bool {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar, ParentVar)
+	}
+}
+
+// SetCallbackIterHasChild sets the callback function.
+func (x *TreeModelIface) SetCallbackIterHasChild(cb func(TreeModel, *TreeIter) bool) {
+	if cb == nil {
+		x.xIterHasChild = 0
+	} else {
+		x.xIterHasChild = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter) bool {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackIterHasChild gets the callback function.
+func (x *TreeModelIface) GetCallbackIterHasChild() func(TreeModel, *TreeIter) bool {
+	if x.xIterHasChild == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter) bool
+	purego.RegisterFunc(&rawCallback, x.xIterHasChild)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter) bool {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar)
+	}
+}
+
+// SetCallbackIterNChildren sets the callback function.
+func (x *TreeModelIface) SetCallbackIterNChildren(cb func(TreeModel, *TreeIter) int) {
+	if cb == nil {
+		x.xIterNChildren = 0
+	} else {
+		x.xIterNChildren = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter) int {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackIterNChildren gets the callback function.
+func (x *TreeModelIface) GetCallbackIterNChildren() func(TreeModel, *TreeIter) int {
+	if x.xIterNChildren == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter) int
+	purego.RegisterFunc(&rawCallback, x.xIterNChildren)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter) int {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar)
+	}
+}
+
+// SetCallbackIterNthChild sets the callback function.
+func (x *TreeModelIface) SetCallbackIterNthChild(cb func(TreeModel, *TreeIter, *TreeIter, int) bool) {
+	if cb == nil {
+		x.xIterNthChild = 0
+	} else {
+		x.xIterNthChild = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter, ParentVarp *TreeIter, NVarp int) bool {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp, ParentVarp, NVarp)
+		})
+	}
+}
+
+// GetCallbackIterNthChild gets the callback function.
+func (x *TreeModelIface) GetCallbackIterNthChild() func(TreeModel, *TreeIter, *TreeIter, int) bool {
+	if x.xIterNthChild == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter, ParentVarp *TreeIter, NVarp int) bool
+	purego.RegisterFunc(&rawCallback, x.xIterNthChild)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter, ParentVar *TreeIter, NVar int) bool {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar, ParentVar, NVar)
+	}
+}
+
+// SetCallbackIterParent sets the callback function.
+func (x *TreeModelIface) SetCallbackIterParent(cb func(TreeModel, *TreeIter, *TreeIter) bool) {
+	if cb == nil {
+		x.xIterParent = 0
+	} else {
+		x.xIterParent = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter, ChildVarp *TreeIter) bool {
+			return cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp, ChildVarp)
+		})
+	}
+}
+
+// GetCallbackIterParent gets the callback function.
+func (x *TreeModelIface) GetCallbackIterParent() func(TreeModel, *TreeIter, *TreeIter) bool {
+	if x.xIterParent == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter, ChildVarp *TreeIter) bool
+	purego.RegisterFunc(&rawCallback, x.xIterParent)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter, ChildVar *TreeIter) bool {
+		return rawCallback(TreeModelVar.GoPointer(), IterVar, ChildVar)
+	}
+}
+
+// SetCallbackRefNode sets the callback function.
+func (x *TreeModelIface) SetCallbackRefNode(cb func(TreeModel, *TreeIter)) {
+	if cb == nil {
+		x.xRefNode = 0
+	} else {
+		x.xRefNode = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackRefNode gets the callback function.
+func (x *TreeModelIface) GetCallbackRefNode() func(TreeModel, *TreeIter) {
+	if x.xRefNode == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter)
+	purego.RegisterFunc(&rawCallback, x.xRefNode)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter) {
+		rawCallback(TreeModelVar.GoPointer(), IterVar)
+	}
+}
+
+// SetCallbackUnrefNode sets the callback function.
+func (x *TreeModelIface) SetCallbackUnrefNode(cb func(TreeModel, *TreeIter)) {
+	if cb == nil {
+		x.xUnrefNode = 0
+	} else {
+		x.xUnrefNode = purego.NewCallback(func(TreeModelVarp uintptr, IterVarp *TreeIter) {
+			cb(&TreeModelBase{Ptr: TreeModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackUnrefNode gets the callback function.
+func (x *TreeModelIface) GetCallbackUnrefNode() func(TreeModel, *TreeIter) {
+	if x.xUnrefNode == 0 {
+		return nil
+	}
+	var rawCallback func(TreeModelVarp uintptr, IterVarp *TreeIter)
+	purego.RegisterFunc(&rawCallback, x.xUnrefNode)
+	return func(TreeModelVar TreeModel, IterVar *TreeIter) {
+		rawCallback(TreeModelVar.GoPointer(), IterVar)
+	}
 }
 
 // An opaque structure representing a path to a row in a model.
diff --git a/v4/gtk/gtktreemodelfilter.go b/v4/gtk/gtktreemodelfilter.go
index f7ad219a810087455ab690cbb15f79b668dba811..530f6f1167a830e0684e9b86fb50f8769d82120a 100644
--- a/v4/gtk/gtktreemodelfilter.go
+++ b/v4/gtk/gtktreemodelfilter.go
@@ -29,15 +29,75 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Visible uintptr
+	xVisible uintptr
 
-	Modify uintptr
+	xModify uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *TreeModelFilterClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackVisible sets the callback function.
+// A function which decides whether the row indicated by @iter is visible.
+func (x *TreeModelFilterClass) SetCallbackVisible(cb func(*TreeModelFilter, TreeModel, *TreeIter) bool) {
+	if cb == nil {
+		x.xVisible = 0
+	} else {
+		x.xVisible = purego.NewCallback(func(SelfVarp uintptr, ChildModelVarp uintptr, IterVarp *TreeIter) bool {
+			return cb(TreeModelFilterNewFromInternalPtr(SelfVarp), &TreeModelBase{Ptr: ChildModelVarp}, IterVarp)
+		})
+	}
+}
+
+// GetCallbackVisible gets the callback function.
+// A function which decides whether the row indicated by @iter is visible.
+func (x *TreeModelFilterClass) GetCallbackVisible() func(*TreeModelFilter, TreeModel, *TreeIter) bool {
+	if x.xVisible == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ChildModelVarp uintptr, IterVarp *TreeIter) bool
+	purego.RegisterFunc(&rawCallback, x.xVisible)
+	return func(SelfVar *TreeModelFilter, ChildModelVar TreeModel, IterVar *TreeIter) bool {
+		return rawCallback(SelfVar.GoPointer(), ChildModelVar.GoPointer(), IterVar)
+	}
+}
+
+// SetCallbackModify sets the callback function.
+// A function which calculates display values from raw values in the model.
+// It must fill @value with the display value for the column @column in the
+// row indicated by @iter.
+//
+// Since this function is called for each data access, it’s not a
+// particularly efficient operation.
+func (x *TreeModelFilterClass) SetCallbackModify(cb func(*TreeModelFilter, TreeModel, *TreeIter, *gobject.Value, int)) {
+	if cb == nil {
+		x.xModify = 0
+	} else {
+		x.xModify = purego.NewCallback(func(SelfVarp uintptr, ChildModelVarp uintptr, IterVarp *TreeIter, ValueVarp *gobject.Value, ColumnVarp int) {
+			cb(TreeModelFilterNewFromInternalPtr(SelfVarp), &TreeModelBase{Ptr: ChildModelVarp}, IterVarp, ValueVarp, ColumnVarp)
+		})
+	}
+}
+
+// GetCallbackModify gets the callback function.
+// A function which calculates display values from raw values in the model.
+// It must fill @value with the display value for the column @column in the
+// row indicated by @iter.
+//
+// Since this function is called for each data access, it’s not a
+// particularly efficient operation.
+func (x *TreeModelFilterClass) GetCallbackModify() func(*TreeModelFilter, TreeModel, *TreeIter, *gobject.Value, int) {
+	if x.xModify == 0 {
+		return nil
+	}
+	var rawCallback func(SelfVarp uintptr, ChildModelVarp uintptr, IterVarp *TreeIter, ValueVarp *gobject.Value, ColumnVarp int)
+	purego.RegisterFunc(&rawCallback, x.xModify)
+	return func(SelfVar *TreeModelFilter, ChildModelVar TreeModel, IterVar *TreeIter, ValueVar *gobject.Value, ColumnVar int) {
+		rawCallback(SelfVar.GoPointer(), ChildModelVar.GoPointer(), IterVar, ValueVar, ColumnVar)
+	}
 }
 
 type TreeModelFilterPrivate struct {
diff --git a/v4/gtk/gtktreesortable.go b/v4/gtk/gtktreesortable.go
index 7186b000a53877ce8ff4f1c6e8b16afa6903b7d2..f24955df4bb59da3994b3a15cda00ba16205a203 100644
--- a/v4/gtk/gtktreesortable.go
+++ b/v4/gtk/gtktreesortable.go
@@ -30,21 +30,159 @@ 	_ structs.HostLayout
 
 	GIface uintptr
 
-	SortColumnChanged uintptr
+	xSortColumnChanged uintptr
 
-	GetSortColumnId uintptr
+	xGetSortColumnId uintptr
 
-	SetSortColumnId uintptr
+	xSetSortColumnId uintptr
 
-	SetSortFunc uintptr
+	xSetSortFunc uintptr
 
-	SetDefaultSortFunc uintptr
+	xSetDefaultSortFunc uintptr
 
-	HasDefaultSortFunc uintptr
+	xHasDefaultSortFunc uintptr
 }
 
 func (x *TreeSortableIface) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackSortColumnChanged sets the callback function.
+func (x *TreeSortableIface) SetCallbackSortColumnChanged(cb func(TreeSortable)) {
+	if cb == nil {
+		x.xSortColumnChanged = 0
+	} else {
+		x.xSortColumnChanged = purego.NewCallback(func(SortableVarp uintptr) {
+			cb(&TreeSortableBase{Ptr: SortableVarp})
+		})
+	}
+}
+
+// GetCallbackSortColumnChanged gets the callback function.
+func (x *TreeSortableIface) GetCallbackSortColumnChanged() func(TreeSortable) {
+	if x.xSortColumnChanged == 0 {
+		return nil
+	}
+	var rawCallback func(SortableVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSortColumnChanged)
+	return func(SortableVar TreeSortable) {
+		rawCallback(SortableVar.GoPointer())
+	}
+}
+
+// SetCallbackGetSortColumnId sets the callback function.
+func (x *TreeSortableIface) SetCallbackGetSortColumnId(cb func(TreeSortable, int, *SortType) bool) {
+	if cb == nil {
+		x.xGetSortColumnId = 0
+	} else {
+		x.xGetSortColumnId = purego.NewCallback(func(SortableVarp uintptr, SortColumnIdVarp int, OrderVarp *SortType) bool {
+			return cb(&TreeSortableBase{Ptr: SortableVarp}, SortColumnIdVarp, OrderVarp)
+		})
+	}
+}
+
+// GetCallbackGetSortColumnId gets the callback function.
+func (x *TreeSortableIface) GetCallbackGetSortColumnId() func(TreeSortable, int, *SortType) bool {
+	if x.xGetSortColumnId == 0 {
+		return nil
+	}
+	var rawCallback func(SortableVarp uintptr, SortColumnIdVarp int, OrderVarp *SortType) bool
+	purego.RegisterFunc(&rawCallback, x.xGetSortColumnId)
+	return func(SortableVar TreeSortable, SortColumnIdVar int, OrderVar *SortType) bool {
+		return rawCallback(SortableVar.GoPointer(), SortColumnIdVar, OrderVar)
+	}
+}
+
+// SetCallbackSetSortColumnId sets the callback function.
+func (x *TreeSortableIface) SetCallbackSetSortColumnId(cb func(TreeSortable, int, SortType)) {
+	if cb == nil {
+		x.xSetSortColumnId = 0
+	} else {
+		x.xSetSortColumnId = purego.NewCallback(func(SortableVarp uintptr, SortColumnIdVarp int, OrderVarp SortType) {
+			cb(&TreeSortableBase{Ptr: SortableVarp}, SortColumnIdVarp, OrderVarp)
+		})
+	}
+}
+
+// GetCallbackSetSortColumnId gets the callback function.
+func (x *TreeSortableIface) GetCallbackSetSortColumnId() func(TreeSortable, int, SortType) {
+	if x.xSetSortColumnId == 0 {
+		return nil
+	}
+	var rawCallback func(SortableVarp uintptr, SortColumnIdVarp int, OrderVarp SortType)
+	purego.RegisterFunc(&rawCallback, x.xSetSortColumnId)
+	return func(SortableVar TreeSortable, SortColumnIdVar int, OrderVar SortType) {
+		rawCallback(SortableVar.GoPointer(), SortColumnIdVar, OrderVar)
+	}
+}
+
+// SetCallbackSetSortFunc sets the callback function.
+func (x *TreeSortableIface) SetCallbackSetSortFunc(cb func(TreeSortable, int, *TreeIterCompareFunc, uintptr, *glib.DestroyNotify)) {
+	if cb == nil {
+		x.xSetSortFunc = 0
+	} else {
+		x.xSetSortFunc = purego.NewCallback(func(SortableVarp uintptr, SortColumnIdVarp int, SortFuncVarp uintptr, UserDataVarp uintptr, DestroyVarp uintptr) {
+			cb(&TreeSortableBase{Ptr: SortableVarp}, SortColumnIdVarp, (*TreeIterCompareFunc)(unsafe.Pointer(SortFuncVarp)), UserDataVarp, (*glib.DestroyNotify)(unsafe.Pointer(DestroyVarp)))
+		})
+	}
+}
+
+// GetCallbackSetSortFunc gets the callback function.
+func (x *TreeSortableIface) GetCallbackSetSortFunc() func(TreeSortable, int, *TreeIterCompareFunc, uintptr, *glib.DestroyNotify) {
+	if x.xSetSortFunc == 0 {
+		return nil
+	}
+	var rawCallback func(SortableVarp uintptr, SortColumnIdVarp int, SortFuncVarp uintptr, UserDataVarp uintptr, DestroyVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetSortFunc)
+	return func(SortableVar TreeSortable, SortColumnIdVar int, SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
+		rawCallback(SortableVar.GoPointer(), SortColumnIdVar, glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
+	}
+}
+
+// SetCallbackSetDefaultSortFunc sets the callback function.
+func (x *TreeSortableIface) SetCallbackSetDefaultSortFunc(cb func(TreeSortable, *TreeIterCompareFunc, uintptr, *glib.DestroyNotify)) {
+	if cb == nil {
+		x.xSetDefaultSortFunc = 0
+	} else {
+		x.xSetDefaultSortFunc = purego.NewCallback(func(SortableVarp uintptr, SortFuncVarp uintptr, UserDataVarp uintptr, DestroyVarp uintptr) {
+			cb(&TreeSortableBase{Ptr: SortableVarp}, (*TreeIterCompareFunc)(unsafe.Pointer(SortFuncVarp)), UserDataVarp, (*glib.DestroyNotify)(unsafe.Pointer(DestroyVarp)))
+		})
+	}
+}
+
+// GetCallbackSetDefaultSortFunc gets the callback function.
+func (x *TreeSortableIface) GetCallbackSetDefaultSortFunc() func(TreeSortable, *TreeIterCompareFunc, uintptr, *glib.DestroyNotify) {
+	if x.xSetDefaultSortFunc == 0 {
+		return nil
+	}
+	var rawCallback func(SortableVarp uintptr, SortFuncVarp uintptr, UserDataVarp uintptr, DestroyVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetDefaultSortFunc)
+	return func(SortableVar TreeSortable, SortFuncVar *TreeIterCompareFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {
+		rawCallback(SortableVar.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallbackNullable(DestroyVar))
+	}
+}
+
+// SetCallbackHasDefaultSortFunc sets the callback function.
+func (x *TreeSortableIface) SetCallbackHasDefaultSortFunc(cb func(TreeSortable) bool) {
+	if cb == nil {
+		x.xHasDefaultSortFunc = 0
+	} else {
+		x.xHasDefaultSortFunc = purego.NewCallback(func(SortableVarp uintptr) bool {
+			return cb(&TreeSortableBase{Ptr: SortableVarp})
+		})
+	}
+}
+
+// GetCallbackHasDefaultSortFunc gets the callback function.
+func (x *TreeSortableIface) GetCallbackHasDefaultSortFunc() func(TreeSortable) bool {
+	if x.xHasDefaultSortFunc == 0 {
+		return nil
+	}
+	var rawCallback func(SortableVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xHasDefaultSortFunc)
+	return func(SortableVar TreeSortable) bool {
+		return rawCallback(SortableVar.GoPointer())
+	}
 }
 
 // The interface for sortable models used by GtkTreeView
diff --git a/v4/gtk/gtktreeview.go b/v4/gtk/gtktreeview.go
index e354c16cb76abe9f21d4f3164a638a1075ccbe47..2f954d1355c973f7e4efd442a3dd0837eb130ab0 100644
--- a/v4/gtk/gtktreeview.go
+++ b/v4/gtk/gtktreeview.go
@@ -43,35 +43,35 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	RowActivated uintptr
+	xRowActivated uintptr
 
-	TestExpandRow uintptr
+	xTestExpandRow uintptr
 
-	TestCollapseRow uintptr
+	xTestCollapseRow uintptr
 
-	RowExpanded uintptr
+	xRowExpanded uintptr
 
-	RowCollapsed uintptr
+	xRowCollapsed uintptr
 
-	ColumnsChanged uintptr
+	xColumnsChanged uintptr
 
-	CursorChanged uintptr
+	xCursorChanged uintptr
 
-	MoveCursor uintptr
+	xMoveCursor uintptr
 
-	SelectAll uintptr
+	xSelectAll uintptr
 
-	UnselectAll uintptr
+	xUnselectAll uintptr
 
-	SelectCursorRow uintptr
+	xSelectCursorRow uintptr
 
-	ToggleCursorRow uintptr
+	xToggleCursorRow uintptr
 
-	ExpandCollapseCursorRow uintptr
+	xExpandCollapseCursorRow uintptr
 
-	SelectCursorParent uintptr
+	xSelectCursorParent uintptr
 
-	StartInteractiveSearch uintptr
+	xStartInteractiveSearch uintptr
 
 	Reserved [16]uintptr
 }
@@ -80,6 +80,351 @@ func (x *TreeViewClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackRowActivated sets the callback function.
+func (x *TreeViewClass) SetCallbackRowActivated(cb func(*TreeView, *TreePath, *TreeViewColumn)) {
+	if cb == nil {
+		x.xRowActivated = 0
+	} else {
+		x.xRowActivated = purego.NewCallback(func(TreeViewVarp uintptr, PathVarp *TreePath, ColumnVarp uintptr) {
+			cb(TreeViewNewFromInternalPtr(TreeViewVarp), PathVarp, TreeViewColumnNewFromInternalPtr(ColumnVarp))
+		})
+	}
+}
+
+// GetCallbackRowActivated gets the callback function.
+func (x *TreeViewClass) GetCallbackRowActivated() func(*TreeView, *TreePath, *TreeViewColumn) {
+	if x.xRowActivated == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, PathVarp *TreePath, ColumnVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRowActivated)
+	return func(TreeViewVar *TreeView, PathVar *TreePath, ColumnVar *TreeViewColumn) {
+		rawCallback(TreeViewVar.GoPointer(), PathVar, ColumnVar.GoPointer())
+	}
+}
+
+// SetCallbackTestExpandRow sets the callback function.
+func (x *TreeViewClass) SetCallbackTestExpandRow(cb func(*TreeView, *TreeIter, *TreePath) bool) {
+	if cb == nil {
+		x.xTestExpandRow = 0
+	} else {
+		x.xTestExpandRow = purego.NewCallback(func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp), IterVarp, PathVarp)
+		})
+	}
+}
+
+// GetCallbackTestExpandRow gets the callback function.
+func (x *TreeViewClass) GetCallbackTestExpandRow() func(*TreeView, *TreeIter, *TreePath) bool {
+	if x.xTestExpandRow == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) bool
+	purego.RegisterFunc(&rawCallback, x.xTestExpandRow)
+	return func(TreeViewVar *TreeView, IterVar *TreeIter, PathVar *TreePath) bool {
+		return rawCallback(TreeViewVar.GoPointer(), IterVar, PathVar)
+	}
+}
+
+// SetCallbackTestCollapseRow sets the callback function.
+func (x *TreeViewClass) SetCallbackTestCollapseRow(cb func(*TreeView, *TreeIter, *TreePath) bool) {
+	if cb == nil {
+		x.xTestCollapseRow = 0
+	} else {
+		x.xTestCollapseRow = purego.NewCallback(func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp), IterVarp, PathVarp)
+		})
+	}
+}
+
+// GetCallbackTestCollapseRow gets the callback function.
+func (x *TreeViewClass) GetCallbackTestCollapseRow() func(*TreeView, *TreeIter, *TreePath) bool {
+	if x.xTestCollapseRow == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) bool
+	purego.RegisterFunc(&rawCallback, x.xTestCollapseRow)
+	return func(TreeViewVar *TreeView, IterVar *TreeIter, PathVar *TreePath) bool {
+		return rawCallback(TreeViewVar.GoPointer(), IterVar, PathVar)
+	}
+}
+
+// SetCallbackRowExpanded sets the callback function.
+func (x *TreeViewClass) SetCallbackRowExpanded(cb func(*TreeView, *TreeIter, *TreePath)) {
+	if cb == nil {
+		x.xRowExpanded = 0
+	} else {
+		x.xRowExpanded = purego.NewCallback(func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) {
+			cb(TreeViewNewFromInternalPtr(TreeViewVarp), IterVarp, PathVarp)
+		})
+	}
+}
+
+// GetCallbackRowExpanded gets the callback function.
+func (x *TreeViewClass) GetCallbackRowExpanded() func(*TreeView, *TreeIter, *TreePath) {
+	if x.xRowExpanded == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath)
+	purego.RegisterFunc(&rawCallback, x.xRowExpanded)
+	return func(TreeViewVar *TreeView, IterVar *TreeIter, PathVar *TreePath) {
+		rawCallback(TreeViewVar.GoPointer(), IterVar, PathVar)
+	}
+}
+
+// SetCallbackRowCollapsed sets the callback function.
+func (x *TreeViewClass) SetCallbackRowCollapsed(cb func(*TreeView, *TreeIter, *TreePath)) {
+	if cb == nil {
+		x.xRowCollapsed = 0
+	} else {
+		x.xRowCollapsed = purego.NewCallback(func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath) {
+			cb(TreeViewNewFromInternalPtr(TreeViewVarp), IterVarp, PathVarp)
+		})
+	}
+}
+
+// GetCallbackRowCollapsed gets the callback function.
+func (x *TreeViewClass) GetCallbackRowCollapsed() func(*TreeView, *TreeIter, *TreePath) {
+	if x.xRowCollapsed == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, IterVarp *TreeIter, PathVarp *TreePath)
+	purego.RegisterFunc(&rawCallback, x.xRowCollapsed)
+	return func(TreeViewVar *TreeView, IterVar *TreeIter, PathVar *TreePath) {
+		rawCallback(TreeViewVar.GoPointer(), IterVar, PathVar)
+	}
+}
+
+// SetCallbackColumnsChanged sets the callback function.
+func (x *TreeViewClass) SetCallbackColumnsChanged(cb func(*TreeView)) {
+	if cb == nil {
+		x.xColumnsChanged = 0
+	} else {
+		x.xColumnsChanged = purego.NewCallback(func(TreeViewVarp uintptr) {
+			cb(TreeViewNewFromInternalPtr(TreeViewVarp))
+		})
+	}
+}
+
+// GetCallbackColumnsChanged gets the callback function.
+func (x *TreeViewClass) GetCallbackColumnsChanged() func(*TreeView) {
+	if x.xColumnsChanged == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xColumnsChanged)
+	return func(TreeViewVar *TreeView) {
+		rawCallback(TreeViewVar.GoPointer())
+	}
+}
+
+// SetCallbackCursorChanged sets the callback function.
+func (x *TreeViewClass) SetCallbackCursorChanged(cb func(*TreeView)) {
+	if cb == nil {
+		x.xCursorChanged = 0
+	} else {
+		x.xCursorChanged = purego.NewCallback(func(TreeViewVarp uintptr) {
+			cb(TreeViewNewFromInternalPtr(TreeViewVarp))
+		})
+	}
+}
+
+// GetCallbackCursorChanged gets the callback function.
+func (x *TreeViewClass) GetCallbackCursorChanged() func(*TreeView) {
+	if x.xCursorChanged == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xCursorChanged)
+	return func(TreeViewVar *TreeView) {
+		rawCallback(TreeViewVar.GoPointer())
+	}
+}
+
+// SetCallbackMoveCursor sets the callback function.
+func (x *TreeViewClass) SetCallbackMoveCursor(cb func(*TreeView, MovementStep, int, bool, bool) bool) {
+	if cb == nil {
+		x.xMoveCursor = 0
+	} else {
+		x.xMoveCursor = purego.NewCallback(func(TreeViewVarp uintptr, StepVarp MovementStep, CountVarp int, ExtendVarp bool, ModifyVarp bool) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp), StepVarp, CountVarp, ExtendVarp, ModifyVarp)
+		})
+	}
+}
+
+// GetCallbackMoveCursor gets the callback function.
+func (x *TreeViewClass) GetCallbackMoveCursor() func(*TreeView, MovementStep, int, bool, bool) bool {
+	if x.xMoveCursor == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, StepVarp MovementStep, CountVarp int, ExtendVarp bool, ModifyVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xMoveCursor)
+	return func(TreeViewVar *TreeView, StepVar MovementStep, CountVar int, ExtendVar bool, ModifyVar bool) bool {
+		return rawCallback(TreeViewVar.GoPointer(), StepVar, CountVar, ExtendVar, ModifyVar)
+	}
+}
+
+// SetCallbackSelectAll sets the callback function.
+func (x *TreeViewClass) SetCallbackSelectAll(cb func(*TreeView) bool) {
+	if cb == nil {
+		x.xSelectAll = 0
+	} else {
+		x.xSelectAll = purego.NewCallback(func(TreeViewVarp uintptr) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp))
+		})
+	}
+}
+
+// GetCallbackSelectAll gets the callback function.
+func (x *TreeViewClass) GetCallbackSelectAll() func(*TreeView) bool {
+	if x.xSelectAll == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSelectAll)
+	return func(TreeViewVar *TreeView) bool {
+		return rawCallback(TreeViewVar.GoPointer())
+	}
+}
+
+// SetCallbackUnselectAll sets the callback function.
+func (x *TreeViewClass) SetCallbackUnselectAll(cb func(*TreeView) bool) {
+	if cb == nil {
+		x.xUnselectAll = 0
+	} else {
+		x.xUnselectAll = purego.NewCallback(func(TreeViewVarp uintptr) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp))
+		})
+	}
+}
+
+// GetCallbackUnselectAll gets the callback function.
+func (x *TreeViewClass) GetCallbackUnselectAll() func(*TreeView) bool {
+	if x.xUnselectAll == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xUnselectAll)
+	return func(TreeViewVar *TreeView) bool {
+		return rawCallback(TreeViewVar.GoPointer())
+	}
+}
+
+// SetCallbackSelectCursorRow sets the callback function.
+func (x *TreeViewClass) SetCallbackSelectCursorRow(cb func(*TreeView, bool) bool) {
+	if cb == nil {
+		x.xSelectCursorRow = 0
+	} else {
+		x.xSelectCursorRow = purego.NewCallback(func(TreeViewVarp uintptr, StartEditingVarp bool) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp), StartEditingVarp)
+		})
+	}
+}
+
+// GetCallbackSelectCursorRow gets the callback function.
+func (x *TreeViewClass) GetCallbackSelectCursorRow() func(*TreeView, bool) bool {
+	if x.xSelectCursorRow == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, StartEditingVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xSelectCursorRow)
+	return func(TreeViewVar *TreeView, StartEditingVar bool) bool {
+		return rawCallback(TreeViewVar.GoPointer(), StartEditingVar)
+	}
+}
+
+// SetCallbackToggleCursorRow sets the callback function.
+func (x *TreeViewClass) SetCallbackToggleCursorRow(cb func(*TreeView) bool) {
+	if cb == nil {
+		x.xToggleCursorRow = 0
+	} else {
+		x.xToggleCursorRow = purego.NewCallback(func(TreeViewVarp uintptr) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp))
+		})
+	}
+}
+
+// GetCallbackToggleCursorRow gets the callback function.
+func (x *TreeViewClass) GetCallbackToggleCursorRow() func(*TreeView) bool {
+	if x.xToggleCursorRow == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xToggleCursorRow)
+	return func(TreeViewVar *TreeView) bool {
+		return rawCallback(TreeViewVar.GoPointer())
+	}
+}
+
+// SetCallbackExpandCollapseCursorRow sets the callback function.
+func (x *TreeViewClass) SetCallbackExpandCollapseCursorRow(cb func(*TreeView, bool, bool, bool) bool) {
+	if cb == nil {
+		x.xExpandCollapseCursorRow = 0
+	} else {
+		x.xExpandCollapseCursorRow = purego.NewCallback(func(TreeViewVarp uintptr, LogicalVarp bool, ExpandVarp bool, OpenAllVarp bool) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp), LogicalVarp, ExpandVarp, OpenAllVarp)
+		})
+	}
+}
+
+// GetCallbackExpandCollapseCursorRow gets the callback function.
+func (x *TreeViewClass) GetCallbackExpandCollapseCursorRow() func(*TreeView, bool, bool, bool) bool {
+	if x.xExpandCollapseCursorRow == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr, LogicalVarp bool, ExpandVarp bool, OpenAllVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xExpandCollapseCursorRow)
+	return func(TreeViewVar *TreeView, LogicalVar bool, ExpandVar bool, OpenAllVar bool) bool {
+		return rawCallback(TreeViewVar.GoPointer(), LogicalVar, ExpandVar, OpenAllVar)
+	}
+}
+
+// SetCallbackSelectCursorParent sets the callback function.
+func (x *TreeViewClass) SetCallbackSelectCursorParent(cb func(*TreeView) bool) {
+	if cb == nil {
+		x.xSelectCursorParent = 0
+	} else {
+		x.xSelectCursorParent = purego.NewCallback(func(TreeViewVarp uintptr) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp))
+		})
+	}
+}
+
+// GetCallbackSelectCursorParent gets the callback function.
+func (x *TreeViewClass) GetCallbackSelectCursorParent() func(*TreeView) bool {
+	if x.xSelectCursorParent == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xSelectCursorParent)
+	return func(TreeViewVar *TreeView) bool {
+		return rawCallback(TreeViewVar.GoPointer())
+	}
+}
+
+// SetCallbackStartInteractiveSearch sets the callback function.
+func (x *TreeViewClass) SetCallbackStartInteractiveSearch(cb func(*TreeView) bool) {
+	if cb == nil {
+		x.xStartInteractiveSearch = 0
+	} else {
+		x.xStartInteractiveSearch = purego.NewCallback(func(TreeViewVarp uintptr) bool {
+			return cb(TreeViewNewFromInternalPtr(TreeViewVarp))
+		})
+	}
+}
+
+// GetCallbackStartInteractiveSearch gets the callback function.
+func (x *TreeViewClass) GetCallbackStartInteractiveSearch() func(*TreeView) bool {
+	if x.xStartInteractiveSearch == 0 {
+		return nil
+	}
+	var rawCallback func(TreeViewVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xStartInteractiveSearch)
+	return func(TreeViewVar *TreeView) bool {
+		return rawCallback(TreeViewVar.GoPointer())
+	}
+}
+
 // An enum for determining where a dropped row goes.
 type TreeViewDropPosition int
 
@@ -471,7 +816,7 @@ 	cret := xTreeViewGetColumns(x.GoPointer())
 	return cret
 }
 
-var xTreeViewGetCursor func(uintptr, **TreePath, *uintptr)
+var xTreeViewGetCursor func(uintptr, **TreePath, uintptr)
 
 // Fills in @path and @focus_column with the current path and focus column.  If
 // the cursor isn’t currently set, then *@path will be %NULL.  If no column
@@ -481,7 +826,7 @@ // The returned `GtkTreePath` must be freed with gtk_tree_path_free() when
 // you are done with it.
 func (x *TreeView) GetCursor(PathVar **TreePath, FocusColumnVar **TreeViewColumn) {
 
-	xTreeViewGetCursor(x.GoPointer(), PathVar, gobject.ConvertPtr(FocusColumnVar))
+	xTreeViewGetCursor(x.GoPointer(), PathVar, *gobject.ConvertPtr(FocusColumnVar))
 
 }
 
@@ -635,7 +980,7 @@ 	cret := xTreeViewGetNColumns(x.GoPointer())
 	return cret
 }
 
-var xTreeViewGetPathAtPos func(uintptr, int, int, **TreePath, *uintptr, int, int) bool
+var xTreeViewGetPathAtPos func(uintptr, int, int, **TreePath, uintptr, int, int) bool
 
 // Finds the path at the point (@x, @y), relative to bin_window coordinates.
 // That is, @x and @y are relative to an events coordinates. Widget-relative
@@ -655,7 +1000,7 @@ // GtkWidget::query-tooltip), please see
 // gtk_tree_view_convert_widget_to_bin_window_coords().
 func (x *TreeView) GetPathAtPos(XVar int, YVar int, PathVar **TreePath, ColumnVar **TreeViewColumn, CellXVar int, CellYVar int) bool {
 
-	cret := xTreeViewGetPathAtPos(x.GoPointer(), XVar, YVar, PathVar, gobject.ConvertPtr(ColumnVar), CellXVar, CellYVar)
+	cret := xTreeViewGetPathAtPos(x.GoPointer(), XVar, YVar, PathVar, *gobject.ConvertPtr(ColumnVar), CellXVar, CellYVar)
 	return cret
 }
 
@@ -845,7 +1190,7 @@ 	cret := xTreeViewInsertColumnWithDataFunc(x.GoPointer(), PositionVar, TitleVar, CellVar.GoPointer(), glib.NewCallback(FuncVar), DataVar, glib.NewCallback(DnotifyVar))
 	return cret
 }
 
-var xTreeViewIsBlankAtPos func(uintptr, int, int, **TreePath, *uintptr, int, int) bool
+var xTreeViewIsBlankAtPos func(uintptr, int, int, **TreePath, uintptr, int, int) bool
 
 // Determine whether the point (@x, @y) in @tree_view is blank, that is no
 // cell content nor an expander arrow is drawn at the location. If so, the
@@ -866,7 +1211,7 @@ // likewise as for gtk_tree_view_get_path_at_pos().  Please see
 // gtk_tree_view_get_path_at_pos() for more information.
 func (x *TreeView) IsBlankAtPos(XVar int, YVar int, PathVar **TreePath, ColumnVar **TreeViewColumn, CellXVar int, CellYVar int) bool {
 
-	cret := xTreeViewIsBlankAtPos(x.GoPointer(), XVar, YVar, PathVar, gobject.ConvertPtr(ColumnVar), CellXVar, CellYVar)
+	cret := xTreeViewIsBlankAtPos(x.GoPointer(), XVar, YVar, PathVar, *gobject.ConvertPtr(ColumnVar), CellXVar, CellYVar)
 	return cret
 }
 
diff --git a/v4/gtk/gtkwidget.go b/v4/gtk/gtkwidget.go
index 80adc8ca613973050d5687f05af114ff7d02bd21..f4deb013fb41d2918b39fa9c1846e064863ab744 100644
--- a/v4/gtk/gtkwidget.go
+++ b/v4/gtk/gtkwidget.go
@@ -82,55 +82,55 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Show uintptr
+	xShow uintptr
 
-	Hide uintptr
+	xHide uintptr
 
-	Map uintptr
+	xMap uintptr
 
-	Unmap uintptr
+	xUnmap uintptr
 
-	Realize uintptr
+	xRealize uintptr
 
-	Unrealize uintptr
+	xUnrealize uintptr
 
-	Root uintptr
+	xRoot uintptr
 
-	Unroot uintptr
+	xUnroot uintptr
 
-	SizeAllocate uintptr
+	xSizeAllocate uintptr
 
-	StateFlagsChanged uintptr
+	xStateFlagsChanged uintptr
 
-	DirectionChanged uintptr
+	xDirectionChanged uintptr
 
-	GetRequestMode uintptr
+	xGetRequestMode uintptr
 
-	Measure uintptr
+	xMeasure uintptr
 
-	MnemonicActivate uintptr
+	xMnemonicActivate uintptr
 
-	GrabFocus uintptr
+	xGrabFocus uintptr
 
-	Focus uintptr
+	xFocus uintptr
 
-	SetFocusChild uintptr
+	xSetFocusChild uintptr
 
-	MoveFocus uintptr
+	xMoveFocus uintptr
 
-	KeynavFailed uintptr
+	xKeynavFailed uintptr
 
-	QueryTooltip uintptr
+	xQueryTooltip uintptr
 
-	ComputeExpand uintptr
+	xComputeExpand uintptr
 
-	CssChanged uintptr
+	xCssChanged uintptr
 
-	SystemSettingChanged uintptr
+	xSystemSettingChanged uintptr
 
-	Snapshot uintptr
+	xSnapshot uintptr
 
-	Contains uintptr
+	xContains uintptr
 
 	Priv *WidgetClassPrivate
 
@@ -478,6 +478,581 @@ func (x *WidgetClass) SetTemplateScope(ScopeVar BuilderScope) {
 
 	xWidgetClassSetTemplateScope(x.GoPointer(), ScopeVar.GoPointer())
 
+}
+
+// SetCallbackShow sets the callback function.
+func (x *WidgetClass) SetCallbackShow(cb func(*Widget)) {
+	if cb == nil {
+		x.xShow = 0
+	} else {
+		x.xShow = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackShow gets the callback function.
+func (x *WidgetClass) GetCallbackShow() func(*Widget) {
+	if x.xShow == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xShow)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackHide sets the callback function.
+func (x *WidgetClass) SetCallbackHide(cb func(*Widget)) {
+	if cb == nil {
+		x.xHide = 0
+	} else {
+		x.xHide = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackHide gets the callback function.
+func (x *WidgetClass) GetCallbackHide() func(*Widget) {
+	if x.xHide == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xHide)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackMap sets the callback function.
+func (x *WidgetClass) SetCallbackMap(cb func(*Widget)) {
+	if cb == nil {
+		x.xMap = 0
+	} else {
+		x.xMap = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackMap gets the callback function.
+func (x *WidgetClass) GetCallbackMap() func(*Widget) {
+	if x.xMap == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xMap)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackUnmap sets the callback function.
+func (x *WidgetClass) SetCallbackUnmap(cb func(*Widget)) {
+	if cb == nil {
+		x.xUnmap = 0
+	} else {
+		x.xUnmap = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackUnmap gets the callback function.
+func (x *WidgetClass) GetCallbackUnmap() func(*Widget) {
+	if x.xUnmap == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnmap)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackRealize sets the callback function.
+func (x *WidgetClass) SetCallbackRealize(cb func(*Widget)) {
+	if cb == nil {
+		x.xRealize = 0
+	} else {
+		x.xRealize = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackRealize gets the callback function.
+func (x *WidgetClass) GetCallbackRealize() func(*Widget) {
+	if x.xRealize == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRealize)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackUnrealize sets the callback function.
+func (x *WidgetClass) SetCallbackUnrealize(cb func(*Widget)) {
+	if cb == nil {
+		x.xUnrealize = 0
+	} else {
+		x.xUnrealize = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackUnrealize gets the callback function.
+func (x *WidgetClass) GetCallbackUnrealize() func(*Widget) {
+	if x.xUnrealize == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnrealize)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackRoot sets the callback function.
+func (x *WidgetClass) SetCallbackRoot(cb func(*Widget)) {
+	if cb == nil {
+		x.xRoot = 0
+	} else {
+		x.xRoot = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackRoot gets the callback function.
+func (x *WidgetClass) GetCallbackRoot() func(*Widget) {
+	if x.xRoot == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xRoot)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackUnroot sets the callback function.
+func (x *WidgetClass) SetCallbackUnroot(cb func(*Widget)) {
+	if cb == nil {
+		x.xUnroot = 0
+	} else {
+		x.xUnroot = purego.NewCallback(func(WidgetVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackUnroot gets the callback function.
+func (x *WidgetClass) GetCallbackUnroot() func(*Widget) {
+	if x.xUnroot == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xUnroot)
+	return func(WidgetVar *Widget) {
+		rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackSizeAllocate sets the callback function.
+func (x *WidgetClass) SetCallbackSizeAllocate(cb func(*Widget, int, int, int)) {
+	if cb == nil {
+		x.xSizeAllocate = 0
+	} else {
+		x.xSizeAllocate = purego.NewCallback(func(WidgetVarp uintptr, WidthVarp int, HeightVarp int, BaselineVarp int) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), WidthVarp, HeightVarp, BaselineVarp)
+		})
+	}
+}
+
+// GetCallbackSizeAllocate gets the callback function.
+func (x *WidgetClass) GetCallbackSizeAllocate() func(*Widget, int, int, int) {
+	if x.xSizeAllocate == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, WidthVarp int, HeightVarp int, BaselineVarp int)
+	purego.RegisterFunc(&rawCallback, x.xSizeAllocate)
+	return func(WidgetVar *Widget, WidthVar int, HeightVar int, BaselineVar int) {
+		rawCallback(WidgetVar.GoPointer(), WidthVar, HeightVar, BaselineVar)
+	}
+}
+
+// SetCallbackStateFlagsChanged sets the callback function.
+func (x *WidgetClass) SetCallbackStateFlagsChanged(cb func(*Widget, StateFlags)) {
+	if cb == nil {
+		x.xStateFlagsChanged = 0
+	} else {
+		x.xStateFlagsChanged = purego.NewCallback(func(WidgetVarp uintptr, PreviousStateFlagsVarp StateFlags) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), PreviousStateFlagsVarp)
+		})
+	}
+}
+
+// GetCallbackStateFlagsChanged gets the callback function.
+func (x *WidgetClass) GetCallbackStateFlagsChanged() func(*Widget, StateFlags) {
+	if x.xStateFlagsChanged == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, PreviousStateFlagsVarp StateFlags)
+	purego.RegisterFunc(&rawCallback, x.xStateFlagsChanged)
+	return func(WidgetVar *Widget, PreviousStateFlagsVar StateFlags) {
+		rawCallback(WidgetVar.GoPointer(), PreviousStateFlagsVar)
+	}
+}
+
+// SetCallbackDirectionChanged sets the callback function.
+func (x *WidgetClass) SetCallbackDirectionChanged(cb func(*Widget, TextDirection)) {
+	if cb == nil {
+		x.xDirectionChanged = 0
+	} else {
+		x.xDirectionChanged = purego.NewCallback(func(WidgetVarp uintptr, PreviousDirectionVarp TextDirection) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), PreviousDirectionVarp)
+		})
+	}
+}
+
+// GetCallbackDirectionChanged gets the callback function.
+func (x *WidgetClass) GetCallbackDirectionChanged() func(*Widget, TextDirection) {
+	if x.xDirectionChanged == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, PreviousDirectionVarp TextDirection)
+	purego.RegisterFunc(&rawCallback, x.xDirectionChanged)
+	return func(WidgetVar *Widget, PreviousDirectionVar TextDirection) {
+		rawCallback(WidgetVar.GoPointer(), PreviousDirectionVar)
+	}
+}
+
+// SetCallbackGetRequestMode sets the callback function.
+func (x *WidgetClass) SetCallbackGetRequestMode(cb func(*Widget) SizeRequestMode) {
+	if cb == nil {
+		x.xGetRequestMode = 0
+	} else {
+		x.xGetRequestMode = purego.NewCallback(func(WidgetVarp uintptr) SizeRequestMode {
+			return cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackGetRequestMode gets the callback function.
+func (x *WidgetClass) GetCallbackGetRequestMode() func(*Widget) SizeRequestMode {
+	if x.xGetRequestMode == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr) SizeRequestMode
+	purego.RegisterFunc(&rawCallback, x.xGetRequestMode)
+	return func(WidgetVar *Widget) SizeRequestMode {
+		return rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackMeasure sets the callback function.
+func (x *WidgetClass) SetCallbackMeasure(cb func(*Widget, Orientation, int, int, int, int, int)) {
+	if cb == nil {
+		x.xMeasure = 0
+	} else {
+		x.xMeasure = purego.NewCallback(func(WidgetVarp uintptr, OrientationVarp Orientation, ForSizeVarp int, MinimumVarp int, NaturalVarp int, MinimumBaselineVarp int, NaturalBaselineVarp int) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), OrientationVarp, ForSizeVarp, MinimumVarp, NaturalVarp, MinimumBaselineVarp, NaturalBaselineVarp)
+		})
+	}
+}
+
+// GetCallbackMeasure gets the callback function.
+func (x *WidgetClass) GetCallbackMeasure() func(*Widget, Orientation, int, int, int, int, int) {
+	if x.xMeasure == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, OrientationVarp Orientation, ForSizeVarp int, MinimumVarp int, NaturalVarp int, MinimumBaselineVarp int, NaturalBaselineVarp int)
+	purego.RegisterFunc(&rawCallback, x.xMeasure)
+	return func(WidgetVar *Widget, OrientationVar Orientation, ForSizeVar int, MinimumVar int, NaturalVar int, MinimumBaselineVar int, NaturalBaselineVar int) {
+		rawCallback(WidgetVar.GoPointer(), OrientationVar, ForSizeVar, MinimumVar, NaturalVar, MinimumBaselineVar, NaturalBaselineVar)
+	}
+}
+
+// SetCallbackMnemonicActivate sets the callback function.
+func (x *WidgetClass) SetCallbackMnemonicActivate(cb func(*Widget, bool) bool) {
+	if cb == nil {
+		x.xMnemonicActivate = 0
+	} else {
+		x.xMnemonicActivate = purego.NewCallback(func(WidgetVarp uintptr, GroupCyclingVarp bool) bool {
+			return cb(WidgetNewFromInternalPtr(WidgetVarp), GroupCyclingVarp)
+		})
+	}
+}
+
+// GetCallbackMnemonicActivate gets the callback function.
+func (x *WidgetClass) GetCallbackMnemonicActivate() func(*Widget, bool) bool {
+	if x.xMnemonicActivate == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, GroupCyclingVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xMnemonicActivate)
+	return func(WidgetVar *Widget, GroupCyclingVar bool) bool {
+		return rawCallback(WidgetVar.GoPointer(), GroupCyclingVar)
+	}
+}
+
+// SetCallbackGrabFocus sets the callback function.
+func (x *WidgetClass) SetCallbackGrabFocus(cb func(*Widget) bool) {
+	if cb == nil {
+		x.xGrabFocus = 0
+	} else {
+		x.xGrabFocus = purego.NewCallback(func(WidgetVarp uintptr) bool {
+			return cb(WidgetNewFromInternalPtr(WidgetVarp))
+		})
+	}
+}
+
+// GetCallbackGrabFocus gets the callback function.
+func (x *WidgetClass) GetCallbackGrabFocus() func(*Widget) bool {
+	if x.xGrabFocus == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xGrabFocus)
+	return func(WidgetVar *Widget) bool {
+		return rawCallback(WidgetVar.GoPointer())
+	}
+}
+
+// SetCallbackFocus sets the callback function.
+func (x *WidgetClass) SetCallbackFocus(cb func(*Widget, DirectionType) bool) {
+	if cb == nil {
+		x.xFocus = 0
+	} else {
+		x.xFocus = purego.NewCallback(func(WidgetVarp uintptr, DirectionVarp DirectionType) bool {
+			return cb(WidgetNewFromInternalPtr(WidgetVarp), DirectionVarp)
+		})
+	}
+}
+
+// GetCallbackFocus gets the callback function.
+func (x *WidgetClass) GetCallbackFocus() func(*Widget, DirectionType) bool {
+	if x.xFocus == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, DirectionVarp DirectionType) bool
+	purego.RegisterFunc(&rawCallback, x.xFocus)
+	return func(WidgetVar *Widget, DirectionVar DirectionType) bool {
+		return rawCallback(WidgetVar.GoPointer(), DirectionVar)
+	}
+}
+
+// SetCallbackSetFocusChild sets the callback function.
+func (x *WidgetClass) SetCallbackSetFocusChild(cb func(*Widget, *Widget)) {
+	if cb == nil {
+		x.xSetFocusChild = 0
+	} else {
+		x.xSetFocusChild = purego.NewCallback(func(WidgetVarp uintptr, ChildVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), WidgetNewFromInternalPtr(ChildVarp))
+		})
+	}
+}
+
+// GetCallbackSetFocusChild gets the callback function.
+func (x *WidgetClass) GetCallbackSetFocusChild() func(*Widget, *Widget) {
+	if x.xSetFocusChild == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, ChildVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSetFocusChild)
+	return func(WidgetVar *Widget, ChildVar *Widget) {
+		rawCallback(WidgetVar.GoPointer(), ChildVar.GoPointer())
+	}
+}
+
+// SetCallbackMoveFocus sets the callback function.
+func (x *WidgetClass) SetCallbackMoveFocus(cb func(*Widget, DirectionType)) {
+	if cb == nil {
+		x.xMoveFocus = 0
+	} else {
+		x.xMoveFocus = purego.NewCallback(func(WidgetVarp uintptr, DirectionVarp DirectionType) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), DirectionVarp)
+		})
+	}
+}
+
+// GetCallbackMoveFocus gets the callback function.
+func (x *WidgetClass) GetCallbackMoveFocus() func(*Widget, DirectionType) {
+	if x.xMoveFocus == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, DirectionVarp DirectionType)
+	purego.RegisterFunc(&rawCallback, x.xMoveFocus)
+	return func(WidgetVar *Widget, DirectionVar DirectionType) {
+		rawCallback(WidgetVar.GoPointer(), DirectionVar)
+	}
+}
+
+// SetCallbackKeynavFailed sets the callback function.
+func (x *WidgetClass) SetCallbackKeynavFailed(cb func(*Widget, DirectionType) bool) {
+	if cb == nil {
+		x.xKeynavFailed = 0
+	} else {
+		x.xKeynavFailed = purego.NewCallback(func(WidgetVarp uintptr, DirectionVarp DirectionType) bool {
+			return cb(WidgetNewFromInternalPtr(WidgetVarp), DirectionVarp)
+		})
+	}
+}
+
+// GetCallbackKeynavFailed gets the callback function.
+func (x *WidgetClass) GetCallbackKeynavFailed() func(*Widget, DirectionType) bool {
+	if x.xKeynavFailed == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, DirectionVarp DirectionType) bool
+	purego.RegisterFunc(&rawCallback, x.xKeynavFailed)
+	return func(WidgetVar *Widget, DirectionVar DirectionType) bool {
+		return rawCallback(WidgetVar.GoPointer(), DirectionVar)
+	}
+}
+
+// SetCallbackQueryTooltip sets the callback function.
+func (x *WidgetClass) SetCallbackQueryTooltip(cb func(*Widget, int, int, bool, *Tooltip) bool) {
+	if cb == nil {
+		x.xQueryTooltip = 0
+	} else {
+		x.xQueryTooltip = purego.NewCallback(func(WidgetVarp uintptr, XVarp int, YVarp int, KeyboardTooltipVarp bool, TooltipVarp uintptr) bool {
+			return cb(WidgetNewFromInternalPtr(WidgetVarp), XVarp, YVarp, KeyboardTooltipVarp, TooltipNewFromInternalPtr(TooltipVarp))
+		})
+	}
+}
+
+// GetCallbackQueryTooltip gets the callback function.
+func (x *WidgetClass) GetCallbackQueryTooltip() func(*Widget, int, int, bool, *Tooltip) bool {
+	if x.xQueryTooltip == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, XVarp int, YVarp int, KeyboardTooltipVarp bool, TooltipVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xQueryTooltip)
+	return func(WidgetVar *Widget, XVar int, YVar int, KeyboardTooltipVar bool, TooltipVar *Tooltip) bool {
+		return rawCallback(WidgetVar.GoPointer(), XVar, YVar, KeyboardTooltipVar, TooltipVar.GoPointer())
+	}
+}
+
+// SetCallbackComputeExpand sets the callback function.
+func (x *WidgetClass) SetCallbackComputeExpand(cb func(*Widget, bool, bool)) {
+	if cb == nil {
+		x.xComputeExpand = 0
+	} else {
+		x.xComputeExpand = purego.NewCallback(func(WidgetVarp uintptr, HexpandPVarp bool, VexpandPVarp bool) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), HexpandPVarp, VexpandPVarp)
+		})
+	}
+}
+
+// GetCallbackComputeExpand gets the callback function.
+func (x *WidgetClass) GetCallbackComputeExpand() func(*Widget, bool, bool) {
+	if x.xComputeExpand == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, HexpandPVarp bool, VexpandPVarp bool)
+	purego.RegisterFunc(&rawCallback, x.xComputeExpand)
+	return func(WidgetVar *Widget, HexpandPVar bool, VexpandPVar bool) {
+		rawCallback(WidgetVar.GoPointer(), HexpandPVar, VexpandPVar)
+	}
+}
+
+// SetCallbackCssChanged sets the callback function.
+func (x *WidgetClass) SetCallbackCssChanged(cb func(*Widget, *CssStyleChange)) {
+	if cb == nil {
+		x.xCssChanged = 0
+	} else {
+		x.xCssChanged = purego.NewCallback(func(WidgetVarp uintptr, ChangeVarp *CssStyleChange) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), ChangeVarp)
+		})
+	}
+}
+
+// GetCallbackCssChanged gets the callback function.
+func (x *WidgetClass) GetCallbackCssChanged() func(*Widget, *CssStyleChange) {
+	if x.xCssChanged == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, ChangeVarp *CssStyleChange)
+	purego.RegisterFunc(&rawCallback, x.xCssChanged)
+	return func(WidgetVar *Widget, ChangeVar *CssStyleChange) {
+		rawCallback(WidgetVar.GoPointer(), ChangeVar)
+	}
+}
+
+// SetCallbackSystemSettingChanged sets the callback function.
+func (x *WidgetClass) SetCallbackSystemSettingChanged(cb func(*Widget, SystemSetting)) {
+	if cb == nil {
+		x.xSystemSettingChanged = 0
+	} else {
+		x.xSystemSettingChanged = purego.NewCallback(func(WidgetVarp uintptr, SettingsVarp SystemSetting) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), SettingsVarp)
+		})
+	}
+}
+
+// GetCallbackSystemSettingChanged gets the callback function.
+func (x *WidgetClass) GetCallbackSystemSettingChanged() func(*Widget, SystemSetting) {
+	if x.xSystemSettingChanged == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, SettingsVarp SystemSetting)
+	purego.RegisterFunc(&rawCallback, x.xSystemSettingChanged)
+	return func(WidgetVar *Widget, SettingsVar SystemSetting) {
+		rawCallback(WidgetVar.GoPointer(), SettingsVar)
+	}
+}
+
+// SetCallbackSnapshot sets the callback function.
+func (x *WidgetClass) SetCallbackSnapshot(cb func(*Widget, *Snapshot)) {
+	if cb == nil {
+		x.xSnapshot = 0
+	} else {
+		x.xSnapshot = purego.NewCallback(func(WidgetVarp uintptr, SnapshotVarp uintptr) {
+			cb(WidgetNewFromInternalPtr(WidgetVarp), SnapshotNewFromInternalPtr(SnapshotVarp))
+		})
+	}
+}
+
+// GetCallbackSnapshot gets the callback function.
+func (x *WidgetClass) GetCallbackSnapshot() func(*Widget, *Snapshot) {
+	if x.xSnapshot == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, SnapshotVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xSnapshot)
+	return func(WidgetVar *Widget, SnapshotVar *Snapshot) {
+		rawCallback(WidgetVar.GoPointer(), SnapshotVar.GoPointer())
+	}
+}
+
+// SetCallbackContains sets the callback function.
+func (x *WidgetClass) SetCallbackContains(cb func(*Widget, float64, float64) bool) {
+	if cb == nil {
+		x.xContains = 0
+	} else {
+		x.xContains = purego.NewCallback(func(WidgetVarp uintptr, XVarp float64, YVarp float64) bool {
+			return cb(WidgetNewFromInternalPtr(WidgetVarp), XVarp, YVarp)
+		})
+	}
+}
+
+// GetCallbackContains gets the callback function.
+func (x *WidgetClass) GetCallbackContains() func(*Widget, float64, float64) bool {
+	if x.xContains == 0 {
+		return nil
+	}
+	var rawCallback func(WidgetVarp uintptr, XVarp float64, YVarp float64) bool
+	purego.RegisterFunc(&rawCallback, x.xContains)
+	return func(WidgetVar *Widget, XVar float64, YVar float64) bool {
+		return rawCallback(WidgetVar.GoPointer(), XVar, YVar)
+	}
 }
 
 type WidgetClassPrivate struct {
diff --git a/v4/gtk/gtkwindow.go b/v4/gtk/gtkwindow.go
index cf0c5725e079ffbf2abf3c671fe415b5af6b69b3..b0fc6bdf0ac097c029fd2eafca854e295485504a 100644
--- a/v4/gtk/gtkwindow.go
+++ b/v4/gtk/gtkwindow.go
@@ -20,21 +20,136 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ActivateFocus uintptr
+	xActivateFocus uintptr
 
-	ActivateDefault uintptr
+	xActivateDefault uintptr
 
-	KeysChanged uintptr
+	xKeysChanged uintptr
 
-	EnableDebugging uintptr
+	xEnableDebugging uintptr
 
-	CloseRequest uintptr
+	xCloseRequest uintptr
 
 	Padding [8]uintptr
 }
 
 func (x *WindowClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackActivateFocus sets the callback function.
+func (x *WindowClass) SetCallbackActivateFocus(cb func(*Window)) {
+	if cb == nil {
+		x.xActivateFocus = 0
+	} else {
+		x.xActivateFocus = purego.NewCallback(func(WindowVarp uintptr) {
+			cb(WindowNewFromInternalPtr(WindowVarp))
+		})
+	}
+}
+
+// GetCallbackActivateFocus gets the callback function.
+func (x *WindowClass) GetCallbackActivateFocus() func(*Window) {
+	if x.xActivateFocus == 0 {
+		return nil
+	}
+	var rawCallback func(WindowVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivateFocus)
+	return func(WindowVar *Window) {
+		rawCallback(WindowVar.GoPointer())
+	}
+}
+
+// SetCallbackActivateDefault sets the callback function.
+func (x *WindowClass) SetCallbackActivateDefault(cb func(*Window)) {
+	if cb == nil {
+		x.xActivateDefault = 0
+	} else {
+		x.xActivateDefault = purego.NewCallback(func(WindowVarp uintptr) {
+			cb(WindowNewFromInternalPtr(WindowVarp))
+		})
+	}
+}
+
+// GetCallbackActivateDefault gets the callback function.
+func (x *WindowClass) GetCallbackActivateDefault() func(*Window) {
+	if x.xActivateDefault == 0 {
+		return nil
+	}
+	var rawCallback func(WindowVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xActivateDefault)
+	return func(WindowVar *Window) {
+		rawCallback(WindowVar.GoPointer())
+	}
+}
+
+// SetCallbackKeysChanged sets the callback function.
+func (x *WindowClass) SetCallbackKeysChanged(cb func(*Window)) {
+	if cb == nil {
+		x.xKeysChanged = 0
+	} else {
+		x.xKeysChanged = purego.NewCallback(func(WindowVarp uintptr) {
+			cb(WindowNewFromInternalPtr(WindowVarp))
+		})
+	}
+}
+
+// GetCallbackKeysChanged gets the callback function.
+func (x *WindowClass) GetCallbackKeysChanged() func(*Window) {
+	if x.xKeysChanged == 0 {
+		return nil
+	}
+	var rawCallback func(WindowVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xKeysChanged)
+	return func(WindowVar *Window) {
+		rawCallback(WindowVar.GoPointer())
+	}
+}
+
+// SetCallbackEnableDebugging sets the callback function.
+func (x *WindowClass) SetCallbackEnableDebugging(cb func(*Window, bool) bool) {
+	if cb == nil {
+		x.xEnableDebugging = 0
+	} else {
+		x.xEnableDebugging = purego.NewCallback(func(WindowVarp uintptr, ToggleVarp bool) bool {
+			return cb(WindowNewFromInternalPtr(WindowVarp), ToggleVarp)
+		})
+	}
+}
+
+// GetCallbackEnableDebugging gets the callback function.
+func (x *WindowClass) GetCallbackEnableDebugging() func(*Window, bool) bool {
+	if x.xEnableDebugging == 0 {
+		return nil
+	}
+	var rawCallback func(WindowVarp uintptr, ToggleVarp bool) bool
+	purego.RegisterFunc(&rawCallback, x.xEnableDebugging)
+	return func(WindowVar *Window, ToggleVar bool) bool {
+		return rawCallback(WindowVar.GoPointer(), ToggleVar)
+	}
+}
+
+// SetCallbackCloseRequest sets the callback function.
+func (x *WindowClass) SetCallbackCloseRequest(cb func(*Window) bool) {
+	if cb == nil {
+		x.xCloseRequest = 0
+	} else {
+		x.xCloseRequest = purego.NewCallback(func(WindowVarp uintptr) bool {
+			return cb(WindowNewFromInternalPtr(WindowVarp))
+		})
+	}
+}
+
+// GetCallbackCloseRequest gets the callback function.
+func (x *WindowClass) GetCallbackCloseRequest() func(*Window) bool {
+	if x.xCloseRequest == 0 {
+		return nil
+	}
+	var rawCallback func(WindowVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xCloseRequest)
+	return func(WindowVar *Window) bool {
+		return rawCallback(WindowVar.GoPointer())
+	}
 }
 
 type WindowGroupPrivate struct {
diff --git a/v4/gtk/gtkwindowgroup.go b/v4/gtk/gtkwindowgroup.go
index 7e36897100c7a9a959227139ff77e305a628c585..2984380fd0016a2506b1056380ba159ecf82e7d9 100644
--- a/v4/gtk/gtkwindowgroup.go
+++ b/v4/gtk/gtkwindowgroup.go
@@ -17,17 +17,109 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GtkReserved1 uintptr
+	xGtkReserved1 uintptr
 
-	GtkReserved2 uintptr
+	xGtkReserved2 uintptr
 
-	GtkReserved3 uintptr
+	xGtkReserved3 uintptr
 
-	GtkReserved4 uintptr
+	xGtkReserved4 uintptr
 }
 
 func (x *WindowGroupClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGtkReserved1 sets the callback function.
+func (x *WindowGroupClass) SetCallbackGtkReserved1(cb func()) {
+	if cb == nil {
+		x.xGtkReserved1 = 0
+	} else {
+		x.xGtkReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved1 gets the callback function.
+func (x *WindowGroupClass) GetCallbackGtkReserved1() func() {
+	if x.xGtkReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved2 sets the callback function.
+func (x *WindowGroupClass) SetCallbackGtkReserved2(cb func()) {
+	if cb == nil {
+		x.xGtkReserved2 = 0
+	} else {
+		x.xGtkReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved2 gets the callback function.
+func (x *WindowGroupClass) GetCallbackGtkReserved2() func() {
+	if x.xGtkReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved3 sets the callback function.
+func (x *WindowGroupClass) SetCallbackGtkReserved3(cb func()) {
+	if cb == nil {
+		x.xGtkReserved3 = 0
+	} else {
+		x.xGtkReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved3 gets the callback function.
+func (x *WindowGroupClass) GetCallbackGtkReserved3() func() {
+	if x.xGtkReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackGtkReserved4 sets the callback function.
+func (x *WindowGroupClass) SetCallbackGtkReserved4(cb func()) {
+	if cb == nil {
+		x.xGtkReserved4 = 0
+	} else {
+		x.xGtkReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackGtkReserved4 gets the callback function.
+func (x *WindowGroupClass) GetCallbackGtkReserved4() func() {
+	if x.xGtkReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xGtkReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 // `GtkWindowGroup` makes group of windows behave like separate applications.
diff --git a/v4/pango/pango-attributes.go b/v4/pango/pango-attributes.go
index 91c567707c24c4c22e8bdd8feaed850ef4de7e63..052bda45fb9d602c92e2e03a1253be038c822f4e 100644
--- a/v4/pango/pango-attributes.go
+++ b/v4/pango/pango-attributes.go
@@ -27,15 +27,84 @@ 	_ structs.HostLayout
 
 	Type AttrType
 
-	Copy uintptr
+	xCopy uintptr
 
-	Destroy uintptr
+	xDestroy uintptr
 
-	Equal uintptr
+	xEqual uintptr
 }
 
 func (x *AttrClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackCopy sets the callback function.
+func (x *AttrClass) SetCallbackCopy(cb func(*Attribute) *Attribute) {
+	if cb == nil {
+		x.xCopy = 0
+	} else {
+		x.xCopy = purego.NewCallback(func(AttrVarp *Attribute) *Attribute {
+			return cb(AttrVarp)
+		})
+	}
+}
+
+// GetCallbackCopy gets the callback function.
+func (x *AttrClass) GetCallbackCopy() func(*Attribute) *Attribute {
+	if x.xCopy == 0 {
+		return nil
+	}
+	var rawCallback func(AttrVarp *Attribute) *Attribute
+	purego.RegisterFunc(&rawCallback, x.xCopy)
+	return func(AttrVar *Attribute) *Attribute {
+		return rawCallback(AttrVar)
+	}
+}
+
+// SetCallbackDestroy sets the callback function.
+func (x *AttrClass) SetCallbackDestroy(cb func(*Attribute)) {
+	if cb == nil {
+		x.xDestroy = 0
+	} else {
+		x.xDestroy = purego.NewCallback(func(AttrVarp *Attribute) {
+			cb(AttrVarp)
+		})
+	}
+}
+
+// GetCallbackDestroy gets the callback function.
+func (x *AttrClass) GetCallbackDestroy() func(*Attribute) {
+	if x.xDestroy == 0 {
+		return nil
+	}
+	var rawCallback func(AttrVarp *Attribute)
+	purego.RegisterFunc(&rawCallback, x.xDestroy)
+	return func(AttrVar *Attribute) {
+		rawCallback(AttrVar)
+	}
+}
+
+// SetCallbackEqual sets the callback function.
+func (x *AttrClass) SetCallbackEqual(cb func(*Attribute, *Attribute) bool) {
+	if cb == nil {
+		x.xEqual = 0
+	} else {
+		x.xEqual = purego.NewCallback(func(Attr1Varp *Attribute, Attr2Varp *Attribute) bool {
+			return cb(Attr1Varp, Attr2Varp)
+		})
+	}
+}
+
+// GetCallbackEqual gets the callback function.
+func (x *AttrClass) GetCallbackEqual() func(*Attribute, *Attribute) bool {
+	if x.xEqual == 0 {
+		return nil
+	}
+	var rawCallback func(Attr1Varp *Attribute, Attr2Varp *Attribute) bool
+	purego.RegisterFunc(&rawCallback, x.xEqual)
+	return func(Attr1Var *Attribute, Attr2Var *Attribute) bool {
+		return rawCallback(Attr1Var, Attr2Var)
+	}
 }
 
 // The `PangoAttrColor` structure is used to represent attributes that
diff --git a/v4/pango/pango-font.go b/v4/pango/pango-font.go
index 551ed9ee37b4ad229ff486eac4b8040ac40ccd9f..ea7a6bb5db2bea5a1adfc8b1d8157ba540784e10 100644
--- a/v4/pango/pango-font.go
+++ b/v4/pango/pango-font.go
@@ -17,25 +17,229 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	Describe uintptr
+	xDescribe uintptr
 
-	GetCoverage uintptr
+	xGetCoverage uintptr
 
-	GetGlyphExtents uintptr
+	xGetGlyphExtents uintptr
 
-	GetMetrics uintptr
+	xGetMetrics uintptr
 
-	GetFontMap uintptr
+	xGetFontMap uintptr
 
-	DescribeAbsolute uintptr
+	xDescribeAbsolute uintptr
 
-	GetFeatures uintptr
+	xGetFeatures uintptr
 
-	CreateHbFont uintptr
+	xCreateHbFont uintptr
 }
 
 func (x *FontClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackDescribe sets the callback function.
+func (x *FontClass) SetCallbackDescribe(cb func(*Font) *FontDescription) {
+	if cb == nil {
+		x.xDescribe = 0
+	} else {
+		x.xDescribe = purego.NewCallback(func(FontVarp uintptr) *FontDescription {
+			return cb(FontNewFromInternalPtr(FontVarp))
+		})
+	}
+}
+
+// GetCallbackDescribe gets the callback function.
+func (x *FontClass) GetCallbackDescribe() func(*Font) *FontDescription {
+	if x.xDescribe == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr) *FontDescription
+	purego.RegisterFunc(&rawCallback, x.xDescribe)
+	return func(FontVar *Font) *FontDescription {
+		return rawCallback(FontVar.GoPointer())
+	}
+}
+
+// SetCallbackGetCoverage sets the callback function.
+func (x *FontClass) SetCallbackGetCoverage(cb func(*Font, *Language) *Coverage) {
+	if cb == nil {
+		x.xGetCoverage = 0
+	} else {
+		x.xGetCoverage = purego.NewCallback(func(FontVarp uintptr, LanguageVarp *Language) uintptr {
+			ret := cb(FontNewFromInternalPtr(FontVarp), LanguageVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetCoverage gets the callback function.
+func (x *FontClass) GetCallbackGetCoverage() func(*Font, *Language) *Coverage {
+	if x.xGetCoverage == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr, LanguageVarp *Language) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetCoverage)
+	return func(FontVar *Font, LanguageVar *Language) *Coverage {
+		rawRet := rawCallback(FontVar.GoPointer(), LanguageVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Coverage{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetGlyphExtents sets the callback function.
+func (x *FontClass) SetCallbackGetGlyphExtents(cb func(*Font, Glyph, *Rectangle, *Rectangle)) {
+	if cb == nil {
+		x.xGetGlyphExtents = 0
+	} else {
+		x.xGetGlyphExtents = purego.NewCallback(func(FontVarp uintptr, GlyphVarp Glyph, InkRectVarp *Rectangle, LogicalRectVarp *Rectangle) {
+			cb(FontNewFromInternalPtr(FontVarp), GlyphVarp, InkRectVarp, LogicalRectVarp)
+		})
+	}
+}
+
+// GetCallbackGetGlyphExtents gets the callback function.
+func (x *FontClass) GetCallbackGetGlyphExtents() func(*Font, Glyph, *Rectangle, *Rectangle) {
+	if x.xGetGlyphExtents == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr, GlyphVarp Glyph, InkRectVarp *Rectangle, LogicalRectVarp *Rectangle)
+	purego.RegisterFunc(&rawCallback, x.xGetGlyphExtents)
+	return func(FontVar *Font, GlyphVar Glyph, InkRectVar *Rectangle, LogicalRectVar *Rectangle) {
+		rawCallback(FontVar.GoPointer(), GlyphVar, InkRectVar, LogicalRectVar)
+	}
+}
+
+// SetCallbackGetMetrics sets the callback function.
+func (x *FontClass) SetCallbackGetMetrics(cb func(*Font, *Language) *FontMetrics) {
+	if cb == nil {
+		x.xGetMetrics = 0
+	} else {
+		x.xGetMetrics = purego.NewCallback(func(FontVarp uintptr, LanguageVarp *Language) *FontMetrics {
+			return cb(FontNewFromInternalPtr(FontVarp), LanguageVarp)
+		})
+	}
+}
+
+// GetCallbackGetMetrics gets the callback function.
+func (x *FontClass) GetCallbackGetMetrics() func(*Font, *Language) *FontMetrics {
+	if x.xGetMetrics == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr, LanguageVarp *Language) *FontMetrics
+	purego.RegisterFunc(&rawCallback, x.xGetMetrics)
+	return func(FontVar *Font, LanguageVar *Language) *FontMetrics {
+		return rawCallback(FontVar.GoPointer(), LanguageVar)
+	}
+}
+
+// SetCallbackGetFontMap sets the callback function.
+func (x *FontClass) SetCallbackGetFontMap(cb func(*Font) *FontMap) {
+	if cb == nil {
+		x.xGetFontMap = 0
+	} else {
+		x.xGetFontMap = purego.NewCallback(func(FontVarp uintptr) uintptr {
+			ret := cb(FontNewFromInternalPtr(FontVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFontMap gets the callback function.
+func (x *FontClass) GetCallbackGetFontMap() func(*Font) *FontMap {
+	if x.xGetFontMap == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFontMap)
+	return func(FontVar *Font) *FontMap {
+		rawRet := rawCallback(FontVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FontMap{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackDescribeAbsolute sets the callback function.
+func (x *FontClass) SetCallbackDescribeAbsolute(cb func(*Font) *FontDescription) {
+	if cb == nil {
+		x.xDescribeAbsolute = 0
+	} else {
+		x.xDescribeAbsolute = purego.NewCallback(func(FontVarp uintptr) *FontDescription {
+			return cb(FontNewFromInternalPtr(FontVarp))
+		})
+	}
+}
+
+// GetCallbackDescribeAbsolute gets the callback function.
+func (x *FontClass) GetCallbackDescribeAbsolute() func(*Font) *FontDescription {
+	if x.xDescribeAbsolute == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr) *FontDescription
+	purego.RegisterFunc(&rawCallback, x.xDescribeAbsolute)
+	return func(FontVar *Font) *FontDescription {
+		return rawCallback(FontVar.GoPointer())
+	}
+}
+
+// SetCallbackGetFeatures sets the callback function.
+func (x *FontClass) SetCallbackGetFeatures(cb func(*Font, []uintptr, uint, uint)) {
+	if cb == nil {
+		x.xGetFeatures = 0
+	} else {
+		x.xGetFeatures = purego.NewCallback(func(FontVarp uintptr, FeaturesVarp []uintptr, LenVarp uint, NumFeaturesVarp uint) {
+			cb(FontNewFromInternalPtr(FontVarp), FeaturesVarp, LenVarp, NumFeaturesVarp)
+		})
+	}
+}
+
+// GetCallbackGetFeatures gets the callback function.
+func (x *FontClass) GetCallbackGetFeatures() func(*Font, []uintptr, uint, uint) {
+	if x.xGetFeatures == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr, FeaturesVarp []uintptr, LenVarp uint, NumFeaturesVarp uint)
+	purego.RegisterFunc(&rawCallback, x.xGetFeatures)
+	return func(FontVar *Font, FeaturesVar []uintptr, LenVar uint, NumFeaturesVar uint) {
+		rawCallback(FontVar.GoPointer(), FeaturesVar, LenVar, NumFeaturesVar)
+	}
+}
+
+// SetCallbackCreateHbFont sets the callback function.
+func (x *FontClass) SetCallbackCreateHbFont(cb func(*Font) uintptr) {
+	if cb == nil {
+		x.xCreateHbFont = 0
+	} else {
+		x.xCreateHbFont = purego.NewCallback(func(FontVarp uintptr) uintptr {
+			return cb(FontNewFromInternalPtr(FontVarp))
+		})
+	}
+}
+
+// GetCallbackCreateHbFont gets the callback function.
+func (x *FontClass) GetCallbackCreateHbFont() func(*Font) uintptr {
+	if x.xCreateHbFont == 0 {
+		return nil
+	}
+	var rawCallback func(FontVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xCreateHbFont)
+	return func(FontVar *Font) uintptr {
+		return rawCallback(FontVar.GoPointer())
+	}
 }
 
 // A `PangoFontDescription` describes a font in an implementation-independent
@@ -497,45 +701,364 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetFaceName uintptr
+	xGetFaceName uintptr
 
-	Describe uintptr
+	xDescribe uintptr
 
-	ListSizes uintptr
+	xListSizes uintptr
 
-	IsSynthesized uintptr
+	xIsSynthesized uintptr
 
-	GetFamily uintptr
+	xGetFamily uintptr
 
-	PangoReserved3 uintptr
+	xPangoReserved3 uintptr
 
-	PangoReserved4 uintptr
+	xPangoReserved4 uintptr
 }
 
 func (x *FontFaceClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
 }
 
+// SetCallbackGetFaceName sets the callback function.
+func (x *FontFaceClass) SetCallbackGetFaceName(cb func(*FontFace) string) {
+	if cb == nil {
+		x.xGetFaceName = 0
+	} else {
+		x.xGetFaceName = purego.NewCallback(func(FaceVarp uintptr) string {
+			return cb(FontFaceNewFromInternalPtr(FaceVarp))
+		})
+	}
+}
+
+// GetCallbackGetFaceName gets the callback function.
+func (x *FontFaceClass) GetCallbackGetFaceName() func(*FontFace) string {
+	if x.xGetFaceName == 0 {
+		return nil
+	}
+	var rawCallback func(FaceVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetFaceName)
+	return func(FaceVar *FontFace) string {
+		return rawCallback(FaceVar.GoPointer())
+	}
+}
+
+// SetCallbackDescribe sets the callback function.
+func (x *FontFaceClass) SetCallbackDescribe(cb func(*FontFace) *FontDescription) {
+	if cb == nil {
+		x.xDescribe = 0
+	} else {
+		x.xDescribe = purego.NewCallback(func(FaceVarp uintptr) *FontDescription {
+			return cb(FontFaceNewFromInternalPtr(FaceVarp))
+		})
+	}
+}
+
+// GetCallbackDescribe gets the callback function.
+func (x *FontFaceClass) GetCallbackDescribe() func(*FontFace) *FontDescription {
+	if x.xDescribe == 0 {
+		return nil
+	}
+	var rawCallback func(FaceVarp uintptr) *FontDescription
+	purego.RegisterFunc(&rawCallback, x.xDescribe)
+	return func(FaceVar *FontFace) *FontDescription {
+		return rawCallback(FaceVar.GoPointer())
+	}
+}
+
+// SetCallbackListSizes sets the callback function.
+func (x *FontFaceClass) SetCallbackListSizes(cb func(*FontFace, []int, int)) {
+	if cb == nil {
+		x.xListSizes = 0
+	} else {
+		x.xListSizes = purego.NewCallback(func(FaceVarp uintptr, SizesVarp []int, NSizesVarp int) {
+			cb(FontFaceNewFromInternalPtr(FaceVarp), SizesVarp, NSizesVarp)
+		})
+	}
+}
+
+// GetCallbackListSizes gets the callback function.
+func (x *FontFaceClass) GetCallbackListSizes() func(*FontFace, []int, int) {
+	if x.xListSizes == 0 {
+		return nil
+	}
+	var rawCallback func(FaceVarp uintptr, SizesVarp []int, NSizesVarp int)
+	purego.RegisterFunc(&rawCallback, x.xListSizes)
+	return func(FaceVar *FontFace, SizesVar []int, NSizesVar int) {
+		rawCallback(FaceVar.GoPointer(), SizesVar, NSizesVar)
+	}
+}
+
+// SetCallbackIsSynthesized sets the callback function.
+func (x *FontFaceClass) SetCallbackIsSynthesized(cb func(*FontFace) bool) {
+	if cb == nil {
+		x.xIsSynthesized = 0
+	} else {
+		x.xIsSynthesized = purego.NewCallback(func(FaceVarp uintptr) bool {
+			return cb(FontFaceNewFromInternalPtr(FaceVarp))
+		})
+	}
+}
+
+// GetCallbackIsSynthesized gets the callback function.
+func (x *FontFaceClass) GetCallbackIsSynthesized() func(*FontFace) bool {
+	if x.xIsSynthesized == 0 {
+		return nil
+	}
+	var rawCallback func(FaceVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsSynthesized)
+	return func(FaceVar *FontFace) bool {
+		return rawCallback(FaceVar.GoPointer())
+	}
+}
+
+// SetCallbackGetFamily sets the callback function.
+func (x *FontFaceClass) SetCallbackGetFamily(cb func(*FontFace) *FontFamily) {
+	if cb == nil {
+		x.xGetFamily = 0
+	} else {
+		x.xGetFamily = purego.NewCallback(func(FaceVarp uintptr) uintptr {
+			ret := cb(FontFaceNewFromInternalPtr(FaceVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFamily gets the callback function.
+func (x *FontFaceClass) GetCallbackGetFamily() func(*FontFace) *FontFamily {
+	if x.xGetFamily == 0 {
+		return nil
+	}
+	var rawCallback func(FaceVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFamily)
+	return func(FaceVar *FontFace) *FontFamily {
+		rawRet := rawCallback(FaceVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FontFamily{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackPangoReserved3 sets the callback function.
+func (x *FontFaceClass) SetCallbackPangoReserved3(cb func()) {
+	if cb == nil {
+		x.xPangoReserved3 = 0
+	} else {
+		x.xPangoReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved3 gets the callback function.
+func (x *FontFaceClass) GetCallbackPangoReserved3() func() {
+	if x.xPangoReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackPangoReserved4 sets the callback function.
+func (x *FontFaceClass) SetCallbackPangoReserved4(cb func()) {
+	if cb == nil {
+		x.xPangoReserved4 = 0
+	} else {
+		x.xPangoReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved4 gets the callback function.
+func (x *FontFaceClass) GetCallbackPangoReserved4() func() {
+	if x.xPangoReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved4)
+	return func() {
+		rawCallback()
+	}
+}
+
 type FontFamilyClass struct {
 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	ListFaces uintptr
+	xListFaces uintptr
 
-	GetName uintptr
+	xGetName uintptr
 
-	IsMonospace uintptr
+	xIsMonospace uintptr
 
-	IsVariable uintptr
+	xIsVariable uintptr
 
-	GetFace uintptr
+	xGetFace uintptr
 
-	PangoReserved2 uintptr
+	xPangoReserved2 uintptr
 }
 
 func (x *FontFamilyClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackListFaces sets the callback function.
+func (x *FontFamilyClass) SetCallbackListFaces(cb func(*FontFamily, uintptr, int)) {
+	if cb == nil {
+		x.xListFaces = 0
+	} else {
+		x.xListFaces = purego.NewCallback(func(FamilyVarp uintptr, FacesVarp uintptr, NFacesVarp int) {
+			cb(FontFamilyNewFromInternalPtr(FamilyVarp), FacesVarp, NFacesVarp)
+		})
+	}
+}
+
+// GetCallbackListFaces gets the callback function.
+func (x *FontFamilyClass) GetCallbackListFaces() func(*FontFamily, uintptr, int) {
+	if x.xListFaces == 0 {
+		return nil
+	}
+	var rawCallback func(FamilyVarp uintptr, FacesVarp uintptr, NFacesVarp int)
+	purego.RegisterFunc(&rawCallback, x.xListFaces)
+	return func(FamilyVar *FontFamily, FacesVar uintptr, NFacesVar int) {
+		rawCallback(FamilyVar.GoPointer(), FacesVar, NFacesVar)
+	}
+}
+
+// SetCallbackGetName sets the callback function.
+func (x *FontFamilyClass) SetCallbackGetName(cb func(*FontFamily) string) {
+	if cb == nil {
+		x.xGetName = 0
+	} else {
+		x.xGetName = purego.NewCallback(func(FamilyVarp uintptr) string {
+			return cb(FontFamilyNewFromInternalPtr(FamilyVarp))
+		})
+	}
+}
+
+// GetCallbackGetName gets the callback function.
+func (x *FontFamilyClass) GetCallbackGetName() func(*FontFamily) string {
+	if x.xGetName == 0 {
+		return nil
+	}
+	var rawCallback func(FamilyVarp uintptr) string
+	purego.RegisterFunc(&rawCallback, x.xGetName)
+	return func(FamilyVar *FontFamily) string {
+		return rawCallback(FamilyVar.GoPointer())
+	}
+}
+
+// SetCallbackIsMonospace sets the callback function.
+func (x *FontFamilyClass) SetCallbackIsMonospace(cb func(*FontFamily) bool) {
+	if cb == nil {
+		x.xIsMonospace = 0
+	} else {
+		x.xIsMonospace = purego.NewCallback(func(FamilyVarp uintptr) bool {
+			return cb(FontFamilyNewFromInternalPtr(FamilyVarp))
+		})
+	}
+}
+
+// GetCallbackIsMonospace gets the callback function.
+func (x *FontFamilyClass) GetCallbackIsMonospace() func(*FontFamily) bool {
+	if x.xIsMonospace == 0 {
+		return nil
+	}
+	var rawCallback func(FamilyVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsMonospace)
+	return func(FamilyVar *FontFamily) bool {
+		return rawCallback(FamilyVar.GoPointer())
+	}
+}
+
+// SetCallbackIsVariable sets the callback function.
+func (x *FontFamilyClass) SetCallbackIsVariable(cb func(*FontFamily) bool) {
+	if cb == nil {
+		x.xIsVariable = 0
+	} else {
+		x.xIsVariable = purego.NewCallback(func(FamilyVarp uintptr) bool {
+			return cb(FontFamilyNewFromInternalPtr(FamilyVarp))
+		})
+	}
+}
+
+// GetCallbackIsVariable gets the callback function.
+func (x *FontFamilyClass) GetCallbackIsVariable() func(*FontFamily) bool {
+	if x.xIsVariable == 0 {
+		return nil
+	}
+	var rawCallback func(FamilyVarp uintptr) bool
+	purego.RegisterFunc(&rawCallback, x.xIsVariable)
+	return func(FamilyVar *FontFamily) bool {
+		return rawCallback(FamilyVar.GoPointer())
+	}
+}
+
+// SetCallbackGetFace sets the callback function.
+func (x *FontFamilyClass) SetCallbackGetFace(cb func(*FontFamily, string) *FontFace) {
+	if cb == nil {
+		x.xGetFace = 0
+	} else {
+		x.xGetFace = purego.NewCallback(func(FamilyVarp uintptr, NameVarp string) uintptr {
+			ret := cb(FontFamilyNewFromInternalPtr(FamilyVarp), NameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFace gets the callback function.
+func (x *FontFamilyClass) GetCallbackGetFace() func(*FontFamily, string) *FontFace {
+	if x.xGetFace == 0 {
+		return nil
+	}
+	var rawCallback func(FamilyVarp uintptr, NameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFace)
+	return func(FamilyVar *FontFamily, NameVar string) *FontFace {
+		rawRet := rawCallback(FamilyVar.GoPointer(), NameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FontFace{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackPangoReserved2 sets the callback function.
+func (x *FontFamilyClass) SetCallbackPangoReserved2(cb func()) {
+	if cb == nil {
+		x.xPangoReserved2 = 0
+	} else {
+		x.xPangoReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved2 gets the callback function.
+func (x *FontFamilyClass) GetCallbackPangoReserved2() func() {
+	if x.xPangoReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved2)
+	return func() {
+		rawCallback()
+	}
 }
 
 // A `PangoFontMetrics` structure holds the overall metric information
diff --git a/v4/pango/pango-fontmap.go b/v4/pango/pango-fontmap.go
index c4e63a1c37cb487c1998ea3ce1189266fade9703..cdebabfd5a8950020ab3bc20627e75036a26fe26 100644
--- a/v4/pango/pango-fontmap.go
+++ b/v4/pango/pango-fontmap.go
@@ -18,25 +18,226 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	LoadFont uintptr
+	xLoadFont uintptr
 
-	ListFamilies uintptr
+	xListFamilies uintptr
 
-	LoadFontset uintptr
+	xLoadFontset uintptr
 
 	ShapeEngineType uintptr
 
-	GetSerial uintptr
+	xGetSerial uintptr
 
-	Changed uintptr
+	xChanged uintptr
 
-	GetFamily uintptr
+	xGetFamily uintptr
 
-	GetFace uintptr
+	xGetFace uintptr
 }
 
 func (x *FontMapClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackLoadFont sets the callback function.
+func (x *FontMapClass) SetCallbackLoadFont(cb func(*FontMap, *Context, *FontDescription) *Font) {
+	if cb == nil {
+		x.xLoadFont = 0
+	} else {
+		x.xLoadFont = purego.NewCallback(func(FontmapVarp uintptr, ContextVarp uintptr, DescVarp *FontDescription) uintptr {
+			ret := cb(FontMapNewFromInternalPtr(FontmapVarp), ContextNewFromInternalPtr(ContextVarp), DescVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLoadFont gets the callback function.
+func (x *FontMapClass) GetCallbackLoadFont() func(*FontMap, *Context, *FontDescription) *Font {
+	if x.xLoadFont == 0 {
+		return nil
+	}
+	var rawCallback func(FontmapVarp uintptr, ContextVarp uintptr, DescVarp *FontDescription) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLoadFont)
+	return func(FontmapVar *FontMap, ContextVar *Context, DescVar *FontDescription) *Font {
+		rawRet := rawCallback(FontmapVar.GoPointer(), ContextVar.GoPointer(), DescVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Font{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackListFamilies sets the callback function.
+func (x *FontMapClass) SetCallbackListFamilies(cb func(*FontMap, uintptr, int)) {
+	if cb == nil {
+		x.xListFamilies = 0
+	} else {
+		x.xListFamilies = purego.NewCallback(func(FontmapVarp uintptr, FamiliesVarp uintptr, NFamiliesVarp int) {
+			cb(FontMapNewFromInternalPtr(FontmapVarp), FamiliesVarp, NFamiliesVarp)
+		})
+	}
+}
+
+// GetCallbackListFamilies gets the callback function.
+func (x *FontMapClass) GetCallbackListFamilies() func(*FontMap, uintptr, int) {
+	if x.xListFamilies == 0 {
+		return nil
+	}
+	var rawCallback func(FontmapVarp uintptr, FamiliesVarp uintptr, NFamiliesVarp int)
+	purego.RegisterFunc(&rawCallback, x.xListFamilies)
+	return func(FontmapVar *FontMap, FamiliesVar uintptr, NFamiliesVar int) {
+		rawCallback(FontmapVar.GoPointer(), FamiliesVar, NFamiliesVar)
+	}
+}
+
+// SetCallbackLoadFontset sets the callback function.
+func (x *FontMapClass) SetCallbackLoadFontset(cb func(*FontMap, *Context, *FontDescription, *Language) *Fontset) {
+	if cb == nil {
+		x.xLoadFontset = 0
+	} else {
+		x.xLoadFontset = purego.NewCallback(func(FontmapVarp uintptr, ContextVarp uintptr, DescVarp *FontDescription, LanguageVarp *Language) uintptr {
+			ret := cb(FontMapNewFromInternalPtr(FontmapVarp), ContextNewFromInternalPtr(ContextVarp), DescVarp, LanguageVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackLoadFontset gets the callback function.
+func (x *FontMapClass) GetCallbackLoadFontset() func(*FontMap, *Context, *FontDescription, *Language) *Fontset {
+	if x.xLoadFontset == 0 {
+		return nil
+	}
+	var rawCallback func(FontmapVarp uintptr, ContextVarp uintptr, DescVarp *FontDescription, LanguageVarp *Language) uintptr
+	purego.RegisterFunc(&rawCallback, x.xLoadFontset)
+	return func(FontmapVar *FontMap, ContextVar *Context, DescVar *FontDescription, LanguageVar *Language) *Fontset {
+		rawRet := rawCallback(FontmapVar.GoPointer(), ContextVar.GoPointer(), DescVar, LanguageVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Fontset{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetSerial sets the callback function.
+func (x *FontMapClass) SetCallbackGetSerial(cb func(*FontMap) uint) {
+	if cb == nil {
+		x.xGetSerial = 0
+	} else {
+		x.xGetSerial = purego.NewCallback(func(FontmapVarp uintptr) uint {
+			return cb(FontMapNewFromInternalPtr(FontmapVarp))
+		})
+	}
+}
+
+// GetCallbackGetSerial gets the callback function.
+func (x *FontMapClass) GetCallbackGetSerial() func(*FontMap) uint {
+	if x.xGetSerial == 0 {
+		return nil
+	}
+	var rawCallback func(FontmapVarp uintptr) uint
+	purego.RegisterFunc(&rawCallback, x.xGetSerial)
+	return func(FontmapVar *FontMap) uint {
+		return rawCallback(FontmapVar.GoPointer())
+	}
+}
+
+// SetCallbackChanged sets the callback function.
+func (x *FontMapClass) SetCallbackChanged(cb func(*FontMap)) {
+	if cb == nil {
+		x.xChanged = 0
+	} else {
+		x.xChanged = purego.NewCallback(func(FontmapVarp uintptr) {
+			cb(FontMapNewFromInternalPtr(FontmapVarp))
+		})
+	}
+}
+
+// GetCallbackChanged gets the callback function.
+func (x *FontMapClass) GetCallbackChanged() func(*FontMap) {
+	if x.xChanged == 0 {
+		return nil
+	}
+	var rawCallback func(FontmapVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xChanged)
+	return func(FontmapVar *FontMap) {
+		rawCallback(FontmapVar.GoPointer())
+	}
+}
+
+// SetCallbackGetFamily sets the callback function.
+func (x *FontMapClass) SetCallbackGetFamily(cb func(*FontMap, string) *FontFamily) {
+	if cb == nil {
+		x.xGetFamily = 0
+	} else {
+		x.xGetFamily = purego.NewCallback(func(FontmapVarp uintptr, NameVarp string) uintptr {
+			ret := cb(FontMapNewFromInternalPtr(FontmapVarp), NameVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFamily gets the callback function.
+func (x *FontMapClass) GetCallbackGetFamily() func(*FontMap, string) *FontFamily {
+	if x.xGetFamily == 0 {
+		return nil
+	}
+	var rawCallback func(FontmapVarp uintptr, NameVarp string) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFamily)
+	return func(FontmapVar *FontMap, NameVar string) *FontFamily {
+		rawRet := rawCallback(FontmapVar.GoPointer(), NameVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FontFamily{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetFace sets the callback function.
+func (x *FontMapClass) SetCallbackGetFace(cb func(*FontMap, *Font) *FontFace) {
+	if cb == nil {
+		x.xGetFace = 0
+	} else {
+		x.xGetFace = purego.NewCallback(func(FontmapVarp uintptr, FontVarp uintptr) uintptr {
+			ret := cb(FontMapNewFromInternalPtr(FontmapVarp), FontNewFromInternalPtr(FontVarp))
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFace gets the callback function.
+func (x *FontMapClass) GetCallbackGetFace() func(*FontMap, *Font) *FontFace {
+	if x.xGetFace == 0 {
+		return nil
+	}
+	var rawCallback func(FontmapVarp uintptr, FontVarp uintptr) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFace)
+	return func(FontmapVar *FontMap, FontVar *Font) *FontFace {
+		rawRet := rawCallback(FontmapVar.GoPointer(), FontVar.GoPointer())
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &FontFace{}
+		ret.Ptr = rawRet
+		return ret
+	}
 }
 
 // A `PangoFontMap` represents the set of fonts available for a
diff --git a/v4/pango/pango-fontset.go b/v4/pango/pango-fontset.go
index 550af06c3ef4a3a74129f4bc5e067ab2b01ce133..475e625f90055d9cfedcb9cdf5af27f65094813c 100644
--- a/v4/pango/pango-fontset.go
+++ b/v4/pango/pango-fontset.go
@@ -23,25 +23,223 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	GetFont uintptr
+	xGetFont uintptr
 
-	GetMetrics uintptr
+	xGetMetrics uintptr
 
-	GetLanguage uintptr
+	xGetLanguage uintptr
 
-	Foreach uintptr
+	xForeach uintptr
 
-	PangoReserved1 uintptr
+	xPangoReserved1 uintptr
 
-	PangoReserved2 uintptr
+	xPangoReserved2 uintptr
 
-	PangoReserved3 uintptr
+	xPangoReserved3 uintptr
 
-	PangoReserved4 uintptr
+	xPangoReserved4 uintptr
 }
 
 func (x *FontsetClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackGetFont sets the callback function.
+func (x *FontsetClass) SetCallbackGetFont(cb func(*Fontset, uint) *Font) {
+	if cb == nil {
+		x.xGetFont = 0
+	} else {
+		x.xGetFont = purego.NewCallback(func(FontsetVarp uintptr, WcVarp uint) uintptr {
+			ret := cb(FontsetNewFromInternalPtr(FontsetVarp), WcVarp)
+			if ret == nil {
+				return 0
+			}
+			return ret.GoPointer()
+		})
+	}
+}
+
+// GetCallbackGetFont gets the callback function.
+func (x *FontsetClass) GetCallbackGetFont() func(*Fontset, uint) *Font {
+	if x.xGetFont == 0 {
+		return nil
+	}
+	var rawCallback func(FontsetVarp uintptr, WcVarp uint) uintptr
+	purego.RegisterFunc(&rawCallback, x.xGetFont)
+	return func(FontsetVar *Fontset, WcVar uint) *Font {
+		rawRet := rawCallback(FontsetVar.GoPointer(), WcVar)
+		if rawRet == 0 {
+			return nil
+		}
+		ret := &Font{}
+		ret.Ptr = rawRet
+		return ret
+	}
+}
+
+// SetCallbackGetMetrics sets the callback function.
+func (x *FontsetClass) SetCallbackGetMetrics(cb func(*Fontset) *FontMetrics) {
+	if cb == nil {
+		x.xGetMetrics = 0
+	} else {
+		x.xGetMetrics = purego.NewCallback(func(FontsetVarp uintptr) *FontMetrics {
+			return cb(FontsetNewFromInternalPtr(FontsetVarp))
+		})
+	}
+}
+
+// GetCallbackGetMetrics gets the callback function.
+func (x *FontsetClass) GetCallbackGetMetrics() func(*Fontset) *FontMetrics {
+	if x.xGetMetrics == 0 {
+		return nil
+	}
+	var rawCallback func(FontsetVarp uintptr) *FontMetrics
+	purego.RegisterFunc(&rawCallback, x.xGetMetrics)
+	return func(FontsetVar *Fontset) *FontMetrics {
+		return rawCallback(FontsetVar.GoPointer())
+	}
+}
+
+// SetCallbackGetLanguage sets the callback function.
+func (x *FontsetClass) SetCallbackGetLanguage(cb func(*Fontset) *Language) {
+	if cb == nil {
+		x.xGetLanguage = 0
+	} else {
+		x.xGetLanguage = purego.NewCallback(func(FontsetVarp uintptr) *Language {
+			return cb(FontsetNewFromInternalPtr(FontsetVarp))
+		})
+	}
+}
+
+// GetCallbackGetLanguage gets the callback function.
+func (x *FontsetClass) GetCallbackGetLanguage() func(*Fontset) *Language {
+	if x.xGetLanguage == 0 {
+		return nil
+	}
+	var rawCallback func(FontsetVarp uintptr) *Language
+	purego.RegisterFunc(&rawCallback, x.xGetLanguage)
+	return func(FontsetVar *Fontset) *Language {
+		return rawCallback(FontsetVar.GoPointer())
+	}
+}
+
+// SetCallbackForeach sets the callback function.
+// Callback used by pango_fontset_foreach() when enumerating
+// fonts in a fontset.
+func (x *FontsetClass) SetCallbackForeach(cb func(*Fontset, *FontsetForeachFunc, uintptr)) {
+	if cb == nil {
+		x.xForeach = 0
+	} else {
+		x.xForeach = purego.NewCallback(func(FontsetVarp uintptr, FuncVarp uintptr, DataVarp uintptr) {
+			cb(FontsetNewFromInternalPtr(FontsetVarp), (*FontsetForeachFunc)(unsafe.Pointer(FuncVarp)), DataVarp)
+		})
+	}
+}
+
+// GetCallbackForeach gets the callback function.
+// Callback used by pango_fontset_foreach() when enumerating
+// fonts in a fontset.
+func (x *FontsetClass) GetCallbackForeach() func(*Fontset, *FontsetForeachFunc, uintptr) {
+	if x.xForeach == 0 {
+		return nil
+	}
+	var rawCallback func(FontsetVarp uintptr, FuncVarp uintptr, DataVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xForeach)
+	return func(FontsetVar *Fontset, FuncVar *FontsetForeachFunc, DataVar uintptr) {
+		rawCallback(FontsetVar.GoPointer(), glib.NewCallback(FuncVar), DataVar)
+	}
+}
+
+// SetCallbackPangoReserved1 sets the callback function.
+func (x *FontsetClass) SetCallbackPangoReserved1(cb func()) {
+	if cb == nil {
+		x.xPangoReserved1 = 0
+	} else {
+		x.xPangoReserved1 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved1 gets the callback function.
+func (x *FontsetClass) GetCallbackPangoReserved1() func() {
+	if x.xPangoReserved1 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved1)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackPangoReserved2 sets the callback function.
+func (x *FontsetClass) SetCallbackPangoReserved2(cb func()) {
+	if cb == nil {
+		x.xPangoReserved2 = 0
+	} else {
+		x.xPangoReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved2 gets the callback function.
+func (x *FontsetClass) GetCallbackPangoReserved2() func() {
+	if x.xPangoReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackPangoReserved3 sets the callback function.
+func (x *FontsetClass) SetCallbackPangoReserved3(cb func()) {
+	if cb == nil {
+		x.xPangoReserved3 = 0
+	} else {
+		x.xPangoReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved3 gets the callback function.
+func (x *FontsetClass) GetCallbackPangoReserved3() func() {
+	if x.xPangoReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackPangoReserved4 sets the callback function.
+func (x *FontsetClass) SetCallbackPangoReserved4(cb func()) {
+	if cb == nil {
+		x.xPangoReserved4 = 0
+	} else {
+		x.xPangoReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved4 gets the callback function.
+func (x *FontsetClass) GetCallbackPangoReserved4() func() {
+	if x.xPangoReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 type FontsetSimpleClass struct {
diff --git a/v4/pango/pango-renderer.go b/v4/pango/pango-renderer.go
index cef3c9f292f7216a7967ebd875f6378deb123d95..a887007fa69d53c678fd0a98fe0f7127f9fef8ca 100644
--- a/v4/pango/pango-renderer.go
+++ b/v4/pango/pango-renderer.go
@@ -32,37 +32,359 @@ 	_ structs.HostLayout
 
 	ParentClass uintptr
 
-	DrawGlyphs uintptr
+	xDrawGlyphs uintptr
 
-	DrawRectangle uintptr
+	xDrawRectangle uintptr
 
-	DrawErrorUnderline uintptr
+	xDrawErrorUnderline uintptr
 
-	DrawShape uintptr
+	xDrawShape uintptr
 
-	DrawTrapezoid uintptr
+	xDrawTrapezoid uintptr
 
-	DrawGlyph uintptr
+	xDrawGlyph uintptr
 
-	PartChanged uintptr
+	xPartChanged uintptr
 
-	Begin uintptr
+	xBegin uintptr
 
-	End uintptr
+	xEnd uintptr
 
-	PrepareRun uintptr
+	xPrepareRun uintptr
 
-	DrawGlyphItem uintptr
+	xDrawGlyphItem uintptr
 
-	PangoReserved2 uintptr
+	xPangoReserved2 uintptr
 
-	PangoReserved3 uintptr
+	xPangoReserved3 uintptr
 
-	PangoReserved4 uintptr
+	xPangoReserved4 uintptr
 }
 
 func (x *RendererClass) GoPointer() uintptr {
 	return uintptr(unsafe.Pointer(x))
+}
+
+// SetCallbackDrawGlyphs sets the callback function.
+func (x *RendererClass) SetCallbackDrawGlyphs(cb func(*Renderer, *Font, *GlyphString, int, int)) {
+	if cb == nil {
+		x.xDrawGlyphs = 0
+	} else {
+		x.xDrawGlyphs = purego.NewCallback(func(RendererVarp uintptr, FontVarp uintptr, GlyphsVarp *GlyphString, XVarp int, YVarp int) {
+			cb(RendererNewFromInternalPtr(RendererVarp), FontNewFromInternalPtr(FontVarp), GlyphsVarp, XVarp, YVarp)
+		})
+	}
+}
+
+// GetCallbackDrawGlyphs gets the callback function.
+func (x *RendererClass) GetCallbackDrawGlyphs() func(*Renderer, *Font, *GlyphString, int, int) {
+	if x.xDrawGlyphs == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, FontVarp uintptr, GlyphsVarp *GlyphString, XVarp int, YVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDrawGlyphs)
+	return func(RendererVar *Renderer, FontVar *Font, GlyphsVar *GlyphString, XVar int, YVar int) {
+		rawCallback(RendererVar.GoPointer(), FontVar.GoPointer(), GlyphsVar, XVar, YVar)
+	}
+}
+
+// SetCallbackDrawRectangle sets the callback function.
+func (x *RendererClass) SetCallbackDrawRectangle(cb func(*Renderer, RenderPart, int, int, int, int)) {
+	if cb == nil {
+		x.xDrawRectangle = 0
+	} else {
+		x.xDrawRectangle = purego.NewCallback(func(RendererVarp uintptr, PartVarp RenderPart, XVarp int, YVarp int, WidthVarp int, HeightVarp int) {
+			cb(RendererNewFromInternalPtr(RendererVarp), PartVarp, XVarp, YVarp, WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackDrawRectangle gets the callback function.
+func (x *RendererClass) GetCallbackDrawRectangle() func(*Renderer, RenderPart, int, int, int, int) {
+	if x.xDrawRectangle == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, PartVarp RenderPart, XVarp int, YVarp int, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDrawRectangle)
+	return func(RendererVar *Renderer, PartVar RenderPart, XVar int, YVar int, WidthVar int, HeightVar int) {
+		rawCallback(RendererVar.GoPointer(), PartVar, XVar, YVar, WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackDrawErrorUnderline sets the callback function.
+func (x *RendererClass) SetCallbackDrawErrorUnderline(cb func(*Renderer, int, int, int, int)) {
+	if cb == nil {
+		x.xDrawErrorUnderline = 0
+	} else {
+		x.xDrawErrorUnderline = purego.NewCallback(func(RendererVarp uintptr, XVarp int, YVarp int, WidthVarp int, HeightVarp int) {
+			cb(RendererNewFromInternalPtr(RendererVarp), XVarp, YVarp, WidthVarp, HeightVarp)
+		})
+	}
+}
+
+// GetCallbackDrawErrorUnderline gets the callback function.
+func (x *RendererClass) GetCallbackDrawErrorUnderline() func(*Renderer, int, int, int, int) {
+	if x.xDrawErrorUnderline == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, XVarp int, YVarp int, WidthVarp int, HeightVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDrawErrorUnderline)
+	return func(RendererVar *Renderer, XVar int, YVar int, WidthVar int, HeightVar int) {
+		rawCallback(RendererVar.GoPointer(), XVar, YVar, WidthVar, HeightVar)
+	}
+}
+
+// SetCallbackDrawShape sets the callback function.
+func (x *RendererClass) SetCallbackDrawShape(cb func(*Renderer, *AttrShape, int, int)) {
+	if cb == nil {
+		x.xDrawShape = 0
+	} else {
+		x.xDrawShape = purego.NewCallback(func(RendererVarp uintptr, AttrVarp *AttrShape, XVarp int, YVarp int) {
+			cb(RendererNewFromInternalPtr(RendererVarp), AttrVarp, XVarp, YVarp)
+		})
+	}
+}
+
+// GetCallbackDrawShape gets the callback function.
+func (x *RendererClass) GetCallbackDrawShape() func(*Renderer, *AttrShape, int, int) {
+	if x.xDrawShape == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, AttrVarp *AttrShape, XVarp int, YVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDrawShape)
+	return func(RendererVar *Renderer, AttrVar *AttrShape, XVar int, YVar int) {
+		rawCallback(RendererVar.GoPointer(), AttrVar, XVar, YVar)
+	}
+}
+
+// SetCallbackDrawTrapezoid sets the callback function.
+func (x *RendererClass) SetCallbackDrawTrapezoid(cb func(*Renderer, RenderPart, float64, float64, float64, float64, float64, float64)) {
+	if cb == nil {
+		x.xDrawTrapezoid = 0
+	} else {
+		x.xDrawTrapezoid = purego.NewCallback(func(RendererVarp uintptr, PartVarp RenderPart, Y1Varp float64, X11Varp float64, X21Varp float64, Y2Varp float64, X12Varp float64, X22Varp float64) {
+			cb(RendererNewFromInternalPtr(RendererVarp), PartVarp, Y1Varp, X11Varp, X21Varp, Y2Varp, X12Varp, X22Varp)
+		})
+	}
+}
+
+// GetCallbackDrawTrapezoid gets the callback function.
+func (x *RendererClass) GetCallbackDrawTrapezoid() func(*Renderer, RenderPart, float64, float64, float64, float64, float64, float64) {
+	if x.xDrawTrapezoid == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, PartVarp RenderPart, Y1Varp float64, X11Varp float64, X21Varp float64, Y2Varp float64, X12Varp float64, X22Varp float64)
+	purego.RegisterFunc(&rawCallback, x.xDrawTrapezoid)
+	return func(RendererVar *Renderer, PartVar RenderPart, Y1Var float64, X11Var float64, X21Var float64, Y2Var float64, X12Var float64, X22Var float64) {
+		rawCallback(RendererVar.GoPointer(), PartVar, Y1Var, X11Var, X21Var, Y2Var, X12Var, X22Var)
+	}
+}
+
+// SetCallbackDrawGlyph sets the callback function.
+func (x *RendererClass) SetCallbackDrawGlyph(cb func(*Renderer, *Font, Glyph, float64, float64)) {
+	if cb == nil {
+		x.xDrawGlyph = 0
+	} else {
+		x.xDrawGlyph = purego.NewCallback(func(RendererVarp uintptr, FontVarp uintptr, GlyphVarp Glyph, XVarp float64, YVarp float64) {
+			cb(RendererNewFromInternalPtr(RendererVarp), FontNewFromInternalPtr(FontVarp), GlyphVarp, XVarp, YVarp)
+		})
+	}
+}
+
+// GetCallbackDrawGlyph gets the callback function.
+func (x *RendererClass) GetCallbackDrawGlyph() func(*Renderer, *Font, Glyph, float64, float64) {
+	if x.xDrawGlyph == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, FontVarp uintptr, GlyphVarp Glyph, XVarp float64, YVarp float64)
+	purego.RegisterFunc(&rawCallback, x.xDrawGlyph)
+	return func(RendererVar *Renderer, FontVar *Font, GlyphVar Glyph, XVar float64, YVar float64) {
+		rawCallback(RendererVar.GoPointer(), FontVar.GoPointer(), GlyphVar, XVar, YVar)
+	}
+}
+
+// SetCallbackPartChanged sets the callback function.
+func (x *RendererClass) SetCallbackPartChanged(cb func(*Renderer, RenderPart)) {
+	if cb == nil {
+		x.xPartChanged = 0
+	} else {
+		x.xPartChanged = purego.NewCallback(func(RendererVarp uintptr, PartVarp RenderPart) {
+			cb(RendererNewFromInternalPtr(RendererVarp), PartVarp)
+		})
+	}
+}
+
+// GetCallbackPartChanged gets the callback function.
+func (x *RendererClass) GetCallbackPartChanged() func(*Renderer, RenderPart) {
+	if x.xPartChanged == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, PartVarp RenderPart)
+	purego.RegisterFunc(&rawCallback, x.xPartChanged)
+	return func(RendererVar *Renderer, PartVar RenderPart) {
+		rawCallback(RendererVar.GoPointer(), PartVar)
+	}
+}
+
+// SetCallbackBegin sets the callback function.
+func (x *RendererClass) SetCallbackBegin(cb func(*Renderer)) {
+	if cb == nil {
+		x.xBegin = 0
+	} else {
+		x.xBegin = purego.NewCallback(func(RendererVarp uintptr) {
+			cb(RendererNewFromInternalPtr(RendererVarp))
+		})
+	}
+}
+
+// GetCallbackBegin gets the callback function.
+func (x *RendererClass) GetCallbackBegin() func(*Renderer) {
+	if x.xBegin == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xBegin)
+	return func(RendererVar *Renderer) {
+		rawCallback(RendererVar.GoPointer())
+	}
+}
+
+// SetCallbackEnd sets the callback function.
+func (x *RendererClass) SetCallbackEnd(cb func(*Renderer)) {
+	if cb == nil {
+		x.xEnd = 0
+	} else {
+		x.xEnd = purego.NewCallback(func(RendererVarp uintptr) {
+			cb(RendererNewFromInternalPtr(RendererVarp))
+		})
+	}
+}
+
+// GetCallbackEnd gets the callback function.
+func (x *RendererClass) GetCallbackEnd() func(*Renderer) {
+	if x.xEnd == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr)
+	purego.RegisterFunc(&rawCallback, x.xEnd)
+	return func(RendererVar *Renderer) {
+		rawCallback(RendererVar.GoPointer())
+	}
+}
+
+// SetCallbackPrepareRun sets the callback function.
+func (x *RendererClass) SetCallbackPrepareRun(cb func(*Renderer, *LayoutRun)) {
+	if cb == nil {
+		x.xPrepareRun = 0
+	} else {
+		x.xPrepareRun = purego.NewCallback(func(RendererVarp uintptr, RunVarp *LayoutRun) {
+			cb(RendererNewFromInternalPtr(RendererVarp), RunVarp)
+		})
+	}
+}
+
+// GetCallbackPrepareRun gets the callback function.
+func (x *RendererClass) GetCallbackPrepareRun() func(*Renderer, *LayoutRun) {
+	if x.xPrepareRun == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, RunVarp *LayoutRun)
+	purego.RegisterFunc(&rawCallback, x.xPrepareRun)
+	return func(RendererVar *Renderer, RunVar *LayoutRun) {
+		rawCallback(RendererVar.GoPointer(), RunVar)
+	}
+}
+
+// SetCallbackDrawGlyphItem sets the callback function.
+func (x *RendererClass) SetCallbackDrawGlyphItem(cb func(*Renderer, string, *GlyphItem, int, int)) {
+	if cb == nil {
+		x.xDrawGlyphItem = 0
+	} else {
+		x.xDrawGlyphItem = purego.NewCallback(func(RendererVarp uintptr, TextVarp string, GlyphItemVarp *GlyphItem, XVarp int, YVarp int) {
+			cb(RendererNewFromInternalPtr(RendererVarp), TextVarp, GlyphItemVarp, XVarp, YVarp)
+		})
+	}
+}
+
+// GetCallbackDrawGlyphItem gets the callback function.
+func (x *RendererClass) GetCallbackDrawGlyphItem() func(*Renderer, string, *GlyphItem, int, int) {
+	if x.xDrawGlyphItem == 0 {
+		return nil
+	}
+	var rawCallback func(RendererVarp uintptr, TextVarp string, GlyphItemVarp *GlyphItem, XVarp int, YVarp int)
+	purego.RegisterFunc(&rawCallback, x.xDrawGlyphItem)
+	return func(RendererVar *Renderer, TextVar string, GlyphItemVar *GlyphItem, XVar int, YVar int) {
+		rawCallback(RendererVar.GoPointer(), TextVar, GlyphItemVar, XVar, YVar)
+	}
+}
+
+// SetCallbackPangoReserved2 sets the callback function.
+func (x *RendererClass) SetCallbackPangoReserved2(cb func()) {
+	if cb == nil {
+		x.xPangoReserved2 = 0
+	} else {
+		x.xPangoReserved2 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved2 gets the callback function.
+func (x *RendererClass) GetCallbackPangoReserved2() func() {
+	if x.xPangoReserved2 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved2)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackPangoReserved3 sets the callback function.
+func (x *RendererClass) SetCallbackPangoReserved3(cb func()) {
+	if cb == nil {
+		x.xPangoReserved3 = 0
+	} else {
+		x.xPangoReserved3 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved3 gets the callback function.
+func (x *RendererClass) GetCallbackPangoReserved3() func() {
+	if x.xPangoReserved3 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved3)
+	return func() {
+		rawCallback()
+	}
+}
+
+// SetCallbackPangoReserved4 sets the callback function.
+func (x *RendererClass) SetCallbackPangoReserved4(cb func()) {
+	if cb == nil {
+		x.xPangoReserved4 = 0
+	} else {
+		x.xPangoReserved4 = purego.NewCallback(func() {
+			cb()
+		})
+	}
+}
+
+// GetCallbackPangoReserved4 gets the callback function.
+func (x *RendererClass) GetCallbackPangoReserved4() func() {
+	if x.xPangoReserved4 == 0 {
+		return nil
+	}
+	var rawCallback func()
+	purego.RegisterFunc(&rawCallback, x.xPangoReserved4)
+	return func() {
+		rawCallback()
+	}
 }
 
 type RendererPrivate struct {

