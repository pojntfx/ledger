From 7d5a474ddfb676c15aa3938071f07820b7ac6f9e Mon Sep 17 00:00:00 2001
From: Felicitas Pojtinger <felicitas@pojtinger.com>
Date: Fri, 03 Oct 2025 23:34:29 -0700
Subject: [PATCH] GIR: Implement support for generating getters and setters for callbacks based on GIR instead of generating untyped pointers

Signed-off-by: Felicitas Pojtinger <felicitas@pojtinger.com>
---
diff --git a/gen.go b/gen.go
index 17fff64ade2eb721048b40402cbfdd11092ae72f..40bf95b64316d389cbb40d78b006ebedbc89d3b0 100644
--- a/gen.go
+++ b/gen.go
@@ -31,7 +31,14 @@ 	// collect basic type info
 	p.First()
 
 	// Create the template
-	gotemp, err := template.New("go").Funcs(template.FuncMap{"conv": util.ConvertArgs, "convc": util.ConvertArgsComma}).ParseFiles("templates/go")
+	gotemp, err := template.New("go").Funcs(template.FuncMap{
+		"conv":     util.ConvertArgs,
+		"convc":    util.ConvertArgsComma,
+		"convcb":   util.ConvertCallbackArgs,
+		"convcd":   util.ConvertArgsCommaDeref,
+		"convd":    util.ConvertArgsDeref,
+		"convcbne": util.ConvertCallbackArgsNoErr,
+	}).ParseFiles("templates/go")
 	if err != nil {
 		panic(err)
 	}
diff --git a/internal/gir/pass/pass.go b/internal/gir/pass/pass.go
index fc564c517e40ffc9aa8661b62b78103eea7ef96e..6eed787c6b8a966c4451ed369986d06ddedf4b43 100644
--- a/internal/gir/pass/pass.go
+++ b/internal/gir/pass/pass.go
@@ -114,6 +114,11 @@ 		files = append(files, fn)
 		constants[fn] = append(constants[fn], con.Template(ns.Name, p.Types))
 	}
 
+	callbackDocs := make(map[string]string)
+	for _, cb := range ns.Callbacks {
+		callbackDocs[cb.Name] = cb.Doc.StringSafe()
+	}
+
 	records := make(map[string][]types.RecordTemplate)
 	recordLookup := make(map[string]bool)
 	for _, rec := range ns.Records {
@@ -121,6 +126,7 @@ 		name := util.SnakeToCamel(rec.Name)
 		constructors := make([]types.FuncTemplate, len(rec.Constructors))
 		receivers := make([]types.FuncTemplate, 0, len(rec.Methods))
 		fields := make([]types.RecordField, 0, len(rec.Fields))
+		callbackAccessors := make([]types.CallbackAccessor, 0)
 		fn := rec.FilenameSafe()
 		files = append(files, fn)
 		for i, c := range rec.Constructors {
@@ -134,11 +140,40 @@ 			}
 		}
 		for _, f := range rec.Fields {
 			var _type string
+			var fieldName string
 
 			// Check if this field is a callback
 			if f.Callback != nil {
-				// Callbacks in structs are function pointers, represented as uintptr
 				_type = "uintptr"
+				fieldName = "x" + util.SnakeToCamel(f.Name) // Prefix callback pointer fields with `x` to make them private
+
+				callbackName := util.SnakeToCamel(f.Name)
+				args := f.Callback.Parameters.Template(ns.Name, "", p.Types, f.Callback.Throws)
+				ret := f.Callback.ReturnValue.Template(ns.Name, "", p.Types, f.Callback.Throws)
+
+				apiTypes := args.API.Types
+
+				var doc string
+				if f.Callback.Doc != nil && f.Callback.Doc.String != "" {
+					doc = f.Callback.Doc.StringSafe()
+				} else {
+					baseClassName := strings.TrimSuffix(rec.Name, "Class")
+					callbackName := baseClassName + util.SnakeToCamel(f.Name) + "Func"
+
+					if callbackDoc, exists := callbackDocs[callbackName]; exists && callbackDoc != "" {
+						doc = callbackDoc
+					} else {
+						doc = f.Doc.StringSafe()
+					}
+				}
+
+				callbackAccessors = append(callbackAccessors, types.CallbackAccessor{
+					Name:         callbackName,
+					Doc:          doc,
+					CallbackType: "func(" + strings.Join(apiTypes, ", ") + ") " + ret.Value,
+					Args:         args,
+					Ret:          ret,
+				})
 			} else {
 				_type = f.Translate(ns.Name, p.Types)
 				if _type == "" {
@@ -155,10 +190,11 @@ 				// HACK: in structs the strings should be uintptr as we convert it ourselves
 				if _type == "string" {
 					_type = "uintptr"
 				}
+				fieldName = util.SnakeToCamel(f.Name)
 			}
 
 			fields = append(fields, types.RecordField{
-				Name: util.SnakeToCamel(f.Name),
+				Name: fieldName,
 				Type: _type,
 			})
 		}
@@ -182,12 +218,13 @@ 				Ret:   f.ReturnValue.Template(ns.Name, "", p.Types, f.Throws),
 			})
 		}
 		records[fn] = append(records[fn], types.RecordTemplate{
-			Name:         name,
-			Doc:          rec.Doc.StringSafe(),
-			Constructors: constructors,
-			Receivers:    receivers,
-			Fields:       fields,
-			TypeGetter:   rec.GLibGetType,
+			Name:              name,
+			Doc:               rec.Doc.StringSafe(),
+			Constructors:      constructors,
+			Receivers:         receivers,
+			Fields:            fields,
+			CallbackAccessors: callbackAccessors,
+			TypeGetter:        rec.GLibGetType,
 		})
 		recordLookup[name] = true
 	}
diff --git a/internal/gir/types/template.go b/internal/gir/types/template.go
index 6733ef897d95638e28c45cbaa9a1840bc52d39cc..b0f4cd0b4b3193076c853e101edb0f08f40fdb7a 100644
--- a/internal/gir/types/template.go
+++ b/internal/gir/types/template.go
@@ -89,14 +89,22 @@ 		if stars == 0 {
 			t = "uintptr"
 		}
 	case CallbackType:
+		c = fmt.Sprintf("(*%s)(unsafe.Pointer(%s))", strings.TrimPrefix(t, "*"), n)
 		t = "uintptr"
 	case ClassesType:
 		if stars == 0 {
 			c = n
 			t = "uintptr"
 		} else {
-			c = fmt.Sprintf("%sNewFromInternalPtr(%s)", strings.TrimPrefix(t, "*"), n)
-			t = strings.Repeat("*", stars-1) + "uintptr"
+			// Remove all dereference operators to get the base class name
+			baseName := strings.TrimPrefix(t, strings.Repeat("*", stars))
+			if stars > 1 {
+				// For double pointers like **ParamSpec, we need to pass the double pointer directly
+				c = fmt.Sprintf("(**%s)(unsafe.Pointer(%s))", baseName, n)
+			} else {
+				c = fmt.Sprintf("%sNewFromInternalPtr(%s)", baseName, n)
+			}
+			t = "uintptr"
 		}
 	case InterfacesType:
 		if stars == 0 {
@@ -179,6 +187,23 @@ 	// Type is the Go type of the field
 	Type string
 }
 
+type CallbackAccessor struct {
+	// Name is the Go name of the callback field (without x prefix)
+	Name string
+
+	// Doc is the documentation for the callback
+	Doc string
+
+	// CallbackType is the name of the callback function type
+	CallbackType string
+
+	// Args are the callback function arguments template
+	Args funcArgsTemplate
+
+	// Ret is the callback function return template
+	Ret funcRetTemplate
+}
+
 type RecordTemplate struct {
 	// Name is the name of the record given to the Go type declaration
 	Name string
@@ -194,6 +219,9 @@ 	Receivers []FuncTemplate
 
 	// Fields is the list of record fields
 	Fields []RecordField
+
+	// CallbackAccessors are the setter/getter methods for callback fields
+	CallbackAccessors []CallbackAccessor
 
 	// TypeGetter is the function to get the GLib type
 	TypeGetter string
diff --git a/internal/gir/util/util.go b/internal/gir/util/util.go
index 1fd741a45634383f3e5bef6bd761df5b805fca04..4fa86cb2b68b4ff000427632fd176c081373224e 100644
--- a/internal/gir/util/util.go
+++ b/internal/gir/util/util.go
@@ -9,6 +9,18 @@ 	"path/filepath"
 	"strings"
 )
 
+var (
+	// Variable names that should not be dereferenced when using ConvertPtr() in handlePtr mode
+	// TODO: This was mostly discovered via trial and error, and might point towards issues in
+	// the GIR files
+	specialConvertPtrVars = []string{
+		"ModelVar",
+		"TreeModelVar",
+		"OutChildVar",
+		"ChildVar",
+	}
+)
+
 // delimToCamel to camel converts a string with parts separated by `delim` to CamelCase
 func delimToCamel(s string, delim string) string {
 	var sb strings.Builder
@@ -121,6 +133,70 @@ 	if len(a) == 0 {
 		return ""
 	}
 	return ", " + strings.Join(a, ", ")
+}
+
+func convertCallbackArgs(a []string, prependComma, skipEmpty, skipErr, handlePtr bool) string {
+	var validArgs []string
+	for _, arg := range a {
+		if skipEmpty && arg == "" {
+			continue
+		}
+		if skipErr && arg == "&cerr" {
+			continue
+		}
+
+		if strings.Contains(arg, "{Ptr:") {
+			if !handlePtr {
+				// For ConvertCallbackArgs: remove * prefix and add &
+				arg = strings.TrimPrefix(arg, "*")
+			}
+			validArgs = append(validArgs, "&"+arg)
+		} else if strings.Contains(arg, "ConvertPtr(") && handlePtr {
+			isSpecialVar := false
+			for _, specialVar := range specialConvertPtrVars {
+				if strings.Contains(arg, specialVar) {
+					isSpecialVar = true
+
+					break
+				}
+			}
+
+			if isSpecialVar {
+				validArgs = append(validArgs, arg)
+			} else {
+				validArgs = append(validArgs, "*"+arg)
+			}
+		} else {
+			validArgs = append(validArgs, arg)
+		}
+	}
+
+	if len(validArgs) == 0 {
+		return ""
+	}
+
+	result := strings.Join(validArgs, ", ")
+	if prependComma {
+		return ", " + result
+	}
+
+	return result
+}
+
+func ConvertCallbackArgs(a []string) string {
+	return convertCallbackArgs(a, false, false, false, false)
+}
+
+func ConvertArgsCommaDeref(a []string) string {
+	return convertCallbackArgs(a, true, true, false, true)
+}
+
+func ConvertArgsDeref(a []string) string {
+	return convertCallbackArgs(a, false, true, false, true)
+}
+
+func ConvertCallbackArgsNoErr(a []string) string {
+	return convertCallbackArgs(a, false, true, true, true)
 }
 
 // ConstructorName returns a Go friendly constructor name given the raw constructor name `name` and the class/record name `outer`
diff --git a/pkg/gir/util/util.go b/pkg/gir/util/util.go
index 4f5c539929b966cfe58b5f045aa6e736126877bd..14ed3422c6ebec3a21b94ba4e71ffa8232e7c70c 100644
--- a/pkg/gir/util/util.go
+++ b/pkg/gir/util/util.go
@@ -3,6 +3,10 @@
 import "github.com/jwijenbergh/puregotk/internal/gir/util"
 
 var (
-	ConvertArgs      = util.ConvertArgs
-	ConvertArgsComma = util.ConvertArgsComma
+	ConvertArgs            = util.ConvertArgs
+	ConvertArgsComma       = util.ConvertArgsComma
+	ConvertCallbackArgs    = util.ConvertCallbackArgs
+	ConvertArgsCommaDeref  = util.ConvertArgsCommaDeref
+	ConvertArgsDeref       = util.ConvertArgsDeref
+	ConvertCallbackArgsNoErr = util.ConvertCallbackArgsNoErr
 )
diff --git a/templates/go b/templates/go
index 7524214eb61d9fd7ac4b3b3600c75e6c15d74738..bd883ae9bcf271021a66fa823cb0e9597b0e5fb2 100644
--- a/templates/go
+++ b/templates/go
@@ -66,7 +66,7 @@
 {{.Doc}}
 func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret :={{end}}x{{.Name}}({{conv .Args.API.Call}})
+     {{if .Ret.Value}}cret :={{end}}x{{.Name}}({{convd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}
@@ -78,11 +78,48 @@
 {{.Doc}}
 func (x *{{$outer.Name}}) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret :={{end}}x{{$outer.Name}}{{.Name}}(x.GoPointer() {{convc .Args.API.Call}})
+     {{if .Ret.Value}}cret :={{end}}x{{$outer.Name}}{{.Name}}(x.GoPointer() {{convcd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}
 
+{{range .CallbackAccessors -}}
+{{if .Doc}}// SetCallback{{.Name}} sets the callback function.
+{{.Doc}}{{else}}// SetCallback{{.Name}} sets the callback function.{{end}}
+func (x *{{$outer.Name}}) SetCallback{{.Name}}(cb {{.CallbackType}}) {
+     if cb == nil {
+          x.x{{.Name}} = 0
+     } else {
+          x.x{{.Name}} = purego.NewCallback(func({{conv .Args.Pure.Full}}) {{.Ret.Raw}} {
+               {{if .Ret.Value}}{{if .Ret.Class}}ret := cb({{convcb .Args.Pure.Call}})
+               if ret == nil {
+                    return 0
+               }
+               return ret.GoPointer(){{else}}return cb({{convcb .Args.Pure.Call}}){{end}}{{else}}cb({{convcb .Args.Pure.Call}}){{end}}
+          })
+     }
+}
+
+{{if .Doc}}// GetCallback{{.Name}} gets the callback function.
+{{.Doc}}{{else}}// GetCallback{{.Name}} gets the callback function.{{end}}
+func (x *{{$outer.Name}}) GetCallback{{.Name}}() {{.CallbackType}} {
+     if x.x{{.Name}} == 0 {
+          return nil
+     }
+     var rawCallback func({{conv .Args.Pure.Full}}) {{.Ret.Raw}}
+     purego.RegisterFunc(&rawCallback, x.x{{.Name}})
+     return func({{conv .Args.API.Full}}) {{.Ret.Value}} {
+          {{if .Ret.Value}}{{if .Ret.Class}}rawRet := rawCallback({{convcbne .Args.API.Call}})
+          if rawRet == 0 {
+               return nil
+          }
+          ret := {{.Ret.Instance}}
+          ret.Ptr = rawRet
+          return ret{{else}}return rawCallback({{convcbne .Args.API.Call}}){{end}}{{else}}rawCallback({{convcbne .Args.API.Call}}){{end}}
+     }
+}
+{{end}}
+
 {{end}}
 
 {{range .Interfaces -}}
@@ -91,7 +128,7 @@ type {{.Name}} interface {
      GoPointer() uintptr
      SetGoPointer(uintptr)
      {{range .Methods -}}
-     {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Value}}
+     {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}}
      {{end}}
 }
 
@@ -122,7 +159,7 @@ {{range .Methods -}}
 {{.Doc}}
 func (x *{{$outer.Name}}Base) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret := {{end}}{{.Namespace}}X{{.FullName}}(x.GoPointer() {{convc .Args.API.Call}})
+     {{if .Ret.Value}}cret := {{end}}{{.Namespace}}X{{.FullName}}(x.GoPointer() {{convcd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}
@@ -176,7 +213,7 @@
 {{.Doc}}
 func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret := {{end}}x{{.Name}}({{conv .Args.API.Call}})
+     {{if .Ret.Value}}cret := {{end}}x{{.Name}}({{convd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}
@@ -211,7 +248,7 @@
 {{.Doc}}
 func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret :={{end}}x{{.Name}}({{conv .Args.API.Call}})
+     {{if .Ret.Value}}cret :={{end}}x{{.Name}}({{convd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}
@@ -223,7 +260,7 @@
 {{.Doc}}
 func (x *{{$outer.Name}}) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret :={{end}}x{{$outer.Name}}{{.Name}}(x.GoPointer() {{convc .Args.API.Call}})
+     {{if .Ret.Value}}cret :={{end}}x{{$outer.Name}}{{.Name}}(x.GoPointer() {{convcd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}
@@ -272,7 +309,7 @@ {{range .Methods -}}
 {{.Doc}}
 func (x *{{$outer.Name}}) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret := {{end}} {{.Namespace}}X{{.FullName}}(x.GoPointer() {{convc .Args.API.Call}})
+     {{if .Ret.Value}}cret := {{end}} {{.Namespace}}X{{.FullName}}(x.GoPointer() {{convcd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}
@@ -284,7 +321,7 @@
 {{.Doc}}
 func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
      {{.Ret.Preamble $NotGLib}}
-     {{if .Ret.Value}}cret := {{end}}x{{.Name}}({{conv .Args.API.Call}})
+     {{if .Ret.Value}}cret := {{end}}x{{.Name}}({{convd .Args.API.Call}})
      {{.Ret.Fmt $NotGObject}}
 }
 {{end}}

