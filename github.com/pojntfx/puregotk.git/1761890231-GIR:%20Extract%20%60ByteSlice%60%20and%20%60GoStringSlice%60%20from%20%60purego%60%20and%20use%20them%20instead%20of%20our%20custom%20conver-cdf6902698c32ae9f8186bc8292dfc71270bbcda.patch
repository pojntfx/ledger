From cdf6902698c32ae9f8186bc8292dfc71270bbcda Mon Sep 17 00:00:00 2001
From: Felicitas Pojtinger <felicitas@pojtinger.com>
Date: Thu, 30 Oct 2025 22:57:11 -0700
Subject: [PATCH] GIR: Extract `ByteSlice` and `GoStringSlice` from `purego` and use them instead of our custom conversion function when generating `[]string` property getters and setters

Signed-off-by: Felicitas Pojtinger <felicitas@pojtinger.com>
---
diff --git a/internal/core/core.go b/internal/core/core.go
index 7fdb6b424648667850d50640fd8bb8174aaedf90..fe57212a790e0f2e1369f1c9309db2d7df308cda 100644
--- a/internal/core/core.go
+++ b/internal/core/core.go
@@ -156,6 +156,57 @@
 	panic(fmt.Sprintf("Path for library: %s not found. Please set the path to this library shared object file manually with env variable: %s or PUREGOTK_LIB_FOLDER. Or make sure pkg-config is setup correctly", strings.ToLower(name), ev))
 }
 
+// hasSuffix tests whether the string s ends with suffix.
+// This function was copied from purego
+func hasSuffix(s, suffix string) bool {
+	return len(s) >= len(suffix) && s[len(s)-len(suffix):] == suffix
+}
+
+// ByteSlice creates a pointer to a byte slice of C strings
+// This function was copied from purego
+func ByteSlice(name []string) **byte {
+	if name == nil {
+		return nil
+	}
+	res := make([]*byte, len(name)+1)
+	for i, v := range name {
+		res[i] = CString(v)
+	}
+
+	// the last element is NULL terminated for GTK
+	res[len(name)] = nil
+	return &res[0]
+}
+
+// CString converts a go string to *byte that can be passed to C code.
+// This function was copied from purego
+func CString(name string) *byte {
+	if hasSuffix(name, "\x00") {
+		return &(*(*[]byte)(unsafe.Pointer(&name)))[0]
+	}
+	b := make([]byte, len(name)+1)
+	copy(b, name)
+	return &b[0]
+}
+
+// GoStringSlice gets a string slice from a char** array
+// This function was copied from purego
+func GoStringSlice(c uintptr) []string {
+	var ret []string
+	for i := 0; ; i++ {
+		ptrAddr := c + uintptr(i)*unsafe.Sizeof(uintptr(0))
+		addr := *(*unsafe.Pointer)(unsafe.Pointer(&ptrAddr))
+		// We take the address and then dereference it to trick go vet from creating a possible misuse of unsafe.Pointer
+		ptr := *(*uintptr)(addr)
+		if ptr == 0 {
+			break
+		}
+		ret = append(ret, GoString(ptr))
+	}
+
+	return ret
+}
+
 // GoString copies a char* to a Go string.
 // This function was copied from purego
 func GoString(c uintptr) string {
diff --git a/internal/gir/util/util.go b/internal/gir/util/util.go
index 7dde18710277683fe7f123eafd9ab828f912a677..1c351a40263e2d660c4a4bcd72bd32e1a5d4206d 100644
--- a/internal/gir/util/util.go
+++ b/internal/gir/util/util.go
@@ -236,46 +236,10 @@ 		prefix = "glib."
 	}
 
 	return prefix + `StrvGetType())
-
-	cStrBytes := make([][]byte, len(value))
-	cStrings := make([]uintptr, len(value)+1)
-	for i, s := range value {
-		cStrBytes[i] = make([]byte, len(s)+1)
-		copy(cStrBytes[i], s)
-		cStrBytes[i][len(s)] = 0
-		cStrings[i] = uintptr(unsafe.Pointer(&cStrBytes[i][0]))
-	}
-	cStrings[len(value)] = 0
-
-	v.SetBoxed(uintptr(unsafe.Pointer(&cStrings[0])))`
+	v.SetBoxed(uintptr(unsafe.Pointer(core.ByteSlice(value))))`
 }
 
 // PropertyVectorGet returns the code for getting a vector property value
 func PropertyVectorGet() string {
-	return `cStrvPtr := v.GetBoxed()
-	if cStrvPtr == 0 {
-		return nil
-	}
-
-	var result []string
-	ptr := cStrvPtr
-	for {
-		strPtr := *(*uintptr)(unsafe.Pointer(ptr))
-		if strPtr == 0 {
-			break
-		}
-
-		var length int
-		for i := 0; ; i++ {
-			if *(*byte)(unsafe.Pointer(strPtr + uintptr(i))) == 0 {
-				length = i
-				break
-			}
-		}
-
-		bytes := unsafe.Slice((*byte)(unsafe.Pointer(strPtr)), length)
-		result = append(result, string(bytes))
-		ptr += unsafe.Sizeof(uintptr(0))
-	}
-	return result`
+	return `return core.GoStringSlice(v.GetBoxed())`
 }
diff --git a/pkg/core/core.go b/pkg/core/core.go
index fdea7cf9fc223606e9da9e23ec8082ed91e5340b..26b8d2c1540d79104b1425d2e397a797a9390614 100644
--- a/pkg/core/core.go
+++ b/pkg/core/core.go
@@ -4,6 +4,8 @@ import "github.com/jwijenbergh/puregotk/internal/core"
 
 var (
 	GetPaths           = core.GetPaths
+	ByteSlice          = core.ByteSlice
+	GoStringSlice      = core.GoStringSlice
 	GoString           = core.GoString
 	SetPackageName     = core.SetPackageName
 	SetSharedLibraries = core.SetSharedLibraries

