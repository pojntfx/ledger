From 5041f7d3cb77d7803681787359e2a6bf1a8b602e Mon Sep 17 00:00:00 2001
From: Felicitas Pojtinger <felicitas@pojtinger.com>
Date: Wed, 22 Oct 2025 23:41:03 -0700
Subject: [PATCH] feat: Use templates and bind template, use subclassing

Signed-off-by: Felicitas Pojtinger <felicitas@pojtinger.com>
---
diff --git a/assets/resources/window.blp b/assets/resources/window.blp
index 852ca94bc421d4ae0b74257d3c5e17af42386908..40892c4e26219c4c1d00faa22cc264969a752076 100644
--- a/assets/resources/window.blp
+++ b/assets/resources/window.blp
@@ -1,7 +1,7 @@
 using Gtk 4.0;
 using Adw 1;
 
-Adw.ApplicationWindow main_window {
+template $SessionsMainWindow : Adw.ApplicationWindow {
   default-width: 360;
   default-height: 380;
   title: _("Sessions");
diff --git a/main.go b/main.go
index 2884e3af68ddb27d9bd82c101a0df47f6556abc2..af4783a31f2acd84debea2968ef868452710dbcf 100644
--- a/main.go
+++ b/main.go
@@ -26,7 +26,9 @@ 	dataKeyGoInstance = "go_instance"
 )
 
 var (
-	gTypeDialWidget gobject.Type
+	gTypeDialWidget          gobject.Type
+	gTypeSessionsMainWindow  gobject.Type
+	gTypeSessionsApplication gobject.Type
 )
 
 type dialWidget struct {
@@ -36,6 +38,247 @@ 	running  bool
 	remain   time.Duration
 }
 
+type sessionsMainWindow struct {
+	adw.ApplicationWindow
+	dialWidget            *dialWidget
+	label                 *gtk.Label
+	actionButton          *gtk.Button
+	plusButton            *gtk.Button
+	minusButton           *gtk.Button
+	alarmClockElapsedFile *gtk.MediaFile
+	app                   *adw.Application
+	totalSec              int
+	running               bool
+	remain                time.Duration
+	timer                 uint
+	dragging              bool
+	paused                bool
+}
+
+type sessionsApplication struct {
+	adw.Application
+	window      *sessionsMainWindow
+	aboutDialog *adw.AboutDialog
+}
+
+func (w *sessionsMainWindow) startAlarmPlayback() {
+	w.alarmClockElapsedFile.Seek(0)
+	w.alarmClockElapsedFile.Play()
+}
+
+func (w *sessionsMainWindow) stopAlarmPlayback() {
+	w.alarmClockElapsedFile.SetPlaying(false)
+	w.alarmClockElapsedFile.Seek(0)
+}
+
+func (w *sessionsMainWindow) updateButtons() {
+	if w.running {
+		w.actionButton.SetIconName("media-playback-stop-symbolic")
+		w.actionButton.SetLabel("Stop")
+		w.actionButton.RemoveCssClass("suggested-action")
+		w.actionButton.AddCssClass("destructive-action")
+	} else {
+		w.actionButton.SetIconName("media-playback-start-symbolic")
+		w.actionButton.SetLabel("Start Timer")
+		w.actionButton.RemoveCssClass("destructive-action")
+		w.actionButton.AddCssClass("suggested-action")
+	}
+
+	w.plusButton.SetSensitive(w.totalSec < 3600)
+	w.minusButton.SetSensitive(w.totalSec > 30)
+}
+
+func (w *sessionsMainWindow) updateDial() {
+	var m, s int
+	if w.running {
+		m, s = int(w.remain.Minutes()), int(w.remain.Seconds())%60
+	} else {
+		m, s = w.totalSec/60, w.totalSec%60
+	}
+
+	w.label.SetText(fmt.Sprintf("%02d:%02d", m, s))
+
+	dialW := (*dialWidget)(unsafe.Pointer(w.dialWidget.GetData(dataKeyGoInstance)))
+	if dialW != nil {
+		dialW.totalSec = w.totalSec
+		dialW.running = w.running
+		dialW.remain = w.remain
+		w.dialWidget.Widget.QueueDraw()
+	}
+}
+
+func (w *sessionsMainWindow) createSessionFinishedHandler() glib.SourceFunc {
+	return func(uintptr) bool {
+		if !w.running {
+			return false
+		}
+
+		w.remain -= time.Second
+		w.updateDial()
+
+		if w.remain <= 0 {
+			w.running = false
+			if w.timer > 0 {
+				glib.SourceRemove(w.timer)
+				w.timer = 0
+			}
+
+			w.updateButtons()
+			w.updateDial()
+
+			w.startAlarmPlayback()
+
+			n := gio.NewNotification("Session finished")
+			n.SetPriority(gio.GNotificationPriorityUrgentValue)
+			n.SetDefaultAction("app.stopAlarmPlayback")
+			n.AddButton("Stop alarm", "app.stopAlarmPlayback")
+
+			w.app.SendNotification("session-finished", n)
+
+			return false
+		}
+
+		return true
+	}
+}
+
+func (w *sessionsMainWindow) startTimer() {
+	w.stopAlarmPlayback()
+
+	w.running = true
+	w.remain = time.Duration(w.totalSec) * time.Second
+
+	w.updateButtons()
+	w.updateDial()
+
+	cb := w.createSessionFinishedHandler()
+	w.timer = glib.TimeoutAdd(1000, &cb, 0)
+}
+
+func (w *sessionsMainWindow) stopTimer() {
+	w.running = false
+	if w.timer > 0 {
+		glib.SourceRemove(w.timer)
+		w.timer = 0
+	}
+
+	w.updateButtons()
+	w.updateDial()
+}
+
+func (w *sessionsMainWindow) resumeTimer() {
+	if w.remain > 0 {
+		cb := w.createSessionFinishedHandler()
+		w.timer = glib.TimeoutAdd(1000, &cb, 0)
+	}
+}
+
+func (w *sessionsMainWindow) handleDialing(x, y float64) {
+	if w.running && !w.dragging {
+		w.paused = true
+		if w.timer > 0 {
+			glib.SourceRemove(w.timer)
+			w.timer = 0
+		}
+	}
+
+	width, height := float64(w.dialWidget.Widget.GetWidth()), float64(w.dialWidget.Widget.GetHeight())
+	cx, cy := width/2, height/2
+	dx, dy := x-cx, y-cy
+
+	if math.Sqrt(dx*dx+dy*dy) < 15 {
+		return
+	}
+
+	a := math.Atan2(dy, dx) + math.Pi/2
+	if a < 0 {
+		a += 2 * math.Pi
+	}
+
+	intervals := int((a / (2 * math.Pi)) * 120)
+	if intervals == 0 {
+		intervals = 120
+	}
+
+	w.totalSec = intervals * 30
+
+	if w.paused {
+		w.remain = time.Duration(w.totalSec) * time.Second
+	}
+
+	w.updateDial()
+	w.updateButtons()
+}
+
+func (w *sessionsMainWindow) setupDialGestures() {
+	drag := gtk.NewGestureDrag()
+	onDragBegin := func(_ gtk.GestureDrag, x float64, y float64) {
+		w.dragging = true
+		w.handleDialing(x, y)
+	}
+	drag.ConnectDragBegin(&onDragBegin)
+	onDragUpdate := func(drag gtk.GestureDrag, dx float64, dy float64) {
+		if w.dragging {
+			var x, y float64
+			drag.GetStartPoint(x, y)
+			w.handleDialing(x+dx, y+dy)
+		}
+	}
+	drag.ConnectDragUpdate(&onDragUpdate)
+	onDragEnd := func(_ gtk.GestureDrag, dx float64, dy float64) {
+		w.dragging = false
+
+		if w.paused {
+			w.paused = false
+			w.resumeTimer()
+		} else if !w.running && w.totalSec > 0 {
+			w.startTimer()
+		}
+	}
+	drag.ConnectDragEnd(&onDragEnd)
+
+	click := gtk.NewGestureClick()
+	onPress := func(_ gtk.GestureClick, _ int, x float64, y float64) {
+		w.handleDialing(x, y)
+	}
+	click.ConnectPressed(&onPress)
+
+	w.dialWidget.Widget.AddController(&drag.EventController)
+	w.dialWidget.Widget.AddController(&click.Gesture.EventController)
+}
+
+func (w *sessionsMainWindow) toggleTimer() {
+	if w.running {
+		w.stopTimer()
+	} else if w.totalSec > 0 {
+		w.startTimer()
+	}
+}
+
+func (w *sessionsMainWindow) addTime() {
+	if w.totalSec < 3600 {
+		w.totalSec += 30
+		if w.running {
+			w.remain = time.Duration(w.totalSec) * time.Second
+		}
+
+		w.updateDial()
+		w.updateButtons()
+	}
+}
+
+func (w *sessionsMainWindow) removeTime() {
+	if w.totalSec > 30 {
+		w.totalSec -= 30
+		if w.running {
+			w.remain = time.Duration(w.totalSec) * time.Second
+		}
+
+		w.updateDial()
+		w.updateButtons()
+	}
+}
+
 func init() {
 	var classInit gobject.ClassInitFunc = func(tc *gobject.TypeClass, u uintptr) {
 		objClass := (*gobject.ObjectClass)(unsafe.Pointer(tc))
@@ -175,322 +418,229 @@ 		parentQuery.InstanceSize+uint(unsafe.Sizeof(dialWidget{}))+uint(unsafe.Sizeof(&dialWidget{})),
 		&instanceInit,
 		0,
 	)
-}
 
-func main() {
-	resource, err := gio.NewResourceFromData(glib.NewBytes(resources.ResourceContents, uint(len(resources.ResourceContents))))
-	if err != nil {
-		panic(err)
-	}
-	gio.ResourcesRegister(resource)
-
-	a := adw.NewApplication(resources.AppID, gio.GApplicationDefaultFlagsValue)
-
-	var w *adw.ApplicationWindow
-	onActivate := func(gio.Application) {
-		if w != nil {
-			w.Present()
-
-			return
-		}
+	var windowClassInit gobject.ClassInitFunc = func(tc *gobject.TypeClass, u uintptr) {
+		typeClass := (*gtk.WidgetClass)(unsafe.Pointer(tc))
+		typeClass.SetTemplateFromResource(resources.ResourceWindowUIPath)
 
-		aboutDialog := adw.NewAboutDialogFromAppdata(resources.ResourceMetainfoPath, resources.AppVersion)
-		aboutDialog.SetDevelopers(resources.AppDevelopers)
-		aboutDialog.SetArtists(resources.AppArtists)
-		aboutDialog.SetCopyright(resources.AppCopyright)
+		typeClass.BindTemplateChildFull("analog_time_label", false, 0)
+		typeClass.BindTemplateChildFull("action_button", false, 0)
+		typeClass.BindTemplateChildFull("plus_button", false, 0)
+		typeClass.BindTemplateChildFull("minus_button", false, 0)
+		typeClass.BindTemplateChildFull("dial_area", false, 0)
 
-		b := gtk.NewBuilderFromResource(resources.ResourceWindowUIPath)
+		objClass := (*gobject.ObjectClass)(unsafe.Pointer(tc))
 
-		var (
-			win      adw.ApplicationWindow
-			label    gtk.Label
-			action   gtk.Button
-			plus     gtk.Button
-			minus    gtk.Button
-			dialArea gtk.Box
-		)
-		b.GetObject("main_window").Cast(&win)
-		b.GetObject("analog_time_label").Cast(&label)
-		b.GetObject("action_button").Cast(&action)
-		b.GetObject("plus_button").Cast(&plus)
-		b.GetObject("minus_button").Cast(&minus)
-		b.GetObject("dial_area").Cast(&dialArea)
+		objClass.OverrideConstructed(func(o *gobject.Object) {
+			parentObjClass := (*gobject.ObjectClass)(unsafe.Pointer(tc.PeekParent()))
+			parentObjClass.GetConstructed()(o)
 
-		w = &win
+			var parent adw.ApplicationWindow
+			o.Cast(&parent)
 
-		dialObj := gobject.NewObject(gTypeDialWidget, "css-name")
-		var dial dialWidget
-		dialObj.Cast(&dial)
-		dial.Widget.SetHexpand(true)
-		dial.Widget.SetVexpand(true)
-		dialArea.Append(&dial.Widget)
+			parent.InitTemplate()
 
-		var (
-			alarmClockElapsedFile = gtk.NewMediaFileForResource(resources.ResourceAlarmClockElapsedPath)
-		)
-		startAlarmPlayback := func() {
-			alarmClockElapsedFile.Seek(0)
-			alarmClockElapsedFile.Play()
-		}
+			var (
+				label        gtk.Label
+				actionButton gtk.Button
+				plusButton   gtk.Button
+				minusButton  gtk.Button
+				dialArea     gtk.Box
+			)
+			parent.Widget.GetTemplateChild(
+				gTypeSessionsMainWindow,
+				"analog_time_label",
+			).Cast(&label)
+			parent.Widget.GetTemplateChild(
+				gTypeSessionsMainWindow,
+				"action_button",
+			).Cast(&actionButton)
+			parent.Widget.GetTemplateChild(
+				gTypeSessionsMainWindow,
+				"plus_button",
+			).Cast(&plusButton)
+			parent.Widget.GetTemplateChild(
+				gTypeSessionsMainWindow,
+				"minus_button",
+			).Cast(&minusButton)
+			parent.Widget.GetTemplateChild(
+				gTypeSessionsMainWindow,
+				"dial_area",
+			).Cast(&dialArea)
 
-		stopAlarmPlayback := func() {
-			alarmClockElapsedFile.SetPlaying(false)
-			alarmClockElapsedFile.Seek(0)
-		}
+			dialObj := gobject.NewObject(gTypeDialWidget, "css-name")
+			var dial dialWidget
+			dialObj.Cast(&dial)
+			dial.Widget.SetHexpand(true)
+			dial.Widget.SetVexpand(true)
+			dialArea.Append(&dial.Widget)
 
-		var (
-			totalSec = 300
-			running  = false
-		)
-		updateButtons := func() {
-			if running {
-				action.SetIconName("media-playback-stop-symbolic")
-				action.SetLabel("Stop") // TODO: Use i18n
-				action.RemoveCssClass("suggested-action")
-				action.AddCssClass("destructive-action")
-			} else {
-				action.SetIconName("media-playback-start-symbolic")
-				action.SetLabel("Start Timer")
-				action.RemoveCssClass("destructive-action")
-				action.AddCssClass("suggested-action")
+			w := &sessionsMainWindow{
+				ApplicationWindow:     parent,
+				dialWidget:            &dial,
+				label:                 &label,
+				actionButton:          &actionButton,
+				plusButton:            &plusButton,
+				minusButton:           &minusButton,
+				alarmClockElapsedFile: gtk.NewMediaFileForResource(resources.ResourceAlarmClockElapsedPath),
+				totalSec:              300,
+				running:               false,
+				remain:                0,
+				timer:                 0,
+				dragging:              false,
+				paused:                false,
 			}
 
-			plus.SetSensitive(totalSec < 3600)
-			minus.SetSensitive(totalSec > 30)
-		}
+			var pinner runtime.Pinner
+			pinner.Pin(w)
 
-		var (
-			remain = time.Duration(0)
-		)
-		updateDial := func() {
-			var m, s int
-			if running {
-				m, s = int(remain.Minutes()), int(remain.Seconds())%60
-			} else {
-				m, s = totalSec/60, totalSec%60
+			var cleanupCallback glib.DestroyNotify = func(data uintptr) {
+				pinner.Unpin()
 			}
+			o.SetDataFull(dataKeyGoInstance, uintptr(unsafe.Pointer(w)), &cleanupCallback)
 
-			label.SetText(fmt.Sprintf("%02d:%02d", m, s))
+			w.setupDialGestures()
+		})
+	}
 
-			dialW := (*dialWidget)(unsafe.Pointer(dialObj.GetData(dataKeyGoInstance)))
+	var windowInstanceInit gobject.InstanceInitFunc = func(ti *gobject.TypeInstance, tc *gobject.TypeClass) {}
 
-			dialW.totalSec = totalSec
-			dialW.running = running
-			dialW.remain = remain
-			dial.Widget.QueueDraw()
-		}
+	var windowParentQuery gobject.TypeQuery
+	gobject.NewTypeQuery(adw.ApplicationWindowGLibType(), &windowParentQuery)
 
-		var (
-			timer = uint(0)
-		)
-		createSessionFinishedHandler := func() glib.SourceFunc {
-			return func(uintptr) bool {
-				if !running {
-					return false
-				}
+	gTypeSessionsMainWindow = gobject.TypeRegisterStaticSimple(
+		windowParentQuery.Type,
+		"SessionsMainWindow",
+		windowParentQuery.ClassSize,
+		&windowClassInit,
+		windowParentQuery.InstanceSize+uint(unsafe.Sizeof(sessionsMainWindow{}))+uint(unsafe.Sizeof(&sessionsMainWindow{})),
+		&windowInstanceInit,
+		0,
+	)
 
-				remain -= time.Second
-				updateDial()
+	var appClassInit gobject.ClassInitFunc = func(tc *gobject.TypeClass, u uintptr) {
+		objClass := (*gobject.ObjectClass)(unsafe.Pointer(tc))
 
-				if remain <= 0 {
-					running = false
-					if timer > 0 {
-						glib.SourceRemove(timer)
-						timer = 0
-					}
-
-					updateButtons()
-					updateDial()
+		objClass.OverrideConstructed(func(o *gobject.Object) {
+			parentObjClass := (*gobject.ObjectClass)(unsafe.Pointer(tc.PeekParent()))
 
-					startAlarmPlayback()
+			parentObjClass.GetConstructed()(o)
 
-					n := gio.NewNotification("Session finished") // TODO: Use i18n
-					n.SetPriority(gio.GNotificationPriorityUrgentValue)
-					n.SetDefaultAction("app.stopAlarmPlayback")
-					n.AddButton("Stop alarm", "app.stopAlarmPlayback") // TODO: Use i18n
+			var parent adw.Application
+			o.Cast(&parent)
 
-					a.SendNotification("session-finished", n)
-
-					return false
-				}
-
-				return true
+			app := &sessionsApplication{
+				Application: parent,
 			}
-		}
 
-		startTimer := func() {
-			stopAlarmPlayback()
+			var pinner runtime.Pinner
+			pinner.Pin(app)
 
-			running = true
-			remain = time.Duration(totalSec) * time.Second
-
-			updateButtons()
-			updateDial()
-
-			cb := createSessionFinishedHandler()
-			timer = glib.TimeoutAdd(1000, &cb, 0)
-		}
-
-		stopTimer := func() {
-			running = false
-			if timer > 0 {
-				glib.SourceRemove(timer)
-				timer = 0
+			var cleanupCallback glib.DestroyNotify = func(data uintptr) {
+				pinner.Unpin()
 			}
+			o.SetDataFull(dataKeyGoInstance, uintptr(unsafe.Pointer(app)), &cleanupCallback)
+		})
 
-			updateButtons()
-			updateDial()
-		}
+		applicationClass := (*gio.ApplicationClass)(unsafe.Pointer(tc))
 
-		resumeTimer := func() {
-			if remain > 0 {
-				cb := createSessionFinishedHandler()
-				timer = glib.TimeoutAdd(1000, &cb, 0)
-			}
-		}
+		applicationClass.OverrideActivate(func(a *gio.Application) {
+			sessionsApp := (*sessionsApplication)(unsafe.Pointer(a.GetData(dataKeyGoInstance)))
 
-		var (
-			dragging = false
-			paused   = false
-		)
-		handleDialing := func(x, y float64) {
-			if running && !dragging {
-				paused = true
-				if timer > 0 {
-					glib.SourceRemove(timer)
-					timer = 0
-				}
+			if sessionsApp.window != nil {
+				sessionsApp.window.ApplicationWindow.Present()
+				return
 			}
 
-			w, h := float64(dial.Widget.GetWidth()), float64(dial.Widget.GetHeight())
-			cx, cy := w/2, h/2
-			dx, dy := x-cx, y-cy
+			sessionsApp.aboutDialog = adw.NewAboutDialogFromAppdata(resources.ResourceMetainfoPath, resources.AppVersion)
+			sessionsApp.aboutDialog.SetDevelopers(resources.AppDevelopers)
+			sessionsApp.aboutDialog.SetArtists(resources.AppArtists)
+			sessionsApp.aboutDialog.SetCopyright(resources.AppCopyright)
 
-			if math.Sqrt(dx*dx+dy*dy) < 15 {
-				return
-			}
+			var app gtk.Application
+			a.Cast(&app)
 
-			a := math.Atan2(dy, dx) + math.Pi/2
-			if a < 0 {
-				a += 2 * math.Pi
-			}
+			obj := gobject.NewObject(gTypeSessionsMainWindow,
+				"application", app,
+			)
 
-			intervals := int((a / (2 * math.Pi)) * 120)
-			if intervals == 0 {
-				intervals = 120
-			}
+			sessionsApp.window = (*sessionsMainWindow)(unsafe.Pointer(obj.GetData(dataKeyGoInstance)))
+			sessionsApp.window.app = &sessionsApp.Application
 
-			totalSec = intervals * 30
+			sessionsApp.window.updateButtons()
+			sessionsApp.window.updateDial()
 
-			if paused {
-				remain = time.Duration(totalSec) * time.Second
+			toggleTimerAction := gio.NewSimpleAction("toggleTimer", nil)
+			onToggleTimer := func(gio.SimpleAction, uintptr) {
+				sessionsApp.window.toggleTimer()
 			}
+			toggleTimerAction.ConnectActivate(&onToggleTimer)
+			sessionsApp.Application.AddAction(toggleTimerAction)
 
-			updateDial()
-			updateButtons()
-		}
-
-		drag := gtk.NewGestureDrag()
-		onDragBegin := func(_ gtk.GestureDrag, x float64, y float64) {
-			dragging = true
-			handleDialing(x, y)
-		}
-		drag.ConnectDragBegin(&onDragBegin)
-		onDragUpdate := func(drag gtk.GestureDrag, dx float64, dy float64) {
-			if dragging {
-				var x, y float64
-				drag.GetStartPoint(x, y)
-				handleDialing(x+dx, y+dy)
+			addTimeAction := gio.NewSimpleAction("addTime", nil)
+			onAddTime := func(gio.SimpleAction, uintptr) {
+				sessionsApp.window.addTime()
 			}
-		}
-		drag.ConnectDragUpdate(&onDragUpdate)
-		onDragEnd := func(_ gtk.GestureDrag, dx float64, dy float64) {
-			dragging = false
+			addTimeAction.ConnectActivate(&onAddTime)
+			sessionsApp.Application.AddAction(addTimeAction)
 
-			if paused {
-				paused = false
-				resumeTimer()
-			} else if !running && totalSec > 0 {
-				startTimer()
+			removeTimeAction := gio.NewSimpleAction("removeTime", nil)
+			onRemoveTime := func(gio.SimpleAction, uintptr) {
+				sessionsApp.window.removeTime()
 			}
-		}
-		drag.ConnectDragEnd(&onDragEnd)
-
-		click := gtk.NewGestureClick()
-		onPress := func(_ gtk.GestureClick, _ int, x float64, y float64) {
-			handleDialing(x, y)
-		}
-		click.ConnectPressed(&onPress)
+			removeTimeAction.ConnectActivate(&onRemoveTime)
+			sessionsApp.Application.AddAction(removeTimeAction)
 
-		dial.Widget.AddController(&drag.EventController)
-		dial.Widget.AddController(&click.Gesture.EventController)
-
-		toggleTimerAction := gio.NewSimpleAction("toggleTimer", nil)
-		onToggleTimer := func(gio.SimpleAction, uintptr) {
-			if running {
-				stopTimer()
-			} else if totalSec > 0 {
-				startTimer()
+			openAboutAction := gio.NewSimpleAction("openAbout", nil)
+			onOpenAbout := func(gio.SimpleAction, uintptr) {
+				sessionsApp.aboutDialog.Present(&sessionsApp.window.ApplicationWindow.Widget)
 			}
-		}
-		toggleTimerAction.ConnectActivate(&onToggleTimer)
-		a.AddAction(toggleTimerAction)
-
-		addTimeAction := gio.NewSimpleAction("addTime", nil)
-		onAddTime := func(gio.SimpleAction, uintptr) {
-			if totalSec < 3600 {
-				totalSec += 30
-				if running {
-					remain = time.Duration(totalSec) * time.Second
-				}
+			openAboutAction.ConnectActivate(&onOpenAbout)
+			sessionsApp.Application.AddAction(openAboutAction)
 
-				updateDial()
-				updateButtons()
+			stopAlarmPlaybackAction := gio.NewSimpleAction("stopAlarmPlayback", nil)
+			onStopAlarmPlaybackAction := func(gio.SimpleAction, uintptr) {
+				sessionsApp.window.stopAlarmPlayback()
+				sessionsApp.Application.Activate()
 			}
-		}
-		addTimeAction.ConnectActivate(&onAddTime)
-		a.AddAction(addTimeAction)
+			stopAlarmPlaybackAction.ConnectActivate(&onStopAlarmPlaybackAction)
+			sessionsApp.Application.AddAction(stopAlarmPlaybackAction)
 
-		removeTimeAction := gio.NewSimpleAction("removeTime", nil)
-		onRemoveTime := func(gio.SimpleAction, uintptr) {
-			if totalSec > 30 {
-				totalSec -= 30
-				if running {
-					remain = time.Duration(totalSec) * time.Second
-				}
+			sessionsApp.Application.AddWindow(&sessionsApp.window.ApplicationWindow.Window)
+			sessionsApp.window.ApplicationWindow.Present()
+		})
+	}
 
-				updateDial()
-				updateButtons()
-			}
-		}
-		removeTimeAction.ConnectActivate(&onRemoveTime)
-		a.AddAction(removeTimeAction)
+	var appInstanceInit gobject.InstanceInitFunc = func(ti *gobject.TypeInstance, tc *gobject.TypeClass) {}
 
-		openAboutAction := gio.NewSimpleAction("openAbout", nil)
-		onOpenAbout := func(gio.SimpleAction, uintptr) {
-			aboutDialog.Present(&w.Widget)
-		}
-		openAboutAction.ConnectActivate(&onOpenAbout)
-		a.AddAction(openAboutAction)
+	var appParentQuery gobject.TypeQuery
+	gobject.NewTypeQuery(adw.ApplicationGLibType(), &appParentQuery)
 
-		stopAlarmPlaybackAction := gio.NewSimpleAction("stopAlarmPlayback", nil)
-		onStopAlarmPlaybackAction := func(gio.SimpleAction, uintptr) {
-			stopAlarmPlayback()
+	gTypeSessionsApplication = gobject.TypeRegisterStaticSimple(
+		appParentQuery.Type,
+		"SessionsApplication",
+		appParentQuery.ClassSize,
+		&appClassInit,
+		appParentQuery.InstanceSize+uint(unsafe.Sizeof(sessionsApplication{}))+uint(unsafe.Sizeof(&sessionsApplication{}))+uint(unsafe.Sizeof(&adw.ApplicationWindow{}))+uint(unsafe.Sizeof(&dialWidget{})),
+		&appInstanceInit,
+		0,
+	)
+}
 
-			a.Activate()
-		}
-		stopAlarmPlaybackAction.ConnectActivate(&onStopAlarmPlaybackAction)
-		a.AddAction(stopAlarmPlaybackAction)
+func main() {
+	resource, err := gio.NewResourceFromData(glib.NewBytes(resources.ResourceContents, uint(len(resources.ResourceContents))))
+	if err != nil {
+		panic(err)
+	}
+	gio.ResourcesRegister(resource)
 
-		updateButtons()
-		updateDial()
+	obj := gobject.NewObject(gTypeSessionsApplication,
+		"application_id", resources.AppID,
+		"flags", gio.GApplicationDefaultFlagsValue,
+	)
 
-		a.AddWindow(&w.Window)
-		w.Present()
-	}
-	a.ConnectActivate(&onActivate)
+	var app sessionsApplication
+	obj.Cast(&app)
 
-	if code := a.Run(len(os.Args), os.Args); code > 0 {
-		os.Exit(code)
-	}
+	os.Exit(app.Run(len(os.Args), os.Args))
 }

